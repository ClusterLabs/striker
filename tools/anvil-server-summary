#!/usr/bin/perl
#
# This looks in the database for Anvil! systems and, for each Anvil! found, tries to connect to see where the
# servers are running. Optionally, you can pass a Anvil! name and the servers on that Anvil! alone will be 
# reported.
# 
# The goal of this tool is to allow third-party apps a quick way of determining which node a given server is
# on at a given time.
# 
# Output format is CSV in the following format:
# - <anvil_name>,<server_name>,[<current_host>|off]
# 
# If an Anvil! can't be reached, it will print:
# - <anvil_name>,#!no connection!#,
# 
# If trying multiple Anvil! systems, a failure to connect will not cause an exit. The program will simply 
# move on to the next Anvil! and keep going.
# 
# Return codes:
# 0  = Normal exit.
# 1  = Requested Anvil! system not found.
# 2  = One or both node names are missing from the configuration file.
# 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		path		=>	{
			log_file	=>	"/var/log/striker.log",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
		},
		switches	=>	{},
		sys		=>	{
			# Don't print the webUI footer when invoked by a web-called parent
			footer_printed	=>	1,
			language	=>	"en_CA",
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Log our startup
$an->Log->entry({log_level => 3, message_key => "asvs_log_0001", message_variables => { this_file => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});

# Switch -a to --anvil, if used, to not break legacy users
if ($an->data->{switches}{a})
{
	$an->data->{switches}{anvil} = $an->data->{switches}{a};
}

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({log_level => 2, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});
if ($connections)
{
	# Get a list of Anvil! systems. 
	my $anvil_data = $an->ScanCore->get_anvils();
	foreach my $hash_ref (@{$anvil_data})
	{
		my $anvil_uuid = $hash_ref->{anvil_uuid};
		my $anvil_name = $hash_ref->{anvil_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "anvil_uuid", value1 => $anvil_uuid,
			name2 => "anvil_name", value2 => $anvil_name,
		}, file => $THIS_FILE, line => __LINE__});
		
		# If the caller requested a specific Anvil!, then ignore entries that don't match.
		if ($an->data->{switches}{anvil})
		{
			next if (($an->data->{switches}{anvil} ne $anvil_name) && ($an->data->{switches}{anvil} ne $anvil_uuid));
		}
		
		# Still alive? report.
		report_anvil_servers($an, $anvil_name, $anvil_uuid);
	}
	
	# Cleanup.
	$an->DB->disconnect_from_databases();
}
else
{
	$an->Alert->error({title_key => "an_0003", message_key => "abs_error_0002", code => 2, file => $THIS_FILE, line => __LINE__});
	$an->nice_exit({exit_code => 2});
}

$an->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This pulls the data from the given Anvil! and reports on their servers.
sub report_anvil_servers
{
	my ($an, $anvil_name, $anvil_uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "report_anvil_servers" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "anvil_uuid", value1 => $anvil_uuid,
		name2 => "anvil_name", value2 => $anvil_name,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Load the Anvil!
	$an->Striker->load_anvil({anvil_uuid => $anvil_uuid});
	
	# Do a quick scan to get details about the nodes
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "sys::anvil::node1::uuid", value1 => $an->data->{sys}{anvil}{node1}{uuid},
		name2 => "sys::anvil::node2::uuid", value2 => $an->data->{sys}{anvil}{node2}{uuid},
	}, file => $THIS_FILE, line => __LINE__});
	$an->Striker->scan_node({uuid => $an->data->{sys}{anvil}{node1}{uuid}, short_scan => 1});
	$an->Striker->scan_node({uuid => $an->data->{sys}{anvil}{node2}{uuid}, short_scan => 1});
	
	# Now get the clustat data, if I got a connection.
	my $clustat_data = "";
	if ($an->data->{sys}{anvil}{node1}{online})
	{
		# Node 1 is up.
		$clustat_data = $an->Cman->get_clustat_data({
				target   => $an->data->{sys}{anvil}{node1}{use_ip}, 
				port     => $an->data->{sys}{anvil}{node1}{use_port}, 
				password => $an->data->{sys}{anvil}{node1}{password}, 
			});
	}
	elsif ($an->data->{sys}{anvil}{node2}{online})
	{
		# Node 1 is down, but node 1 is up.
		$clustat_data = $an->Cman->get_clustat_data({
				target   => $an->data->{sys}{anvil}{node2}{use_ip}, 
				port     => $an->data->{sys}{anvil}{node2}{use_port}, 
				password => $an->data->{sys}{anvil}{node2}{password}, 
			});
	}
	else
	{
		# No access
		print "$anvil_name,#!no connection!#,\n";
		return(0);
	}
	
	# Still alive? Process the clustat data.
	foreach my $server (sort {$a cmp $b} keys %{$clustat_data->{server}})
	{
		my $host = $clustat_data->{server}{$server}{host} ? $clustat_data->{server}{$server}{host} : "off";
		print "$anvil_name,$server,$host\n";
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $an->String->get({key => "asvs_message_0001"})."\n";
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
