#!/usr/bin/perl
#
# This looks in the cluster config file and for each cluster found, tries to
# connect to see where the servers are running. Optionally, you can pass a
# cluster name and the servers on that cluster alone will be reported.
# 
# The goal of this tool is to allow third-party apps a quick way of determining
# which node a given server is on at a given time.
# 
# Output format is CSV in the following format:
# - <anvil_name>,<server_name>,{<current_host>,off}
# 
# If an Anvil! can't be reached, it will print:
# - <anvil_name>,#!no connection!#,
# 
# If trying multiple Anvil!s, a failure to connect will not cause an exit. The
# program will simply move on to the next Anvil! and keep going.
# 
# Return codes:
# 0  = Normal exit.
# 1  = Requested Anvil! system not found.
# 2  = One or both node names are missing from the configuration file.
# 

use strict;
use warnings;
use IO::Handle;
use Net::SSH2;

my $THIS_FILE =  $0;
   $THIS_FILE =~ s/^.*\///;

# Turn off buffering.
$| = 1;

# Default configuration.
my $conf = {
	executable	=>	{
	},
	path		=>	{
		clustat		=>	"/usr/sbin/clustat",
		striker_config	=>	"/etc/striker/striker.conf",
	},
	switches	=>	{},
	remote_users	=>	[],
	sys		=>	{
		debug		=>	0,
		switch_count	=>	0,
	},
};

# No switches is OK, we'll query all configured 
get_switches($conf);
if (($conf->{switches}{h})   || 
    ($conf->{switches}{'?'}) ||
    ($conf->{switches}{help}))
{
	print_usage($conf);
	exit(0);
}

# Enable debugging if requested.
$conf->{sys}{debug} = 1 if $conf->{switches}{d};

# Read the Striker config.
read_configuration($conf);

# If I've been passed a specific Anvil! name
if ($conf->{switches}{a})
{
	# I was passed a specific Anvil!, see if it exists.
	my $anvil_id = "";
	foreach my $id (sort {$a <=> $b} keys %{$conf->{cluster}})
	{
		if ($conf->{cluster}{$id}{name} eq $conf->{switches}{a})
		{
			# Found it.
			$anvil_id = $id;
			last;
		}
	}
	if (not $anvil_id)
	{
		logger($conf, $THIS_FILE, __LINE__, "[ Error ] - Requested Anvil!: [$conf->{switches}{a}] was not found in the configuration file: [$conf->{path}{striker_config}]");
		exit(1);
	}
	
	# If we're still alive, we can scan the cluster.
	scan_anvil($conf, $anvil_id);
}
else
{
	# No specific Anvil! requested, scan all of them.
	foreach my $id (sort {$a <=> $b} keys %{$conf->{cluster}})
	{
		scan_anvil($conf, $id);
	}
}

exit(0);

# This tries to connect to node 1, and if that fails (or if the cluster is
# down), it will try to scan node 2.
sub scan_anvil
{
	my ($conf, $id) = @_;
	
	my ($node1, $node2) = (split/,/, $conf->{cluster}{$id}{nodes});
	$node1 =~ s/^\s+//g;
	$node1 =~ s/\s+$//g;
	$node2 =~ s/^\s+//g;
	$node2 =~ s/\s+$//g;
	
	if ((not $node1) && (not $node2))
	{
		logger($conf, $THIS_FILE, __LINE__, "[ Error ] - There is a problem with your configuration file. [$conf->{cluster}{$id}{name}] doesn't have both nodes configured.");
		exit(2);
	}
	
	# Get the password
	my $password = $conf->{cluster}{$id}{root_pw};
	if (not $password)
	{
		$password = $conf->{cluster}{$id}{ricci_pw};
	}
	if (not $password)
	{
		logger($conf, $THIS_FILE, __LINE__, "[ Warning ] - No password found for the Anvil! named: [$conf->{cluster}{$id}{name}]. Will try to proceed in the hopes that password-less SSH is configured...");
	}
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - Anvil! ID: [$id], name: [$conf->{cluster}{$id}{name}], nodes: [$conf->{cluster}{$id}{nodes}], node1: [$node1], node2: [$node2], password: [$password].") if $conf->{sys}{debug};
	
	my $clustat_read = 0;
	my $shell_call   = "$conf->{path}{clustat}";
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]") if $conf->{sys}{debug};
	my ($error, $ssh_fh, $return) = remote_call($conf, {
		remote		=>	$node1,
		port		=>	22,
		user		=>	"root",
		password	=>	$password,
		ssh_fh		=>	"",
		'close'		=>	1,
		shell_call	=>	$shell_call,
	});
	foreach my $line (@{$return})
	{
		next if not $line;
		#logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]") if $conf->{sys}{debug};
		if ($line =~ /Service Name/i)
		{
			$clustat_read = 1;
		}
		parse_clustat($conf, $line, $conf->{cluster}{$id}{name});
	}
	
	# Try node 2 if needed.
	if (not $clustat_read)
	{
		# Failed to read clustat on node 1, trying node 2.
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - Failed to read 'clustat' on node 1: [$node1], trying node 2: [$node2].") if $conf->{sys}{debug};
		my $shell_call   = "$conf->{path}{clustat}";
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]") if $conf->{sys}{debug};
		my ($error, $ssh_fh, $return) = remote_call($conf, {
			remote		=>	$node2,
			port		=>	22,
			user		=>	"root",
			password	=>	$password,
			ssh_fh		=>	"",
			'close'		=>	1,
			shell_call	=>	$shell_call,
		});
		foreach my $line (@{$return})
		{
			next if not $line;
			#logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]") if $conf->{sys}{debug};
			if ($line =~ /Service Name/i)
			{
				$clustat_read = 1;
			}
			parse_clustat($conf, $line, $conf->{cluster}{$id}{name});
		}
	}
	
	# If I still haven't read clustat, the cluster is down.
	if (not $clustat_read)
	{
		# Failed to read clustat on either node.
		print "$conf->{cluster}{$id}{name},#!no connection!#,\n";
	}
	
	return(0);
}

# This parses a given clustat output line.
sub parse_clustat
{
	my ($conf, $line, $anvil) = @_;
	
	$line =~ s/^\s+//g;
	$line =~ s/\s+$//g;
	$line =~ s/\s+/ /g;
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]") if $conf->{sys}{debug};
	
	if ($line =~ /^vm:(.*?) (.*?) (.*)$/)
	{
		my $server = $1;
		my $host   = $2;
		my $state  = $3;
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - server: [$server], host: [$host], state: [$state]") if $conf->{sys}{debug};
		# - <anvil_name>,<server_name>,{<current_host>,off}
		if (($state ne "started") && ($state ne "starting"))
		{
			$host = "off";
		}
		print "$anvil,$server,$host\n";
	}
	
	return(0);
}

# This calls the target machine and runs a command.
sub remote_call
{
	my ($conf, $parameters) = @_;
	
	#print "[ Debug ] ".__LINE__."; parameters->{password}: [$parameters->{password}], sys::root_password: [$conf->{sys}{root_password}]\n";
	my $remote     = $parameters->{remote}           ? $parameters->{remote}   : $conf->{sys}{remote};
	my $port       = $parameters->{port}             ? $parameters->{port}     : $conf->{sys}{ssh_port};
	my $user       = $parameters->{user}             ? $parameters->{user}     : "root";
	my $password   = $parameters->{password}         ? $parameters->{password} : $conf->{sys}{password};
	my $ssh_fh     = $parameters->{ssh_fh}           ? $parameters->{ssh_fh}   : "";
	my $close      = defined $parameters->{'close'}  ? $parameters->{'close'}  : 1;
	my $shell_call = $parameters->{shell_call};
	#print "[ Debug ] ".__LINE__."; remote: [$remote], port: [$port], user: [$user], password: [$password], ssh_fh: [$ssh_fh], close: [$close], shell_call: [$shell_call]\n";
	#print "[ Debug ] ".__LINE__."; remote: [$remote], ssh_fh: [$ssh_fh], close: [$close], shell_call: [$shell_call]\n";
	
	# Break out the port, if needed.
	
	# These will be merged into a single 'output' array before returning.
	my $stdout_output = [];
	my $stderr_output = [];
	my $output        = [];
	my $state         = "";
	my $error         = "";
	#print "[ Debug ] ".__LINE__."; remote: [$remote]\n";
	if ($remote =~ /^(.*):(\d+)$/)
	{
		#print "[ Debug ] ".__LINE__."; >> remote: [$remote], port: [$port]\n";
		$remote = $1;
		$port   = $2;
		#print "[ Debug ] ".__LINE__."; << remote: [$remote], port: [$port]\n";
		if (($port < 0) || ($port > 65536))
		{
			# Variables for 'message_0373'.
			$error = "[ Warning ] - Node: [$remote]'s TCP port: [$port] is out of range. It must be between 1 and 65536. The default is '22'.";
			logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
			return($error, $ssh_fh, $output);
		}
	}
	#print "[ Debug ] ".__LINE__."; ssh_fh: [$ssh_fh]\n";
	if ($ssh_fh !~ /^Net::SSH2/)
	{
		#print "[ Debug ] ".__LINE__."; Opening an SSH connection to: [$user\@$remote:$port].\n";
		$ssh_fh = Net::SSH2->new();
		if (not $ssh_fh->connect($remote, $port, Timeout => 10))
		{
			if ($@ =~ /Bad hostname/)
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Error was: [$@]";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
			elsif ($@ =~ /Connection refused/)
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Error was: [$@]";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
			elsif ($@ =~ /No route to host/)
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Error was: [$@]";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
			elsif ($@ =~ /timeout/)
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Error was: [$@]";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
			else
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Error was: [$@]";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
		}
		#print "[ Debug ] ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh]\n";
		if (not $error)
		{
			#print "[ Debug ] ".__LINE__."; user: [$user], password: [$password]\n";
			if (not $ssh_fh->auth_password($user, $password)) 
			{
				$error = "[ Warning ] - Failed to connect to the host: [$remote], Please check that the password provides is the correct password for 'root' on the target machine.";
				logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
				return($error, $ssh_fh, $output);
			}
			$conf->{node}{$remote}{ssh_fh} = $ssh_fh;
		}
	}
	
	### Special thanks to Rafael Kitover (rkitover@gmail.com), maintainer
	### of Net::SSH2, for helping me sort out the polling and data
	### collection in this section.
	#
	# Open a channel and make the call.
	#print "[ Debug ] ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh]\n";
	if (($ssh_fh =~ /^Net::SSH2/) && (not $error))
	{
		# We need to open a channel every time for 'exec' calls. We
		# want to keep blocking off, but we need to enable it for the
		# channel() call.
		$ssh_fh->blocking(1);
		my $channel = $ssh_fh->channel();
		$ssh_fh->blocking(0);
		
		# Make the shell call
		if (not $channel)
		{
			$ssh_fh = "";
			$error  = "[ Warning ] - Failed to establish channel to remote: [$remote] for shell call: [$shell_call]\n";
			logger($conf, $THIS_FILE, __LINE__, $error) if $conf->{sys}{debug};
			return($error, $ssh_fh, $output);
		}
		else
		{
			#print "[ Debug ] ".__LINE__."; channel: [$channel], shell_call: [$shell_call]\n";
			$channel->exec("$shell_call");
			#"/etc/ssh/ssh_config",
			# This keeps the connection open when the remote side is slow
			# to return data, like in '/etc/init.d/rgmanager stop'.
			my @poll = {
				handle => $channel,
				events => [qw/in err/],
			};
			
			# We'll store the STDOUT and STDERR data here.
			my $stdout = "";
			my $stderr = "";
			
			# Not collect the data.
			while(1)
			{
				$ssh_fh->poll(250, \@poll);
				
				# Read in anything from STDOUT
				while($channel->read(my $chunk, 80))
				{
					$stdout .= $chunk;
				}
				while ($stdout =~ s/^(.*)\n//)
				{
					my $line = $1;
					#print "[ Debug ] ".__LINE__."; STDOUT: [$line].\n";
					push @{$stdout_output}, $line;
				}
				
				# Read in anything from STDERR
				while($channel->read(my $chunk, 80, 1))
				{
					$stderr .= $chunk;
				}
				while ($stderr =~ s/^(.*)\n//)
				{
					my $line = $1;
					#print "[ Debug ] ".__LINE__."; STDERR: [$line].\n";
					push @{$stderr_output}, $line;
				}
				
				# Exit when we get the end-of-file.
				last if $channel->eof;
			}
			if ($stdout)
			{
				#print "[ Debug ] ".__LINE__."; stdout: [$stdout].\n";
				push @{$stdout_output}, $stdout;
			}
			if ($stderr)
			{
				#print "[ Debug ] ".__LINE__."; stderr: [$stderr].\n";
				push @{$stderr_output}, $stderr;
			}
		}
	}
	
	foreach my $line (@{$stderr_output}, @{$stdout_output})
	{
		#print "[ Debug ] ".__LINE__."; Merge; line: [$line]\n";
		push @{$output}, $line;
	}
	
	# Close the connection if requested.
	if ($close)
	{
		#print "[ Debug ] ".__LINE__."; Disconnecting from: [$remote]\n";
		$ssh_fh->disconnect();
		
		# For good measure, blank both variables.
		$conf->{remote}{$remote}{ssh_fh} = "";
		$ssh_fh                          = "";
	}
	
	$error = "" if not defined $error;
	#print "[ Debug ] ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh], output: [$output (".@{$output}." lines)]\n";
	return($error, $ssh_fh, $output);
}

# This collects the command line switches
sub get_switches
{
	my ($conf) = @_;
	
	my $last_argument = "";
	foreach my $argument (@ARGV)
	{
		if ($last_argument eq "raw")
		{
			# Don't process anything.
			$conf->{switches}{raw} .= " $argument";
		}
		elsif ($argument =~ /^-/)
		{
			# If the argument is just '--', appeand everything
			# after it to 'raw'.
			$conf->{sys}{switch_count}++;
			if ($argument eq "--")
			{
				$last_argument         = "raw";
				$conf->{switches}{raw} = "";
			}
			else
			{
				($last_argument) = ($argument =~ /^-{1,2}(.*)/)[0];
				if ($last_argument =~ /=/)
				{
					# Break up the variable/value.
					($last_argument, my $value) = (split /=/, $last_argument, 2);
					$conf->{switches}{$last_argument} = $value;
				}
				else
				{
					$conf->{switches}{$last_argument} = "#!SET!#";
				}
			}
		}
		else
		{
			if ($last_argument)
			{
				$conf->{switches}{$last_argument} = $argument;
				$last_argument                    = "";
			}
			else
			{
				# Got a value without an argument.
				$conf->{switches}{error} = 1;
			}
		}
	}
	# Clean up the initial space added to 'raw'.
	if ($conf->{switches}{raw})
	{
		$conf->{switches}{raw} =~ s/^ //;
	}
	
	# Debug
	#foreach my $variable (sort {$a cmp $b} keys %{$conf->{switches}}) { print "Variable: [$variable]\t-> value: [$conf->{switches}{$variable}]\n"; } exit;
	
	return(0);
}

# Write entries to syslog and STDOUT.
sub logger
{
	my ($conf, $file, $line_number, $message) = @_;
	
	# Print the message to the screen.
	print "$message\n";
	
	# We split on new-lines so that multi-line message render better in
	# syslog.
	my $is_debug = $message =~ /\[ Debug \]/ ? 1 : 0;
	foreach my $line (split/\n/, $message)
	{
		next if not $line;
		if (($is_debug) && ($line !~ /\[ Debug \]/))
		{
			$line = "[ Debug ]   $line";
		}
		$line =~ s/\t/    /g;
		open my $filehandle, '-|', "logger", "-t", $file, "$line_number: $line" or die "Failed to call: [logger -t $THIS_FILE $line]. Error: $!\n";
		while (<$filehandle>)
		{
			print $_;
		}
		close $filehandle;
	}
	
	return(0);
}

# This reads in the configuration file.
sub read_configuration
{
	my ($conf) = @_;
	
	my $file_handle = IO::Handle->new();
	my $shell_call = "$conf->{path}{striker_config}";
	open ($file_handle, "<$shell_call") or die "Failed to read: [$shell_call], error was: $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		next if $line !~ /=/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if $line =~ /^#/;
		next if not $line;
		my ($var, $val) = (split/=/, $line, 2);
		$var =~ s/^\s+//;
		$var =~ s/\s+$//;
		$val =~ s/^\s+//;
		$val =~ s/\s+$//;
		next if (not $var);
		_make_hash_reference($conf, $var, $val);
	}
	$file_handle->close();
	
	return(0);
}

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This is a helper to the below '_make_hash_reference' function. It is called
# each time a new string is to be created as a new hash key in the passed hash
# reference.
sub _add_hash_reference
{
	my ($href1, $href2) = @_;

	for my $key (keys %$href2)
	{
		if (ref $href1->{$key} eq 'HASH')
		{
			_add_hash_reference($href1->{$key}, $href2->{$key});
		}
		else
		{
			$href1->{$key} = $href2->{$key};
		}
	}
}

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This takes a string with double-colon seperators and divides on those
# double-colons to create a hash reference where each element is a hash key.
sub _make_hash_reference
{
	my ($href, $key_string, $value) = @_;

	my @keys            = split /::/, $key_string;
	my $last_key        = pop @keys;
	my $_href           = {};
	$_href->{$last_key} = $value;
	while (my $key = pop @keys)
	{
		my $elem      = {};
		$elem->{$key} = $_href;
		$_href        = $elem;
	}
	_add_hash_reference($href, $_href);
}

# Print the usage information.
sub print_usage
{
	my ($conf) = @_;
	
	my $help = q|
 -=] Quick Check of Current Servers Host Nodes

DESCRIPTION

This program will read the main Striker configuration file and for each Anvil!,
it will log into one of the nodes and get a list of the servers and their
current host. Optionally, a single Anvil! name can be passed if you want to see
the current server hosts for a specific system.


SWITCHES

 -h, -?, --help

	Show this dialoge and exit.

 -a <anvil>

	This option allows you to specify the Anvil! you want to query. The
	value passed here must match one of the 'cluster::X::name' values in
	your /etc/strike/striker.conf file.


EXAMPLE

Get a list of all servers on all configured Anvil! systems.

 ./anvil-server-summary
 
Restict the list of servers to the 'an-anvil-05' Anvil!.

 ./anvil-server-summary -a an-anvil-05

                  
SUPPORT

https://alteeve.ca/w/Support

                                                              Alteeve's Niche!
|;
	open (my $file_handle, ">", "/tmp/anvil-server-summary") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system("/usr/bin/less /tmp/anvil-server-summary");

	return(0);
}
