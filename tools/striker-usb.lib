#!/usr/bin/perl
#
# This library is used by striker-usb-insert and an-usr-remove udev scripts.

use strict;
use warnings;
use File::Path qw(make_path);
use Net::SSH2;

my $THIS_FILE = "striker-usb.lib";

# This sets up default values in the $conf hash reference.
sub init_conf
{
	# nothing read in.
	my $conf = {
		path	=>	{
			'striker-usb_conf'	=>	"/etc/an/striker-usb.conf",
			blkid			=>	"/sbin/blkid",
			df			=>	"/bin/df",
			ls			=>	"/bin/ls",
			'mkdir'			=>	"/bin/mkdir",
			mount			=>	"/bin/mount",
			tail			=>	"/usr/bin/tail",
			umount			=>	"/bin/umount",
		},
		syslog	=>	[],
		devices	=>	{},
	};
	
	return($conf);
}

# Write entries to syslog and STDOUT.
sub logger
{
	my ($conf, $line_number, $message) = @_;
	
	print "$line_number: $message\n";
	open my $filehandle, '-|', "logger", "-t", $THIS_FILE , "$line_number: $message" or die "Failed to call: [logger -t $THIS_FILE $message]. Error: $!\n";
	while (<$filehandle>) { print $_; }
	close $filehandle;
	
	return(0);
}

# This reads in the configuration file.
sub read_conf
{
	my ($conf) = @_;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{'striker-usb_conf'}";
	open ($fh, "<$sc") or die "Failed to read: [$sc], error was: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		next if $line !~ /=/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if $line =~ /^#/;
		next if not $line;
		my ($var, $val) = (split/=/, $line, 2);
		$var =~ s/^\s+//;
		$var =~ s/\s+$//;
		$val =~ s/^\s+//;
		$val =~ s/\s+$//;
		next if (not $var);
		_make_hash_reference($conf, $var, $val);
	}
	$fh->close();
	
	return(0);
}

# Read the last 100 lines of /var/log/messages looking for which USB device was
# plugged in or removed.
sub read_syslog
{
	my ($conf) = @_;
	
	# I'm interested in the last 24 lines, but this is safer in case
	# something is being noisy.
	my $sc = "$conf->{path}{tail} -n 100 /var/log/messages";
	open (my $filehandle, "$sc 2>&1 |") or die "Failed to call: [$sc]. Error: $!\n";
	while (<$filehandle>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		#logger($conf, __LINE__, "line: [$line]");
		next if $line !~ /kernel:/;
		if ($line =~ /New USB device found/)
		{
			# Old logs, clear what I've read so far.
			#logger($conf, __LINE__, "I see a message in syslog about a new USB device, clearing anything seen before.");
			$conf->{syslog} = [];
			push @{$conf->{syslog}}, $line;
			next;
		}
		else
		{
			push @{$conf->{syslog}}, $line;
		}
	}
	close $filehandle;
	
	return(0);
}

### NOTE: This is basically a copy of Striker's function of the same name, but
###       with a few extra bits.
# This calls the target machine and runs a command.
sub remote_call
{
	my ($conf, $parameters) = @_;
	
	#logger($conf, __LINE__, "parameters->{password}: [$parameters->{password}], system::root_password: [$conf->{'system'}{root_password}]");
	my $cluster    = $conf->{cgi}{cluster};
	my $node       = $parameters->{node};
	my $port       = $parameters->{port}             ? $parameters->{port}     : 22;
	my $user       = $parameters->{user}             ? $parameters->{user}     : "root";
	my $password   = $parameters->{password}         ? $parameters->{password} : $conf->{'system'}{root_password};
	my $ssh_fh     = $parameters->{ssh_fh}           ? $parameters->{ssh_fh}   : "";
	my $close      = defined $parameters->{'close'}  ? $parameters->{'close'}  : 1;
	my $shell_call = "$parameters->{shell_call}; echo exit:\$?";
	#logger($conf, __LINE__, "cluster: [$cluster], node: [$node], port: [$port], user: [$user], password: [$password], ssh_fh: [$ssh_fh], close: [$close], shell_call: [$shell_call]");
	#logger($conf, __LINE__, "node: [$node], ssh_fh: [$ssh_fh], close: [$close], shell_call: [$shell_call]");
	
	# USB specific stuff
	my $this_usb     = $conf->{this_usb};
	my $local_mount  = $conf->{usb}{$this_usb}{local_mount};
	my $remote_mount = $conf->{usb}{$this_usb}{sshfs}{remote_mount};
	my $exit         = -1;
	
	### TODO: Make this a better looking error.
	if (not $node)
	{
		# No node...
		my $say_error = AN::Common::get_string($conf, {key => "message_0274", variables => {
				shell_call	=>	$shell_call,
			}});
		error($conf, "$say_error\n");
	}
	
	my $state;
	my $error;
	# These will be merged into a single 'output' array before returning.
	my $stdout_output = [];
	my $stderr_output = [];
	#record($conf, "$THIS_FILE ".__LINE__."; ssh_fh: [$ssh_fh]\n");
	if ($ssh_fh !~ /^Net::SSH2/)
	{
		record($conf, "$THIS_FILE ".__LINE__."; Opening an SSH connection to: [$user\@$node:$port].\n");
		$ssh_fh = Net::SSH2->new();
		if (not $ssh_fh->connect($node, $port, Timeout => 10))
		{
			record($conf, "$THIS_FILE ".__LINE__."; error: [$@]\n");
			if ($@ =~ /Bad hostname/)
			{
				$error = AN::Common::get_string($conf, {key => "message_0038", variables => {
					node	=>	$node,
				}});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
			elsif ($@ =~ /Connection refused/)
			{
				$error = AN::Common::get_string($conf, {key => "message_0039", variables => {
					node	=>	$node,
					port	=>	$port,
					user	=>	$user,
				}});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
			elsif ($@ =~ /No route to host/)
			{
				$error = AN::Common::get_string($conf, {key => "message_0040", variables => {
					node	=>	$node,
				}});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
			elsif ($@ =~ /timeout/)
			{
				$error = AN::Common::get_string($conf, {key => "message_0041", variables => {
					node	=>	$node,
				}});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
			else
			{
				$error = AN::Common::get_string($conf, {key => "message_0042", variables => {
					node	=>	$node,
					error	=>	$@,
				}});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
		}
		#record($conf, "$THIS_FILE ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh]\n");
		if (not $error)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; user: [$user], password: [$password]\n");
			if (not $ssh_fh->auth_password($user, $password)) 
			{
				$error = AN::Common::get_string($conf, {key => "message_0043"});
				record($conf, "$THIS_FILE ".__LINE__."; $error\n");
			}
			else
			{
				record($conf, "$THIS_FILE ".__LINE__."; SSH session opened to: [$node].\n");
			}
		}
	}
	
	### Special thanks to Rafael Kitover (rkitover@gmail.com), maintainer
	### of Net::SSH2, for helping me sort out the polling and data
	### collection in this section.
	#
	# Open a channel and make the call.
	#record($conf, "$THIS_FILE ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh]\n");
	if (($ssh_fh =~ /^Net::SSH2/) && (not $error))
	{
		# We need to open a channel every time for 'exec' calls. We
		# want to keep blocking off, but we need to enable it for the
		# channel() call.
		$ssh_fh->blocking(1);
		my $channel = $ssh_fh->channel();
		$ssh_fh->blocking(0);
		
		# Make the shell call
		#record($conf, "$THIS_FILE ".__LINE__."; channel: [$channel], shell_call: [$shell_call]\n");
		$channel->exec("$shell_call");
		
		# This keeps the connection open when the remote side is slow
		# to return data, like in '/etc/init.d/rgmanager stop'.
		my @poll = {
			handle => $channel,
			events => [qw/in err/],
		};
		
		# We'll store the STDOUT and STDERR data here.
		my $stdout = "";
		my $stderr = "";
		
		# Not collect the data.
		while(1)
		{
			$ssh_fh->poll(250, \@poll);
			
			# Read in anything from STDOUT
			while($channel->read(my $chunk, 80))
			{
				$stdout .= $chunk;
			}
			while ($stdout =~ s/^(.*)\n//)
			{
				my $line = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; STDOUT: [$line].\n");
				push @{$stdout_output}, $line;
			}
			
			# Read in anything from STDERR
			while($channel->read(my $chunk, 80, 1))
			{
				$stderr .= $chunk;
			}
			while ($stderr =~ s/^(.*)\n//)
			{
				my $line = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; STDERR: [$line].\n");
				push @{$stderr_output}, $line;
			}
			
			# Exit when we get the end-of-file.
			last if $channel->eof;
		}
		if ($stdout)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; stdout: [$stdout].\n");
			push @{$stdout_output}, $stdout;
		}
		if ($stderr)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; stderr: [$stderr].\n");
			push @{$stderr_output}, $stderr;
		}
	}
	
	# Merge the STDOUT and STDERR into a standard variable.
	my $output = "";
	
	foreach my $line (@{$stderr_output}, @{$stdout_output})
	{
		#record($conf, "$THIS_FILE ".__LINE__."; Merge; line: [$line]\n");
		if ($line =~ /^exit:(\d+)/)
		{
			$exit = $1;
		}
		else
		{
			$output .= "$line\n";
		}
	}
	
	$error = "" if not defined $error;
	#record($conf, "$THIS_FILE ".__LINE__."; error: [$error], ssh_fh: [$ssh_fh], output: [$output (".@{$output}." lines)]\n");
	return($error, $ssh_fh, $output, $exit);
}

# This calls the target machine and runs a command.
sub remote_call_old
{
	my ($conf, $sc) = @_;
	
	my $this_usb     = $conf->{this_usb};
	my $host         = $conf->{usb}{$this_usb}{sshfs}{host};
	my $user         = $conf->{usb}{$this_usb}{sshfs}{user};
	my $password     = $conf->{usb}{$this_usb}{sshfs}{password};
	my $local_mount  = $conf->{usb}{$this_usb}{local_mount};
	my $remote_mount = $conf->{usb}{$this_usb}{sshfs}{remote_mount};
	
	#logger($conf, __LINE__, "Attempting ssh: [$user\@$host] with password: [$password] and call: [$sc]...");
	logger($conf, __LINE__, "Attempting ssh: [$user\@$host] and call: [$sc]...");
	my $ssh = Net::SSH::Perl->new($host);
	$ssh->login($user, $password);
	my ($stdout, $stderr, $exit) = $ssh->cmd($sc);
	$stdout = "" if not defined $stdout;
	$stderr = "" if not defined $stderr;
	$exit   = 99 if not defined $exit;
	
	$stdout =~ s/\n$//;
	$stderr =~ s/\n$//;
	
	logger($conf, __LINE__, "Received; stdout: [$stdout], stderr: [$stderr], exit code: [$exit]");
	
	if ($stderr =~ /Timeout waiting for prompt/i)
	{
		logger($conf, __LINE__, "The remote machine could not log into this machine. Has this machine's host key been added to the target server user's 'known_hosts' file? If not, on the: [$host] server, as the: [$user] user, run: [ssh $conf->{'local'}{user}\@$conf->{'local'}{host}] and accept the presented fingerprint. Once done, please try again. Unable to proceed.");
		exit(13);
	}
	
	return($stdout, $stderr, $exit);
}

###############################################################################
# Sssh, there are private functions                                           #
###############################################################################

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This is a helper to the below '_make_hash_reference' function. It is called
# each time a new string is to be created as a new hash key in the passed hash
# reference.
sub _add_hash_reference
{
	my ($href1, $href2) = @_;

	for my $key (keys %$href2)
	{
		if (ref $href1->{$key} eq 'HASH')
		{
			_add_hash_reference($href1->{$key}, $href2->{$key});
		}
		else
		{
			$href1->{$key} = $href2->{$key};
		}
	}
}

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This takes a string with double-colon seperators and divides on those
# double-colons to create a hash reference where each element is a hash key.
sub _make_hash_reference
{
	my ($href, $key_string, $value) = @_;

	my @keys            = split /::/, $key_string;
	my $last_key        = pop @keys;
	my $_href           = {};
	$_href->{$last_key} = $value;
	while (my $key = pop @keys)
	{
		my $elem      = {};
		$elem->{$key} = $_href;
		$_href        = $elem;
	}
	_add_hash_reference($href, $_href);
}

1;
