#!/usr/bin/perl
# 
# This reads in the /etc/striker/striker.conf configs of two Striker dashboards and merges them.
# 
# Return codes:
# 0  = Normal exit.
# 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	        $running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		path		=>	{
			'less'		=>	"/usr/bin/less",
			log_file	=>	"/var/log/striker.log",
			ssh_config	=>	"/etc/ssh/ssh_config",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
		},
		switches	=>	{},
		sys		=>	{
			language	=>	"en_CA",
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

# Log our startup
$an->Log->entry({log_level => 3, message_key => "sps_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});

# Print the usage, if requested.
if (($an->data->{switches}{h})   || 
    ($an->data->{switches}{'?'}) ||
    ($an->data->{switches}{help}))
{
	print_usage($an);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This prints the usage instructions and then exits
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "smd_message_0001"}), "\n";

	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");
	
	exit(0);
}
