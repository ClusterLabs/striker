#!/usr/bin/perl
#
# This library is used by an-usb-insert and an-usr-remove udev scripts.

use strict;
use warnings;
use File::Path qw(make_path);
use Net::SSH::Perl;
my $THIS_FILE = "an-usb.lib";

# This sets up default values in the $conf hash reference.
sub init_conf
{
	# nothing read in.
	my $conf = {
		path	=>	{
			'an-usb_conf'	=>	"/etc/an/an-usb.conf",
			blkid		=>	"/sbin/blkid",
			df		=>	"/bin/df",
			ls		=>	"/bin/ls",
			'mkdir'		=>	"/bin/mkdir",
			mount		=>	"/bin/mount",
			tail		=>	"/usr/bin/tail",
			umount		=>	"/bin/umount",
		},
		syslog	=>	[],
		devices	=>	{},
	};
	
	return($conf);
}

# Write entries to syslog and STDOUT.
sub logger
{
	my ($conf, $line_number, $message) = @_;
	
	print "$line_number: $message\n";
	open my $filehandle, '-|', "logger", "-t", $THIS_FILE , "$line_number: $message" or die "Failed to call: [logger -t $THIS_FILE $message]. Error: $!\n";
	while (<$filehandle>) { print $_; }
	close $filehandle;
	
	return(0);
}

# This reads in the configuration file.
sub read_conf
{
	my ($conf) = @_;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{'an-usb_conf'}";
	open ($fh, "<$sc") or die "Failed to read: [$sc], error was: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		next if $line !~ /=/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if $line =~ /^#/;
		next if not $line;
		my ($var, $val) = (split/=/, $line, 2);
		$var =~ s/^\s+//;
		$var =~ s/\s+$//;
		$val =~ s/^\s+//;
		$val =~ s/\s+$//;
		next if (not $var);
		_make_hash_reference($conf, $var, $val);
	}
	$fh->close();
	
	return(0);
}

# Read the last 100 lines of /var/log/messages looking for which USB device was
# plugged in or removed.
sub read_syslog
{
	my ($conf) = @_;
	
	# I'm interested in the last 24 lines, but this is safer in case
	# something is being noisy.
	my $sc = "$conf->{path}{tail} -n 100 /var/log/messages";
	open (my $filehandle, "$sc 2>&1 |") or die "Failed to call: [$sc]. Error: $!\n";
	while (<$filehandle>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		#logger($conf, __LINE__, "line: [$line]");
		next if $line !~ /kernel:/;
		if ($line =~ /New USB device found/)
		{
			# Old logs, clear what I've read so far.
			#logger($conf, __LINE__, "I see a message in syslog about a new USB device, clearing anything seen before.");
			$conf->{syslog} = [];
			push @{$conf->{syslog}}, $line;
			next;
		}
		else
		{
			push @{$conf->{syslog}}, $line;
		}
	}
	close $filehandle;
	
	return(0);
}

# This calls the target machine and runs a command.
sub remote_call
{
	my ($conf, $sc) = @_;
	
	my $this_usb     = $conf->{this_usb};
	my $host         = $conf->{usb}{$this_usb}{sshfs}{host};
	my $user         = $conf->{usb}{$this_usb}{sshfs}{user};
	my $password     = $conf->{usb}{$this_usb}{sshfs}{password};
	my $local_mount  = $conf->{usb}{$this_usb}{local_mount};
	my $remote_mount = $conf->{usb}{$this_usb}{sshfs}{remote_mount};
	
	#logger($conf, __LINE__, "Attempting ssh: [$user\@$host] with password: [$password] and call: [$sc]...");
	logger($conf, __LINE__, "Attempting ssh: [$user\@$host] and call: [$sc]...");
	my $ssh = Net::SSH::Perl->new($host);
	$ssh->login($user, $password);
	my ($stdout, $stderr, $exit) = $ssh->cmd($sc);
	$stdout = "" if not defined $stdout;
	$stderr = "" if not defined $stderr;
	$exit   = 99 if not defined $exit;
	
	$stdout =~ s/\n$//;
	$stderr =~ s/\n$//;
	
	logger($conf, __LINE__, "Received; stdout: [$stdout], stderr: [$stderr], exit code: [$exit]");
	
	if ($stderr =~ /Timeout waiting for prompt/i)
	{
		logger($conf, __LINE__, "The remote machine could not log into this machine. Has this machine's host key been added to the target server user's 'known_hosts' file? If not, on the: [$host] server, as the: [$user] user, run: [ssh $conf->{'local'}{user}\@$conf->{'local'}{host}] and accept the presented fingerprint. Once done, please try again. Unable to proceed.");
		exit(13);
	}
	
	return($stdout, $stderr, $exit);
}

###############################################################################
# Sssh, there are private functions                                           #
###############################################################################

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This is a helper to the below '_make_hash_reference' function. It is called
# each time a new string is to be created as a new hash key in the passed hash
# reference.
sub _add_hash_reference
{
	my ($href1, $href2) = @_;

	for my $key (keys %$href2)
	{
		if (ref $href1->{$key} eq 'HASH')
		{
			_add_hash_reference($href1->{$key}, $href2->{$key});
		}
		else
		{
			$href1->{$key} = $href2->{$key};
		}
	}
}

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This takes a string with double-colon seperators and divides on those
# double-colons to create a hash reference where each element is a hash key.
sub _make_hash_reference
{
	my ($href, $key_string, $value) = @_;

	my @keys            = split /::/, $key_string;
	my $last_key        = pop @keys;
	my $_href           = {};
	$_href->{$last_key} = $value;
	while (my $key = pop @keys)
	{
		my $elem      = {};
		$elem->{$key} = $_href;
		$_href        = $elem;
	}
	_add_hash_reference($href, $_href);
}

1;
