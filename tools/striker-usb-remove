#!/usr/bin/perl

use strict;
use warnings;
require "/sbin/striker/striker-usb.lib";

my $THIS_FILE = "striker-usb-remove";

# All this script does is look for mounts that have lost their backing device and cleans up if found.
# 
# NOTE: Unmount fuser mounts with 'fusermount -u /mnt/point'. The 'umount' command will not work!
# 

my $conf = inititialize_configuration();
read_configuration($conf);

# See if the user is enabling, disabling or forcing this run.
get_switches($conf);
$conf->{sys}{debug} = 1 if $conf->{switches}{debug};
if (($conf->{switches}{h})   || 
    ($conf->{switches}{'?'}) ||
    ($conf->{switches}{help}))
{
	print_usage($conf);
	exit(0);
}
elsif ($conf->{switches}{force})
{
	logger($conf, $THIS_FILE, __LINE__, "Striker USB Remove script running with '--force', ignoring $conf->{path}{striker_config} setting.", 0);
}
elsif (not $conf->{'remote-usb'}{enable_remote_usb_mount})
{
	logger($conf, $THIS_FILE, __LINE__, "- Striker USB Remove has been disabled, exiting.");
	exit(0);
}

logger($conf, $THIS_FILE, __LINE__, "Striker USB Removal Script");

# Look for anything mounted locally that no longer has a backing device.
find_missing_devices($conf);

#parse_syslog($conf);
logger($conf, $THIS_FILE, __LINE__, "Striker USB Removal Script finished.");

exit(0);

# This looks in the configured local mount directory for stale mounts.
sub find_missing_devices
{
	my ($conf) = @_;
	
	# Read all currently mounted partitions. The ones under 'remote-usb::local::mount' will be checked to
	# see if the backing device still exists.
	my $shell_call = "$conf->{path}{df} -hP";
	logger($conf, $THIS_FILE, __LINE__, "Calling: [$shell_call]");
	open (my $file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]. Error: $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
		if ($line =~ /(\/dev\/.*?)\s+\w+\s+\w+\s+\w+\s+\d+%\s($conf->{'remote-usb'}{'local'}{mount}_.*)/)
		{
			my $device = $1;
			my $mount  = $2;
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - device: [$device], mount: [$mount]");
			$conf->{device}{$device}{local_mount} = $mount;
		}
	}
	close $file_handle;
	
	foreach my $device (sort {$a cmp $b} keys %{$conf->{device}})
	{
		my $device_name = ($device =~ /.*\/(sd.*)$/)[0];
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - device: [$device], device_name: [$device_name]");
		if (device_exits($conf, $device))
		{
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - The device: [$device], mounted at: [$conf->{device}{$device}{local_mount}] still exists, doing nothing to it.");
		}
		else
		{
			# This catches devices that were directly mounted.
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - The device: [$device ($device_name)] no longer exists, cleaning up locally.");
			unmount($conf, $conf->{device}{$device}{local_mount});
		}
		
		# Clean up stray device mapper devices.
		if (cleanup_dm($conf, $device_name))
		{
			# This will happen if it's a LUKS device and the DM was removed.
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - The device: [$device ($device_name)] was a stale device-mapped device and was cleaned up. Now cleaning up remote machine mounts that point to: [$conf->{device}{$device}{local_mount}].");
		}
	}

	# Look for mounts on the remote machine pointing to no-longer existing local mounts.
	cleanup_remote($conf);
	
	# Final step is to look for stale, detached dm devices.
	$shell_call = "
for dev in \$($conf->{path}{dmsetup} ls | $conf->{path}{awk} '{print \$1}');
do
    if [[ \$dev = 'No' ]];
    then
        echo 'No device-mapped devices exist';
    elif $conf->{path}{lsblk} | $conf->{path}{grep} -q \$dev; 
    then
        echo 'device exists'; 
    else 
        echo device is stale; 
        $conf->{path}{dmsetup} remove \$dev
    fi; 
done";
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
	open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]; $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
	}
	close $file_handle;
	
	return(0);
}

# This uses lsblk to see if the passed in device still exists;
sub device_exits
{
	my ($conf, $device) = @_;
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - device_exits(); device: [$device]");
	
	# Make sure I just have the device name and not the full path.
	if ($device =~ /^\//)
	{
		$device = ($device =~ /.*\/(sd.*)$/)[0];
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - device: [$device]");
	}
	
	my $exists     = 0;
	my $shell_call = "
if $conf->{path}{lsblk} | $conf->{path}{grep} -q '$device (dm-'
then
    echo '$device exists'
else
    echo '$device does not exist'; 
fi;
";
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
	open (my $file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]; $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
		if ($line =~ "$device exists")
		{
			$exists = 1;
		}
	}
	close $file_handle;
	
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - exists: [$exists]");
	return($exists);
}

# Clean up the client's mount(s) if any left-over mount points.
sub cleanup_remote
{
	my ($conf) = @_;
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - cleanup_remote()");
	
	my $remote          = $conf->{'remote-usb'}{remote}{host};
	my $remote_user     = $conf->{'remote-usb'}{remote}{user};
	my $remote_password = $conf->{'remote-usb'}{remote}{password};
	my $local_host      = $conf->{'remote-usb'}{'local'}{host};
	my $local_user      = $conf->{'remote-usb'}{'local'}{user};
	my $local_password  = $conf->{'remote-usb'}{'local'}{password};
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - remote: [$remote], remote_user: [$remote_user], remote_password: [$remote_password], local_host: [$local_host], local_user: [$local_user], local_password: [$local_password]");
	logger($conf, $THIS_FILE, __LINE__, "I will clean up mounts on: [$remote_user\@$remote] that point to stale mounts on: [$local_user\@$local_host]");
	
	# Now look at the mounts on the remote machine.
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - Getting a list of mounts on: [$remote]");
	my $shell_call = "$conf->{path}{df} -hP";
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
	my ($error, $ssh_fh, $return) = remote_call($conf, {
		remote		=>	$remote,
		port		=>	22,
		user		=>	$remote_user,
		password	=>	$remote_password,
		ssh_fh		=>	$conf->{node}{$remote}{ssh_fh},
		'close'		=>	0,
		shell_call	=>	$shell_call,
	});
	foreach my $line (@{$return})
	{
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
		if ($line =~ /df: `(\/.*?)': No such file or directory/)
		{
			my $mount = $1;
			$conf->{remove}{$mount} = 1;
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - Mount point: [$mount] is stale.");
		}
	}
	
	foreach my $mount (sort {$a cmp $b} keys %{$conf->{remove}})
	{
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - Killing any stale sshfs PIDs for the mount point: [$mount]");
		my $shell_call = "$conf->{path}{fusermount} -u $mount; echo rc:\$?";
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
		my ($error, $ssh_fh, $return) = remote_call($conf, {
			remote		=>	$remote,
			port		=>	22,
			user		=>	$remote_user,
			password	=>	$remote_password,
			ssh_fh		=>	$conf->{node}{$remote}{ssh_fh},
			'close'		=>	0,
			shell_call	=>	$shell_call,
		});
		foreach my $line (@{$return})
		{
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
		}
		
		my $post_script = "/home/$remote_user/.post_unmount";
		if ($remote_user eq "root")
		{
			$post_script = "/$remote_user/.post_unmount";
		}
		$shell_call = "
echo 'Removing mount point: [$mount].'
rmdir $mount
if [ -e '$mount' ]
then
    echo 'failed to remove old mount point.'
else
    echo 'removed mount point successfully.'
    if [ -x '$post_script' ]
    then
        echo 'Running: [$post_script]'
        $post_script 
    fi
fi
";
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
		($error, $ssh_fh, $return) = remote_call($conf, {
			remote		=>	$remote,
			port		=>	22,
			user		=>	$remote_user,
			password	=>	$remote_password,
			ssh_fh		=>	$conf->{node}{$remote}{ssh_fh},
			'close'		=>	0,
			shell_call	=>	$shell_call,
		});
		foreach my $line (@{$return})
		{
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
		}
	}
	
	return(0);
}

# Unmount local mounts.
sub unmount
{
	my ($conf, $mount_point) = @_;
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - unmount(); mount_point: [$mount_point]");
	
	my $ok         = 1;
	my $shell_call = "$conf->{path}{sync}; $conf->{path}{umount} -f $mount_point";
	logger($conf, $THIS_FILE, __LINE__, "shell_call: [$shell_call]");
	open (my $file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call], error was: $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		logger($conf, $THIS_FILE, __LINE__, "line: [$line]");
	}
	close $file_handle;
	logger($conf, $THIS_FILE, __LINE__, "Unmounted: [$mount_point], now removing directory.");
	
	rmdir($mount_point) or warn "Unable to remove directory: [$mount_point]. Error: $!\n";
	if (-d $mount_point)
	{
		logger($conf, $THIS_FILE, __LINE__, "Failed to remove locat mount point: [$mount_point]. Are there files in the directory?");
		$ok = 0;
	}
	else
	{
		logger($conf, $THIS_FILE, __LINE__, "Local mount point: [$mount_point] removed.");
	}
	
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - ok: [$ok].");
	return($ok);
}

# This calls 'dmsetup ls' and checks to see if each returned device exists.
# If it doesn't, it cleans up the dm entry.
sub cleanup_dm
{
	my ($conf, $device) = @_;
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - cleanup_dm(); device: [$device]");
	
	my $cleaned_up = 0;
	if (not device_exits($conf, $device))
	{
		my $shell_call = "
if $conf->{path}{dmsetup} ls | $conf->{path}{grep} -q $device;
then 
    echo 'removing $device';
    $conf->{path}{dmsetup} remove $device
    sleep 2
    if $conf->{path}{dmsetup} ls | $conf->{path}{grep} -q $device;
    then
        echo 'failed to remove $device'
    else
        echo 'successfully remove $device'
    fi
else 
    echo '$device does not exist'; 
fi;
";
		logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - shell_call: [$shell_call]");
		open (my $file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]; $!\n";
		while (<$file_handle>)
		{
			chomp;
			my $line = $_;
			logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - line: [$line]");
			if ($line eq "removing $device")
			{
				$cleaned_up = 1;
				logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - cleaned_up: [$cleaned_up]");
			}
		}
		close $file_handle;
	}
	
	logger($conf, $THIS_FILE, __LINE__, "[ Debug ] - cleaned_up: [$cleaned_up]");
	return($cleaned_up);
}
