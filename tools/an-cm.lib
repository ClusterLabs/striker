#!/usr/bin/perl
#
# AN!CDB - Alteeve's Niche! Cluster Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and
# able to take full liability for it's use. The authors take care to prevent
# unexpected side effects when using this program. However, no software is
# perfect and bugs may exist which could lead to hangs or crashes in the
# program, in your cluster and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.com/w/2-Node_Red_Hat_KVM_Cluster_Tutorial
#
# This program's source code and updates are available on Github:
# - https://github.com/digimer/an-cdb
#
# Author;
# Alteeve's Niche!  -  https://alteeve.com
# Madison Kelly     -  mkelly@alteeve.ca
# 

use strict;
use warnings;
use IO::Handle;

# Email stuff
use Email::Sender::Simple qw(sendmail);
use Email::Sender::Transport::SMTP::TLS;
use Try::Tiny;
use Email::Simple::Creator;

# Setup for UTF-8 mode.
binmode STDOUT, ":utf8:";
$ENV{'PERL_UNICODE'}=1;
our $THIS_FILE = "an-cm.lib";

# This checks to see what hardware I need to monitor, reads in the initial
# values and makes no attempt to compare previous scans.
sub read_states
{
	my ($conf) = @_;
	
	check_clustat($conf);
	check_network($conf);
	check_storage($conf);
	
	return(0);
}

# This checks the storage when an LSI RAID controller was found.
sub check_storage_lsi
{
	my ($conf) = @_;
	
	# Get all the controller details.
	get_storage_lsi_adapter_info($conf);
	get_storage_lsi_physical_disk_info($conf);
	get_storage_lsi_bbu_info($conf);
	get_storage_lsi_vd_info($conf);
	
	return(0);
}

# This reads in the Virtual Drive info
sub get_storage_lsi_vd_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{LDInfo} = "";
	my $adapter   = "";
	my $vd        = "";
	my $target_id = "";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} LDInfo Lall aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{LDInfo} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		
		if ($line =~ /Adapter\s*(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		if ($line =~ /Virtual Drive: (\d+) \(Target Id: (\d+)\)/i)
		{
			$vd        = $1;
			$target_id = $2;
			next;
		}
		next if not $adapter;
		next if not $vd;
		next if not $target_id;
		
		if ($line =~ /Name\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{name} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{name}])\n");
			next;
		}
		if ($line =~ /RAID Level\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; raid_level: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level}])\n");
			next;
		}
		if ($line =~ /Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size}])\n");
			next;
		}
		if ($line =~ /Parity Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; parity_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size}])\n");
			next;
		}
		if ($line =~ /State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{state}])\n");
			next;
		}
		if ($line =~ /Strip Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size}])\n");
			next;
		}
		if ($line =~ /Number Of Drives\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; number_of_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives}])\n");
			next;
		}
		if ($line =~ /Span Depth\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{span_depth} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; span_depth: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{span_depth}])\n");
			next;
		}
		if ($line =~ /Default Cache Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_cache_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; default_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_cache_policy}])\n");
			next;
		}
		if ($line =~ /Current Cache Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy}])\n");
			next;
		}
		if ($line =~ /Default Access Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_access_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; default_access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_access_policy}])\n");
			next;
		}
		if ($line =~ /Current Access Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_access_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current_access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_access_policy}])\n");
			next;
		}
		if ($line =~ /Disk Cache Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{disk_cache_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disk_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{disk_cache_policy}])\n");
			next;
		}
		if ($line =~ /Encryption Type\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{encryption_type} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; encryption_type: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{encryption_type}])\n");
			next;
		}
		if ($line =~ /Default Power Savings Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_power_savings_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; default_power_savings_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_power_savings_policy}])\n");
			next;
		}
		if ($line =~ /Current Power Savings Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_power_savings_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current_power_savings_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_power_savings_policy}])\n");
			next;
		}
		if ($line =~ /Can spin up in 1 minute\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{can_spin_up_in_1_minute} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; can_spin_up_in_1_minute: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{can_spin_up_in_1_minute}])\n");
			next;
		}
		if ($line =~ /LD has drives that support T10 power conditions\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{ld_has_drives_that_support_t10_power_conditions} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; ld_has_drives_that_support_t10_power_conditions: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{ld_has_drives_that_support_t10_power_conditions}])\n");
			next;
		}
		if ($line =~ /LD's IO profile supports MAX power savings with cached writes\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{lds_io_profile_supports_max_power_savings_with_cached_writes} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; lds_io_profile_supports_max_power_savings_with_cached_writes: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{lds_io_profile_supports_max_power_savings_with_cached_writes}])\n");
			next;
		}
		if ($line =~ /Is VD Cached\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{is_vd_cached} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; is_vd_cached: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{is_vd_cached}])\n");
			next;
		}
	}
	$fh->close();
	
	return(0);
}

# This reads in the battery backup information from an LSI controller.
sub get_storage_lsi_bbu_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{AdpBbuCmd} = "";
	my $adapter            = "";
	my $in_base            = 1;
	my $in_bbu_fw_status   = 0;
	my $in_bbu_cap_info    = 0;
	my $in_bbu_design_info = 0;
	my $in_bbu_properties  = 0;
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} AdpBbuCmd aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{AdpBbuCmd} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		
		if ($line =~ /BBU status for Adapter\s*:\s*(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		if ($line =~ /BBU Firmware Status\s*:/i)
		{
			$in_base            = 0;
			$in_bbu_fw_status   = 1;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /BBU Capacity Info for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 1;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /BBU Design Info for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 0;
			$in_bbu_design_info = 1;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /BBU Properties for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 0;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 1;
			next;
		}
		next if not $adapter;
		
		# Base stats
		if ($line =~ /BatteryType\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; batterytype: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype}])\n");
			next;
		}
		if ($line =~ /Voltage\s*:\s*(.*)/i)
		{
			if ($in_base)
			{
				# Base
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Base voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage}])\n");
				next;
			}
			elsif ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_voltage} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; FW Status voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_voltage}])\n");
				next;
			}
		}
		if ($line =~ /Current\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{current} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{current}])\n");
			next;
		}
		if ($line =~ /Temperature\s*:\s*(.*)/i)
		{
			if ($in_base)
			{
				# Base
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Base temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature}])\n");
				next;
			}
			elsif ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_temperature} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; FW Status temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_temperature}])\n");
				next;
			}
		}
		if ($line =~ /Battery State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_state}])\n");
			next;
		}
		
		# BBU Firmware Status
		if ($line =~ /Charging Status\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_status} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; charging_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_status}])\n");
			next;
		}
		# Voltage and Temperature are recorded up in the Base section.
		if ($line =~ /Learn Cycle Requested\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_requested} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_requested: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_requested}])\n");
			next;
		}
		if ($line =~ /Learn Cycle Active\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_active} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_active: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_active}])\n");
			next;
		}
		if ($line =~ /Learn Cycle Status\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_status} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_status}])\n");
			next;
		}
		if ($line =~ /Learn Cycle Timeout\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_timeout} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_timeout: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_timeout}])\n");
			next;
		}
		if ($line =~ /I2c Errors Detected\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{i2c_errors_detected} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; i2c_errors_detected: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{i2c_errors_detected}])\n");
			next;
		}
		if ($line =~ /Battery Pack Missing\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_pack_missing} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_pack_missing: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_pack_missing}])\n");
			next;
		}
		if ($line =~ /Battery Replacement required\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_replacement_required} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_replacement_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_replacement_required}])\n");
			next;
		}
		if ($line =~ /Remaining Capacity Low\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; remaining_capacity_low: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low}])\n");
			next;
		}
		if ($line =~ /Periodic Learn Required\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{periodic_learn_required} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; periodic_learn_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{periodic_learn_required}])\n");
			next;
		}
		if ($line =~ /Transparent Learn\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; transparent_learn: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn}])\n");
			next;
		}
		if ($line =~ /No space to cache offload\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{no_space_to_cache_offload} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; no_space_to_cache_offload: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{no_space_to_cache_offload}])\n");
			next;
		}
		if ($line =~ /Pack is about to fail & should be replaced\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pack_is_about_to_fail_and_should_be_replaced: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced}])\n");
			next;
		}
		if ($line =~ /Cache Offload premium feature required\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cache_offload_premium_feature_required} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cache_offload_premium_feature_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cache_offload_premium_feature_required}])\n");
			next;
		}
		if ($line =~ /Module microcode update required\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{module_microcode_update_required} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; module_microcode_update_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{module_microcode_update_required}])\n");
			next;
		}
		if ($line =~ /BBU GasGauge Status\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{bbu_gasgauge_status} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; bbu_gasgauge_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{bbu_gasgauge_status}])\n");
			next;
		}
		if ($line =~ /Relative State of Charge\s*:\s*(.*)/i)
		{
			if ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; FW Status relative_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge}])\n");
				next;
			}
			elsif ($in_bbu_cap_info)
			{
				# Capacity Info
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_relative_state_of_charge} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Capacity Info relative_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_relative_state_of_charge}])\n");
				next;
			}
		}
		if ($line =~ /Charger System State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; charger_system_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_state}])\n");
			next;
		}
		if ($line =~ /Charger System Ctrl\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_ctrl} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; charger_system_ctrl: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_ctrl}])\n");
			next;
		}
		if ($line =~ /Charging current\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_current} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; charging_current: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_current}])\n");
			next;
		}
		if ($line =~ /Absolute state of charge\s*:\s*(.*)/i)
		{
			if ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_absolute_state_of_charge} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; FW Status absolute_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_absolute_state_of_charge}])\n");
				next;
			}
			elsif ($in_bbu_cap_info)
			{
				# Capacity Info
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Capacity Info absolute_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge}])\n");
				next;
			}
		}
		if ($line =~ /Max Error\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{max_error} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{max_error}])\n");
			next;
		}
		if ($line =~ /Battery backup charge time\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_backup_charge_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time}])\n");
			next;
		}
		
		# BBU Capacity Info
		# Relative and Absolute state of charge are recorded up in the
		# FW Status section.
		if ($line =~ /Remaining Capacity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; remaining_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity}])\n");
			next;
		}
		if ($line =~ /Full Charge Capacity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; full_charge_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity}])\n");
			next;
		}
		if ($line =~ /Run time to empty\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{run_time_to_empty} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; run_time_to_empty: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{run_time_to_empty}])\n");
			next;
		}
		if ($line =~ /Average time to empty\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{average_time_to_empty} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; average_time_to_empty: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{average_time_to_empty}])\n");
			next;
		}
		if ($line =~ /Estimated Time to full recharge\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{estimated_time_to_full_recharge} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; estimated_time_to_full_recharge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{estimated_time_to_full_recharge}])\n");
			next;
		}
		if ($line =~ /Cycle Count\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cycle_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count}])\n");
			next;
		}
		
		# BBU Design Info
		if ($line =~ /Date of Manufacture\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{date_of_manufacture} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; date_of_manufacture: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{date_of_manufacture}])\n");
			next;
		}
		if ($line =~ /Design Capacity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; design_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity}])\n");
			next;
		}
		if ($line =~ /Design Voltage\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; design_voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}])\n");
			next;
		}
		if ($line =~ /Specification Info\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{specification_info} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; specification_info: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{specification_info}])\n");
			next;
		}
		if ($line =~ /Serial Number\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; serial_number: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number}])\n");
			next;
		}
		if ($line =~ /Pack Stat Configuration\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_stat_configuration} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pack_stat_configuration: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_stat_configuration}])\n");
			next;
		}
		if ($line =~ /Manufacture Name\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; manufacture_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name}])\n");
			next;
		}
		if ($line =~ /Device Name\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_name} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_name}])\n");
			next;
		}
		if ($line =~ /Device Chemistry\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_chemistry} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_chemistry: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_chemistry}])\n");
			next;
		}
		if ($line =~ /Battery FRU\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_fru} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_fru: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_fru}])\n");
			next;
		}
		
		# BBU Properties
		if ($line =~ /Auto Learn Period\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_period} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; auto_learn_period: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_period}])\n");
			next;
		}
		if ($line =~ /Next Learn time\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{next_learn_time} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; next_learn_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{next_learn_time}])\n");
			next;
		}
		if ($line =~ /Learn Delay Interval\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_delay_interval} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; learn_delay_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_delay_interval}])\n");
			next;
		}
		if ($line =~ /Auto-Learn Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; auto_learn_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_mode}])\n");
			next;
		}
	}
	$fh->close();
	
	return(0);
}

# This reads in the physical disk information from an LSI controller.
sub get_storage_lsi_physical_disk_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{PDList}        = "";
	my $adapter                                  = "";
	
	my $enclosure_device_id                      = "";
	my $slot_number                              = "";
	my $diskgroup                                = "";
	my $span                                     = "";
	my $arm                                      = "";
	my $enclosure_position                       = "";
	my $device_id                                = "";
	my $wwn                                      = "";
	my $sequence_number                          = "";
	my $media_error_count                        = "";
	my $other_error_count                        = "";
	my $predictive_failure_count                 = "";
	my $last_predictive_failure_event_seq_number = "";
	my $pd_type                                  = "";
	my $raw_size_string                          = "";
	my $raw_size_hex_sectors                     = "";
	my $non_coerced_size_string                  = "";
	my $non_coerced_size_hex_sectors             = "";
	my $coerced_size_string                      = "";
	my $coerced_size_hex_sectors                 = "";
	my $firmware_state                           = "";
	my $device_firmware_level                    = "";
	my $shield_counter                           = "";
	my $successful_diagnostics_completion_on     = "";
	my $sas_address_0                            = "";
	my $sas_address_1                            = "";
	my $connected_port_number                    = "";
	my $inquiry_data                             = "";
	my $fde_capable                              = "";
	my $fde_enable                               = "";
	my $secured                                  = "";
	my $locked                                   = "";
	my $needs_ekm_attention                      = "";
	my $foreign_state                            = "";
	my $device_speed                             = "";
	my $link_speed                               = "";
	my $media_type                               = "";
	my $drive_temperature                        = "";  # This needs thresholds
	my $pi_eligibility                           = "";
	my $drive_is_formatted_for_pi_information    = "";
	my $pi                                       = "";
	my $in_port                                  = "";
	my $port_status                              = [];
	my $ports_linkspeed                          = [];
	my $drive_has_flagged_a_smart_alert          = "";
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} PDList aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{PDList} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if ($line =~ /^===/);
		record($conf, "$THIS_FILE ".__LINE__."; PDList line: [$line]\n");
		
		if ($line =~ /Adapter\s#(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		next if not $adapter;
		
		### When I see the SMART line, I know I am at the end of the
		### given drive and can commit the data.
		if ($line =~ /Enclosure Device ID\s*:\s*(.*)/i)
		{
			$enclosure_device_id = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enclosure_device_id: [$enclosure_device_id]\n");
			next;
		}
		if ($line =~ /Slot Number\s*:\s*(.*)/i)
		{
			$slot_number = $1;
			record($conf, "$THIS_FILE ".__LINE__."; slot_number: [$slot_number]\n");
			next;
		}
		if ($line =~ /Drive's postion\s*:\s*DiskGroup\s*:\s*(\d+),\s*Span\s*:\s*(\d+),\s*Arm\s*:\s*(\d+)/i)
		{
			$diskgroup = $1;
			$span      = $2;
			$arm       = $3;
			record($conf, "$THIS_FILE ".__LINE__."; drives_postion; disk group: [$diskgroup], span: [$span], arm: [$arm]\n");
			next;
		}
		if ($line =~ /Enclosure position\s*:\s*(.*)/i)
		{
			$enclosure_position = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enclosure_position: [$enclosure_position]\n");
			next;
		}
		if ($line =~ /Device Id\s*:\s*(.*)/i)
		{
			$device_id = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_id: [$device_id]\n");
			next;
		}
		if ($line =~ /WWN\s*:\s*(.*)/i)
		{
			$wwn = $1;
			record($conf, "$THIS_FILE ".__LINE__."; wwn: [$wwn]\n");
			next;
		}
		if ($line =~ /Sequence Number\s*:\s*(.*)/i)
		{
			$sequence_number = $1;
			record($conf, "$THIS_FILE ".__LINE__."; sequence_number: [$sequence_number]\n");
			next;
		}
		if ($line =~ /Media Error Count\s*:\s*(.*)/i)
		{
			$media_error_count = $1;
			record($conf, "$THIS_FILE ".__LINE__."; media_error_count: [$media_error_count]\n");
			next;
		}
		if ($line =~ /Other Error Count\s*:\s*(.*)/i)
		{
			$other_error_count = $1;
			record($conf, "$THIS_FILE ".__LINE__."; other_error_count: [$other_error_count]\n");
			next;
		}
		if ($line =~ /Predictive Failure Count\s*:\s*(.*)/i)
		{
			$predictive_failure_count = $1;
			record($conf, "$THIS_FILE ".__LINE__."; predictive_failure_count: [$predictive_failure_count]\n");
			next;
		}
		if ($line =~ /Last Predictive Failure Event Seq Number\s*:\s*(.*)/i)
		{
			$last_predictive_failure_event_seq_number = $1;
			record($conf, "$THIS_FILE ".__LINE__."; last_predictive_failure_event_seq_number: [$last_predictive_failure_event_seq_number]\n");
			next;
		}
		if ($line =~ /PD Type\s*:\s*(.*)/i)
		{
			$pd_type = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pd_type: [$pd_type]\n");
			next;
		}
		if ($line =~ /Raw Size\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$raw_size_string      = $1;
			$raw_size_hex_sectors = $2;
			record($conf, "$THIS_FILE ".__LINE__."; raw_size_string: [$raw_size_string], sectors (in hex): [$raw_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /Non Coerced Size\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$non_coerced_size_string      = $1;
			$non_coerced_size_hex_sectors = $2;
			record($conf, "$THIS_FILE ".__LINE__."; non_coerced_size_string: [$non_coerced_size_string], sectors (in hex): [$non_coerced_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /Coerced Size\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$coerced_size_string      = $1;
			$coerced_size_hex_sectors = $2;
			record($conf, "$THIS_FILE ".__LINE__."; coerced_size_string: [$coerced_size_string], sectors (in hex): [$coerced_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /Firmware state\s*:\s*(.*)/i)
		{
			$firmware_state = $1;
			record($conf, "$THIS_FILE ".__LINE__."; firmware_state: [$firmware_state]\n");
			next;
		}
		if ($line =~ /Device Firmware Level\s*:\s*(.*)/i)
		{
			$device_firmware_level = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_firmware_level: [$device_firmware_level]\n");
			next;
		}
		if ($line =~ /Shield Counter\s*:\s*(.*)/i)
		{
			$shield_counter = $1;
			record($conf, "$THIS_FILE ".__LINE__."; shield_counter: [$shield_counter]\n");
			next;
		}
		if ($line =~ /Successful diagnostics completion on\s*:\s*(.*)/i)
		{
			$successful_diagnostics_completion_on = $1;
			record($conf, "$THIS_FILE ".__LINE__."; successful_diagnostics_completion_on: [$successful_diagnostics_completion_on]\n");
			next;
		}
		if ($line =~ /SAS Address\(0\)\s*:\s*(.*)/i)
		{
			$sas_address_0 = $1;
			record($conf, "$THIS_FILE ".__LINE__."; sas_address_0: [$sas_address_0]\n");
			next;
		}
		if ($line =~ /SAS Address\(1\)\s*:\s*(.*)/i)
		{
			$sas_address_1 = $1;
			record($conf, "$THIS_FILE ".__LINE__."; sas_address_1: [$sas_address_1]\n");
			next;
		}
		if ($line =~ /Connected Port Number\s*:\s*(.*)/i)
		{
			$connected_port_number = $1;
			record($conf, "$THIS_FILE ".__LINE__."; connected_port_number: [$connected_port_number]\n");
			next;
		}
		if ($line =~ /Inquiry Data\s*:\s*(.*)/i)
		{
			$inquiry_data = $1;
			record($conf, "$THIS_FILE ".__LINE__."; inquiry_data: [$inquiry_data]\n");
			next;
		}
		if ($line =~ /FDE Capable\s*:\s*(.*)/i)
		{
			$fde_capable = $1;
			record($conf, "$THIS_FILE ".__LINE__."; fde_capable: [$fde_capable]\n");
			next;
		}
		if ($line =~ /FDE Enable\s*:\s*(.*)/i)
		{
			$fde_enable = $1;
			record($conf, "$THIS_FILE ".__LINE__."; fde_enable: [$fde_enable]\n");
			next;
		}
		if ($line =~ /Secured\s*:\s*(.*)/i)
		{
			$secured = $1;
			record($conf, "$THIS_FILE ".__LINE__."; secured: [$secured]\n");
			next;
		}
		if ($line =~ /Locked\s*:\s*(.*)/i)
		{
			$locked = $1;
			record($conf, "$THIS_FILE ".__LINE__."; locked: [$locked]\n");
			next;
		}
		if ($line =~ /Needs EKM Attention\s*:\s*(.*)/i)
		{
			$needs_ekm_attention = $1;
			record($conf, "$THIS_FILE ".__LINE__."; needs_ekm_attention: [$needs_ekm_attention]\n");
			next;
		}
		if ($line =~ /Foreign State\s*:\s*(.*)/i)
		{
			$foreign_state = $1;
			record($conf, "$THIS_FILE ".__LINE__."; foreign_state: [$foreign_state]\n");
			next;
		}
		if ($line =~ /Device Speed\s*:\s*(.*)/i)
		{
			$device_speed = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_speed: [$device_speed]\n");
			next;
		}
		if ($line =~ /Link Speed\s*:\s*(.*)/i)
		{
			$link_speed = $1;
			record($conf, "$THIS_FILE ".__LINE__."; link_speed: [$link_speed]\n");
			next;
		}
		if ($line =~ /Media Type\s*:\s*(.*)/i)
		{
			$media_type = $1;
			record($conf, "$THIS_FILE ".__LINE__."; media_type: [$media_type]\n");
			next;
		}
		if ($line =~ /Drive Temperature\s*:\s*(.*)/i)
		{
			$drive_temperature = $1;
			record($conf, "$THIS_FILE ".__LINE__."; drive_temperature: [$drive_temperature]\n");
			next;
		}
		if ($line =~ /PI Eligibility\s*:\s*(.*)/i)
		{
			$pi_eligibility = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pi_eligibility: [$pi_eligibility]\n");
			next;
		}
		if ($line =~ /Drive is formatted for PI information\s*:\s*(.*)/i)
		{
			$drive_is_formatted_for_pi_information = $1;
			record($conf, "$THIS_FILE ".__LINE__."; drive_is_formatted_for_pi_information: [$drive_is_formatted_for_pi_information]\n");
			next;
		}
		if ($line =~ /PI\s*:\s*(.*)/i)
		{
			$pi = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pi: [$pi]\n");
			next;
		}
		
		# Pull out the per-port values.
		if ($line =~ /Port-(\d+)\s*:/i)
		{
			$in_port = $1;
			record($conf, "$THIS_FILE ".__LINE__."; in_port: [$in_port]\n");
			next;
		}
		if ($line =~ /Port status\s*:\s*(.*)/i)
		{
			$port_status->[$in_port] = $1;
			record($conf, "$THIS_FILE ".__LINE__."; port_status->[$in_port]: [$port_status->[$in_port]]\n");
			next;
		}
		if ($line =~ /Port's Linkspeed\s*:\s*(.*)/i)
		{
			$ports_linkspeed->[$in_port] = $1;
			record($conf, "$THIS_FILE ".__LINE__."; ports_linkspeed->[$in_port]: [$ports_linkspeed->[$in_port]]\n");
			next;
		}
		if ($line =~ /Drive has flagged a S.M.A.R.T alert\s*:\s*(.*)/i)
		{
			$drive_has_flagged_a_smart_alert = $1;
			record($conf, "$THIS_FILE ".__LINE__."; drive_has_flagged_a_smart_alert: [$drive_has_flagged_a_smart_alert]\n");
			
			# Record all the values and reset the variables.
			my $cpn = $connected_port_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{enclosure_device_id}                      = $enclosure_device_id                      if defined $enclosure_device_id;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{slot_number}                              = $slot_number                              if defined $slot_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{diskgroup}                                = $diskgroup                                if defined $diskgroup;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{span}                                     = $span                                     if defined $span;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{arm}                                      = $arm                                      if defined $arm;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{enclosure_position}                       = $enclosure_position                       if defined $enclosure_position;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_id}                                = $device_id                                if defined $device_id;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{wwn}                                      = $wwn                                      if defined $wwn;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sequence_number}                          = $sequence_number                          if defined $sequence_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{media_error_count}                        = $media_error_count                        if defined $media_error_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{other_error_count}                        = $other_error_count                        if defined $other_error_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{predictive_failure_count}                 = $predictive_failure_count                 if defined $predictive_failure_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{last_predictive_failure_event_seq_number} = $last_predictive_failure_event_seq_number if defined $last_predictive_failure_event_seq_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pd_type}                                  = $pd_type                                  if defined $pd_type;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{raw_size_string}                          = $raw_size_string                          if defined $raw_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{raw_size_hex_sectors}                     = $raw_size_hex_sectors                     if defined $raw_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{non_coerced_size_string}                  = $non_coerced_size_string                  if defined $non_coerced_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{non_coerced_size_hex_sectors}             = $non_coerced_size_hex_sectors             if defined $non_coerced_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{coerced_size_string}                      = $coerced_size_string                      if defined $coerced_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{coerced_size_hex_sectors}                 = $coerced_size_hex_sectors                 if defined $coerced_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{firmware_state}                           = $firmware_state                           if defined $firmware_state;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_firmware_level}                    = $device_firmware_level                    if defined $device_firmware_level;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{shield_counter}                           = $shield_counter                           if defined $shield_counter;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{successful_diagnostics_completion_on}     = $successful_diagnostics_completion_on     if defined $successful_diagnostics_completion_on;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sas_address_0}                            = $sas_address_0                            if defined $sas_address_0;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sas_address_1}                            = $sas_address_1                            if defined $sas_address_1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{inquiry_data}                             = $inquiry_data                             if defined $inquiry_data;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{fde_capable}                              = $fde_capable                              if defined $fde_capable;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{fde_enable}                               = $fde_enable                               if defined $fde_enable;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{secured}                                  = $secured                                  if defined $secured;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{locked}                                   = $locked                                   if defined $locked;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{needs_ekm_attention}                      = $needs_ekm_attention                      if defined $needs_ekm_attention;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{foreign_state}                            = $foreign_state                            if defined $foreign_state;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_speed}                             = $device_speed                             if defined $device_speed;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{link_speed}                               = $link_speed                               if defined $link_speed;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{media_type}                               = $media_type                               if defined $media_type;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_temperature}                        = $drive_temperature                        if defined $drive_temperature;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pi_eligibility}                           = $pi_eligibility                           if defined $pi_eligibility;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_is_formatted_for_pi_information}    = $drive_is_formatted_for_pi_information    if defined $drive_is_formatted_for_pi_information;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pi}                                       = $pi                                       if defined $pi;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_has_flagged_a_smart_alert}          = $drive_has_flagged_a_smart_alert          if defined $drive_has_flagged_a_smart_alert;
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], enclosure_device_id:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{enclosure_device_id}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], slot_number:                              [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{slot_number}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], diskgroup:                                [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{diskgroup}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], span:                                     [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{span}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], arm:                                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{arm}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], enclosure_position:                       [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{enclosure_position}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], device_id:                                [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_id}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], wwn:                                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{wwn}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], sequence_number:                          [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sequence_number}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], media_error_count:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{media_error_count}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], other_error_count:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{other_error_count}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], predictive_failure_count:                 [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{predictive_failure_count}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], last_predictive_failure_event_seq_number: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{last_predictive_failure_event_seq_number}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], pd_type:                                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pd_type}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], raw_size_string:                          [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{raw_size_string}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], raw_size_hex_sectors:                     [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{raw_size_hex_sectors}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], non_coerced_size_string:                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{non_coerced_size_string}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], non_coerced_size_hex_sectors:             [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{non_coerced_size_hex_sectors}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], coerced_size_string:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{coerced_size_string}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], coerced_size_hex_sectors:                 [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{coerced_size_hex_sectors}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], firmware_state:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{firmware_state}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], device_firmware_level:                    [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_firmware_level}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], shield_counter:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{shield_counter}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], successful_diagnostics_completion_on:     [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{successful_diagnostics_completion_on}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], sas_address_0:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sas_address_0}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], sas_address_1:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{sas_address_1}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], inquiry_data:                             [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{inquiry_data}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], fde_capable:                              [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{fde_capable}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], fde_enable:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{fde_enable}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], secured:                                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{secured}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], locked:                                   [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{locked}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], needs_ekm_attention:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{needs_ekm_attention}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], foreign_state:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{foreign_state}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], device_speed:                             [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{device_speed}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], link_speed:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{link_speed}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], media_type:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{media_type}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], drive_temperature:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_temperature}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], pi_eligibility:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pi_eligibility}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], drive_is_formatted_for_pi_information:    [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_is_formatted_for_pi_information}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], pi:                                       [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{pi}]\n");
			record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], drive_has_flagged_a_smart_alert:          [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{drive_has_flagged_a_smart_alert}]\n");
			for (my $i=0; $i<@{$port_status}; $i++)
			{
				$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{port}{$i}{port_status}     = $port_status->[$i]     if defined $port_status->[$i];
				$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{port}{$i}{ports_linkspeed} = $ports_linkspeed->[$i] if defined $ports_linkspeed->[$i];
				record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], cpn: [$cpn], SAS port: [$i], port status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{port}{$i}{port_status}], port's link speed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pd}{$cpn}{port}{$i}{ports_linkspeed}]\n");
			}
			$enclosure_device_id                      = "";
			$slot_number                              = "";
			$diskgroup                                = "";
			$span                                     = "";
			$arm                                      = "";
			$enclosure_position                       = "";
			$device_id                                = "";
			$wwn                                      = "";
			$sequence_number                          = "";
			$media_error_count                        = "";
			$other_error_count                        = "";
			$predictive_failure_count                 = "";
			$last_predictive_failure_event_seq_number = "";
			$pd_type                                  = "";
			$raw_size_string                          = "";
			$raw_size_hex_sectors                     = "";
			$non_coerced_size_string                  = "";
			$non_coerced_size_hex_sectors             = "";
			$coerced_size_string                      = "";
			$coerced_size_hex_sectors                 = "";
			$firmware_state                           = "";
			$device_firmware_level                    = "";
			$shield_counter                           = "";
			$successful_diagnostics_completion_on     = "";
			$sas_address_0                            = "";
			$sas_address_1                            = "";
			$connected_port_number                    = "";
			$inquiry_data                             = "";
			$fde_capable                              = "";
			$fde_enable                               = "";
			$secured                                  = "";
			$locked                                   = "";
			$needs_ekm_attention                      = "";
			$foreign_state                            = "";
			$device_speed                             = "";
			$link_speed                               = "";
			$media_type                               = "";
			$drive_temperature                        = "";
			$pi_eligibility                           = "";
			$drive_is_formatted_for_pi_information    = "";
			$pi                                       = "";
			$in_port                                  = "";
			$port_status                              = [];
			$ports_linkspeed                          = [];
			$drive_has_flagged_a_smart_alert          = "";
			next;
		}
	}
	$fh->close();
	
	return(0);
}

# This calls 'AdpAllInfo aAll' and records (almost) all information from it.
sub get_storage_lsi_adapter_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{AdpAllInfo} = "";
	my $get_pending_flash_data = 0;
	my $backend_port_count     = 0;
	my $frontend_port_count    = 0;
	my $adapter     = "";
	my $in_mfg_data = 0;
	my $in_ivif     = 0;
	my $in_piif     = 0;
	my $in_pci_info = 0;
	my $in_hw_conf  = 0;
	my $in_settings = 0;
	my $in_compat   = 0;
	my $in_status   = 0;
	my $in_limits   = 0;
	my $in_dp       = 0;
	my $in_sao      = 0;
	my $in_svdo     = 0;
	my $in_spdo     = 0;
	my $in_ec       = 0;
	my $in_ci       = 0;
	my $in_ds       = 0;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} AdpAllInfo aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{AdpAllInfo} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if ($line =~ /^===/);
		record($conf, "$THIS_FILE ".__LINE__."; AdpAllInfo line: [$line]\n");
		if ($line =~ /Adapter\s#(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		next if not $adapter;
		
		# This monster of code is used to know what section I am 
		# reading, which is needed to avoid mixing up some duplicate
		# variable names from different sections.
		if ($line =~ /Mfg. Data/i)
		{
			$in_mfg_data = 1;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Image Versions in Flash/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 1;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Pending Images in Flash/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 1;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /PCI Info/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 1;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /HW Configuration/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 1;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Settings/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 1;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Capabilities/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 1;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Status/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 1;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Limitations/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 1;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Device Present/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 1;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Supported Adapter Operations/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 1;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Supported VD Operations/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 1;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Supported PD Operations/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 1;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Error Counters/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 1;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Cluster Information/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 1;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /Default Settings/i)
		{
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_compat   = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 1;
			next;
		}

		### Grab stuff that needs special handling.
		# Parse out the pending flash image data (normally "None").
		if ($line =~ /Pending Images in Flash/i)
		{
			$get_pending_flash_data = 1;
			next;
		}
		if ($get_pending_flash_data)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pending_image_in_flash} = $line;
			$get_pending_flash_data = 0;
			next;
		}
		
		# Get the number of internal ports and their addresses.
		if ($line =~ /Number of Backend Port\s*:\s*(.*)/i)
		{
			$backend_port_count = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{number_of_backend_ports} = $backend_port_count;
			next;
		}
		if ($backend_port_count > 0)
		{
			if ($line !~ /^(\d+)\s+(.*)/)
			{
				my $port    = $1;
				my $address = $2;
				$backend_port_count--;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{address} = $address;
				next;
			}
			elsif (not $line)
			{
				# This is a safety mechanism. It should abort
				# this section of code if something goes wrong.
				$backend_port_count = 0;
				next;
			}
			else
			{
				# header or somesuch.
				next;
			}
		}
		
		# NOTE: This is untested and written on the assumption that the
		#       structure is the same as internal/backend data.
		# Get the number of external ports and their addresses.
		if ($line =~ /Number of Frontend Port\s*:\s*(.*)/i)
		{
			$frontend_port_count = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{number_of_frontend_ports} = $frontend_port_count;
			next;
		}
		if ($frontend_port_count > 0)
		{
			if ($line !~ /^(\d+)\s+(.*)/)
			{
				my $port    = $1;
				my $address = $2;
				$frontend_port_count--;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{address} = $address;
				next;
			}
			elsif (not $line)
			{
				# This is a safety mechanism. It should abort
				# this section of code if something goes wrong.
				$frontend_port_count = 0;
				next;
			}
			else
			{
				# header or somesuch.
				next;
			}
		}
		
		### Grab stuff that can be pulled from simple single-line regex's.
		# Version stuff
		if ($line =~ /Product Name\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{product_name} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; product_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{product_name}]\n");
			next;
		}
		if ($line =~ /Serial No\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_no} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; serial_no: [$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_no}]\n");
			next;
		}
		if ($line =~ /FW Package Build\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_package_build} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; fw_package_build: [$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_package_build}]\n");
			next;
		}
		
		# Manufacture info
		if ($line =~ /Mfg. Date\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{manufacture_date} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; mfg._date: [$conf->{data}{lsi}{new}{adapter}{$adapter}{manufacture_date}]\n");
			next;
		}
		if ($line =~ /Rework Date\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{rework_date} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; rework_date: [$conf->{data}{lsi}{new}{adapter}{$adapter}{rework_date}]\n");
			next;
		}
		if ($line =~ /Revision No\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{revision_no} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; revision_no: [$conf->{data}{lsi}{new}{adapter}{$adapter}{revision_no}]\n");
			next;
		}
		if ($line =~ /Battery FRU\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_fru} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_fru: [$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_fru}]\n");
			next;
		}
		
		# Image version in flash
		if ($line =~ /Image Versions in Flash\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{image_versions_in_flash} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; image_versions_in_flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{image_versions_in_flash}]\n");
			next;
		}
		if ($line =~ /BIOS Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; bios_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_version}]\n");
			next;
		}
		if ($line =~ /WebBIOS Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{webbios_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; webbios_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{webbios_version}]\n");
			next;
		}
		if ($line =~ /Preboot CLI Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; preboot_cli_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_version}]\n");
			next;
		}
		if ($line =~ /FW Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; fw_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_version}]\n");
			next;
		}
		if ($line =~ /NVDATA Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{nvdata_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; nvdata_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{nvdata_version}]\n");
			next;
		}
		if ($line =~ /Boot Block Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_block_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; boot_block_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_block_version}]\n");
			next;
		}
		if ($line =~ /BOOT Version\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_version} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; boot_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_version}]\n");
			next;
		}
		
		# PCI info
		if ($line =~ /Controller Id\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{controller_id} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; controller_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{controller_id}]\n");
			next;
		}
		if ($line =~ /Vendor Id\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vendor_id} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; vendor_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vendor_id}]\n");
			next;
		}
		if ($line =~ /Device Id\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{device_id} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{device_id}]\n");
			next;
		}
		if ($line =~ /SubVendorId\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{subvendorid} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; subvendorid: [$conf->{data}{lsi}{new}{adapter}{$adapter}{subvendorid}]\n");
			next;
		}
		if ($line =~ /SubDeviceId\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{subdeviceid} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; subdeviceid: [$conf->{data}{lsi}{new}{adapter}{$adapter}{subdeviceid}]\n");
			next;
		}
		if ($line =~ /Host Interface\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{host_interface} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; host_interface: [$conf->{data}{lsi}{new}{adapter}{$adapter}{host_interface}]\n");
			next;
		}
		if ($line =~ /ChipRevision\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{chiprevision} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; chiprevision: [$conf->{data}{lsi}{new}{adapter}{$adapter}{chiprevision}]\n");
			next;
		}
		
		# Frontend and backend ports refer to External and Internal
		# port counts.
		# NOTE: I only handle internal (Backend) at this time as I 
		#       don't have access to a card with external ports. The
		#       external/Frontend code is assumed to match, but it
		#       untested.
		if ($line =~ /Device Interface\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{device_interface} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; device_interface: [$conf->{data}{lsi}{new}{adapter}{$adapter}{device_interface}]\n");
			next;
		}
		
		# Hardware configuration
		if ($line =~ /SAS Address\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_address} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; sas_address: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_address}]\n");
			next;
		}
		if ($line =~ /BBU\s*:\s*(.*)/i)
		{
			if ($in_hw_conf)
			{
				$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; bbu: [$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu}]\n");
				next;
			}
			elsif ($in_sao)
			{
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bbu} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported adapter options bbu: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bbu}]\n");
				next;
			}
		}
		if ($line =~ /Alarm\s*:\s*(.*)/i)
		{
			if ($in_hw_conf)
			{
				$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_alarm} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Hardware configuration alarm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_alarm}]\n");
				next;
			}
			elsif ($in_settings)
			{
				# This is from the 'Settings' section.
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_alarm} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings alarm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_alarm}]\n");
				next;
			}
		}
		if ($line =~ /NVRAM\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{nvram} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; nvram: [$conf->{data}{lsi}{new}{adapter}{$adapter}{nvram}]\n");
			next;
		}
		if ($line =~ /Serial Debugger\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_debugger} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; serial_debugger: [$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_debugger}]\n");
			next;
		}
		if ($line =~ /Memory\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; memory: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory}]\n");
			next;
		}
		if ($line =~ /Flash\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{flash} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{flash}]\n");
			next;
		}
		if ($line =~ /Memory Size\s*:\s*(.*)/i)
		{
			# This is recorded as 'xMB'.
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; memory_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_size}]\n");
			next;
		}
		if ($line =~ /TPM\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{tpm} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; tpm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{tpm}]\n");
			next;
		}
		if ($line =~ /On board Expander\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{on_board_expander} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; on_board_expander: [$conf->{data}{lsi}{new}{adapter}{$adapter}{on_board_expander}]\n");
			next;
		}
		if ($line =~ /Upgrade Key\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{upgrade_key} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; upgrade_key: [$conf->{data}{lsi}{new}{adapter}{$adapter}{upgrade_key}]\n");
			next;
		}
		if ($line =~ /Temperature sensor for ROC\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_roc} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; temperature_sensor_for_roc: [$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_roc}]\n");
			next;
		}
		if ($line =~ /Temperature sensor for controller\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_controller} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; temperature_sensor_for_controller: [$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_controller}]\n");
			next;
		}
		
		# Settings
		# I don't read the date because it's ever-changing.
		if ($line =~ /Predictive Fail Poll Interval\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{predictive_fail_poll_interval} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; predictive_fail_poll_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{predictive_fail_poll_interval}]\n");
			next;
		}
		if ($line =~ /Interrupt Throttle Active Count\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_active_count} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; interrupt_throttle_active_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_active_count}]\n");
			next;
		}
		if ($line =~ /Interrupt Throttle Completion\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_completion} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; interrupt_throttle_completion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_completion}]\n");
			next;
		}
		if ($line =~ /Rebuild Rate\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{rebuild_rate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; rebuild_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{rebuild_rate}]\n");
				next;
			}
			elsif ($in_sao)
			{
				# Supported adapter operations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_rebuild_rate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported adapter operations rebuild_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_rebuild_rate}]\n");
				next;
			}
		}
		if ($line =~ /PR Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pr_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_rate}]\n");
			next;
		}
		if ($line =~ /BGI Rate\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_bgi_rate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings bgi_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_bgi_rate}]\n");
				next;
			}
			elsif ($in_sao)
			{
				# Supported adapter operations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bgi_rate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported adapter operations bgi_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bgi_rate}]\n");
				next;
			}
		}
		if ($line =~ /Check Consistency Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{check_consistency_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; check_consistency_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{check_consistency_rate}]\n");
			next;
		}
		if ($line =~ /Reconstruction Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; reconstruction_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction_rate}]\n");
			next;
		}
		if ($line =~ /Cache Flush Interval\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_flush_interval} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cache_flush_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_flush_interval}]\n");
			next;
		}
		if ($line =~ /Max Drives to Spinup at One Time\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_drives_to_spinup_at_one_time} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_drives_to_spinup_at_one_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_drives_to_spinup_at_one_time}]\n");
			next;
		}
		if ($line =~ /Delay Among Spinup Groups\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_among_spinup_groups} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; delay_among_spinup_groups: [$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_among_spinup_groups}]\n");
			next;
		}
		if ($line =~ /Physical Drive Coercion Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_drive_coercion_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; physical_drive_coercion_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_drive_coercion_mode}]\n");
			next;
		}
		if ($line =~ /Cluster Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cluster_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_mode}]\n");
			next;
		}
		# the "alarm" for Settingss is caught up in the 
		# "HW Configuration" section.
		if ($line =~ /Auto Rebuild\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_rebuild} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; auto_rebuild: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_rebuild}]\n");
			next;
		}
		if ($line =~ /Battery Warning\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_warning} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; battery_warning: [$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_warning}]\n");
			next;
		}
		if ($line =~ /Ecc Bucket Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_size}]\n");
			next;
		}
		if ($line =~ /Ecc Bucket Leak Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_leak_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_leak_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_leak_rate}]\n");
			next;
		}
		if ($line =~ /Restore HotSpare on Insertion\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hotspare_on_insertion} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; restore_hotspare_on_insertion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hotspare_on_insertion}]\n");
			next;
		}
		if ($line =~ /Expose Enclosure Devices\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_expose_enclosure_devices} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings expose_enclosure_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_expose_enclosure_devices}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_expose_enclosure_devices} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings expose_enclosure_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_expose_enclosure_devices}]\n");
				next;
			}
		}
		if ($line =~ /Maintain PD Fail History\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_maintain_pd_fail_history} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settingss maintain_pd_fail_history: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_maintain_pd_fail_history}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_maintain_pd_fail_history} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings maintain_pd_fail_history: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_maintain_pd_fail_history}]\n");
				next;
			}
		}
		if ($line =~ /Host Request Reordering\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{host_request_reordering} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; host_request_reordering: [$conf->{data}{lsi}{new}{adapter}{$adapter}{host_request_reordering}]\n");
			next;
		}
		if ($line =~ /Auto Detect BackPlane Enabled\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enabled} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; auto_detect_backplane_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enabled}]\n");
			next;
		}
		if ($line =~ /Load Balance Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{load_balance_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; load_balance_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{load_balance_mode}]\n");
			next;
		}
		if ($line =~ /Use FDE Only\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_use_fde_only} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings use_fde_only: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_use_fde_only}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_use_fde_only} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings use_fde_only: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_use_fde_only}]\n");
				next;
			}
		}
		if ($line =~ /Security Key Assigned\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_assigned} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; security_key_assigned: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_assigned}]\n");
			next;
		}
		if ($line =~ /Security Key Failed\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_failed} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; security_key_failed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_failed}]\n");
			next;
		}
		if ($line =~ /Security Key Not Backedup\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_not_backedup} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; security_key_not_backedup: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_not_backedup}]\n");
			next;
		}
		if ($line =~ /Default LD PowerSave Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{default_ld_powersave_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; default_ld_powersave_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{default_ld_powersave_policy}]\n");
			next;
		}
		if ($line =~ /Maximum number of direct attached drives to spin up in 1 min\s*:\s*(.*)/i)
		{
			# hash-key length win!
			$conf->{data}{lsi}{new}{adapter}{$adapter}{maximum_number_of_direct_attached_drives_to_spin_up_in_1_min} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; maximum_number_of_direct_attached_drives_to_spin_up_in_1_min: [$conf->{data}{lsi}{new}{adapter}{$adapter}{maximum_number_of_direct_attached_drives_to_spin_up_in_1_min}]\n");
			next;
		}
		if ($line =~ /Auto Enhanced Import\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_auto_enhanced_import} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings auto_enhanced_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_auto_enhanced_import}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_auto_enhanced_import} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings auto_enhanced_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_auto_enhanced_import}]\n");
				next;
			}
		}
		if ($line =~ /Any Offline VD Cache Preserved\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{any_offline_vd_cache_preserved} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; any_offline_vd_cache_preserved: [$conf->{data}{lsi}{new}{adapter}{$adapter}{any_offline_vd_cache_preserved}]\n");
			next;
		}
		if ($line =~ /Allow Boot with Preserved Cache\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_boot_with_preserved_cache} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_boot_with_preserved_cache: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_boot_with_preserved_cache}]\n");
			next;
		}
		if ($line =~ /Disable Online Controller Reset\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_disable_online_controller_reset} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Settings disable_online_controller_reset: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_disable_online_controller_reset}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_disable_online_controller_reset} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings disable_online_controller_reset: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_disable_online_controller_reset}]\n");
				next;
			}
		}
		if ($line =~ /PFK in NVRAM\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_in_nvram} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pfk_in_nvram: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_in_nvram}]\n");
			next;
		}
		if ($line =~ /Use disk activity for locate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{use_disk_activity_for_locate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; use_disk_activity_for_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{use_disk_activity_for_locate}]\n");
			next;
		}
		if ($line =~ /POST delay\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{post_delay} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; post_delay: [$conf->{data}{lsi}{new}{adapter}{$adapter}{post_delay}]\n");
			next;
		}
		
		# I don't care about "Capabilities.
		
		# Status
		if ($line =~ /ECC Bucket Count\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_count} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_count}]\n");
			next;
		}
		
		# Limitations
		if ($line =~ /Max Arms Per VD\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arms_per_vd} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_arms_per_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arms_per_vd}]\n");
			next;
		}
		if ($line =~ /Max Spans Per VD\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_spans_per_vd} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_spans_per_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_spans_per_vd}]\n");
			next;
		}
		if ($line =~ /Max Arrays\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arrays} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_arrays: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arrays}]\n");
			next;
		}
		if ($line =~ /Max Number of VDs\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_number_of_vds} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_number_of_vds: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_number_of_vds}]\n");
			next;
		}
		if ($line =~ /Max Parallel Commands\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_parallel_commands} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_parallel_commands: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_parallel_commands}]\n");
			next;
		}
		if ($line =~ /Max SGE Count\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_sge_count} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_sge_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_sge_count}]\n");
			next;
		}
		if ($line =~ /Max Data Transfer Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_data_transfer_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_data_transfer_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_data_transfer_size}]\n");
			next;
		}
		if ($line =~ /Max Strips PerIO\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strips_perio} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_strips_perio: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strips_perio}]\n");
			next;
		}
		if ($line =~ /Max LD per array\s*:\s*(.*)/i)
		{
			if ($in_limits)
			{
				# Limitations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{limits_max_ld_per_array} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Limits max_ld_per_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{limits_max_ld_per_array}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_max_ld_per_array} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings max_ld_per_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_max_ld_per_array}]\n");
				next;
			}
		}
		if ($line =~ /Min Strip Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{min_strip_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; min_strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{min_strip_size}]\n");
			next;
		}
		if ($line =~ /Max Strip Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strip_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strip_size}]\n");
			next;
		}
		if ($line =~ /Max Configurable CacheCade Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_configurable_cachecade_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_configurable_cachecade_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_configurable_cachecade_size}]\n");
			next;
		}
		if ($line =~ /Current Size of CacheCade\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_cachecade} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current_size_of_cachecade: [$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_cachecade}]\n");
			next;
		}
		if ($line =~ /Current Size of FW Cache\s*:\s*(.*)/i)
		{
			# This might squack a lot...
			$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_fw_cache} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; current_size_of_fw_cache: [$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_fw_cache}]\n");
			next;
		}
		
		# Devices present.
		# NOTE: The options below 'Virtual Drives' and 'Physical
		#       devices' are spaced in... Might need special handling
		#       later to avoid duplicating key names.
		if ($line =~ /Virtual Drives\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{virtual_drives} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; virtual_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{virtual_drives}]\n");
			next;
		}
		if ($line =~ /Degraded\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_degraded} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; VD degraded: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_degraded}]\n");
			next;
		}
		if ($line =~ /Offline\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_offline} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; VD offline: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_offline}]\n");
			next;
		}
		if ($line =~ /Physical Devices\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_devices} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; physical_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_devices}]\n");
			next;
		}
		if ($line =~ /Disks\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_disks} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; PV disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_disks}]\n");
			next;
		}
		if ($line =~ /Critical Disks\s*:\s*(.*)/i)
		{
			# NOTE: This should trigger migration of VMs off of
			#       this node.
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_critical_disks} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; PV critical_disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_critical_disks}]\n");
			next;
		}
		if ($line =~ /Failed Disks\s*:\s*(.*)/i)
		{
			# NOTE: This should trigger migration of VMs off of
			#       this node.
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_failed_disks} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; PV failed_disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_failed_disks}]\n");
			next;
		}
		
		# Supported adapter operations
		# SAO rebuild rate recorded up in the Settings section.
		if ($line =~ /CC Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cc_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cc_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cc_rate}]\n");
			next;
		}
		# SAO BGI rate is recorded up in the Settings section.
		if ($line =~ /Reconstruct Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruct_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; reconstruct_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruct_rate}]\n");
			next;
		}
		if ($line =~ /Patrol Read Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{patrol_read_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; patrol_read_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{patrol_read_rate}]\n");
			next;
		}
		if ($line =~ /Alarm Control\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_control} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; alarm_control: [$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_control}]\n");
			next;
		}
		if ($line =~ /Cluster Support\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_support} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cluster_support: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_support}]\n");
			next;
		}
		# SAO BBU is recorded in the Hardware Config section
		if ($line =~ /Spanning\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spanning} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; spanning: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spanning}]\n");
			next;
		}
		if ($line =~ /Dedicated Hot Spare\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{dedicated_hot_spare} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; dedicated_hot_spare: [$conf->{data}{lsi}{new}{adapter}{$adapter}{dedicated_hot_spare}]\n");
			next;
		}
		if ($line =~ /Revertible Hot Spares\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{revertible_hot_spares} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; revertible_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{revertible_hot_spares}]\n");
			next;
		}
		if ($line =~ /Foreign Config Import\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{foreign_config_import} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; foreign_config_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{foreign_config_import}]\n");
			next;
		}
		if ($line =~ /Self Diagnostic\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{self_diagnostic} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; self_diagnostic: [$conf->{data}{lsi}{new}{adapter}{$adapter}{self_diagnostic}]\n");
			next;
		}
		if ($line =~ /Allow Mixed Redundancy on Array\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mixed_redundancy_on_array} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_mixed_redundancy_on_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mixed_redundancy_on_array}]\n");
			next;
		}
		if ($line =~ /Global Hot Spares\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{global_hot_spares} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; global_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{global_hot_spares}]\n");
			next;
		}
		if ($line =~ /Deny SCSI Passthrough\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_scsi_passthrough} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_scsi_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_scsi_passthrough}]\n");
			next;
		}
		if ($line =~ /Deny SMP Passthrough\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_smp_passthrough} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_smp_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_smp_passthrough}]\n");
			next;
		}
		if ($line =~ /Deny STP Passthrough\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_stp_passthrough} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_stp_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_stp_passthrough}]\n");
			next;
		}
		if ($line =~ /Support Security\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_security} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_security: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_security}]\n");
			next;
		}
		if ($line =~ /Snapshot Enabled\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{snapshot_enabled} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; snapshot_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{snapshot_enabled}]\n");
			next;
		}
		if ($line =~ /Support the OCE without adding drives\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_the_oce_without_adding_drives} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_the_oce_without_adding_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_the_oce_without_adding_drives}]\n");
			next;
		}
		if ($line =~ /Support PFK\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pfk} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_pfk: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pfk}]\n");
			next;
		}
		if ($line =~ /Support PI\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pi} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_pi: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pi}]\n");
			next;
		}
		if ($line =~ /Support Boot Time PFK Change\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_boot_time_pfk_change} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_boot_time_pfk_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_boot_time_pfk_change}]\n");
			next;
		}
		if ($line =~ /Disable Online PFK Change\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_online_pfk_change} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_online_pfk_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_online_pfk_change}]\n");
			next;
		}
		if ($line =~ /PFK TrailTime Remaining\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_trailtime_remaining} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pfk_trailtime_remaining: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_trailtime_remaining}]\n");
			next;
		}
		if ($line =~ /Support Shield State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_shield_state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_shield_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_shield_state}]\n");
			next;
		}
		if ($line =~ /Block SSD Write Disk Cache Change\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{block_ssd_write_disk_cache_change} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; block_ssd_write_disk_cache_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{block_ssd_write_disk_cache_change}]\n");
			next;
		}
		
		# Supported VD Operations
		if ($line =~ /Read Policy\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operation
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_read_policy} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported VD Operations read_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_read_policy}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_read_policy} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings read_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_read_policy}]\n");
				next;
			}
		}
		if ($line =~ /Write Policy\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operation
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_write_policy} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported VD Operation write_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_write_policy}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_write_policy} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings write_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_write_policy}]\n");
				next;
			}
		}
		if ($line =~ /IO Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{io_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; io_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{io_policy}]\n");
			next;
		}
		if ($line =~ /Access Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{access_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{access_policy}]\n");
			next;
		}
		if ($line =~ /Disk Cache Policy\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disk_cache_policy} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disk_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disk_cache_policy}]\n");
			next;
		}
		if ($line =~ /Reconstruction\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; reconstruction: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction}]\n");
			next;
		}
		if ($line =~ /Deny Locate\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_deny_locate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported VD operations deny_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_deny_locate}]\n");
				next;
			}
			elsif ($in_spdo)
			{
				# Supported PD Operations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_deny_locate} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported PD operations deny_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_deny_locate}]\n");
				next;
			}
		}
		if ($line =~ /Deny CC\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_cc} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_cc: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_cc}]\n");
			next;
		}
		if ($line =~ /Allow Ctrl Encryption\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ctrl_encryption} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_ctrl_encryption: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ctrl_encryption}]\n");
			next;
		}
		if ($line =~ /Enable LDBBM\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ldbbm} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_ldbbm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ldbbm}]\n");
			next;
		}
		if ($line =~ /Support Breakmirror\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_breakmirror} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_breakmirror: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_breakmirror}]\n");
			next;
		}
		
		# Supported PD Operations
		if ($line =~ /Power Savings\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{power_savings} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; power_savings: [$conf->{data}{lsi}{new}{adapter}{$adapter}{power_savings}]\n");
			next;
		}
		if ($line =~ /Force Online\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_online} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; force_online: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_online}]\n");
			next;
		}
		if ($line =~ /Force Offline\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_offline} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; force_offline: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_offline}]\n");
			next;
		}
		if ($line =~ /Force Rebuild\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_rebuild} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; force_rebuild: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_rebuild}]\n");
			next;
		}
		if ($line =~ /Deny Force Failed\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_failed} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_force_failed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_failed}]\n");
			next;
		}
		if ($line =~ /Deny Force Good\/Bad\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_good_bad} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_force_good_bad: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_good_bad}]\n");
			next;
		}
		if ($line =~ /Deny Missing Replace\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_missing_replace} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_missing_replace: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_missing_replace}]\n");
			next;
		}
		if ($line =~ /Deny Clear\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_clear} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; deny_clear: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_clear}]\n");
			next;
		}
		# Supported PD Operations deny_locate is picked up in the 
		# Supported VD Operations above.
		if ($line =~ /Support Temperature\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_temperature} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; support_temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_temperature}]\n");
			next;
		}
		if ($line =~ /Disable Copyback\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_copyback} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_copyback: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_copyback}]\n");
			next;
		}
		if ($line =~ /Enable JBOD\s*:\s*(.*)/i)
		{
			if ($in_spdo)
			{
				# Supported PD Operations
				$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_enable_jbod} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Supported PD Operations enable_jbod: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_enable_jbod}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_enable_jbod} = $1;
				record($conf, "$THIS_FILE ".__LINE__."; Default settings enable_jbod: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_enable_jbod}]\n");
				next;
			}
		}
		if ($line =~ /Enable Copyback on SMART\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_on_smart} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_copyback_on_smart: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_on_smart}]\n");
			next;
		}
		if ($line =~ /Enable Copyback to SSD on SMART Error\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_to_ssd_on_smart_error} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_copyback_to_ssd_on_smart_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_to_ssd_on_smart_error}]\n");
			next;
		}
		if ($line =~ /Enable SSD Patrol Read\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ssd_patrol_read} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_ssd_patrol_read: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ssd_patrol_read}]\n");
			next;
		}
		if ($line =~ /PR Correct Unconfigured Areas\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_correct_unconfigured_areas} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; pr_correct_unconfigured_areas: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_correct_unconfigured_areas}]\n");
			next;
		}
		if ($line =~ /Enable Spin Down of UnConfigured Drives\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_spin_down_of_unconfigured_drives} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_spin_down_of_unconfigured_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_spin_down_of_unconfigured_drives}]\n");
			next;
		}
		if ($line =~ /Disable Spin Down of hot spares\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_spin_down_of_hot_spares} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_spin_down_of_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_spin_down_of_hot_spares}]\n");
			next;
		}
		if ($line =~ /Spin Down time\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_time} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; spin_down_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_time}]\n");
			next;
		}
		if ($line =~ /T10 Power State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{t10_power_state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; t10_power_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{t10_power_state}]\n");
			next;
		}
		
		# Error Counters
		if ($line =~ /Memory Correctable Errors\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_correctable_errors} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; memory_correctable_errors: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_correctable_errors}]\n");
			next;
		}
		if ($line =~ /Memory Uncorrectable Errors\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_uncorrectable_errors} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; memory_uncorrectable_errors: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_uncorrectable_errors}]\n");
			next;
		}
		
		# Cluster Information
		if ($line =~ /Cluster Permitted\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_permitted} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cluster_permitted: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_permitted}]\n");
			next;
		}
		if ($line =~ /Cluster Active\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_active} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cluster_active: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_active}]\n");
			next;
		}
		
		# Default Settings
		if ($line =~ /Phy Polarity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polarity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; phy_polarity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polarity}]\n");
			next;
		}
		if ($line =~ /Phy PolaritySplit\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polaritysplit} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; phy_polaritysplit: [$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polaritysplit}]\n");
			next;
		}
		if ($line =~ /Background Rate\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{background_rate} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; background_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{background_rate}]\n");
			next;
		}
		if ($line =~ /Strip Size\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{strip_size} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{strip_size}]\n");
			next;
		}
		if ($line =~ /Flush Time\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{flush_time} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; flush_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{flush_time}]\n");
			next;
		}
		# Default read and write policies are recorded in the Standard 
		# VD Operations section.
		if ($line =~ /Cache When BBU Bad\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_when_bbu_bad} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cache_when_bbu_bad: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_when_bbu_bad}]\n");
			next;
		}
		if ($line =~ /Cached IO\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cached_io} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cached_io: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cached_io}]\n");
			next;
		}
		if ($line =~ /SMART Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{smart_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; smart_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{smart_mode}]\n");
			next;
		}
		if ($line =~ /Alarm Disable\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_disable} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; alarm_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_disable}]\n");
			next;
		}
		if ($line =~ /Coercion Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{coercion_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; coercion_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{coercion_mode}]\n");
			next;
		}
		if ($line =~ /ZCR Config\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{zcr_config} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; zcr_config: [$conf->{data}{lsi}{new}{adapter}{$adapter}{zcr_config}]\n");
			next;
		}
		if ($line =~ /Dirty LED Shows Drive Activity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{dirty_led_shows_drive_activity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; dirty_led_shows_drive_activity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{dirty_led_shows_drive_activity}]\n");
			next;
		}
		if ($line =~ /BIOS Continue on Error\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_continue_on_error} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; bios_continue_on_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_continue_on_error}]\n");
			next;
		}
		if ($line =~ /Spin Down Mode\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_mode} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; spin_down_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_mode}]\n");
			next;
		}
		if ($line =~ /Allowed Device Type\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allowed_device_type} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allowed_device_type: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allowed_device_type}]\n");
			next;
		}
		if ($line =~ /Allow Mix in Enclosure\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mix_in_enclosure} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_mix_in_enclosure: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mix_in_enclosure}]\n");
			next;
		}
		if ($line =~ /Allow HDD SAS\/SATA Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_sas_sata_mix_in_vd} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_hdd_sas_sata_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_sas_sata_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /Allow SSD SAS\/SATA Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ssd_sas_sata_mix_in_vd} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_ssd_sas_sata_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ssd_sas_sata_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /Allow HDD\/SSD Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_ssd_mix_in_vd} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_hdd_ssd_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_ssd_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /Allow SATA in Cluster\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_sata_in_cluster} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; allow_sata_in_cluster: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_sata_in_cluster}]\n");
			next;
		}
		if ($line =~ /Max Chained Enclosures\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_chained_enclosures} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; max_chained_enclosures: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_chained_enclosures}]\n");
			next;
		}
		if ($line =~ /Disable Ctrl-R\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_ctrl_r} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_ctrl_r: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_ctrl_r}]\n");
			next;
		}
		if ($line =~ /Enable Web BIOS\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_web_bios} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_web_bios: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_web_bios}]\n");
			next;
		}
		if ($line =~ /Direct PD Mapping\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{direct_pd_mapping} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; direct_pd_mapping: [$conf->{data}{lsi}{new}{adapter}{$adapter}{direct_pd_mapping}]\n");
			next;
		}
		if ($line =~ /BIOS Enumerate VDs\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_enumerate_vds} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; bios_enumerate_vds: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_enumerate_vds}]\n");
			next;
		}
		if ($line =~ /Restore Hot Spare on Insertion\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hot_spare_on_insertion} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; restore_hot_spare_on_insertion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hot_spare_on_insertion}]\n");
			next;
		}
		# Expose Enclosure Devices is recorded above in the Settings
		# section above.
		# Maintain PD Fail History is recorded above in the Settings
		# section above.
		if ($line =~ /Disable Puncturing\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_puncturing} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_puncturing: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_puncturing}]\n");
			next;
		}
		if ($line =~ /Zero Based Enclosure Enumeration\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{zero_based_enclosure_enumeration} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; zero_based_enclosure_enumeration: [$conf->{data}{lsi}{new}{adapter}{$adapter}{zero_based_enclosure_enumeration}]\n");
			next;
		}
		if ($line =~ /PreBoot CLI Enabled\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_enabled} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; preboot_cli_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_enabled}]\n");
			next;
		}
		if ($line =~ /LED Show Drive Activity\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{led_show_drive_activity} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; led_show_drive_activity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{led_show_drive_activity}]\n");
			next;
		}
		if ($line =~ /Cluster Disable\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_disable} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; cluster_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_disable}]\n");
			next;
		}
		if ($line =~ /SAS Disable\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_disable} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; sas_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_disable}]\n");
			next;
		}
		if ($line =~ /Auto Detect BackPlane Enable\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enable} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; auto_detect_backplane_enable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enable}]\n");
			next;
		}
		# Use FDE Only is recorded above in the Settings section above.
		if ($line =~ /Enable Led Header\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_led_header} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_led_header: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_led_header}]\n");
			next;
		}
		if ($line =~ /Delay during POST\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_during_post} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; delay_during_post: [$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_during_post}]\n");
			next;
		}
		if ($line =~ /EnableCrashDump\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enablecrashdump} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enablecrashdump: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enablecrashdump}]\n");
			next;
		}
		# Disable Online Controller Reset is recorded above in the 
		# Settings section above.
		if ($line =~ /EnableLDBBM\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enableldbbm} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enableldbbm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enableldbbm}]\n");
			next;
		}
		if ($line =~ /Un-Certified Hard Disk Drives\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{un_certified_hard_disk_drives} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; un_certified_hard_disk_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{un_certified_hard_disk_drives}]\n");
			next;
		}
		if ($line =~ /Treat Single span R1E as R10\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{treat_single_span_r1e_as_r10} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; treat_single_span_r1e_as_r10: [$conf->{data}{lsi}{new}{adapter}{$adapter}{treat_single_span_r1e_as_r10}]\n");
			next;
		}
		# Max LD per array is recorded in the Limitations section 
		# above.
		if ($line =~ /Power Saving option\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{power_saving_option} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; power_saving_option: [$conf->{data}{lsi}{new}{adapter}{$adapter}{power_saving_option}]\n");
			next;
		}
		if ($line =~ /Default spin down time in minutes\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{default_spin_down_time_in_minutes} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; default_spin_down_time_in_minutes: [$conf->{data}{lsi}{new}{adapter}{$adapter}{default_spin_down_time_in_minutes}]\n");
			next;
		}
		# Enable JBOD is recoded in Supported PD Operations above.
		if ($line =~ /TTY Log In Flash\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{tty_log_in_flash} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; tty_log_in_flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{tty_log_in_flash}]\n");
			next;
		}
		# Auto Enhanced Import is recorded in the Settings section above.
		if ($line =~ /BreakMirror RAID Support\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{breakmirror_raid_support} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; breakmirror_raid_support: [$conf->{data}{lsi}{new}{adapter}{$adapter}{breakmirror_raid_support}]\n");
			next;
		}
		if ($line =~ /Disable Join Mirror\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_join_mirror} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; disable_join_mirror: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_join_mirror}]\n");
			next;
		}
		if ($line =~ /Enable Shield State\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_shield_state} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; enable_shield_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_shield_state}]\n");
			next;
		}
		if ($line =~ /Time taken to detect CME\s*:\s*(.*)/i)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{time_taken_to_detect_cme} = $1;
			record($conf, "$THIS_FILE ".__LINE__."; time_taken_to_detect_cme: [$conf->{data}{lsi}{new}{adapter}{$adapter}{time_taken_to_detect_cme}]\n");
			next;
		}
		
		next if $line =~ /^=+$/;
		next if not $line;
		record($conf, "$THIS_FILE ".__LINE__."; Unmatched line while parsing LSI adapter information! line: [$line]\n");
	}
	$fh->close();
	
	return(0);
}

# Check the storage on the server
sub check_storage
{
	my ($conf) = @_;
	
	# To check the storage, I must first know what kind of storage I have.
	# To do this, I check for certain files.
	# At this point, I only support LSI controllers.
	if (-e $conf->{path}{MegaCli64})
	{
		$conf->{'system'}{storage} = "lsi";
	}
	
	if ($conf->{'system'}{storage} eq "lsi")
	{
		check_storage_lsi($conf);
	}
	else
	{
		record($conf, "$THIS_FILE ".__LINE__."; Skipping storage check; unable to determine the underlying storage type\n");
	}
	
	return(0);
}

# This reads the network values; bonds, bridges and ethernet devices.
sub check_network
{
	my ($conf) = @_;
	
	# NOTE: I may want to look into /sys/class/net/$dev/* later.
	
	# Read in all interfaces from 'ifconfig -a'.
	my $this_dev = "";
	my $fh       = IO::Handle->new();
	my $sc       = "$conf->{path}{ifconfig} -a";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$line =~ s/\s+/ /g;
		$conf->{data}{raw}{ifconfig} .= $line."\n";
		#record($conf, "$THIS_FILE ".__LINE__."; ifconfig line: [$line]\n");
		if (not $line)
		{
			$this_dev = "";
			next;
		}
		if ($line =~ /^(.*?) Link/i)
		{
			$this_dev = $1;
		}
		if (not $this_dev)
		{
			next;
		}
		if ($line =~ /HWaddr (.*)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{hwaddr} = uc($1);
			#record($conf, "$THIS_FILE ".__LINE__."; device: [$this_dev], MAC: [$conf->{data}{network}{new}{dev}{$this_dev}{hwaddr}]\n");
		}
		if ($line =~ /(.*?) MTU:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{'state'} = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{mtu}     = $2;
		}
		if ($line =~ /Metric:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{metric} = $1;
		}
		if ($line =~ /inet addr:(.*?)\s/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{ip_address} = $1;
		}
		if ($line =~ /inet6 addr:(.*?)\s/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{ipv6_address} = $1;
		}
		if ($line =~ /Mask:(.*)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{netmask} = $1;
		}
		if ($line =~ /RX packets:(.*) errors:(\d+) dropped:(\d+) overruns:(\d+) frame:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{packets}  = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{errors}   = $2;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{dropped}  = $3;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{overruns} = $4;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{frame}    = $5;
		}
		if ($line =~ /TX packets:(.*) errors:(\d+) dropped:(\d+) overruns:(\d+) carrier:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{packets}  = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{errors}   = $2;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{dropped}  = $3;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{overruns} = $4;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{carrier}  = $5;
		}
		if ($line =~ /RX bytes:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{'bytes'}  = $1;
		}
		if ($line =~ /TX bytes:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{'bytes'}  = $1;
		}
	}
	$fh->close();
	
	# This requires that bonds be 'bondX', eth devices be 'ethX' and
	# bridges be 'vbrX'.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
	{
		# Bonds will sort first.
		if ($dev =~ /bond/)
		{
			# Read the bond's /proc FS file
			#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev]\n");
			$conf->{data}{network}{new}{bond}{$dev}{slave_count} = 0;
			$conf->{data}{raw}{bond}{$dev}                       = "";
			my $in = "bond";
			my $fh = IO::Handle->new();
			my $sc = "/proc/net/bonding/$dev";
			open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
			while (<$fh>)
			{
				chomp;
				my $line=$_;
				$conf->{data}{raw}{bond}{$dev} .= $line."\n";
				$line =~ s/^\s+//;
				$line =~ s/\s+$//;
				$line =~ s/\s+/ /g;
				#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], line: [$line]\n");
				next if not $line;
				
				# See when I switch the device I am looking at.
				if ($line =~ /Slave Interface: (.*)/i)
				{
					$in = $1;
					$conf->{data}{network}{new}{bond}{$dev}{slave_count}++;
					#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], in: [$in]\n");
				}
				next if not $in;
				
				# Parse out the main bond values.
				if ($in eq "bond")
				{
					if ($line =~ /Bonding Mode:.*?\((.*?)\)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mode} = $1;
					}
					if ($line =~ /Primary Slave: (.*?) \(primary_reselect (.*?)\)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{primary}{slave}    = $1;
						$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = $2;
					}
					if ($line =~ /Currently Active Slave: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{active_slave} = $1;
					}
					if ($line =~ /MII Status: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mii}{status} = $1;
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], MII stats: [$conf->{data}{network}{new}{bond}{$dev}{mii}{status}]\n");
					}
					if ($line =~ /MII Polling Interval \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval} = $1;
					}
					if ($line =~ /Up Delay \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{delay}{up} = $1;
					}
					if ($line =~ /Down Delay \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{delay}{down} = $1;
					}
				}
				else
				{
					# Parse out the slave interface values.
					if ($line =~ /MII Status: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{mii_status} = $1;
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], in: [$in], MII stats: [$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{mii_status}]\n");
					}
					if ($line =~ /Speed: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{speed} = $1;
					}
					if ($line =~ /Duplex: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{duplex} = $1;
					}
					if ($line =~ /Link Failure Count: (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{link_failure_count} = $1;
					}
					if ($line =~ /Permanent HW addr: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac} = uc($1);
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], real MAC: [$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac}]\n");
						my $if_mac    = $conf->{data}{network}{new}{dev}{$in}{hwaddr};
						my $slave_mac = $conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac};
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], real MAC: [$if_mac], recorded MAC: [$slave_mac]\n");
						if ($if_mac ne $slave_mac)
						{
							# Update the device's 
							# reported MAC address 
							# with the real one.
							$conf->{data}{network}{new}{dev}{$in}{hwaddr} = $slave_mac;
							#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], MAC updated to: [$conf->{data}{network}{new}{dev}{$in}{hwaddr}]\n");
						}
					}
					if ($line =~ /Slave queue ID: (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{slave_queue_id} = $1;
					}
				}
			}
			$fh->close();
			
			# Read the configuration file to parse the BOND_OPTS string.
			my $file = "/etc/sysconfig/network-scripts/ifcfg-$dev";
			if (-r $file)
			{
				my $fh = IO::Handle->new();
				my $sc = "/etc/sysconfig/network-scripts/ifcfg-$dev";
				open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
				while (<$fh>)
				{
					chomp;
					my $line=$_;
					$conf->{data}{raw}{bond}{$dev} .= $line."\n";
					$line =~ s/^\s+//;
					$line =~ s/\s+$//;
					$line =~ s/\s+/ /g;
					#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], line: [$line]\n");
					if ($line =~ /BONDING_OPTS/i)
					{
						my $primary  = "none";
						my $reselect = "none";
						if ($line =~ /primary=(.*)/i)
						{
							$primary  =  $1;
							$primary  =~ s/\s.*//;
							$primary  =~ s/"//g;
							$reselect =  "always";
						}
						$conf->{data}{network}{new}{bond}{$dev}{primary}{slave} = $primary;
						if ($line =~ /primary_reselect=(.*)/i)
						{
							$reselect =  $1;
							$reselect =~ s/\s.*//;
							$reselect =~ s/"//g;
							if (($reselect eq "1") || ($reselect =~ /better/i))
							{
								$reselect = "better";
							}
							if (($reselect eq "2") || ($reselect =~ /failure/i))
							{
								$reselect = "failure";
							}
						}
						$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = $reselect;
					}
				}
				$fh->close();
			}
		}
		elsif ($dev =~ /eth/)
		{
			# Read the '/etc/sysconfig/network-scripts/ifcfg-${dev}'
			# file. This is needed because if a device was 
			# ifdown'ed, it won't show as a slave of a bond.
			$conf->{data}{raw}{ifcfg}{$dev} = "";
			my $file = "/etc/sysconfig/network-scripts/ifcfg-$dev";
			if (-r $file)
			{
				my $fh = IO::Handle->new();
				my $sc = "$file";
				open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
				while (<$fh>)
				{
					chomp;
					my $line=$_;
					$conf->{data}{raw}{ifcfg}{$dev} .= $line."\n";
					$line =~ s/#.*//;
					$line =~ s/^\s+//;
					$line =~ s/\s+$//;
					$line =~ s/\s+/ /g;
					next if not $line;
					#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], line: [$line]\n");
					if ($line =~ /MASTER/)
					{
						# Got it.
						my $parent = $line;
						$parent =~ s/^.*?=//;
						$parent =~ s/"//g;
						$parent =~ s/\s+//g;
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{mii_status})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{mii_status} = "down";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{speed})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{speed} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{duplex})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{duplex} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{link_failure_count})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{link_failure_count} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac} = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
							#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], parent: [$parent], MAC: [$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac}]\n");
						}
						last;
					}
				}
				$fh->close();
			}
		}
		elsif ($dev =~ /vbr/)
		{
			# Read 'brctl show $dev'
			my $bridge_id   = "";
			my $stp_enabled = "";
			my $interfaces  = "";
			my $fh = IO::Handle->new();
			my $sc = "$conf->{path}{brctl} show $dev";
			open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
			while (<$fh>)
			{
				chomp;
				my $line=$_;
				$conf->{data}{raw}{bond}{$dev} .= $line."\n";
				$line =~ s/\s+/ /g;
				$line =~ s/^\s+//;
				$line =~ s/\s+$//;
				#record($conf, "$THIS_FILE ".__LINE__."; bridge: [$dev], line: [$line]\n");
				next if not $line;
				next if $line =~ /^bridge name/i;
				
				# This can be one of three possible lines;
				# - bridge info with device
				# - bridge info, no devices
				# - device only.
				if ($line =~ /^$dev\s+(.*?)\s+(.*?)\s+(.*)/)
				{
					$bridge_id   =  $1;
					$stp_enabled =  $2;
					$interfaces  .= "$3, ";
				}
				elsif ($line =~ /^$dev\s+(.*?)\s+(.*?)/)
				{
					$bridge_id   = $1;
					$stp_enabled = $2;
					$interfaces  = "--";
				}
				else
				{
					$interfaces .= "$line, ";
				}
			}
			$fh->close();
			$interfaces =~ s/, $//;
			$conf->{data}{network}{new}{bridge}{$dev}{id}         = $bridge_id;
			$conf->{data}{network}{new}{bridge}{$dev}{stp}        = $stp_enabled;
			$conf->{data}{network}{new}{bridge}{$dev}{interfaces} = $interfaces;
		}
	}
	
	# Record the passive slave for each bond for easy reference
	# later.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		next if $dev !~ /bond/;
		#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev]\n");
		foreach my $slave (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}{$dev}{slave}})
		{
			#record($conf, "$THIS_FILE ".__LINE__."; - slave: [$slave]\n");
			if (not $conf->{data}{network}{new}{bond}{$dev}{first_slave})
			{
				$conf->{data}{network}{new}{bond}{$dev}{first_slave}  = $slave;
				#record($conf, "$THIS_FILE ".__LINE__."; - first slave:  [$conf->{data}{network}{new}{bond}{$dev}{first_slave}]\n");
			}
			else
			{
				$conf->{data}{network}{new}{bond}{$dev}{second_slave} = $slave;
				#record($conf, "$THIS_FILE ".__LINE__."; - second slave: [$conf->{data}{network}{new}{bond}{$dev}{second_slave}]\n");
			}
		}
	}
	
	return(0);
}

# This reads 'clustat'.
sub check_clustat
{
	my ($conf)=@_;

	my $in = "";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{clustat}";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$conf->{data}{raw}{clustat} .= $line."\n";
		#record($conf, "$THIS_FILE ".__LINE__."; clustat line: [$line]\n");
		next if not $line;
		
		if ($line =~ /Member Name/)
		{
			$in = "members";
			next;
		}
		if ($line =~ /Service Name/)
		{
			$in = "services";
			next;
		}
		
		#print "reading: [$in], line: [$line]\n";
		if ($in eq "members")
		{
			if ($line =~ /^(.*?)\s+(\d+) (.*)/)
			{
				my $node   = $1;
				my $id     = $2;
				my $status = $3;
				$conf->{data}{clustat}{new}{node}{$node}{id}     = $id;
				$conf->{data}{clustat}{new}{node}{$node}{status} = $status;
				#record($conf, "$THIS_FILE ".__LINE__."; node:    [$node], ID: [$conf->{data}{clustat}{new}{node}{$node}{id}], Status: [$conf->{data}{clustat}{new}{node}{$node}{status}]\n");
			}
		}
		elsif ($in eq "services")
		{
			if ($line =~ /^(.*?)\s+(.*?)\s+(.*)/)
			{
				my $service = $1;
				my $member  = $2;
				my $state   = $3;
				next if $service =~ /^---/;
				$conf->{data}{clustat}{new}{service}{$service}{on}      = $member;
				$conf->{data}{clustat}{new}{service}{$service}{'state'} = $state;
				#record($conf, "$THIS_FILE ".__LINE__."; Service: [$service], on: [$conf->{data}{clustat}{new}{service}{$service}{on}], State: [$conf->{data}{clustat}{new}{service}{$service}{'state'}]\n");
			}
		}
		else
		{
			if ($line =~ /Member Status: (.*)/)
			{
				$conf->{data}{clustat}{new}{quorum} = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; Quorum:  [$conf->{data}{clustat}{new}{quorum}]\n");
			}
			elsif ($line =~ /Cluster Status for (.*) \@/)
			{
				$conf->{data}{clustat}{new}{cluster} = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; Cluster: [$conf->{data}{clustat}{new}{cluster}]\n");
			}
		}
	}
	$fh->close();
	
	return (0);
}

# This checks to see if anything has changed since the last scan.
sub check_for_changes
{
	my ($conf) = @_;
	
	# TODO: This needs a way to track hash entries that vanished since the
	# last scan.
	check_clustat($conf);
	check_network($conf);
	compare_new_and_old($conf);
	
	return(0);
}

# This sends out the initial cluster status report.
sub initial_report
{
	my ($conf) = @_;

	$conf->{mail_data}{subject} = "Cluster Monitor Start";
	$conf->{mail_data}{body}    = get_current_state($conf);
	
	# Send the email.
	send_email($conf);
	
	copy_new_to_old($conf);
	
	return(0);
}

# This gathers up all the data in the 'new' hash and formats it for an email.
sub get_current_state
{
	my ($conf) = @_;
	my $body = "";
	
	
	# Clustat data
	$body = "
Cluster node's monitor program has started.

Current State:

--[ Cluster Status ]--------------------------------------------------

Cluster: $conf->{data}{clustat}{new}{cluster}
Quorum:  $conf->{data}{clustat}{new}{quorum}
";
	foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{node}})
	{
		$body .= "Node:    $node - $conf->{data}{clustat}{new}{node}{$node}{status}\n";
	}
	$body .= "\n";
	foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{service}})
	{
		my $state = $conf->{data}{clustat}{new}{service}{$service}{'state'};
		my $on    = $conf->{data}{clustat}{new}{service}{$service}{on};
		my $say_service = $service;
		if ($service =~ /^service:(.*)/)
		{
			$say_service = "Service: $1";
		}
		elsif ($service =~ /^vm:(.*)/)
		{
			$say_service = "     VM: $1";
		}
		my $say_status = "$state on $on";
		if ($state ne "started")
		{
			$on =~ s/\(//;
			$on =~ s/\)//;
			$say_status = "state (last on $on)";
		}
		$body .= "$say_service\t->$say_status\n";
	}
	
	# Network/bond data.
	$body .= "
--[ Network Status ]--------------------------------------------------
";
	# Bridge
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		my $bridge_id   = $conf->{data}{network}{new}{bridge}{$dev}{id};
		my $stp_enabled = $conf->{data}{network}{new}{bridge}{$dev}{stp};
		my $interfaces  = $conf->{data}{network}{new}{bridge}{$dev}{interfaces};
		my $mac         = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		my $say_stp = "STP disabled";
		if ($stp_enabled =~ /yes/i)
		{
			$say_stp = "STP enabled";
		}
		my $interface0 = "";
		my @interfaces;
		if ($interfaces)
		{
			foreach my $iface (split/, /, $interfaces)
			{
				if ($interface0 eq "")
				{
					$interface0 = $iface;
				}
				else
				{
					push @interfaces, $iface;
				}
			}
		}
		my $say_iface_mac  = "";
		my $iface_count    = @interfaces;
		my $say_interface0 = "\\- $interface0";
		if ($interface0)
		{
			$say_iface_mac = $conf->{data}{network}{new}{dev}{$interface0}{hwaddr};
			if ($iface_count > 0)
			{
				$say_interface0 = "|- $interface0, MAC: $say_iface_mac";
			}
		}
		else
		{
			$say_interface0 = "\\- No connections";
		}
		$body .= "
Bridge: $dev, MAC: $mac, $say_stp
        $say_interface0
";
		foreach (my $i=0; $i<$iface_count; $i++)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; i: [$i], iface_count: [$iface_count], interface: [$interfaces[$i]]\n");
			$say_iface_mac = $conf->{data}{network}{new}{dev}{$interfaces[$i]}{hwaddr};
			my $say_iface = "|- $interfaces[$i], MAC: $say_iface_mac\n";
			if ($i == ($iface_count - 1))
			{
				$say_iface = "\\- $interfaces[$i], MAC: $say_iface_mac\n";
			}
			$body .= "        $say_iface";
		}
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		my $say_out = "Internet-Facing Network";
		if ($dev =~ /bond0/i)
		{
			$say_out = "Back-Channel Network"
		}
		elsif ($dev =~ /bond1/i)
		{
			$say_out = "Storage Network"
		}
		my $first_slave       = $conf->{data}{network}{new}{bond}{$dev}{first_slave};
		my $active_slave      = $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		
		my $first_mac         = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{real_mac};
		my $first_mii_status  = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{mii_status};
		my $first_fail_count  = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{link_failure_count};
		my $first_speed       = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{speed};
		my $first_duplex      = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{duplex};
		
		my $second_slave      = $conf->{data}{network}{new}{bond}{$dev}{second_slave};
		my $second_mac        = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{real_mac};
		my $second_mii_status = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{mii_status};
		my $second_fail_count = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{link_failure_count};
		my $second_speed      = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{speed};
		my $second_duplex     = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{duplex};
		
		my $active_mac        = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		my $slave_count       = $conf->{data}{network}{new}{bond}{$dev}{slave_count};
		my $mode              = $conf->{data}{network}{new}{bond}{$dev}{mode};
		my $primary_slave     = $conf->{data}{network}{new}{bond}{$dev}{primary}{slave};
		my $primary_reselect  = $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect};
		my $up_delay          = $conf->{data}{network}{new}{bond}{$dev}{delay}{up};
		my $mii_mon           = $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval};
		my $mii_status        = $conf->{data}{network}{new}{bond}{$dev}{mii}{status};
		my $mtu               = $conf->{data}{network}{new}{dev}{$dev}{mtu};
		
		# Draw the bond diagram
		my $say_line1 = "-+- $first_slave -+-> $say_out";
		my $say_line2 = "\\- $second_slave -/";
		if ($active_slave =~ /None/i)
		{
			# Bond is down.
			$say_line1 = "-+- $first_slave -x    *Link to $say_out lost!*";
			$say_line2 = "\\- $second_slave -x";
		}
		elsif ($active_slave eq $primary_slave)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; Secondary slave: [$second_slave], mii status: [$second_mii_status]\n");
			if ($second_mii_status =~ /down/i)
			{
				$say_line2 = "\\- $second_slave -x";
			}
		}
		elsif ($active_slave eq $second_slave)
		{
			$say_line1 = "-+- $first_slave -\\";
			$say_line2 = "\\- $second_slave -+-> $say_out";
			if ($first_mii_status =~ /down/i)
			{
				$say_line1 = "-+- $first_slave -x";
			}
		}
		
		# Prepare other details
		my $say_reselect        = "On Failure";
		my $say_reselect_policy = "";
		if (($primary_reselect =~ /none/i) || ($primary_reselect =~ /failure/i))
		{
			$say_reselect = "Reselect on failure";
		}
		elsif ($primary_reselect =~ /always/i)
		{
			if ($up_delay eq "0")
			{
				$say_reselect = "Primary always, without delay";
			}
			else
			{
				$say_reselect = "Primary always, after ${up_delay} seconds";
			}
		}
		elsif ($primary_reselect =~ /better/i)
		{
			if ($up_delay eq "0")
			{
				$say_reselect = "Whichever is faster, without delay";
			}
			else
			{
				$say_reselect = "Whichever is faster, after ${up_delay} seconds";
			}
		}
		my $say_link_check = "Rely on driver notification";
		if (($mii_mon =~ /^\d+$/) && ($mii_mon > 0))
		{
			$say_link_check = "Every $mii_mon ms";
		}
		
		# Sort out the interface details
		my $say_first_link_state  = "--";
		my $say_second_link_state = "--";
		my $say_first_duplex      = "";
		my $say_second_duplex     = "";
		
		#record($conf, "$THIS_FILE ".__LINE__."; first MII status: [$first_mii_status], second MII status: [$second_mii_status]\n");
		# First interface
		if ($first_mii_status =~ /up/i)
		{
			$say_first_link_state = "Up";
			if ($first_duplex)
			{
				if ($first_duplex =~ /full/i)
				{
					$say_first_duplex = "FD";
				}
				else
				{
					$say_first_duplex = "HD";
				}
			}
		}
		elsif ($first_mii_status =~ /down/i)
		{
			$say_first_link_state = "Down";
			$first_speed          = "--";
		}
		else
		{
			$say_first_link_state = "--";
		}
		
		# Second interface
		if ($second_mii_status =~ /up/i)
		{
			$say_second_link_state = "Up";
			if ($second_duplex)
			{
				if ($second_duplex =~ /full/i)
				{
					$say_second_duplex = "FD";
				}
				else
				{
					$say_second_duplex = "HD";
				}
			}
		}
		elsif ($second_mii_status =~ /down/i)
		{
			$say_second_link_state = "Down";
			$second_speed          = "--";
			$say_second_duplex     = "";
		}
		else
		{
			$say_second_link_state  = "--";
		}
		
		my $say_first_speed   = "$first_speed $say_first_duplex";
		my $say_second_speed  = "$second_speed $say_second_duplex";
		my $pad_length        = 17;
		$first_fail_count     = sprintf("%-${pad_length}s", $first_fail_count);
		$say_first_speed      = sprintf("%-${pad_length}s", $say_first_speed);
		$say_first_link_state = sprintf("%-${pad_length}s", $say_first_link_state);
		
		$body .= "
Bond: $dev $say_line1
             $say_line2
      
      Active Slave: $active_slave using MAC: $active_mac
      Prefer Slave: $primary_slave
      Reselect:     $say_reselect
      Link Check:   $say_link_check
      MTU Size:     $mtu Bytes

      Slaves:           $first_slave         |       $second_slave
                   ------------------+------------------
        Link:      $say_first_link_state | $say_second_link_state
        Speed:     $say_first_speed | $say_second_speed
        MAC:       $first_mac | $second_mac
        Failures:  $first_fail_count | $second_fail_count
                   ------------------+------------------
";
	}
	
# 	print "Email body:
# ===========================================================
# $body
# ===========================================================
# ";

	# TODO: Report on interfaces not in a bond.
# 	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
# 	{
# 		next if $dev =~ /bond/i;
# 		$conf->{data}{network}{new}{dev}{$dev}{hwaddr};
# 		$conf->{data}{network}{new}{dev}{$dev}{'state'};
# 		$conf->{data}{network}{new}{dev}{$dev}{mtu};
# 		$conf->{data}{network}{new}{dev}{$dev}{metric};
# 		$conf->{data}{network}{new}{dev}{$dev}{ip_address};
# 		$conf->{data}{network}{new}{dev}{$dev}{ipv6_address};
# 		$conf->{data}{network}{new}{dev}{$dev}{netmask};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{packets};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{errors};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{dropped};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{overruns};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{frame};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{packets};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{errors};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{dropped};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{overruns};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{carrier};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{'bytes'};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{'bytes'};
# 		$conf->{data}{network}{new}{dev}{$dev}{hwaddr};
# 	}
	
	return($body);
}

# This cycles through the 'new' and 'old' hashes, looking for changes. If
# anything has changed, it will send an email.
sub compare_new_and_old
{
	my ($conf) = @_;
	
	# TODO: Watch for records that vanished and are not in the 'new' record
	#       but is in the 'old' record.
	my $changes = "";
	
	# Check clustat for changes.
	$conf->{data}{clustat}{old}{cluster} = "--" if not defined $conf->{data}{clustat}{old}{cluster};
	$conf->{data}{clustat}{new}{cluster} = "--" if not defined $conf->{data}{clustat}{new}{cluster};
	if ($conf->{data}{clustat}{old}{cluster} ne $conf->{data}{clustat}{new}{cluster})
	{
		# Cluster name changed.
		$changes .= "Cluster name change!\n";
		$changes .= "  $conf->{data}{clustat}{old}{cluster}\t-> $conf->{data}{clustat}{new}{cluster}\n";
	}
	$conf->{data}{clustat}{old}{quorum} = "--" if not defined $conf->{data}{clustat}{old}{quorum};
	$conf->{data}{clustat}{new}{quorum} = "--" if not defined $conf->{data}{clustat}{new}{quorum};
	if ($conf->{data}{clustat}{old}{quorum} ne $conf->{data}{clustat}{new}{cluster})
	{
		# Quorum status changed.
		$changes .= "Quorum state change!\n";
		$changes .= "  $conf->{data}{clustat}{old}{quorum}\t-> $conf->{data}{clustat}{new}{quorum}\n";
	}
	foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{node}})
	{
		$conf->{data}{clustat}{old}{node}{$node}{status} = "--" if not defined $conf->{data}{clustat}{old}{node}{$node}{status};
		$conf->{data}{clustat}{new}{node}{$node}{status} = "--" if not defined $conf->{data}{clustat}{new}{node}{$node}{status};
		if ($conf->{data}{clustat}{old}{node}{$node}{status} ne $conf->{data}{clustat}{new}{node}{$node}{status})
		{
			$changes .= "Node $node; State change!\n";
			$changes .= "  $conf->{data}{clustat}{old}{node}{$node}{status}\t-> $conf->{data}{clustat}{new}{node}{$node}{status}\n";
		}
	}
	foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{service}})
	{
		$conf->{data}{clustat}{old}{service}{$service}{'state'} = "--" if not defined $conf->{data}{clustat}{old}{service}{$service}{'state'};
		$conf->{data}{clustat}{new}{service}{$service}{'state'} = "--" if not defined $conf->{data}{clustat}{new}{service}{$service}{'state'};
		$conf->{data}{clustat}{old}{service}{$service}{on}      = "--" if not defined $conf->{data}{clustat}{old}{service}{$service}{on};
		$conf->{data}{clustat}{new}{service}{$service}{on}      = "--" if not defined $conf->{data}{clustat}{new}{service}{$service}{on};
		if (($conf->{data}{clustat}{old}{service}{$service}{'state'} ne $conf->{data}{clustat}{new}{service}{$service}{'state'}) ||
		    ($conf->{data}{clustat}{new}{service}{$service}{on}      ne $conf->{data}{clustat}{new}{service}{$service}{on}))
		{
			my $say_service = "";
			if ($service =~ /service:(.*)/i)
			{
				$say_service = "Service $1; State change!";
			}
			elsif ($service =~ /vm:(.*)/i)
			{
				$say_service = "VM $1; State change!";
			}
			$changes .= "$say_service\n";
			$changes .= "  $conf->{data}{clustat}{old}{service}{$service}{'state'}\t-> $conf->{data}{clustat}{new}{service}{$service}{'state'}\n";
			$changes .= "  $conf->{data}{clustat}{new}{service}{$service}{on}\t-> $conf->{data}{clustat}{new}{service}{$service}{on}\n";
		}
	}
	
# =============================================================================
	# Check for changes in the network.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		### NOTE: I don't care about the bridge ID at this point.
		#$conf->{data}{network}{old}{bridge}{$dev}{id} = "--" if not exists $conf->{data}{network}{old}{bridge}{$dev}{id};
		#$conf->{data}{network}{new}{bridge}{$dev}{id} = "--" if not exists $conf->{data}{network}{new}{bridge}{$dev}{id};
		#if ($conf->{data}{network}{old}{bridge}{$dev}{id} ne $conf->{data}{network}{new}{bridge}{$dev}{id})
		#{
		#	$changes .= "Bridge ID changed!\n";
		#	$changes .= "  $conf->{data}{network}{old}{bridge}{$dev}{id}\t-> $conf->{data}{network}{new}{bridge}{$dev}{id}\n";
		#}
		
		$conf->{data}{network}{old}{bridge}{$dev}{stp} = "--" if not exists $conf->{data}{network}{old}{bridge}{$dev}{stp};
		$conf->{data}{network}{new}{bridge}{$dev}{stp} = "--" if not exists $conf->{data}{network}{new}{bridge}{$dev}{stp};
		if ($conf->{data}{network}{old}{bridge}{$dev}{stp} ne $conf->{data}{network}{new}{bridge}{$dev}{stp})
		{
			$changes .= "Bridge Spanning Tree Protocol changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bridge}{$dev}{stp}\t-> $conf->{data}{network}{new}{bridge}{$dev}{stp}\n";
		}

		$conf->{data}{network}{old}{dev}{$dev}{hwaddr} = "--" if not exists $conf->{data}{network}{old}{dev}{$dev}{hwaddr};
		$conf->{data}{network}{new}{dev}{$dev}{hwaddr} = "--" if not exists $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		if ($conf->{data}{network}{old}{dev}{$dev}{hwaddr} ne $conf->{data}{network}{new}{dev}{$dev}{hwaddr})
		{
			$changes .= "Bridge $dev; MAC address has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{hwaddr}\t-> $conf->{data}{network}{new}{dev}{$dev}{hwaddr}\n";
		}
		
		# I don't watch for changes of interfaces on the bridge because
		# they change with the coming and goind of the bonds or VM's
		# vnetX devices, which will trigger their own email changes.
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		my $say_out = "Internet-Facing Network";
		if ($dev =~ /bond0/i)
		{
			$say_out = "Back-Channel Network"
		}
		elsif ($dev =~ /bond1/i)
		{
			$say_out = "Storage Network"
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mode} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mode};
		$conf->{data}{network}{new}{bond}{$dev}{mode} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mode};
		if ($conf->{data}{network}{old}{bond}{$dev}{mode} ne $conf->{data}{network}{new}{bond}{$dev}{mode})
		{
			$changes .= "Bond $dev ($say_out); Mode has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mode}\t-> $conf->{data}{network}{new}{bond}{$dev}{mode}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{primary}{slave} = "" if not exists $conf->{data}{network}{old}{bond}{$dev}{primary}{slave};
		$conf->{data}{network}{new}{bond}{$dev}{primary}{slave} = "" if not exists $conf->{data}{network}{new}{bond}{$dev}{primary}{slave};
		if ($conf->{data}{network}{old}{bond}{$dev}{primary}{slave} ne $conf->{data}{network}{new}{bond}{$dev}{primary}{slave})
		{
			$changes .= "Bond $dev ($say_out); primary slave has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{primary}{slave}\t-> $conf->{data}{network}{new}{bond}{$dev}{primary}{slave}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{primary}{reselect} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{primary}{reselect};
		$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect};
		if ($conf->{data}{network}{old}{bond}{$dev}{primary}{reselect} ne $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect})
		{
			$changes .= "Bond $dev ($say_out); primary reselect policy has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{primary}{reselect}\t-> $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{delay}{up} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{delay}{up};
		$conf->{data}{network}{new}{bond}{$dev}{delay}{up} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{delay}{up};
		if ($conf->{data}{network}{old}{bond}{$dev}{delay}{up} ne $conf->{data}{network}{new}{bond}{$dev}{delay}{up})
		{
			$changes .= "Bond $dev ($say_out); Primary reselect delay has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{delay}{up}\t-> $conf->{data}{network}{new}{bond}{$dev}{delay}{up}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval};
		$conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval};
		if ($conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval} ne $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval})
		{
			$changes .= "Bond $dev ($say_out); Link check internal has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval}\t-> $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mii}{status} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mii}{status};
		$conf->{data}{network}{new}{bond}{$dev}{mii}{status} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mii}{status};
		if ($conf->{data}{network}{old}{bond}{$dev}{mii}{status} ne $conf->{data}{network}{new}{bond}{$dev}{mii}{status})
		{
			$changes .= "Bond $dev ($say_out); Link status has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mii}{status}\t-> $conf->{data}{network}{new}{bond}{$dev}{mii}{status}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{mtu} = "--" if not exists $conf->{data}{network}{old}{dev}{$dev}{mtu};
		$conf->{data}{network}{new}{dev}{$dev}{mtu} = "--" if not exists $conf->{data}{network}{new}{dev}{$dev}{mtu};
		if ($conf->{data}{network}{old}{dev}{$dev}{mtu} ne $conf->{data}{network}{new}{dev}{$dev}{mtu})
		{
			$changes .= "Bond $dev ($say_out); Maximum Transmition Unit (MTU) size has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{mtu} Bytes\t-> $conf->{data}{network}{new}{dev}{$dev}{mtu} Bytes\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{active_slave} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{active_slave};
		$conf->{data}{network}{new}{bond}{$dev}{active_slave} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		if ($conf->{data}{network}{old}{bond}{$dev}{active_slave} ne $conf->{data}{network}{new}{bond}{$dev}{active_slave})
		{
			$changes .= "Bond $dev ($say_out); Active slave interface has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{active_slave}\t-> $conf->{data}{network}{new}{bond}{$dev}{active_slave}\n";
		}
		
		# Now the slaves
		my $first_slave  = $conf->{data}{network}{new}{bond}{$dev}{first_slave}  ? $conf->{data}{network}{new}{bond}{$dev}{first_slave}  : "";
		my $second_slave = $conf->{data}{network}{new}{bond}{$dev}{second_slave} ? $conf->{data}{network}{new}{bond}{$dev}{second_slave} : "";
		my $active_slave = $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		
		my $first = 1;
		foreach my $slave ($first_slave, $second_slave)
		{
			my $say_position = $first ? "First" : "Second";
			if ($slave)
			{
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac})
				{
					# lulwut?
					$changes .= "Bond $dev ($say_out); $say_position slave ${slave}'s MAC address has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status})
				{
					$changes .= "Bond $dev ($say_out); $say_position slave ${slave}'s link status has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count})
				{
					$changes .= "Bond $dev ($say_out); $say_position slave ${slave}'s link failure count has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed}  = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed}  = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed})
				{
					$changes .= "Bond $dev ($say_out); $say_position slave ${slave}'s link speed has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex})
				{
					$changes .= "Bond $dev ($say_out); $say_position slave ${slave}'s link duplex has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex}\n";
				}
			}
			else
			{
				$changes .= "Bond $dev ($say_out); has lost it's ".lc($say_position)." slave interface!\n";
			}
			$first = 0;
		}
	}
	
	# TODO: Check for interfaces that are not in a bond.
	# Now for base devices.
# 	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
# 	{
# 		next if $dev =~ /bond/i;
# 		$conf->{data}{network}{new}{dev}{$dev}{hwaddr};
# 		$conf->{data}{network}{new}{dev}{$dev}{'state'};
# 		$conf->{data}{network}{new}{dev}{$dev}{mtu};
# 		$conf->{data}{network}{new}{dev}{$dev}{metric};
# 		$conf->{data}{network}{new}{dev}{$dev}{ip_address};
# 		$conf->{data}{network}{new}{dev}{$dev}{ipv6_address};
# 		$conf->{data}{network}{new}{dev}{$dev}{netmask};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{packets};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{errors};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{dropped};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{overruns};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{frame};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{packets};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{errors};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{dropped};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{overruns};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{carrier};
# 		$conf->{data}{network}{new}{dev}{$dev}{rx}{'bytes'};
# 		$conf->{data}{network}{new}{dev}{$dev}{tx}{'bytes'};
# 		$conf->{data}{network}{new}{dev}{$dev}{hwaddr};
# 	}
	
	# Send an email and record the new values if there are changes.
	if ($changes)
	{
		$conf->{mail_data}{subject} = "State Change!";
		$conf->{mail_data}{body}    = "
Changes have been detected in the cluster. If you anticipated this
change then there is no reason for concern. If this change was 
unexpected, please feel free to contact support.

----------------------------------------------------------------------
$changes
";
		send_email($conf);
		copy_new_to_old($conf);
	}
	
	return(0);
}

# This takes all the values in the 'new' hash and copies them to the 'old'
# hash.
sub copy_new_to_old
{
	my ($conf) = @_;
	
	# TODO: Delete the entire set of 'old' hashes. Will simply clearing the hash reference free the memory or do I need to actually delete the hash reference?
	# Clustat stuff.
	$conf->{data}{clustat}{old} = {};
	$conf->{data}{clustat}{old}{cluster} = $conf->{data}{clustat}{new}{cluster};
	$conf->{data}{clustat}{old}{quorum}  = $conf->{data}{clustat}{new}{cluster};
	foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{node}})
	{
		$conf->{data}{clustat}{old}{node}{$node}{status} = $conf->{data}{clustat}{new}{node}{$node}{status};
	}
	foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{service}})
	{
		$conf->{data}{clustat}{old}{service}{$service}{'state'} = $conf->{data}{clustat}{new}{service}{$service}{'state'};
		$conf->{data}{clustat}{old}{service}{$service}{on}      = $conf->{data}{clustat}{new}{service}{$service}{on};
	}
	
	# Bridge
	$conf->{data}{network}{old} = {};
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		$conf->{data}{network}{old}{bridge}{$dev}{id}         = $conf->{data}{network}{new}{bridge}{$dev}{id};
		$conf->{data}{network}{old}{bridge}{$dev}{stp}        = $conf->{data}{network}{new}{bridge}{$dev}{stp};
		$conf->{data}{network}{old}{bridge}{$dev}{interfaces} = $conf->{data}{network}{new}{bridge}{$dev}{interfaces};
		$conf->{data}{network}{old}{dev}{$dev}{hwaddr}        = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		$conf->{data}{network}{old}{dev}{$dev}{mtu}                    = $conf->{data}{network}{new}{dev}{$dev}{mtu};
		$conf->{data}{network}{old}{bond}{$dev}{mode}                  = $conf->{data}{network}{new}{bond}{$dev}{mode};
		$conf->{data}{network}{old}{bond}{$dev}{primary}{slave}        = $conf->{data}{network}{new}{bond}{$dev}{primary}{slave};
		$conf->{data}{network}{old}{bond}{$dev}{primary}{reselect}     = $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect};
		$conf->{data}{network}{old}{bond}{$dev}{delay}{up}             = $conf->{data}{network}{new}{bond}{$dev}{delay}{up};
		$conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval} = $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval};
		$conf->{data}{network}{old}{bond}{$dev}{mii}{status}           = $conf->{data}{network}{new}{bond}{$dev}{mii}{status};
		$conf->{data}{network}{old}{bond}{$dev}{active_slave}          = $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		# TODO: This probably misses links that are lost by ifdown (leaving the old record behind)
		foreach my $slave (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}{$dev}{slave}})
		{
			$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac}           = $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac};
			$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status}         = $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status};
			$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count} = $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count};
			$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed}              = $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed};
			$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex}             = $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex};
		}
	}
	
	return(0);
}

# Send am email.
sub send_email
{
	my ($conf) = @_;
	
	# If the password is in a file, read it.
	if ($conf->{smtp}{password} =~ /^file:(.*)/)
	{
		my $file = $1;
		my $sc = "$file";
		#record($conf, "$THIS_FILE ".__LINE__."; Reading: [$sc]\n");
		my $fh = IO::Handle->new();
		open ($fh, "<$sc") or die "Failed to read: [$sc]\n";
		while(<$fh>)
		{
			chomp;
			$conf->{smtp}{password} = $_;
			last;
		}
		$fh->close();
	}
	
	$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - $conf->{mail_data}{subject}";
	$conf->{mail_data}{body}    .= $conf->{mail_data}{body_suffix};
	my $transport = Email::Sender::Transport::SMTP::TLS->new(
		host		=>	$conf->{smtp}{server},
		port		=>	$conf->{smtp}{port},
		username	=>	$conf->{smtp}{username},
		password	=>	$conf->{smtp}{password},
		helo		=>	$conf->{smtp}{helo_domain},
	);

	my $message = Email::Simple->create(
		header	=> [
			From	=>	$conf->{smtp}{username},
			To	=>	$conf->{mail_data}{to},
			Subject	=>	$conf->{mail_data}{subject},
		],
		body	=>	$conf->{mail_data}{body},
	);
	
	try {
		sendmail($message, { transport => $transport });
	} catch {
		die "Error sending email: $_";
	};
	
	#record($conf, "$THIS_FILE ".__LINE__."; Sent: [$conf->{mail_data}{subject}], body: [$conf->{mail_data}{body}] to: [$conf->{mail_data}{to}]\n");
	$conf->{mail_data}{subject} = "";
	$conf->{mail_data}{body}    = "";
	
	return(0);
}

# Record a message to the log file.
sub record
{
	my ($conf, $message)=@_;

	my $fh = $conf->{handles}{'log'};
	if (not $fh)
	{
		$fh = IO::Handle->new();
		$conf->{handles}{'log'} = $fh;
		open ($fh, ">>$conf->{path}{'log'}") or die "Can't write to: [$conf->{path}{'log'}], error: $!\n";
		print $fh "======\nOpening AN!CDB - Cluster Dasboard log at ".time."\n";
	}
	print $fh $message;
	$message =~ s/^.*; //;
	print $message;
	
	return (0);
}

# This sets the host name of this machine based on the output of `uname -n`
sub get_hostname
{
	my ($conf)=@_;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{uname} -n 2>&1 |";
	open ($fh, $sc) or die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		$conf->{node}{me}{short_name} = $_;
	}
	$fh->close();
	
	$conf->{node}{me}{long_name}  =  $conf->{node}{me}{short_name};
	$conf->{node}{me}{short_name} =~ s/\..*//;
	#record($conf, "$THIS_FILE ".__LINE__."; local host name: [$conf->{node}{me}{long_name}], short: [$conf->{node}{me}{short_name}]\n");
	
	return (0); 
}

# This causes the script to exit if another instance is already running.
sub avoid_duplicate_run
{
	my ($conf)=@_;
	
	my $my_pid     = $$;
	my $short_name =  $THIS_FILE;
	   $short_name =~ s/\..*//;
	#record($conf, "$THIS_FILE ".__LINE__."; Checking if $short_name is already running. I have pid: [$my_pid]...\n");
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{pgrep} $short_name";
	open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		#record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
		my $prog_name = $conf->{misc}{program_name};
		if ($line ne $my_pid)
		{
			my $ps_pid = $line;
			#record ($conf, "$THIS_FILE ".__LINE__."; Found another instance of $short_name with pid: [$ps_pid]. Exiting...\n");
			$fh->close();
			exit (1);
		}
	}
	$fh->close();
	
	return (0);
}

1;
