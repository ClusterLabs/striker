#!/usr/bin/perl
#
# AN!CDB - Alteeve's Niche! Cluster Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and
# able to take full liability for it's use. The authors take care to prevent
# unexpected side effects when using this program. However, no software is
# perfect and bugs may exist which could lead to hangs or crashes in the
# program, in your cluster and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.com/w/2-Node_Red_Hat_KVM_Cluster_Tutorial
#
# This program's source code and updates are available on Github:
# - https://github.com/digimer/an-cdb
#
# Author;
# Alteeve's Niche!  -  https://alteeve.com
# Madison Kelly     -  mkelly@alteeve.ca
# 

use strict;
use warnings;
use IO::Handle;

# Email stuff
use Email::Sender::Simple qw(sendmail);
use Email::Sender::Transport::SMTP::TLS;
use Try::Tiny;
use Email::Simple::Creator;

# Setup for UTF-8 mode.
binmode STDOUT, ":utf8:";
$ENV{'PERL_UNICODE'}=1;
our $THIS_FILE = "an-cm.lib";

# This sends an email to the distrobution list with the current state of the
# node and the cluster.
sub send_state_email
{
	my ($conf) = @_;
	
	$conf->{mail_data}{subject} = "Current Node Status";
	$conf->{mail_data}{body}    = get_current_state($conf);
	
	# Send the email.
	send_email($conf);
	
	
	return(0);
}

# This checks to see what hardware I need to monitor, reads in the initial
# values and makes no attempt to compare previous scans.
sub read_states
{
	my ($conf) = @_;
	
	check_clustat($conf);
	check_network($conf);
	check_storage($conf);
	check_host($conf);
	check_ups($conf);
	check_vms($conf);
	
	return(0);
}

# This reads the list of running and defined servers. 

# This checks to see if apcupsd is installed and, if so, reads it's config
# file(s), then calls apcaccess using the data found within.
sub check_ups
{
	my ($conf) = @_;
	
	delete $conf->{data}{ups}{new};
	$conf->{data}{ups}{new}{config_files} = [];
	$conf->{data}{raw}{apcupsd}{status}   = "";
	
	# When this drops below the powerdown threshold, the node will shutdown.
	$conf->{data}{ups}{new}{best_case}{time_left} = 0;
	$conf->{data}{ups}{new}{best_case}{status}    = "";
	$conf->{data}{ups}{new}{ups_count}            = 0;
	
	### TODO: This only supports multi-UPS setups.
	if (-x "/etc/init.d/apcupsd")
	{
		my $fh = IO::Handle->new();
		my $sc = "/etc/init.d/apcupsd status";
		open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
		while (<$fh>)
		{
			chomp;
			my $line=$_;
			$conf->{data}{raw}{apcupsd}{status} .= "$line\n";
			#record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
			if ($line =~ /(apcupsd.*conf) \(pid  \d+\) is running/)
			{
				push @{$conf->{data}{ups}{new}{config_files}}, $1;
			}
		}
		$fh->close();
	}
	else
	{
		$conf->{'system'}{ups_available} = 0;
		return(0);
	}
	
	# Now parse the config files for the running daemons.
	foreach my $config (sort {$a cmp $b} @{$conf->{data}{ups}{new}{config_files}})
	{
		#record($conf, "$THIS_FILE ".__LINE__."; config: [$config]\n");
		next if not $config;
		my $config_name = ($config =~ /apcupsd-(.*)$/)[0];
		my $config_file = "/etc/apcupsd/$config_name";
		my $ups_name    = "";
		my $device_line = "";
		my $nisip       = "0.0.0.0";
		my $nisport     = 3551;
		#record($conf, "$THIS_FILE ".__LINE__."; Reading config file: [$config_file]\n");
		my $fh = IO::Handle->new();
		my $sc = "$config_file";
		open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
		while (<$fh>)
		{
			chomp;
			my $line=$_;
			$conf->{data}{raw}{apcupsd}{conf}{$config_name} .= "$line\n";
			$line =~ s/^#.*//;
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;
			next if not $line;
			#record($conf, "$THIS_FILE ".__LINE__."; UPS: [$config_name], line: [$line]\n");
			if ($line =~ /UPSNAME (.*)$/)
			{
				$ups_name = $1;
			}
			if ($line =~ /DEVICE (.*)$/)
			{
				$device_line = $1;
			}
			if ($line =~ /NISIP (.*)$/)
			{
				$nisip = $1;
			}
			if ($line =~ /NISPORT (.*)$/)
			{
				$nisport = $1;
			}
		}
		$fh->close();
		$conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{config_file} = $config_file;
		$conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{device_line} = $device_line;
		$conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{nisip}       = $nisip;
		$conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{nisport}     = $nisport;
		$conf->{data}{ups}{new}{ups_count}++;
	}
	
	# Before I parse each entry, I want to setup a few variables for
	# recording the "best case" for a couple values. These are used for
	# triggering events, like powering down, when the "best case" value is
	# outside tolerances.
	
	# Now call and record the apcupsd info for each UPS
	foreach my $config_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{config}})
	{
		#record($conf, "$THIS_FILE ".__LINE__."; config name: [$config_name]\n");
		foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{config}{$config_name}{ups_name}})
		{
			my $nisip       = $conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{nisip};
			my $nisport     = $conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{nisport};
			my $device_line = $conf->{data}{ups}{new}{config}{$config_name}{ups_name}{$ups_name}{device_line};
			my ($ups_ip, $ups_port, $ups_vendor, $ups_community) = (split /:/, $device_line, 4);
			$nisip          = "localhost" if $nisip eq "0.0.0.0";
			#record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name], NISIP: [$nisip], NISPORT: [$nisport], IP: [$ups_ip], port: [$ups_port], vendor: [$ups_vendor], snmp community: [$ups_community]\n");
			
			my $fh = IO::Handle->new();
			my $sc = "$conf->{path}{apcaccess} status $nisip:$nisport";
			open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
			while (<$fh>)
			{
				chomp;
				my $line=$_;
				$conf->{data}{raw}{apcupsd}{ups_name}{$ups_name}{status} .= "$line\n";
				#record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name], line: [$line]\n");
				my ($variable, $value) = (split /:/, $line, 2);
				$variable =~ s/^\s+//;
				$variable =~ s/\s+$//;
				$value    =~ s/^\s+//;
				$value    =~ s/\s+$//;
				
				# Some values always change and have little value
				next if ($variable =~ /DATE/i);
				next if ($variable =~ /END APC/i);
				
				#record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name], variable: [$variable]\t-> value: [$value]\n");
				$conf->{data}{ups}{new}{ups_name}{$ups_name}{$variable} = $value;
				
				if ($variable =~ /TIMELEFT/)
				{
					#record($conf, "$THIS_FILE ".__LINE__."; $ups_name - Checking if the time left: [$value] in greater than previously seen.\n");
					my $minutes_left = ($value =~ /^(\d+\.*\d*)/)[0];
					#record($conf, "$THIS_FILE ".__LINE__."; $ups_name - Minutes left: [$minutes_left].\n");
					my $seconds_left = ($minutes_left * 60);
					#record($conf, "$THIS_FILE ".__LINE__."; $ups_name - Was: [$conf->{data}{ups}{new}{best_case}{time_left}], this UPS: [$seconds_left seconds] ($minutes_left minutes, raw: [$value])\n");
					if ($seconds_left > $conf->{data}{ups}{new}{best_case}{time_left})
					{
						$conf->{data}{ups}{new}{best_case}{time_left} = $seconds_left;
						#record($conf, "$THIS_FILE ".__LINE__."; $ups_name - It is higher, now: [$conf->{data}{ups}{new}{best_case}{time_left}]\n");
					}
				}
				if (($variable =~ /STATUS/i) && ($value =~ /ONLINE/i))
				{
					# This will block the power down, 
					# regardless of the battery state.
					$conf->{data}{ups}{new}{best_case}{status} = "ONLINE";
				}
			}
			$fh->close();
		}
	}
	$conf->{'system'}{ups_available} = 0 if $conf->{data}{ups}{new}{ups_count} < 1;
	
	return(0);
}

# This checks the local machine's power and temperature.
sub check_host
{
	my ($conf) = @_;
	
	delete $conf->{data}{ipmi}{new};
	$conf->{data}{raw}{ipmitool}{sdr} = "";
	my $adapter   = "";
	my $vd        = "";
	my $target_id = "";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{ipmitool} sdr";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		if ($line =~ /Could not open device at/i)
		{
			$conf->{'system'}{ipmi_available} = 0;
			last;
		}
		$conf->{data}{raw}{ipmitool}{sdr} .= $line."\n";
		my ($var, $val, $state) = (split/\|/, $line);
		next if not $var;
		next if not $val;
		next if not $state;
		
		# Clean whitespaces off.
		$var   =~ s/^\s+//;
		$var   =~ s/\s+$//;
		$val   =~ s/^\s+//;
		$val   =~ s/\s+$//;
		$state =~ s/^\s+//;
		$state =~ s/\s+$//;
		
		# I need a hash-safe key
		my $key =  lc($var);
		   $key =~ s/ /_/g;
		   $key =~ s/-/_/g;
		   $key =~ s/'/_/g;
		
		if ($val =~ /0x\d\d/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; Checking variable name: [$var] with the value: [$val]\n");
			# A state of '0x08' means a failed PSU.
			if (($var =~ /PSU/i) && ($val eq "0x08"))
			{
				$state = "bad!";
			}
			
			if (($var =~ /Total Power/i) or 
			    ($var =~ /Total Power Out/i) or 
			    ($var =~ /Power Level/i) or 
			    ($var =~ /PSU\d/i) or 
			    ($var =~ /FAN PSU\d/i) or 
			    ($var =~ /CPU\d/i) or 
			    ($var =~ /FAN\d+ SYS/i) or 
			    ($var =~ /Ambient/i))
			{
				#record($conf, "$THIS_FILE ".__LINE__."; Changing variable name: [$var] to: [$var State]\n");
				$key .= "_state";
				$var .= " State";
				# 'Power Level' has two entries with 0xYY values.
				if (exists $conf->{data}{ipmi}{new}{$key})
				{
					$key .= "_2";
					$var .= " 2";
				}
			}
		}
		$conf->{translate}{ipmi}{$key} = $var;
		$conf->{data}{ipmi}{new}{$key} = "$state,$val";
		#record($conf, "$THIS_FILE ".__LINE__."; $key\t| $var |\t$conf->{data}{ipmi}{new}{$key}\n");
		#record($conf, "$THIS_FILE ".__LINE__."; key: [$key], \ttranslation [$var], \tvalue: [$conf->{data}{ipmi}{new}{$key}]\n");
	}
	$fh->close();
	
	return(0);
}

# This checks the storage when an LSI RAID controller was found.
sub check_storage_lsi
{
	my ($conf) = @_;
	
	# Get all the controller details.
	delete $conf->{data}{lsi}{new};
	get_storage_lsi_adapter_info($conf);
	get_storage_lsi_physical_disk_info($conf);
	get_storage_lsi_bbu_info($conf);
	get_storage_lsi_vd_info($conf);
	
	return(0);
}

# This checks the storage when an HP RAID controller was found.
sub check_storage_hp
{
	my ($conf) = @_;
	
	# Get all the controller details.
	delete $conf->{data}{hp}{new};
	get_storage_hp($conf);
	#get_storage_lsi_adapter_info($conf);
	#get_storage_lsi_physical_disk_info($conf);
	#get_storage_lsi_bbu_info($conf);
	#get_storage_lsi_vd_info($conf);
	
	return(0);
}

# This reads the states of an HP server, if this is one and the tools are
# installed.
sub get_storage_hp
{
	my ($conf)=@_;

	$conf->{data}{raw}{hpacucli} = "";
	my $reading   = "";
	my $array     = "";
	my $slot      = "x";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{hpacucli} ctrl all show config";
	record($conf, "$THIS_FILE ".__LINE__."; sc: [$sc]\n");
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
		$conf->{data}{raw}{hpacucli} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		
		# 
		if ($line=~/in Slot (.*?)\s+/)
		{
			$slot = $1;
		}
	}
	$fh->close();

=pod
	my $reading    = "";
	my $read       = IO::Handle->new();
	my $shell_call = "$conf->{path}{hpacucli} ctrl all show config 2>&1 |";
	#print "Calling: [$shell_call]\n";
	open ($read, $shell_call) || die "Failed to call: [$shell_call], error: $!\n";
	while (<$read>)
	{
		chomp;
		my $line=$_;
		if ($line =~ /hpacucli is running/)
		{
			# There is another instance running... 
			send_email($conf, "Problem with: [$conf->{path}{hpacucli}]", "The: [$conf->{path}{hpacucli}] is reporting that another instance is running. Exiting.", 1);
			exit (1);
		}
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if not $line;
		$conf->{misc}{storage_data}.=$line."\n";
	}
	$read->close();
	
	my $array="";
	my $slot="x";
	foreach my $line (split/\n/, $conf->{misc}{storage_data})
	{
		#print __LINE__."; line: [$line]\n";
		if ($line=~/in Slot (.*?)\s+/)
		{
			$slot=$1;
		}
		if ($line=~/Smart Array (.*?) in Slot $slot\s+\(sn: (.*?)\)/)
		{
			$conf->{hp}{hba}{slot}{$slot}{model}=$1;
			$conf->{hp}{hba}{slot}{$slot}{serial}=$2;
		}
		if ($line=~/array (.*?) \((.*?), Unused Space: (.*?)\)/)
		{
			$array=$1;
			$conf->{hp}{hba}{slot}{$slot}{array}{$array}{interface}=$2;
			$conf->{hp}{hba}{slot}{$slot}{array}{$array}{free_space}=$3;
		}
		if ($line=~/SEP \(Vendor ID (.*?), Model\s+(.*?)\) (.*?) \(WWID: (.*?)\)/)
		{
			# I have no idea what this is...
			# SEP \(Vendor ID PMCSIERA, Model  SRC 8x6G\) 250 \(WWID: 500143801465928F\)
		}
		if ($array)
		{
# 			print "line: [$line]\n";
			if ($line=~/logicaldrive (.*?) \((.*?), RAID (.*?), (.*?)\)/)
			{
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{logical_drive}=$1;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{capacity}=$2;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{raid_level}=$3;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{status}=$4;
				print __LINE__."; parsed; logical_drive: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{logical_drive}], capacity: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{capacity}], RAID level: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{raid_level}], status: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{status}]\n";
			}
			if ($line=~/physicaldrive .*? \(port (.*?):box (.*?):bay (.*?), (.*?), (.*?), (.*?)\)/)
			{
				my $port=$1;
				my $box=$2;
				my $bay=$3;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{interface}=$4;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{capacity}=$5;
				$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{status}=$6;
				print __LINE__."; Parsed; port: [$port], box: [$box], bay: [$bay], interface: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{interface}], capacity: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{capacity}], status: [$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{status}]\n";
			}
		}
	}
	
	# Record the results.
	foreach my $slot (sort {$a cmp $b} keys %{$conf->{hp}{hba}{slot}})
	{
		foreach my $array (sort {$a cmp $b} keys %{$conf->{hp}{hba}{slot}{$slot}{array}})
		{
			# Cleanliness.
			my $logical_drive=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{logical_drive};
			my $capacity=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{capacity};
			my $raid_level=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{raid_level};
			my $status=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{status};
# 			print __LINE__."; Array; Slot: [$slot], Array: [$array] -> logical drive: [$logical_drive], capacity: [$capacity], RAID level: [$raid_level], status: [$status]\n";
# 			$conf->{misc}{storage_data}.="Array; Slot: [$slot], Array: [$array] -> logical drive: [$logical_drive], capacity: [$capacity], RAID level: [$raid_level], status: [$status]\n";
			$conf->{array}{"$slot:$array"}{new}{logical_drive}=$logical_drive;
			$conf->{array}{"$slot:$array"}{new}{capacity}=$capacity;
			$conf->{array}{"$slot:$array"}{new}{raid_level}=$raid_level;
			$conf->{array}{"$slot:$array"}{new}{status}=$status;
			foreach my $port (sort {$a cmp $b} keys %{$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}})
			{
				foreach my $box (sort {$a cmp $b} keys %{$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}})
				{
					foreach my $bay (sort {$a cmp $b} keys %{$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}})
					{
# 						my $interface=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{interface};
						my $capacity=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{capacity};
						my $status=$conf->{hp}{hba}{slot}{$slot}{array}{$array}{port}{$port}{box}{$box}{bay}{$bay}{status};
# 						$conf->{array}{"$slot:$array"}{new}{disk}{"$port:$box:$bay"}{interface}=$interface;
						$conf->{array}{"$slot:$array"}{new}{disk}{"$port:$box:$bay"}{capacity}=$capacity;
						$conf->{array}{"$slot:$array"}{new}{disk}{"$port:$box:$bay"}{status}=$status;
# 						print __LINE__."; array::${slot}:${array}::new::disk::${port}:${box}:${bay}::capacity: [".$conf->{array}{"$slot:$array"}{new}{disk}{"$port:$box:$bay"}{capacity}."]\n";
# 						print __LINE__."; array::${slot}:${array}::new::disk::${port}:${box}:${bay}::status:   [".$conf->{array}{"$slot:$array"}{new}{disk}{"$port:$box:$bay"}{status}."]\n";
					}
				}
			}
		}
	}
=cut

	return(0);
}

# This reads in the Virtual Drive info
sub get_storage_lsi_vd_info
{
	my ($conf) = @_;
	
	# LD == Logical Disk, VD = Virtual Disk... Seems to be the same thing.
	$conf->{data}{raw}{MegaCli64}{LDInfo} = "";
	my $adapter   = "";
	my $vd        = "";
	my $target_id = "";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} LDInfo Lall aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{LDInfo} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		
		if ($line =~ /Adapter\s*(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		if ($line =~ /Virtual Drive: (\d+) \(Target Id: (\d+)\)/i)
		{
			$vd        = $1;
			$target_id = $2;
			next;
		}
		next if $adapter   !~ /^\d/;
		next if $vd        !~ /^\d/;
		next if $target_id !~ /^\d/;
		
		if ($line =~ /^(Name)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{name} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{name} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{name}]\n");
			next;
		}
		if ($line =~ /^(RAID Level)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{raid_level} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; raid_level: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level}]\n");
			next;
		}
		if ($line =~ /^(Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size}]\n");
			next;
		}
		if ($line =~ /^(Parity Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{parity_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; parity_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size}]\n");
			next;
		}
		if ($line =~ /^(State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{'state'} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{'state'} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{'state'}]\n");
			next;
		}
		if ($line =~ /^(Strip Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{strip_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size}]\n");
			next;
		}
		if ($line =~ /^(Number Of Drives)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{number_of_drives} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; number_of_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives}]\n");
			next;
		}
		if ($line =~ /^(Span Depth)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{span_depth} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{span_depth} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; span_depth: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{span_depth}]\n");
			next;
		}
		if ($line =~ /^(Default Cache Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{default_cache_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_cache_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; default_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_cache_policy}]\n");
			next;
		}
		if ($line =~ /^(Current Cache Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{current_cache_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy}]\n");
			next;
		}
		if ($line =~ /^(Default Access Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{default_access_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_access_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; default_access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_access_policy}]\n");
			next;
		}
		if ($line =~ /^(Current Access Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{current_access_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_access_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current_access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_access_policy}]\n");
			next;
		}
		if ($line =~ /^(Disk Cache Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disk_cache_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{disk_cache_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disk_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{disk_cache_policy}]\n");
			next;
		}
		if ($line =~ /^(Encryption Type)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{encryption_type} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{encryption_type} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; encryption_type: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{encryption_type}]\n");
			next;
		}
		if ($line =~ /^(Bad Blocks Exist)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{bad_blocks_exist} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{bad_blocks_exist} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; bad_blocks_exist: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{bad_blocks_exist}]\n");
			next;
		}
		if ($line =~ /^(Default Power Savings Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{default_power_savings_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_power_savings_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; default_power_savings_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{default_power_savings_policy}]\n");
			next;
		}
		if ($line =~ /^(Current Power Savings Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{current_power_savings_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_power_savings_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current_power_savings_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_power_savings_policy}]\n");
			next;
		}
		if ($line =~ /^(Can spin up in 1 minute)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{can_spin_up_in_1_minute} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{can_spin_up_in_1_minute} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; can_spin_up_in_1_minute: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{can_spin_up_in_1_minute}]\n");
			next;
		}
		if ($line =~ /^(LD has drives that support T10 power conditions)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{ld_has_drives_that_support_t10_power_conditions} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{ld_has_drives_that_support_t10_power_conditions} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; ld_has_drives_that_support_t10_power_conditions: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{ld_has_drives_that_support_t10_power_conditions}]\n");
			next;
		}
		if ($line =~ /^(LD's IO profile supports MAX power savings with cached writes)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{lds_io_profile_supports_max_power_savings_with_cached_writes} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{lds_io_profile_supports_max_power_savings_with_cached_writes} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; lds_io_profile_supports_max_power_savings_with_cached_writes: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{lds_io_profile_supports_max_power_savings_with_cached_writes}]\n");
			next;
		}
		if ($line =~ /^(Is VD Cached)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{is_vd_cached} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{is_vd_cached} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; is_vd_cached: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{is_vd_cached}]\n");
			next;
		}
		next if $line =~ /^=+$/;
		next if not $line;
		#record($conf, "$THIS_FILE ".__LINE__."; Unmatched line while parsing LSI VD information! line: [$line]\n");
	}
	$fh->close();
	
	return(0);
}

# This reads in the battery backup information from an LSI controller.
sub get_storage_lsi_bbu_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{AdpBbuCmd} = "";
	my $adapter            = "";
	my $in_base            = 1;
	my $in_bbu_fw_status   = 0;
	my $in_bbu_cap_info    = 0;
	my $in_bbu_design_info = 0;
	my $in_bbu_properties  = 0;
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} AdpBbuCmd aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{AdpBbuCmd} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		
		if ($line =~ /^BBU status for Adapter\s*:\s*(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		if ($line =~ /^BBU Firmware Status\s*:/i)
		{
			$in_base            = 0;
			$in_bbu_fw_status   = 1;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /^BBU Capacity Info for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 1;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /^BBU Design Info for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 0;
			$in_bbu_design_info = 1;
			$in_bbu_properties  = 0;
			next;
		}
		if ($line =~ /^BBU Properties for Adapter\s*:\s*(\d+)/i)
		{
			$adapter            = $1;
			$in_base            = 0;
			$in_bbu_fw_status   = 0;
			$in_bbu_cap_info    = 0;
			$in_bbu_design_info = 0;
			$in_bbu_properties  = 1;
			next;
		}
		next if $adapter !~ /^\d/;
		
		# Base stats
		if ($line =~ /^(BatteryType)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{batterytype} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; batterytype: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype}]\n");
			next;
		}
		if ($line =~ /^(Voltage)\s*:\s*(.*)/i)
		{
			if ($in_base)
			{
				# Base
				$conf->{translate}{lsi}{base_voltage} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Base voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage}]\n");
				next;
			}
			elsif ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{translate}{lsi}{fw_status_voltage} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_voltage} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; FW Status voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_voltage}]\n");
				next;
			}
		}
		if ($line =~ /^(Current)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{current} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{current} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{current}]\n");
			next;
		}
		if ($line =~ /^(Temperature)\s*:\s*(.*)/i)
		{
			if ($in_base)
			{
				# Base
				$conf->{translate}{lsi}{base_temperature} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Base temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature}]\n");
				next;
			}
			elsif ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{translate}{lsi}{fw_status_temperature} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_temperature} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; FW Status temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_temperature}]\n");
				next;
			}
		}
		if ($line =~ /^(Battery State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_state} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_state} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_state}]\n");
			next;
		}
		
		# BBU Firmware Status
		if ($line =~ /^(Charging Status)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{charging_status} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_status} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; charging_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_status}]\n");
			next;
		}
		# Voltage and Temperature are recorded up in the Base section.
		if ($line =~ /^(Learn Cycle Requested)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{learn_cycle_requested} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_requested} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_requested: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_requested}]\n");
			next;
		}
		if ($line =~ /^(Learn Cycle Active)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{learn_cycle_active} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_active} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_active: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_active}]\n");
			next;
		}
		if ($line =~ /^(Learn Cycle Status)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{learn_cycle_status} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_status} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_status}]\n");
			next;
		}
		if ($line =~ /^(Learn Cycle Timeout)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{learn_cycle_timeout} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_timeout} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; learn_cycle_timeout: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_cycle_timeout}]\n");
			next;
		}
		if ($line =~ /^(I2c Errors Detected)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{i2c_errors_detected} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{i2c_errors_detected} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; i2c_errors_detected: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{i2c_errors_detected}]\n");
			next;
		}
		if ($line =~ /^(Battery Pack Missing)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_pack_missing} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_pack_missing} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_pack_missing: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_pack_missing}]\n");
			next;
		}
		if ($line =~ /^(Battery Replacement required)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_replacement_required} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_replacement_required} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_replacement_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_replacement_required}]\n");
			next;
		}
		if ($line =~ /^(Remaining Capacity Low)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{remaining_capacity_low} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; remaining_capacity_low: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low}]\n");
			next;
		}
		if ($line =~ /^(Periodic Learn Required)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{periodic_learn_required} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{periodic_learn_required} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; periodic_learn_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{periodic_learn_required}]\n");
			next;
		}
		if ($line =~ /^(Transparent Learn)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{transparent_learn} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; transparent_learn: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn}]\n");
			next;
		}
		if ($line =~ /^(No space to cache offload)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{no_space_to_cache_offload} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{no_space_to_cache_offload} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; no_space_to_cache_offload: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{no_space_to_cache_offload}]\n");
			next;
		}
		if ($line =~ /^(Pack is about to fail & should be replaced)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pack_is_about_to_fail_and_should_be_replaced} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pack_is_about_to_fail_and_should_be_replaced: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced}]\n");
			next;
		}
		if ($line =~ /^(Cache Offload premium feature required)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cache_offload_premium_feature_required} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cache_offload_premium_feature_required} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cache_offload_premium_feature_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cache_offload_premium_feature_required}]\n");
			next;
		}
		if ($line =~ /^(Module microcode update required)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{module_microcode_update_required} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{module_microcode_update_required} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; module_microcode_update_required: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{module_microcode_update_required}]\n");
			next;
		}
		if ($line =~ /^(BBU GasGauge Status)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{bbu_gasgauge_status} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{bbu_gasgauge_status} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; bbu_gasgauge_status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{bbu_gasgauge_status}]\n");
			next;
		}
		if ($line =~ /^(Pack energy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pack_energy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_energy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pack_energy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_energy}]\n");
			next;
		}
		if ($line =~ /^(Capacitance)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{capacitance} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{capacitance} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; capacitance: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{capacitance}]\n");
			next;
		}
		if ($line =~ /^(Remaining reserve space)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{remaining_reserve_space} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_reserve_space} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; remaining_reserve_space: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_reserve_space}]\n");
			next;
		}
		if ($line =~ /^(Relative State of Charge)\s*:\s*(.*)/i)
		{
			if ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{translate}{lsi}{fw_status_relative_state_of_charge} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; FW Status relative_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge}]\n");
				next;
			}
			elsif ($in_bbu_cap_info)
			{
				# Capacity Info
				$conf->{translate}{lsi}{cap_info_relative_state_of_charge} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_relative_state_of_charge} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Capacity Info relative_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_relative_state_of_charge}]\n");
				next;
			}
		}
		if ($line =~ /^(Charger System State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{charger_system_state} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_state} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; charger_system_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_state}]\n");
			next;
		}
		if ($line =~ /^(Charger System Ctrl)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{charger_system_ctrl} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_ctrl} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; charger_system_ctrl: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charger_system_ctrl}]\n");
			next;
		}
		if ($line =~ /^(Charging current)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{charging_current} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_current} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; charging_current: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{charging_current}]\n");
			next;
		}
		if ($line =~ /^(Absolute state of charge)\s*:\s*(.*)/i)
		{
			if ($in_bbu_fw_status)
			{
				# FW Status
				$conf->{translate}{lsi}{fw_status_absolute_state_of_charge} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_absolute_state_of_charge} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; FW Status absolute_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_absolute_state_of_charge}]\n");
				next;
			}
			elsif ($in_bbu_cap_info)
			{
				# Capacity Info
				$conf->{translate}{lsi}{cap_info_absolute_state_of_charge} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Capacity Info absolute_state_of_charge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge}]\n");
				next;
			}
		}
		if ($line =~ /^(Max Error)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_error} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{max_error} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{max_error}]\n");
			next;
		}
		if ($line =~ /^(Battery backup charge time)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_backup_charge_time} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_backup_charge_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time}]\n");
			next;
		}
		
		# BBU Capacity Info
		# Relative and Absolute state of charge are recorded up in the
		# FW Status section.
		if ($line =~ /^(Remaining Capacity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{remaining_capacity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; remaining_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity}]\n");
			next;
		}
		if ($line =~ /^(Full Charge Capacity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{full_charge_capacity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; full_charge_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity}]\n");
			next;
		}
		if ($line =~ /^(Run time to empty)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{run_time_to_empty} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{run_time_to_empty} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; run_time_to_empty: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{run_time_to_empty}]\n");
			next;
		}
		if ($line =~ /^(Average time to empty)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{average_time_to_empty} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{average_time_to_empty} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; average_time_to_empty: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{average_time_to_empty}]\n");
			next;
		}
		if ($line =~ /^(Estimated Time to full recharge)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{estimated_time_to_full_recharge} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{estimated_time_to_full_recharge} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; estimated_time_to_full_recharge: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{estimated_time_to_full_recharge}]\n");
			next;
		}
		if ($line =~ /^(Cycle Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cycle_count} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cycle_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count}]\n");
			next;
		}
		
		# BBU Design Info
		if ($line =~ /^(Date of Manufacture)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{date_of_manufacture} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{date_of_manufacture} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; date_of_manufacture: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{date_of_manufacture}]\n");
			next;
		}
		if ($line =~ /^(Design Capacity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{design_capacity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; design_capacity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity}]\n");
			next;
		}
		if ($line =~ /^(Design Voltage)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{design_voltage} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; design_voltage: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}]\n");
			next;
		}
		if ($line =~ /^(Specification Info)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{specification_info} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{specification_info} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; specification_info: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{specification_info}]\n");
			next;
		}
		if ($line =~ /^(Serial Number)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{serial_number} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; serial_number: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number}]\n");
			next;
		}
		if ($line =~ /^(Pack Stat Configuration)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pack_stat_configuration} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_stat_configuration} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pack_stat_configuration: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_stat_configuration}]\n");
			next;
		}
		if ($line =~ /^(Manufacture Name)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{manufacture_name} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; manufacture_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name}]\n");
			next;
		}
		if ($line =~ /^(Device Name)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_name} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_name} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_name}]\n");
			next;
		}
		if ($line =~ /^(Device Chemistry)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_chemistry} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_chemistry} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_chemistry: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{device_chemistry}]\n");
			next;
		}
		if ($line =~ /^(Battery FRU)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_fru} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_fru} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_fru: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_fru}]\n");
			next;
		}
		if ($line =~ /^(TMM FRU)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{tmm_fru} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{tmm_fru} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; tmm_fru: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{tmm_fru}]\n");
			next;
		}
		if ($line =~ /^(Transparent Learn)\s*=\s*(.*)/i)
		{
			$conf->{translate}{lsi}{transparent_learn} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; transparent_learn: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{transparent_learn}]\n");
			next;
		}
		if ($line =~ /^(App Data)\s*=\s*(.*)/i)
		{
			$conf->{translate}{lsi}{app_data} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{app_data} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; app_data: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{app_data}]\n");
			next;
		}
		
		# BBU Properties
		if ($line =~ /^(Auto Learn Period)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{auto_learn_period} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_period} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; auto_learn_period: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_period}]\n");
			next;
		}
		if ($line =~ /^(Next Learn time)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{next_learn_time} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{next_learn_time} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; next_learn_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{next_learn_time}]\n");
			next;
		}
		if ($line =~ /^(Learn Delay Interval)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{learn_delay_interval} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_delay_interval} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; learn_delay_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{learn_delay_interval}]\n");
			next;
		}
		if ($line =~ /^(Auto-Learn Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{auto_learn_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; auto_learn_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{auto_learn_mode}]\n");
			next;
		}
		next if $line =~ /^=+$/;
		next if not $line;
		#record($conf, "$THIS_FILE ".__LINE__."; Unmatched line while parsing LSI BBU information! line: [$line]\n");
	}
	$fh->close();
	
	return(0);
}

# This reads in the physical disk information from an LSI controller.
sub get_storage_lsi_physical_disk_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{PDList}        = "";
	my $adapter                                  = "";
	
	my $enclosure_device_id                      = "";
	my $slot_number                              = "";
	my $diskgroup                                = "";
	my $span                                     = "";
	my $arm                                      = "";
	my $enclosure_position                       = "";
	my $device_id                                = "";
	my $wwn                                      = "";
	my $sequence_number                          = "";
	my $media_error_count                        = "";
	my $other_error_count                        = "";
	my $predictive_failure_count                 = "";
	my $last_predictive_failure_event_seq_number = "";
	my $pd_type                                  = "";
	my $raw_size_string                          = "";
	my $raw_size_hex_sectors                     = "";
	my $non_coerced_size_string                  = "";
	my $non_coerced_size_hex_sectors             = "";
	my $coerced_size_string                      = "";
	my $coerced_size_hex_sectors                 = "";
	my $firmware_state                           = "";
	my $device_firmware_level                    = "";
	my $shield_counter                           = "";
	my $successful_diagnostics_completion_on     = "";
	my $sas_address_0                            = "";
	my $sas_address_1                            = "";
	my $connected_port_number                    = "";
	my $inquiry_data                             = "";
	my $fde_capable                              = "";
	my $fde_enable                               = "";
	my $secured                                  = "";
	my $locked                                   = "";
	my $needs_ekm_attention                      = "";
	my $foreign_state                            = "";
	my $device_speed                             = "";
	my $link_speed                               = "";
	my $media_type                               = "";
	my $drive_temperature                        = "";  # This needs thresholds
	my $pi_eligibility                           = "";
	my $drive_is_formatted_for_pi_information    = "";
	my $pi                                       = "";
	my $in_port                                  = "";
	my $port_status                              = [];
	my $ports_linkspeed                          = [];
	my $drive_has_flagged_a_smart_alert          = "";
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} PDList aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{PDList} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if ($line =~ /^===/);
		#record($conf, "$THIS_FILE ".__LINE__."; PDList line: [$line]\n");
		
		if ($line =~ /^Adapter\s#(\d+)/i)
		{
			$adapter = $1;
			next;
		}
		next if $adapter !~ /^\d/;
		
		### When I see the SMART line, I know I am at the end of the
		### given drive and can commit the data.
		if ($line =~ /^(Enclosure Device ID)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enclosure_device_id} = $1;
			$enclosure_device_id = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enclosure_device_id: [$enclosure_device_id]\n");
			next;
		}
		if ($line =~ /^(Slot Number)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{slot_number} = $1;
			$slot_number = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; slot_number: [$slot_number]\n");
			next;
		}
		if ($line =~ /^(Drive's postion)\s*:\s*DiskGroup\s*:\s*(\d+),\s*Span\s*:\s*(\d+),\s*Arm\s*:\s*(\d+)/i)
		{
			$conf->{translate}{lsi}{diskgroup} = $1;
			$diskgroup = $2;
			$span      = $3;
			$arm       = $4;
			#record($conf, "$THIS_FILE ".__LINE__."; drives_postion; disk group: [$diskgroup], span: [$span], arm: [$arm]\n");
			next;
		}
		if ($line =~ /^(Enclosure position)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enclosure_position} = $1;
			$enclosure_position = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enclosure_position: [$enclosure_position]\n");
			next;
		}
		if ($line =~ /^(Device Id)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_id} = $1;
			$device_id = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_id: [$device_id]\n");
			next;
		}
		if ($line =~ /^(WWN)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{wwn} = $1;
			$wwn = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; wwn: [$wwn]\n");
			next;
		}
		if ($line =~ /^(Sequence Number)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{sequence_number} = $1;
			$sequence_number = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; sequence_number: [$sequence_number]\n");
			next;
		}
		if ($line =~ /^(Media Error Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{media_error_count} = $1;
			$media_error_count = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; media_error_count: [$media_error_count]\n");
			next;
		}
		if ($line =~ /^(Other Error Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{other_error_count} = $1;
			$other_error_count = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; other_error_count: [$other_error_count]\n");
			next;
		}
		if ($line =~ /^(Predictive Failure Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{predictive_failure_count} = $1;
			$predictive_failure_count = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; predictive_failure_count: [$predictive_failure_count]\n");
			next;
		}
		if ($line =~ /^(Last Predictive Failure Event Seq Number)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{last_predictive_failure_event_seq_number} = $1;
			$last_predictive_failure_event_seq_number = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; last_predictive_failure_event_seq_number: [$last_predictive_failure_event_seq_number]\n");
			next;
		}
		if ($line =~ /^(PD Type)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pd_type} = $1;
			$pd_type = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pd_type: [$pd_type]\n");
			next;
		}
		if ($line =~ /^(Raw Size)\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$conf->{translate}{lsi}{raw_size_string     } = $1;
			$raw_size_string      = $2;
			$raw_size_hex_sectors = $3;
			#record($conf, "$THIS_FILE ".__LINE__."; raw_size_string: [$raw_size_string], sectors (in hex): [$raw_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /^(Non Coerced Size)\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$conf->{translate}{lsi}{non_coerced_size_string     } = $1;
			$non_coerced_size_string      = $2;
			$non_coerced_size_hex_sectors = $3;
			#record($conf, "$THIS_FILE ".__LINE__."; non_coerced_size_string: [$non_coerced_size_string], sectors (in hex): [$non_coerced_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /^(Coerced Size)\s*:\s*(.*?\s*.*?)\s*\[(.*?)\]/i)
		{
			$conf->{translate}{lsi}{coerced_size_string     } = $1;
			$coerced_size_string      = $2;
			$coerced_size_hex_sectors = $3;
			#record($conf, "$THIS_FILE ".__LINE__."; coerced_size_string: [$coerced_size_string], sectors (in hex): [$coerced_size_hex_sectors]\n");
			next;
		}
		if ($line =~ /^(Firmware state)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{firmware_state} = $1;
			$firmware_state = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; firmware_state: [$firmware_state]\n");
			next;
		}
		if ($line =~ /^(Device Firmware Level)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_firmware_level} = $1;
			$device_firmware_level = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_firmware_level: [$device_firmware_level]\n");
			next;
		}
		if ($line =~ /^(Shield Counter)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{shield_counter} = $1;
			$shield_counter = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; shield_counter: [$shield_counter]\n");
			next;
		}
		if ($line =~ /^(Successful diagnostics completion on)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{successful_diagnostics_completion_on} = $1;
			$successful_diagnostics_completion_on = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; successful_diagnostics_completion_on: [$successful_diagnostics_completion_on]\n");
			next;
		}
		if ($line =~ /^(SAS Address)\(0\)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{sas_address_0} = $1;
			$sas_address_0 = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; sas_address_0: [$sas_address_0]\n");
			next;
		}
		if ($line =~ /^(SAS Address)\(1\)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{sas_address_1} = $1;
			$sas_address_1 = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; sas_address_1: [$sas_address_1]\n");
			next;
		}
		if ($line =~ /^(Connected Port Number)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{connected_port_number} = $1;
			$connected_port_number = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; connected_port_number: [$connected_port_number]\n");
			next;
		}
		if ($line =~ /^(Inquiry Data)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{inquiry_data} = $1;
			$inquiry_data = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; inquiry_data: [$inquiry_data]\n");
			next;
		}
		if ($line =~ /^(FDE Capable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{fde_capable} = $1;
			$fde_capable = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; fde_capable: [$fde_capable]\n");
			next;
		}
		if ($line =~ /^(FDE Enable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{fde_enable} = $1;
			$fde_enable = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; fde_enable: [$fde_enable]\n");
			next;
		}
		if ($line =~ /^(Secured)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{secured} = $1;
			$secured = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; secured: [$secured]\n");
			next;
		}
		if ($line =~ /^(Locked)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{locked} = $1;
			$locked = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; locked: [$locked]\n");
			next;
		}
		if ($line =~ /^(Needs EKM Attention)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{needs_ekm_attention} = $1;
			$needs_ekm_attention = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; needs_ekm_attention: [$needs_ekm_attention]\n");
			next;
		}
		if ($line =~ /^(Foreign State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{foreign_state} = $1;
			$foreign_state = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; foreign_state: [$foreign_state]\n");
			next;
		}
		if ($line =~ /^(Device Speed)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_speed} = $1;
			$device_speed = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_speed: [$device_speed]\n");
			next;
		}
		if ($line =~ /^(Link Speed)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{link_speed} = $1;
			$link_speed = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; link_speed: [$link_speed]\n");
			next;
		}
		if ($line =~ /^(Media Type)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{media_type} = $1;
			$media_type = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; media_type: [$media_type]\n");
			next;
		}
		if ($line =~ /^(Drive Temperature)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{drive_temperature} = $1;
			$drive_temperature = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; drive_temperature: [$drive_temperature]\n");
			next;
		}
		if ($line =~ /^(PI Eligibility)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pi_eligibility} = $1;
			$pi_eligibility = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pi_eligibility: [$pi_eligibility]\n");
			next;
		}
		if ($line =~ /^(Drive is formatted for PI information)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{drive_is_formatted_for_pi_information} = $1;
			$drive_is_formatted_for_pi_information = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; drive_is_formatted_for_pi_information: [$drive_is_formatted_for_pi_information]\n");
			next;
		}
		if ($line =~ /^(PI)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pi} = $1;
			$pi = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pi: [$pi]\n");
			next;
		}
		
		# Pull out the per-port values.
		if ($line =~ /^Port-(\d+)\s*:/i)
		{
			$in_port = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; in_port: [$in_port]\n");
			next;
		}
		if ($line =~ /^(Port status)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{port_status} = $1;
			$port_status->[$in_port] = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; port_status->[$in_port]: [$port_status->[$in_port]]\n");
			next;
		}
		if ($line =~ /^(Port's Linkspeed)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{ports_linkspeed} = $1;
			$ports_linkspeed->[$in_port] = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; ports_linkspeed->[$in_port]: [$ports_linkspeed->[$in_port]]\n");
			next;
		}
		if ($line =~ /^(Drive has flagged a S.M.A.R.T alert)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{drive_has_flagged_a_smart_alert} = $1;
			$drive_has_flagged_a_smart_alert = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; drive_has_flagged_a_smart_alert: [$drive_has_flagged_a_smart_alert]\n");
			
			# Record all the values and reset the variables.
			my $slot = sprintf("%.2d", $slot_number);
			#record($conf, "$THIS_FILE ".__LINE__."; slot: [$slot]\n");
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{enclosure_device_id}                      = $enclosure_device_id                      if defined $enclosure_device_id;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{diskgroup}                                = $diskgroup                                if defined $diskgroup;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{span}                                     = $span                                     if defined $span;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{arm}                                      = $arm                                      if defined $arm;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{enclosure_position}                       = $enclosure_position                       if defined $enclosure_position;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_id}                                = $device_id                                if defined $device_id;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{wwn}                                      = $wwn                                      if defined $wwn;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sequence_number}                          = $sequence_number                          if defined $sequence_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_error_count}                        = $media_error_count                        if defined $media_error_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{other_error_count}                        = $other_error_count                        if defined $other_error_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{predictive_failure_count}                 = $predictive_failure_count                 if defined $predictive_failure_count;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{last_predictive_failure_event_seq_number} = $last_predictive_failure_event_seq_number if defined $last_predictive_failure_event_seq_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pd_type}                                  = $pd_type                                  if defined $pd_type;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{raw_size_string}                          = $raw_size_string                          if defined $raw_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{raw_size_hex_sectors}                     = $raw_size_hex_sectors                     if defined $raw_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{non_coerced_size_string}                  = $non_coerced_size_string                  if defined $non_coerced_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{non_coerced_size_hex_sectors}             = $non_coerced_size_hex_sectors             if defined $non_coerced_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_string}                      = $coerced_size_string                      if defined $coerced_size_string;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_hex_sectors}                 = $coerced_size_hex_sectors                 if defined $coerced_size_hex_sectors;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{firmware_state}                           = $firmware_state                           if defined $firmware_state;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_firmware_level}                    = $device_firmware_level                    if defined $device_firmware_level;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{shield_counter}                           = $shield_counter                           if defined $shield_counter;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{successful_diagnostics_completion_on}     = $successful_diagnostics_completion_on     if defined $successful_diagnostics_completion_on;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sas_address_0}                            = $sas_address_0                            if defined $sas_address_0;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sas_address_1}                            = $sas_address_1                            if defined $sas_address_1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{connected_port_number}                    = $connected_port_number                    if defined $connected_port_number;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{inquiry_data}                             = $inquiry_data                             if defined $inquiry_data;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{fde_capable}                              = $fde_capable                              if defined $fde_capable;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{fde_enable}                               = $fde_enable                               if defined $fde_enable;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{secured}                                  = $secured                                  if defined $secured;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{locked}                                   = $locked                                   if defined $locked;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{needs_ekm_attention}                      = $needs_ekm_attention                      if defined $needs_ekm_attention;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{foreign_state}                            = $foreign_state                            if defined $foreign_state;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_speed}                             = $device_speed                             if defined $device_speed;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{link_speed}                               = $link_speed                               if defined $link_speed;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_type}                               = $media_type                               if defined $media_type;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_temperature}                        = $drive_temperature                        if defined $drive_temperature;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pi_eligibility}                           = $pi_eligibility                           if defined $pi_eligibility;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_is_formatted_for_pi_information}    = $drive_is_formatted_for_pi_information    if defined $drive_is_formatted_for_pi_information;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pi}                                       = $pi                                       if defined $pi;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_has_flagged_a_smart_alert}          = $drive_has_flagged_a_smart_alert          if defined $drive_has_flagged_a_smart_alert;
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], enclosure_device_id:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{enclosure_device_id}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], diskgroup:                                [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{diskgroup}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], span:                                     [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{span}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], arm:                                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{arm}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], enclosure_position:                       [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{enclosure_position}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], device_id:                                [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_id}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], wwn:                                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{wwn}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], sequence_number:                          [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sequence_number}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], media_error_count:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_error_count}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], other_error_count:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{other_error_count}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], predictive_failure_count:                 [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{predictive_failure_count}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], last_predictive_failure_event_seq_number: [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{last_predictive_failure_event_seq_number}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], pd_type:                                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pd_type}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], raw_size_string:                          [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{raw_size_string}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], raw_size_hex_sectors:                     [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{raw_size_hex_sectors}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], non_coerced_size_string:                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{non_coerced_size_string}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], non_coerced_size_hex_sectors:             [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{non_coerced_size_hex_sectors}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], coerced_size_string:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_string}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], coerced_size_hex_sectors:                 [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_hex_sectors}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], firmware_state:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{firmware_state}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], device_firmware_level:                    [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_firmware_level}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], shield_counter:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{shield_counter}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], successful_diagnostics_completion_on:     [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{successful_diagnostics_completion_on}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], sas_address_0:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sas_address_0}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], sas_address_1:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{sas_address_1}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], connected_port_number:                    [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{connected_port_number}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], inquiry_data:                             [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{inquiry_data}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], fde_capable:                              [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{fde_capable}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], fde_enable:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{fde_enable}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], secured:                                  [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{secured}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], locked:                                   [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{locked}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], needs_ekm_attention:                      [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{needs_ekm_attention}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], foreign_state:                            [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{foreign_state}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], device_speed:                             [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_speed}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], link_speed:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{link_speed}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], media_type:                               [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_type}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], drive_temperature:                        [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_temperature}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], pi_eligibility:                           [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pi_eligibility}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], drive_is_formatted_for_pi_information:    [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_is_formatted_for_pi_information}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], pi:                                       [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pi}]\n");
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], drive_has_flagged_a_smart_alert:          [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_has_flagged_a_smart_alert}]\n");
			for (my $i=0; $i<@{$port_status}; $i++)
			{
				$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{port_status}     = $port_status->[$i]     if defined $port_status->[$i];
				$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{ports_linkspeed} = $ports_linkspeed->[$i] if defined $ports_linkspeed->[$i];
				#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], slot: [$slot], SAS port: [$i], port status: [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{port_status}], port's link speed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{ports_linkspeed}]\n");
			}
			$enclosure_device_id                      = "";
			$slot_number                              = "";
			$diskgroup                                = "";
			$span                                     = "";
			$arm                                      = "";
			$enclosure_position                       = "";
			$device_id                                = "";
			$wwn                                      = "";
			$sequence_number                          = "";
			$media_error_count                        = "";
			$other_error_count                        = "";
			$predictive_failure_count                 = "";
			$last_predictive_failure_event_seq_number = "";
			$pd_type                                  = "";
			$raw_size_string                          = "";
			$raw_size_hex_sectors                     = "";
			$non_coerced_size_string                  = "";
			$non_coerced_size_hex_sectors             = "";
			$coerced_size_string                      = "";
			$coerced_size_hex_sectors                 = "";
			$firmware_state                           = "";
			$device_firmware_level                    = "";
			$shield_counter                           = "";
			$successful_diagnostics_completion_on     = "";
			$sas_address_0                            = "";
			$sas_address_1                            = "";
			$connected_port_number                    = "";
			$inquiry_data                             = "";
			$fde_capable                              = "";
			$fde_enable                               = "";
			$secured                                  = "";
			$locked                                   = "";
			$needs_ekm_attention                      = "";
			$foreign_state                            = "";
			$device_speed                             = "";
			$link_speed                               = "";
			$media_type                               = "";
			$drive_temperature                        = "";
			$pi_eligibility                           = "";
			$drive_is_formatted_for_pi_information    = "";
			$pi                                       = "";
			$in_port                                  = "";
			$port_status                              = [];
			$ports_linkspeed                          = [];
			$drive_has_flagged_a_smart_alert          = "";
			next;
		}
		next if $line =~ /^=+$/;
		next if not $line;
		#record($conf, "$THIS_FILE ".__LINE__."; Unmatched line while parsing LSI Physical Drive information! line: [$line]\n");
	}
	$fh->close();
	
	return(0);
}

# This calls 'AdpAllInfo aAll' and records (almost) all information from it.
sub get_storage_lsi_adapter_info
{
	my ($conf) = @_;
	
	$conf->{data}{raw}{MegaCli64}{AdpAllInfo} = "";
	my $get_pending_flash_data = 0;
	my $backend_port_count     = 0;
	my $frontend_port_count    = 0;
	my $adapter     = "";
	my $in_mfg_data = 0;
	my $in_ivif     = 0;
	my $in_piif     = 0;
	my $in_pci_info = 0;
	my $in_hw_conf  = 0;
	my $in_settings = 0;
	my $in_status   = 0;
	my $in_limits   = 0;
	my $in_dp       = 0;
	my $in_sao      = 0;
	my $in_svdo     = 0;
	my $in_spdo     = 0;
	my $in_ec       = 0;
	my $in_ci       = 0;
	my $in_ds       = 0;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{MegaCli64} AdpAllInfo aAll";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$conf->{data}{raw}{MegaCli64}{AdpAllInfo} .= $line."\n";
		$line =~ s/\t+/ /g;
		$line =~ s/\s+/ /g;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if ($line =~ /^===/);
		#record($conf, "$THIS_FILE ".__LINE__."; AdpAllInfo line: [$line]\n");
		if ($line =~ /Adapter\s#(\d+)/i)
		{
			$adapter = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter]\n");
			next;
		}
		next if $adapter !~ /^\d/;
		
		# This monster of code is used to know what section I am 
		# reading, which is needed to avoid mixing up some duplicate
		# variable names from different sections.
		if ($line =~ /^Mfg. Data/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_mfg_data\n");
			$in_mfg_data = 1;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Image Versions in Flash/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_ivif\n");
			$in_mfg_data = 0;
			$in_ivif     = 1;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Pending Images in Flash/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_piif\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 1;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^PCI Info/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_pci_info\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 1;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^HW Configuration/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_hw_conf\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 1;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		# Need to match the start to avoid confusing with 'Default 
		# Settings'.
		if ($line =~ /^Settings/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_settings\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 1;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Status/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_status\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 1;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Limitations/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_limits\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 1;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Device Present/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_dp\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 1;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Supported Adapter Operations/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_sao\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 1;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Supported VD Operations/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_svdo\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 1;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Supported PD Operations/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_spdo\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 1;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Error Counters/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_ec\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 1;
			$in_ci       = 0;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Cluster Information/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_ci\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 1;
			$in_ds       = 0;
			next;
		}
		if ($line =~ /^Default Settings/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; -=] in_ds\n");
			$in_mfg_data = 0;
			$in_ivif     = 0;
			$in_piif     = 0;
			$in_pci_info = 0;
			$in_hw_conf  = 0;
			$in_settings = 0;
			$in_status   = 0;
			$in_limits   = 0;
			$in_dp       = 0;
			$in_sao      = 0;
			$in_svdo     = 0;
			$in_spdo     = 0;
			$in_ec       = 0;
			$in_ci       = 0;
			$in_ds       = 1;
			next;
		}

		### Grab stuff that needs special handling.
		# Parse out the pending flash image data (normally "None").
		if ($in_piif)
		{
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pending_image_in_flash} = $line;
			#record($conf, "$THIS_FILE ".__LINE__."; pending_image_in_flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pending_image_in_flash}]\n");
			$in_piif = 0;
			next;
		}
		
		# Get the number of internal ports and their addresses.
		if ($line =~ /^Number of Backend Port\s*:\s*(.*)/i)
		{
			$backend_port_count = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{number_of_backend_ports} = $backend_port_count;
			#record($conf, "$THIS_FILE ".__LINE__."; number_of_backend_ports: [$backend_port_count]\n");
			next;
		}
		if ($backend_port_count > 0)
		{
			next if $line !~ /^\d/;
			#record($conf, "$THIS_FILE ".__LINE__."; number_of_backend_ports: [$backend_port_count], line: [$line]\n");
			if ($line =~ /^(\d+)\s+(.*)/)
			{
				my $port    = $1;
				my $address = $2;
				$backend_port_count--;
				if ($port !~ /^\d+$/)
				{
					die "Port undefined when trying to parse: [$line]!\n" ;
				}
				$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{address} = $address;
				#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], port: [$port], address: [$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{address}], decremented port: [$backend_port_count]\n");
				next;
			}
			elsif (not $line)
			{
				# This is a safety mechanism. It should abort
				# this section of code if something goes wrong.
				#record($conf, "$THIS_FILE ".__LINE__."; Unmatched line: [$line] with: [$backend_port_count] internal ports left to process!\n");
				$backend_port_count = 0;
				next;
			}
			else
			{
				# header or somesuch.
				#record($conf, "$THIS_FILE ".__LINE__."; Wut? [$line]\n");
				next;
			}
		}
		
		# NOTE: This is untested and written on the assumption that the
		#       structure is the same as internal/backend data.
		# Get the number of external ports and their addresses.
		if ($line =~ /^(Number of Frontend Port)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{number_of_frontend_ports} = $1;
			$frontend_port_count = $2;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{number_of_frontend_ports} = $frontend_port_count;
			next;
		}
		if ($frontend_port_count > 0)
		{
			if ($line !~ /^(\d+)\s+(.*)/)
			{
				my $port    = $1;
				my $address = $2;
				$frontend_port_count--;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{address} = $address;
				next;
			}
			elsif (not $line)
			{
				# This is a safety mechanism. It should abort
				# this section of code if something goes wrong.
				$frontend_port_count = 0;
				next;
			}
			else
			{
				# header or somesuch.
				next;
			}
		}
		
		### Grab stuff that can be pulled from simple single-line regex's.
		# Version stuff
		if ($line =~ /^(Product Name)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{product_name} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{product_name} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; product_name: [$conf->{data}{lsi}{new}{adapter}{$adapter}{product_name}]\n");
			next;
		}
		if ($line =~ /^(Serial No)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{serial_no} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_no} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; serial_no: [$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_no}]\n");
			next;
		}
		if ($line =~ /^(FW Package Build)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{fw_package_build} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_package_build} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; fw_package_build: [$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_package_build}]\n");
			next;
		}
		
		# Manufacture info
		if ($line =~ /^(Mfg. Date)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{manufacture_date} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{manufacture_date} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; mfg._date: [$conf->{data}{lsi}{new}{adapter}{$adapter}{manufacture_date}]\n");
			next;
		}
		if ($line =~ /^(Rework Date)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{rework_date} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{rework_date} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; rework_date: [$conf->{data}{lsi}{new}{adapter}{$adapter}{rework_date}]\n");
			next;
		}
		if ($line =~ /^(Revision No)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{revision_no} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{revision_no} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; revision_no: [$conf->{data}{lsi}{new}{adapter}{$adapter}{revision_no}]\n");
			next;
		}
		if ($line =~ /^(Battery FRU)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_fru} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_fru} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_fru: [$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_fru}]\n");
			next;
		}
		
		# Image version in flash
		if ($line =~ /^(Image Versions in Flash)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{image_versions_in_flash} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{image_versions_in_flash} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; image_versions_in_flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{image_versions_in_flash}]\n");
			next;
		}
		if ($line =~ /^(BIOS Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{bios_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; bios_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_version}]\n");
			next;
		}
		if ($line =~ /^(WebBIOS Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{webbios_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{webbios_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; webbios_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{webbios_version}]\n");
			next;
		}
		if ($line =~ /^(Preboot CLI Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{preboot_cli_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; preboot_cli_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_version}]\n");
			next;
		}
		if ($line =~ /^(FW Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{fw_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; fw_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{fw_version}]\n");
			next;
		}
		if ($line =~ /^(NVDATA Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{nvdata_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{nvdata_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; nvdata_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{nvdata_version}]\n");
			next;
		}
		if ($line =~ /^(Boot Block Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{boot_block_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_block_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; boot_block_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_block_version}]\n");
			next;
		}
		if ($line =~ /^(BOOT Version)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{boot_version} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_version} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; boot_version: [$conf->{data}{lsi}{new}{adapter}{$adapter}{boot_version}]\n");
			next;
		}
		
		# PCI info
		if ($line =~ /^(Controller Id)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{controller_id} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{controller_id} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; controller_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{controller_id}]\n");
			next;
		}
		if ($line =~ /^(Vendor Id)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{vendor_id} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vendor_id} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; vendor_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vendor_id}]\n");
			next;
		}
		if ($line =~ /^(Device Id)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_id} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{device_id} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_id: [$conf->{data}{lsi}{new}{adapter}{$adapter}{device_id}]\n");
			next;
		}
		if ($line =~ /^(SubVendorId)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{subvendorid} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{subvendorid} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; subvendorid: [$conf->{data}{lsi}{new}{adapter}{$adapter}{subvendorid}]\n");
			next;
		}
		if ($line =~ /^(SubDeviceId)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{subdeviceid} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{subdeviceid} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; subdeviceid: [$conf->{data}{lsi}{new}{adapter}{$adapter}{subdeviceid}]\n");
			next;
		}
		if ($line =~ /^(Host Interface)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{host_interface} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{host_interface} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; host_interface: [$conf->{data}{lsi}{new}{adapter}{$adapter}{host_interface}]\n");
			next;
		}
		if ($line =~ /^(ChipRevision)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{chiprevision} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{chiprevision} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; chiprevision: [$conf->{data}{lsi}{new}{adapter}{$adapter}{chiprevision}]\n");
			next;
		}
		
		# Frontend and backend ports refer to External and Internal
		# port counts.
		# NOTE: I only handle internal (Backend) at this time as I 
		#       don't have access to a card with external ports. The
		#       external/Frontend code is assumed to match, but it
		#       untested.
		if ($line =~ /^(Device Interface)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{device_interface} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{device_interface} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; device_interface: [$conf->{data}{lsi}{new}{adapter}{$adapter}{device_interface}]\n");
			next;
		}
		
		# Hardware configuration
		if ($line =~ /^(SAS Address)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{sas_address} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_address} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; sas_address: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_address}]\n");
			next;
		}
		if ($line =~ /^(BBU)\s*:\s*(.*)/i)
		{
			if ($in_hw_conf)
			{
				$conf->{translate}{lsi}{hw_conf_bbu} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; bbu: [$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu}]\n");
				next;
			}
			elsif ($in_sao)
			{
				$conf->{translate}{lsi}{sao_bbu} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bbu} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported adapter options bbu: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bbu}]\n");
				next;
			}
		}
		if ($line =~ /^(Alarm)\s*:\s*(.*)/i)
		{
			if ($in_hw_conf)
			{
				$conf->{translate}{lsi}{hw_conf_alarm} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_alarm} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Hardware configuration alarm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_alarm}]\n");
				next;
			}
			elsif ($in_settings)
			{
				# This is from the 'Settings' section.
				$conf->{translate}{lsi}{settings_alarm} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_alarm} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings alarm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_alarm}]\n");
				next;
			}
		}
		if ($line =~ /^(NVRAM)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{nvram} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{nvram} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; nvram: [$conf->{data}{lsi}{new}{adapter}{$adapter}{nvram}]\n");
			next;
		}
		if ($line =~ /^(Serial Debugger)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{serial_debugger} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_debugger} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; serial_debugger: [$conf->{data}{lsi}{new}{adapter}{$adapter}{serial_debugger}]\n");
			next;
		}
		if ($line =~ /^(Memory)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{memory} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; memory: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory}]\n");
			next;
		}
		if ($line =~ /^(Flash)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{flash} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{flash} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{flash}]\n");
			next;
		}
		if ($line =~ /^(Memory Size)\s*:\s*(.*)/i)
		{
			# This is recorded as 'xMB'.
			$conf->{translate}{lsi}{memory_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; memory_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_size}]\n");
			next;
		}
		if ($line =~ /^(TPM)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{tpm} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{tpm} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; tpm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{tpm}]\n");
			next;
		}
		if ($line =~ /^(On board Expander)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{on_board_expander} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{on_board_expander} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; on_board_expander: [$conf->{data}{lsi}{new}{adapter}{$adapter}{on_board_expander}]\n");
			next;
		}
		if ($line =~ /^(Upgrade Key)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{upgrade_key} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{upgrade_key} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; upgrade_key: [$conf->{data}{lsi}{new}{adapter}{$adapter}{upgrade_key}]\n");
			next;
		}
		if ($line =~ /^(Temperature sensor for ROC)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{temperature_sensor_for_roc} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_roc} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; temperature_sensor_for_roc: [$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_roc}]\n");
			next;
		}
		if ($line =~ /^(Temperature sensor for controller)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{temperature_sensor_for_controller} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_controller} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; temperature_sensor_for_controller: [$conf->{data}{lsi}{new}{adapter}{$adapter}{temperature_sensor_for_controller}]\n");
			next;
		}
		if ($line =~ /^(ROC temperature)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{roc_temperature} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{roc_temperature} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; roc_temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{roc_temperature}]\n");
			next;
		}
		
		# Settings
		# I don't read the date because it's ever-changing.
		if ($line =~ /^(Predictive Fail Poll Interval)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{predictive_fail_poll_interval} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{predictive_fail_poll_interval} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; predictive_fail_poll_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{predictive_fail_poll_interval}]\n");
			next;
		}
		if ($line =~ /^(Interrupt Throttle Active Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{interrupt_throttle_active_count} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_active_count} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; interrupt_throttle_active_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_active_count}]\n");
			next;
		}
		if ($line =~ /^(Interrupt Throttle Completion)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{interrupt_throttle_completion} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_completion} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; interrupt_throttle_completion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{interrupt_throttle_completion}]\n");
			next;
		}
		if ($line =~ /^(Rebuild Rate)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{translate}{lsi}{rebuild_rate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{rebuild_rate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; rebuild_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{rebuild_rate}]\n");
				next;
			}
			elsif ($in_sao)
			{
				# Supported adapter operations
				$conf->{translate}{lsi}{sao_rebuild_rate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_rebuild_rate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported adapter operations rebuild_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_rebuild_rate}]\n");
				next;
			}
		}
		if ($line =~ /^(PR Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pr_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pr_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_rate}]\n");
			next;
		}
		if ($line =~ /^(BGI Rate)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{translate}{lsi}{settings_bgi_rate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_bgi_rate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings bgi_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_bgi_rate}]\n");
				next;
			}
			elsif ($in_sao)
			{
				# Supported adapter operations
				$conf->{translate}{lsi}{sao_bgi_rate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bgi_rate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported adapter operations bgi_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sao_bgi_rate}]\n");
				next;
			}
		}
		if ($line =~ /^(Check Consistency Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{check_consistency_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{check_consistency_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; check_consistency_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{check_consistency_rate}]\n");
			next;
		}
		if ($line =~ /^(Reconstruction Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{reconstruction_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; reconstruction_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction_rate}]\n");
			next;
		}
		if ($line =~ /^(Cache Flush Interval)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cache_flush_interval} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_flush_interval} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cache_flush_interval: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_flush_interval}]\n");
			next;
		}
		if ($line =~ /^(Max Drives to Spinup at One Time)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_drives_to_spinup_at_one_time} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_drives_to_spinup_at_one_time} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_drives_to_spinup_at_one_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_drives_to_spinup_at_one_time}]\n");
			next;
		}
		if ($line =~ /^(Delay Among Spinup Groups)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{delay_among_spinup_groups} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_among_spinup_groups} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; delay_among_spinup_groups: [$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_among_spinup_groups}]\n");
			next;
		}
		if ($line =~ /^(Physical Drive Coercion Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{physical_drive_coercion_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_drive_coercion_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; physical_drive_coercion_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_drive_coercion_mode}]\n");
			next;
		}
		if ($line =~ /^(Cluster Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cluster_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cluster_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_mode}]\n");
			next;
		}
		# the "alarm" for Settingss is caught up in the 
		# "HW Configuration" section.
		if ($line =~ /^(Auto Rebuild)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{auto_rebuild} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_rebuild} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; auto_rebuild: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_rebuild}]\n");
			next;
		}
		if ($line =~ /^(Battery Warning)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{battery_warning} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_warning} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; battery_warning: [$conf->{data}{lsi}{new}{adapter}{$adapter}{battery_warning}]\n");
			next;
		}
		if ($line =~ /^(Ecc Bucket Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{ecc_bucket_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_size}]\n");
			next;
		}
		if ($line =~ /^(Ecc Bucket Leak Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{ecc_bucket_leak_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_leak_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_leak_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_leak_rate}]\n");
			next;
		}
		if ($line =~ /^(Restore HotSpare on Insertion)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{restore_hotspare_on_insertion} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hotspare_on_insertion} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; restore_hotspare_on_insertion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hotspare_on_insertion}]\n");
			next;
		}
		if ($line =~ /^(Expose Enclosure Devices)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{translate}{lsi}{settings_expose_enclosure_devices} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_expose_enclosure_devices} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings expose_enclosure_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_expose_enclosure_devices}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{translate}{lsi}{ds_expose_enclosure_devices} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_expose_enclosure_devices} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings expose_enclosure_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_expose_enclosure_devices}]\n");
				next;
			}
		}
		if ($line =~ /^(Maintain PD Fail History)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{translate}{lsi}{settings_maintain_pd_fail_history} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_maintain_pd_fail_history} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settingss maintain_pd_fail_history: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_maintain_pd_fail_history}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{translate}{lsi}{ds_maintain_pd_fail_history} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_maintain_pd_fail_history} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings maintain_pd_fail_history: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_maintain_pd_fail_history}]\n");
				next;
			}
		}
		if ($line =~ /^(Host Request Reordering)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{host_request_reordering} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{host_request_reordering} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; host_request_reordering: [$conf->{data}{lsi}{new}{adapter}{$adapter}{host_request_reordering}]\n");
			next;
		}
		if ($line =~ /^(Auto Detect BackPlane Enabled)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{auto_detect_backplane_enabled} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enabled} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; auto_detect_backplane_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enabled}]\n");
			next;
		}
		if ($line =~ /^(Load Balance Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{load_balance_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{load_balance_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; load_balance_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{load_balance_mode}]\n");
			next;
		}
		if ($line =~ /^(Use FDE Only)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{translate}{lsi}{settings_use_fde_only} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_use_fde_only} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings use_fde_only: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_use_fde_only}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{translate}{lsi}{ds_use_fde_only} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_use_fde_only} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings use_fde_only: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_use_fde_only}]\n");
				next;
			}
		}
		if ($line =~ /^(Security Key Assigned)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{security_key_assigned} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_assigned} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; security_key_assigned: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_assigned}]\n");
			next;
		}
		if ($line =~ /^(Security Key Failed)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{security_key_failed} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_failed} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; security_key_failed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_failed}]\n");
			next;
		}
		if ($line =~ /^(Security Key Not Backedup)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{security_key_not_backedup} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_not_backedup} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; security_key_not_backedup: [$conf->{data}{lsi}{new}{adapter}{$adapter}{security_key_not_backedup}]\n");
			next;
		}
		if ($line =~ /^(Default LD PowerSave Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{default_ld_powersave_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{default_ld_powersave_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; default_ld_powersave_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{default_ld_powersave_policy}]\n");
			next;
		}
		if ($line =~ /^(Maximum number of direct attached drives to spin up in 1 min)\s*:\s*(.*)/i)
		{
			# hash-key length win!
			$conf->{translate}{lsi}{maximum_number_of_direct_attached_drives_to_spin_up_in_1_min} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{maximum_number_of_direct_attached_drives_to_spin_up_in_1_min} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; maximum_number_of_direct_attached_drives_to_spin_up_in_1_min: [$conf->{data}{lsi}{new}{adapter}{$adapter}{maximum_number_of_direct_attached_drives_to_spin_up_in_1_min}]\n");
			next;
		}
		if ($line =~ /^(Auto Enhanced Import)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings
				$conf->{translate}{lsi}{settings_auto_enhanced_import} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_auto_enhanced_import} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings auto_enhanced_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_auto_enhanced_import}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{translate}{lsi}{ds_auto_enhanced_import} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_auto_enhanced_import} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings auto_enhanced_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_auto_enhanced_import}]\n");
				next;
			}
		}
		if ($line =~ /^(Any Offline VD Cache Preserved)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{any_offline_vd_cache_preserved} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{any_offline_vd_cache_preserved} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; any_offline_vd_cache_preserved: [$conf->{data}{lsi}{new}{adapter}{$adapter}{any_offline_vd_cache_preserved}]\n");
			next;
		}
		if ($line =~ /^(Allow Boot with Preserved Cache)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_boot_with_preserved_cache} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_boot_with_preserved_cache} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_boot_with_preserved_cache: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_boot_with_preserved_cache}]\n");
			next;
		}
		if ($line =~ /^(Disable Online Controller Reset)\s*:\s*(.*)/i)
		{
			if ($in_settings)
			{
				# Settings.
				$conf->{translate}{lsi}{settings_disable_online_controller_reset} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_disable_online_controller_reset} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings disable_online_controller_reset: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_disable_online_controller_reset}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{translate}{lsi}{ds_disable_online_controller_reset} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_disable_online_controller_reset} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings disable_online_controller_reset: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_disable_online_controller_reset}]\n");
				next;
			}
		}
		if ($line =~ /^(PFK in NVRAM)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pfk_in_nvram} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_in_nvram} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pfk_in_nvram: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_in_nvram}]\n");
			next;
		}
		if ($line =~ /^(Use disk activity for locate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{use_disk_activity_for_locate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{use_disk_activity_for_locate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; use_disk_activity_for_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{use_disk_activity_for_locate}]\n");
			next;
		}
		if ($line =~ /^(POST delay)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{post_delay} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{post_delay} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; post_delay: [$conf->{data}{lsi}{new}{adapter}{$adapter}{post_delay}]\n");
			next;
		}
		
		# I don't care about "Capabilities.
		
		# Status
		if ($line =~ /^(ECC Bucket Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{ecc_bucket_count} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_count} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; ecc_bucket_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ecc_bucket_count}]\n");
			next;
		}
		
		# Limitations
		if ($line =~ /^(Max Arms Per VD)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_arms_per_vd} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arms_per_vd} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_arms_per_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arms_per_vd}]\n");
			next;
		}
		if ($line =~ /^(Max Spans Per VD)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_spans_per_vd} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_spans_per_vd} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_spans_per_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_spans_per_vd}]\n");
			next;
		}
		if ($line =~ /^(Max Arrays)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_arrays} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arrays} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_arrays: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_arrays}]\n");
			next;
		}
		if ($line =~ /^(Max Number of VDs)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_number_of_vds} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_number_of_vds} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_number_of_vds: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_number_of_vds}]\n");
			next;
		}
		if ($line =~ /^(Max Parallel Commands)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_parallel_commands} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_parallel_commands} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_parallel_commands: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_parallel_commands}]\n");
			next;
		}
		if ($line =~ /^(Max SGE Count)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_sge_count} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_sge_count} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_sge_count: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_sge_count}]\n");
			next;
		}
		if ($line =~ /^(Max Data Transfer Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_data_transfer_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_data_transfer_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_data_transfer_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_data_transfer_size}]\n");
			next;
		}
		if ($line =~ /^(Max Strips PerIO)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_strips_perio} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strips_perio} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_strips_perio: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strips_perio}]\n");
			next;
		}
		if ($line =~ /^(Max LD per array)\s*:\s*(.*)/i)
		{
			if ($in_limits)
			{
				# Limitations
				$conf->{translate}{lsi}{limits_max_ld_per_array} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{limits_max_ld_per_array} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Limits max_ld_per_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{limits_max_ld_per_array}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{translate}{lsi}{ds_max_ld_per_array} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_max_ld_per_array} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings max_ld_per_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_max_ld_per_array}]\n");
				next;
			}
		}
		if ($line =~ /^(Min Strip Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{min_strip_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{min_strip_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; min_strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{min_strip_size}]\n");
			next;
		}
		if ($line =~ /^(Max Strip Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_strip_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strip_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_strip_size}]\n");
			next;
		}
		if ($line =~ /^(Max Configurable CacheCade Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_configurable_cachecade_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_configurable_cachecade_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_configurable_cachecade_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_configurable_cachecade_size}]\n");
			next;
		}
		if ($line =~ /^(Current Size of CacheCade)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{current_size_of_cachecade} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_cachecade} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current_size_of_cachecade: [$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_cachecade}]\n");
			next;
		}
		if ($line =~ /^(Current Size of FW Cache)\s*:\s*(.*)/i)
		{
			# This might squack a lot...
			$conf->{translate}{lsi}{current_size_of_fw_cache} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_fw_cache} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; current_size_of_fw_cache: [$conf->{data}{lsi}{new}{adapter}{$adapter}{current_size_of_fw_cache}]\n");
			next;
		}
		
		# Devices present.
		# NOTE: The options below 'Virtual Drives' and 'Physical
		#       devices' are spaced in... Might need special handling
		#       later to avoid duplicating key names.
		if ($line =~ /^(Virtual Drives)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{virtual_drives} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{virtual_drives} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; virtual_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{virtual_drives}]\n");
			next;
		}
		if ($line =~ /^(Degraded)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{vd_degraded} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_degraded} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; VD degraded: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_degraded}]\n");
			next;
		}
		if ($line =~ /^(Offline)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{vd_offline} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_offline} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; VD offline: [$conf->{data}{lsi}{new}{adapter}{$adapter}{vd_offline}]\n");
			next;
		}
		if ($line =~ /^(Physical Devices)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{physical_devices} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_devices} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; physical_devices: [$conf->{data}{lsi}{new}{adapter}{$adapter}{physical_devices}]\n");
			next;
		}
		if ($line =~ /^(Disks)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pv_disks} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_disks} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; PV disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_disks}]\n");
			next;
		}
		if ($line =~ /^(Critical Disks)\s*:\s*(.*)/i)
		{
			# NOTE: This should trigger migration of VMs off of
			#       this node.
			$conf->{translate}{lsi}{pv_critical_disks} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_critical_disks} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; PV critical_disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_critical_disks}]\n");
			next;
		}
		if ($line =~ /^(Failed Disks)\s*:\s*(.*)/i)
		{
			# NOTE: This should trigger migration of VMs off of
			#       this node.
			$conf->{translate}{lsi}{pv_failed_disks} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_failed_disks} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; PV failed_disks: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pv_failed_disks}]\n");
			next;
		}
		
		# Supported adapter operations
		# SAO rebuild rate recorded up in the Settings section.
		if ($line =~ /^(CC Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cc_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cc_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cc_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cc_rate}]\n");
			next;
		}
		# SAO BGI rate is recorded up in the Settings section.
		if ($line =~ /^(Reconstruct Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{reconstruct_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruct_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; reconstruct_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruct_rate}]\n");
			next;
		}
		if ($line =~ /^(Patrol Read Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{patrol_read_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{patrol_read_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; patrol_read_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{patrol_read_rate}]\n");
			next;
		}
		if ($line =~ /^(Alarm Control)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{alarm_control} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_control} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; alarm_control: [$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_control}]\n");
			next;
		}
		if ($line =~ /^(Cluster Support)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cluster_support} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_support} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cluster_support: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_support}]\n");
			next;
		}
		# SAO BBU is recorded in the Hardware Config section
		if ($line =~ /^(Spanning)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{spanning} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spanning} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; spanning: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spanning}]\n");
			next;
		}
		if ($line =~ /^(Dedicated Hot Spare)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{dedicated_hot_spare} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{dedicated_hot_spare} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; dedicated_hot_spare: [$conf->{data}{lsi}{new}{adapter}{$adapter}{dedicated_hot_spare}]\n");
			next;
		}
		if ($line =~ /^(Revertible Hot Spares)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{revertible_hot_spares} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{revertible_hot_spares} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; revertible_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{revertible_hot_spares}]\n");
			next;
		}
		if ($line =~ /^(Foreign Config Import)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{foreign_config_import} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{foreign_config_import} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; foreign_config_import: [$conf->{data}{lsi}{new}{adapter}{$adapter}{foreign_config_import}]\n");
			next;
		}
		if ($line =~ /^(Self Diagnostic)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{self_diagnostic} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{self_diagnostic} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; self_diagnostic: [$conf->{data}{lsi}{new}{adapter}{$adapter}{self_diagnostic}]\n");
			next;
		}
		if ($line =~ /^(Allow Mixed Redundancy on Array)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_mixed_redundancy_on_array} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mixed_redundancy_on_array} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_mixed_redundancy_on_array: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mixed_redundancy_on_array}]\n");
			next;
		}
		if ($line =~ /^(Global Hot Spares)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{global_hot_spares} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{global_hot_spares} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; global_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{global_hot_spares}]\n");
			next;
		}
		if ($line =~ /^(Deny SCSI Passthrough)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_scsi_passthrough} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_scsi_passthrough} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_scsi_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_scsi_passthrough}]\n");
			next;
		}
		if ($line =~ /^(Deny SMP Passthrough)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_smp_passthrough} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_smp_passthrough} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_smp_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_smp_passthrough}]\n");
			next;
		}
		if ($line =~ /^(Deny STP Passthrough)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_stp_passthrough} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_stp_passthrough} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_stp_passthrough: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_stp_passthrough}]\n");
			next;
		}
		if ($line =~ /^(Support Security)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_security} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_security} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_security: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_security}]\n");
			next;
		}
		if ($line =~ /^(Snapshot Enabled)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{snapshot_enabled} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{snapshot_enabled} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; snapshot_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{snapshot_enabled}]\n");
			next;
		}
		if ($line =~ /^(Support the OCE without adding drives)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_the_oce_without_adding_drives} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_the_oce_without_adding_drives} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_the_oce_without_adding_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_the_oce_without_adding_drives}]\n");
			next;
		}
		if ($line =~ /^(Support PFK)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_pfk} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pfk} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_pfk: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pfk}]\n");
			next;
		}
		if ($line =~ /^(Support PI)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_pi} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pi} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_pi: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_pi}]\n");
			next;
		}
		if ($line =~ /^(Support Boot Time PFK Change)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_boot_time_pfk_change} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_boot_time_pfk_change} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_boot_time_pfk_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_boot_time_pfk_change}]\n");
			next;
		}
		if ($line =~ /^(Disable Online PFK Change)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_online_pfk_change} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_online_pfk_change} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_online_pfk_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_online_pfk_change}]\n");
			next;
		}
		if ($line =~ /^(PFK TrailTime Remaining)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pfk_trailtime_remaining} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_trailtime_remaining} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pfk_trailtime_remaining: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pfk_trailtime_remaining}]\n");
			next;
		}
		if ($line =~ /^(Support Shield State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_shield_state} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_shield_state} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_shield_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_shield_state}]\n");
			next;
		}
		if ($line =~ /^(Block SSD Write Disk Cache Change)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{block_ssd_write_disk_cache_change} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{block_ssd_write_disk_cache_change} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; block_ssd_write_disk_cache_change: [$conf->{data}{lsi}{new}{adapter}{$adapter}{block_ssd_write_disk_cache_change}]\n");
			next;
		}
		
		# Supported VD Operations
		if ($line =~ /^(Read Policy)\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operation
				$conf->{translate}{lsi}{svdo_read_policy} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_read_policy} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported VD Operations read_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_read_policy}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{translate}{lsi}{ds_read_policy} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_read_policy} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings read_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_read_policy}]\n");
				next;
			}
		}
		if ($line =~ /^(Write Policy)\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operation
				$conf->{translate}{lsi}{svdo_write_policy} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_write_policy} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported VD Operation write_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_write_policy}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default Settings
				$conf->{translate}{lsi}{settings_write_policy} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_write_policy} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Settings write_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{settings_write_policy}]\n");
				next;
			}
		}
		if ($line =~ /^(IO Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{io_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{io_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; io_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{io_policy}]\n");
			next;
		}
		if ($line =~ /^(Access Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{access_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{access_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; access_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{access_policy}]\n");
			next;
		}
		if ($line =~ /^(Disk Cache Policy)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disk_cache_policy} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disk_cache_policy} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disk_cache_policy: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disk_cache_policy}]\n");
			next;
		}
		if ($line =~ /^(Reconstruction)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{reconstruction} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; reconstruction: [$conf->{data}{lsi}{new}{adapter}{$adapter}{reconstruction}]\n");
			next;
		}
		if ($line =~ /^(Deny Locate)\s*:\s*(.*)/i)
		{
			if ($in_svdo)
			{
				# Supported VD Operations
				$conf->{translate}{lsi}{svdo_deny_locate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_deny_locate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported VD operations deny_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{svdo_deny_locate}]\n");
				next;
			}
			elsif ($in_spdo)
			{
				# Supported PD Operations
				$conf->{translate}{lsi}{spdo_deny_locate} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_deny_locate} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported PD operations deny_locate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_deny_locate}]\n");
				next;
			}
		}
		if ($line =~ /^(Deny CC)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_cc} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_cc} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_cc: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_cc}]\n");
			next;
		}
		if ($line =~ /^(Allow Ctrl Encryption)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_ctrl_encryption} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ctrl_encryption} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_ctrl_encryption: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ctrl_encryption}]\n");
			next;
		}
		if ($line =~ /^(Enable LDBBM)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_ldbbm} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ldbbm} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_ldbbm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ldbbm}]\n");
			next;
		}
		if ($line =~ /^(Support Breakmirror)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_breakmirror} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_breakmirror} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_breakmirror: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_breakmirror}]\n");
			next;
		}
		
		# Supported PD Operations
		if ($line =~ /^(Power Savings)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{power_savings} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{power_savings} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; power_savings: [$conf->{data}{lsi}{new}{adapter}{$adapter}{power_savings}]\n");
			next;
		}
		if ($line =~ /^(Force Online)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{force_online} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_online} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; force_online: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_online}]\n");
			next;
		}
		if ($line =~ /^(Force Offline)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{force_offline} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_offline} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; force_offline: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_offline}]\n");
			next;
		}
		if ($line =~ /^(Force Rebuild)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{force_rebuild} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{force_rebuild} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; force_rebuild: [$conf->{data}{lsi}{new}{adapter}{$adapter}{force_rebuild}]\n");
			next;
		}
		if ($line =~ /^(Deny Force Failed)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_force_failed} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_failed} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_force_failed: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_failed}]\n");
			next;
		}
		if ($line =~ /^(Deny Force Good)\/Bad\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_force_good_bad} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_good_bad} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_force_good_bad: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_force_good_bad}]\n");
			next;
		}
		if ($line =~ /^(Deny Missing Replace)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_missing_replace} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_missing_replace} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_missing_replace: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_missing_replace}]\n");
			next;
		}
		if ($line =~ /^(Deny Clear)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{deny_clear} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_clear} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; deny_clear: [$conf->{data}{lsi}{new}{adapter}{$adapter}{deny_clear}]\n");
			next;
		}
		# Supported PD Operations deny_locate is picked up in the 
		# Supported VD Operations above.
		if ($line =~ /^(Support Temperature)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{support_temperature} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{support_temperature} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; support_temperature: [$conf->{data}{lsi}{new}{adapter}{$adapter}{support_temperature}]\n");
			next;
		}
		if ($line =~ /^(Disable Copyback)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_copyback} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_copyback} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_copyback: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_copyback}]\n");
			next;
		}
		if ($line =~ /^(Enable JBOD)\s*:\s*(.*)/i)
		{
			if ($in_spdo)
			{
				# Supported PD Operations
				$conf->{translate}{lsi}{spdo_enable_jbod} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_enable_jbod} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Supported PD Operations enable_jbod: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spdo_enable_jbod}]\n");
				next;
			}
			elsif ($in_ds)
			{
				# Default settings
				$conf->{translate}{lsi}{ds_enable_jbod} = $1;
				$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_enable_jbod} = $2;
				#record($conf, "$THIS_FILE ".__LINE__."; Default settings enable_jbod: [$conf->{data}{lsi}{new}{adapter}{$adapter}{ds_enable_jbod}]\n");
				next;
			}
		}
		if ($line =~ /^(Enable Copyback on SMART)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_copyback_on_smart} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_on_smart} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_copyback_on_smart: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_on_smart}]\n");
			next;
		}
		if ($line =~ /^(Enable Copyback to SSD on SMART Error)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_copyback_to_ssd_on_smart_error} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_to_ssd_on_smart_error} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_copyback_to_ssd_on_smart_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_copyback_to_ssd_on_smart_error}]\n");
			next;
		}
		if ($line =~ /^(Enable SSD Patrol Read)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_ssd_patrol_read} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ssd_patrol_read} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_ssd_patrol_read: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_ssd_patrol_read}]\n");
			next;
		}
		if ($line =~ /^(PR Correct Unconfigured Areas)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{pr_correct_unconfigured_areas} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_correct_unconfigured_areas} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; pr_correct_unconfigured_areas: [$conf->{data}{lsi}{new}{adapter}{$adapter}{pr_correct_unconfigured_areas}]\n");
			next;
		}
		if ($line =~ /^(Enable Spin Down of UnConfigured Drives)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_spin_down_of_unconfigured_drives} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_spin_down_of_unconfigured_drives} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_spin_down_of_unconfigured_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_spin_down_of_unconfigured_drives}]\n");
			next;
		}
		if ($line =~ /^(Disable Spin Down of hot spares)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_spin_down_of_hot_spares} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_spin_down_of_hot_spares} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_spin_down_of_hot_spares: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_spin_down_of_hot_spares}]\n");
			next;
		}
		if ($line =~ /^(Spin Down time)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{spin_down_time} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_time} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; spin_down_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_time}]\n");
			next;
		}
		if ($line =~ /^(T10 Power State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{t10_power_state} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{t10_power_state} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; t10_power_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{t10_power_state}]\n");
			next;
		}
		
		# Error Counters
		if ($line =~ /^(Memory Correctable Errors)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{memory_correctable_errors} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_correctable_errors} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; memory_correctable_errors: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_correctable_errors}]\n");
			next;
		}
		if ($line =~ /^(Memory Uncorrectable Errors)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{memory_uncorrectable_errors} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_uncorrectable_errors} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; memory_uncorrectable_errors: [$conf->{data}{lsi}{new}{adapter}{$adapter}{memory_uncorrectable_errors}]\n");
			next;
		}
		
		# Cluster Information
		if ($line =~ /^(Cluster Permitted)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cluster_permitted} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_permitted} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cluster_permitted: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_permitted}]\n");
			next;
		}
		if ($line =~ /^(Cluster Active)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cluster_active} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_active} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cluster_active: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_active}]\n");
			next;
		}
		
		# Default Settings
		if ($line =~ /^(Phy Polarity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{phy_polarity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polarity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; phy_polarity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polarity}]\n");
			next;
		}
		if ($line =~ /^(Phy PolaritySplit)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{phy_polaritysplit} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polaritysplit} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; phy_polaritysplit: [$conf->{data}{lsi}{new}{adapter}{$adapter}{phy_polaritysplit}]\n");
			next;
		}
		if ($line =~ /^(Background Rate)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{background_rate} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{background_rate} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; background_rate: [$conf->{data}{lsi}{new}{adapter}{$adapter}{background_rate}]\n");
			next;
		}
		if ($line =~ /^(Strip Size)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{strip_size} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{strip_size} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; strip_size: [$conf->{data}{lsi}{new}{adapter}{$adapter}{strip_size}]\n");
			next;
		}
		if ($line =~ /^(Flush Time)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{flush_time} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{flush_time} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; flush_time: [$conf->{data}{lsi}{new}{adapter}{$adapter}{flush_time}]\n");
			next;
		}
		# Default read and write policies are recorded in the Standard 
		# VD Operations section.
		if ($line =~ /^(Cache When BBU Bad)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cache_when_bbu_bad} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_when_bbu_bad} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cache_when_bbu_bad: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cache_when_bbu_bad}]\n");
			next;
		}
		if ($line =~ /^(Cached IO)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cached_io} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cached_io} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cached_io: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cached_io}]\n");
			next;
		}
		if ($line =~ /^(SMART Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{smart_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{smart_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; smart_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{smart_mode}]\n");
			next;
		}
		if ($line =~ /^(Alarm Disable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{alarm_disable} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_disable} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; alarm_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{alarm_disable}]\n");
			next;
		}
		if ($line =~ /^(Coercion Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{coercion_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{coercion_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; coercion_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{coercion_mode}]\n");
			next;
		}
		if ($line =~ /^(ZCR Config)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{zcr_config} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{zcr_config} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; zcr_config: [$conf->{data}{lsi}{new}{adapter}{$adapter}{zcr_config}]\n");
			next;
		}
		if ($line =~ /^(Dirty LED Shows Drive Activity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{dirty_led_shows_drive_activity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{dirty_led_shows_drive_activity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; dirty_led_shows_drive_activity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{dirty_led_shows_drive_activity}]\n");
			next;
		}
		if ($line =~ /^(BIOS Continue on Error)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{bios_continue_on_error} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_continue_on_error} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; bios_continue_on_error: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_continue_on_error}]\n");
			next;
		}
		if ($line =~ /^(Spin Down Mode)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{spin_down_mode} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_mode} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; spin_down_mode: [$conf->{data}{lsi}{new}{adapter}{$adapter}{spin_down_mode}]\n");
			next;
		}
		if ($line =~ /^(Allowed Device Type)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allowed_device_type} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allowed_device_type} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allowed_device_type: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allowed_device_type}]\n");
			next;
		}
		if ($line =~ /^(Allow Mix in Enclosure)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_mix_in_enclosure} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mix_in_enclosure} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_mix_in_enclosure: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_mix_in_enclosure}]\n");
			next;
		}
		if ($line =~ /^(Allow HDD SAS)\/SATA Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_hdd_sas_sata_mix_in_vd} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_sas_sata_mix_in_vd} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_hdd_sas_sata_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_sas_sata_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /^(Allow SSD SAS)\/SATA Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_ssd_sas_sata_mix_in_vd} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ssd_sas_sata_mix_in_vd} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_ssd_sas_sata_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_ssd_sas_sata_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /^(Allow HDD)\/SSD Mix in VD\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_hdd_ssd_mix_in_vd} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_ssd_mix_in_vd} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_hdd_ssd_mix_in_vd: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_hdd_ssd_mix_in_vd}]\n");
			next;
		}
		if ($line =~ /^(Allow SATA in Cluster)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{allow_sata_in_cluster} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_sata_in_cluster} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; allow_sata_in_cluster: [$conf->{data}{lsi}{new}{adapter}{$adapter}{allow_sata_in_cluster}]\n");
			next;
		}
		if ($line =~ /^(Max Chained Enclosures)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{max_chained_enclosures} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{max_chained_enclosures} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; max_chained_enclosures: [$conf->{data}{lsi}{new}{adapter}{$adapter}{max_chained_enclosures}]\n");
			next;
		}
		if ($line =~ /^(Disable Ctrl-R)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_ctrl_r} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_ctrl_r} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_ctrl_r: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_ctrl_r}]\n");
			next;
		}
		if ($line =~ /^(Enable Web BIOS)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_web_bios} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_web_bios} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_web_bios: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_web_bios}]\n");
			next;
		}
		if ($line =~ /^(Direct PD Mapping)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{direct_pd_mapping} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{direct_pd_mapping} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; direct_pd_mapping: [$conf->{data}{lsi}{new}{adapter}{$adapter}{direct_pd_mapping}]\n");
			next;
		}
		if ($line =~ /^(BIOS Enumerate VDs)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{bios_enumerate_vds} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_enumerate_vds} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; bios_enumerate_vds: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bios_enumerate_vds}]\n");
			next;
		}
		if ($line =~ /^(Restore Hot Spare on Insertion)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{restore_hot_spare_on_insertion} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hot_spare_on_insertion} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; restore_hot_spare_on_insertion: [$conf->{data}{lsi}{new}{adapter}{$adapter}{restore_hot_spare_on_insertion}]\n");
			next;
		}
		# Expose Enclosure Devices is recorded above in the Settings
		# section above.
		# Maintain PD Fail History is recorded above in the Settings
		# section above.
		if ($line =~ /^(Disable Puncturing)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_puncturing} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_puncturing} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_puncturing: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_puncturing}]\n");
			next;
		}
		if ($line =~ /^(Zero Based Enclosure Enumeration)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{zero_based_enclosure_enumeration} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{zero_based_enclosure_enumeration} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; zero_based_enclosure_enumeration: [$conf->{data}{lsi}{new}{adapter}{$adapter}{zero_based_enclosure_enumeration}]\n");
			next;
		}
		if ($line =~ /^(PreBoot CLI Enabled)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{preboot_cli_enabled} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_enabled} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; preboot_cli_enabled: [$conf->{data}{lsi}{new}{adapter}{$adapter}{preboot_cli_enabled}]\n");
			next;
		}
		if ($line =~ /^(LED Show Drive Activity)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{led_show_drive_activity} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{led_show_drive_activity} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; led_show_drive_activity: [$conf->{data}{lsi}{new}{adapter}{$adapter}{led_show_drive_activity}]\n");
			next;
		}
		if ($line =~ /^(Cluster Disable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{cluster_disable} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_disable} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; cluster_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{cluster_disable}]\n");
			next;
		}
		if ($line =~ /^(SAS Disable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{sas_disable} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_disable} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; sas_disable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{sas_disable}]\n");
			next;
		}
		if ($line =~ /^(Auto Detect BackPlane Enable)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{auto_detect_backplane_enable} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enable} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; auto_detect_backplane_enable: [$conf->{data}{lsi}{new}{adapter}{$adapter}{auto_detect_backplane_enable}]\n");
			next;
		}
		# Use FDE Only is recorded above in the Settings section above.
		if ($line =~ /^(Enable Led Header)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_led_header} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_led_header} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_led_header: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_led_header}]\n");
			next;
		}
		if ($line =~ /^(Delay during POST)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{delay_during_post} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_during_post} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; delay_during_post: [$conf->{data}{lsi}{new}{adapter}{$adapter}{delay_during_post}]\n");
			next;
		}
		if ($line =~ /^(EnableCrashDump)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enablecrashdump} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enablecrashdump} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enablecrashdump: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enablecrashdump}]\n");
			next;
		}
		# Disable Online Controller Reset is recorded above in the 
		# Settings section above.
		if ($line =~ /^(EnableLDBBM)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enableldbbm} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enableldbbm} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enableldbbm: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enableldbbm}]\n");
			next;
		}
		if ($line =~ /^(Un-Certified Hard Disk Drives)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{un_certified_hard_disk_drives} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{un_certified_hard_disk_drives} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; un_certified_hard_disk_drives: [$conf->{data}{lsi}{new}{adapter}{$adapter}{un_certified_hard_disk_drives}]\n");
			next;
		}
		if ($line =~ /^(Treat Single span R1E as R10)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{treat_single_span_r1e_as_r10} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{treat_single_span_r1e_as_r10} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; treat_single_span_r1e_as_r10: [$conf->{data}{lsi}{new}{adapter}{$adapter}{treat_single_span_r1e_as_r10}]\n");
			next;
		}
		# Max LD per array is recorded in the Limitations section 
		# above.
		if ($line =~ /^(Power Saving option)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{power_saving_option} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{power_saving_option} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; power_saving_option: [$conf->{data}{lsi}{new}{adapter}{$adapter}{power_saving_option}]\n");
			next;
		}
		if ($line =~ /^(Default spin down time in minutes)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{default_spin_down_time_in_minutes} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{default_spin_down_time_in_minutes} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; default_spin_down_time_in_minutes: [$conf->{data}{lsi}{new}{adapter}{$adapter}{default_spin_down_time_in_minutes}]\n");
			next;
		}
		# Enable JBOD is recoded in Supported PD Operations above.
		if ($line =~ /^(TTY Log In Flash)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{tty_log_in_flash} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{tty_log_in_flash} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; tty_log_in_flash: [$conf->{data}{lsi}{new}{adapter}{$adapter}{tty_log_in_flash}]\n");
			next;
		}
		# Auto Enhanced Import is recorded in the Settings section above.
		if ($line =~ /^(BreakMirror RAID Support)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{breakmirror_raid_support} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{breakmirror_raid_support} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; breakmirror_raid_support: [$conf->{data}{lsi}{new}{adapter}{$adapter}{breakmirror_raid_support}]\n");
			next;
		}
		if ($line =~ /^(Disable Join Mirror)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{disable_join_mirror} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_join_mirror} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; disable_join_mirror: [$conf->{data}{lsi}{new}{adapter}{$adapter}{disable_join_mirror}]\n");
			next;
		}
		if ($line =~ /^(Enable Shield State)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{enable_shield_state} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_shield_state} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; enable_shield_state: [$conf->{data}{lsi}{new}{adapter}{$adapter}{enable_shield_state}]\n");
			next;
		}
		if ($line =~ /^(Time taken to detect CME)\s*:\s*(.*)/i)
		{
			$conf->{translate}{lsi}{time_taken_to_detect_cme} = $1;
			$conf->{data}{lsi}{new}{adapter}{$adapter}{time_taken_to_detect_cme} = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; time_taken_to_detect_cme: [$conf->{data}{lsi}{new}{adapter}{$adapter}{time_taken_to_detect_cme}]\n");
			next;
		}
		
		next if $line =~ /^=+$/;
		next if not $line;
		#record($conf, "$THIS_FILE ".__LINE__."; Unmatched line while parsing LSI adapter information! line: [$line]\n");
	}
	$fh->close();
	
	return(0);
}

# This takes a string, pulls out the number and converts it to fahrenheit. It
# also changes the word "celcius" to "fahrenheit" or "C" to "F". If it fails to
# read a digit it will return the original string.
sub convert_to_fahrenheit
{
	my ($conf, $say_temp) = @_;
	
	#$say_temp =~ s/^\s+//;
	my $new_temp;
	my $temp_c;
	my $string;
	if ($say_temp =~ /^(\d+\.\d+)(.*)/)
	{
		$temp_c = $1;
		$string = $2;
	}
	elsif ($say_temp =~ /^(\d+)(.*)/)
	{
		$temp_c = $1;
		$string = $2;
	}
	#$string =~ s/^\s+//;
	#print "Temp C: [$temp_c], string: [$string]\n";
	
	if ($temp_c !~ /^\d/)
	{
		# No digit was parsed, return as-is.
		record($conf, "$THIS_FILE ".__LINE__."; Unable to parse out a temperature from: [$say_temp]. Returning the value unconverted.\n");
		return($say_temp);
	}
	
	# Convert the temperature.
	my $temp_f = ($temp_c * 1.8) + 32;
	if ($temp_c =~ /\./)
	{
		$temp_f    = sprintf("%.1f", $temp_f);
	}
	else
	{
		$temp_f    = sprintf("%.0f", $temp_f);
	}
	
	$string =~ s/Celcius/Fahrenheit/;
	$string =~ s/celcius/fahrenheit/;
	$string =~ s/C/F/;
	$new_temp = $temp_f.$string;
	#print "C: [$say_temp], F: [$new_temp]\n";
	
	return($new_temp);
}

# This adds information from LSI controller(s) to the current state body.
sub get_current_state_lsi
{
	my ($conf, $body) = @_;
	
	# First up, base controller details.
	foreach my $adapter (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}})
	{
		my $part_number    = $conf->{data}{lsi}{new}{adapter}{$adapter}{product_name};
		my $serial_number  = $conf->{data}{lsi}{new}{adapter}{$adapter}{serial_no};
		my $hw_revision    = $conf->{data}{lsi}{new}{adapter}{$adapter}{revision_no};
		my $bbu_present    = $conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu} ? $conf->{data}{lsi}{new}{adapter}{$adapter}{hw_conf_bbu} : "--";
		my $memory_present = $conf->{data}{lsi}{new}{adapter}{$adapter}{memory};
		my $memory_size    = $memory_present =~ /Present/i ? $conf->{data}{lsi}{new}{adapter}{$adapter}{memory_size} : "--";

		# BBU Info and state
		my $bbu_string = "--";
		if ($bbu_present =~ /Present/i)
		{
			my $bbu_is_failing   = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced} ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_is_about_to_fail_and_should_be_replaced} : "--"; # "No" when healthy
			my $part_name        = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype}                                  ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{batterytype}                                  : "--";
			my $part_number      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name}                             ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{manufacture_name}                             : "--";
			my $serial_number    = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number}                                ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{serial_number}                                : "--";
			my $relative_charge  = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge}           ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{fw_status_relative_state_of_charge}           : "--"; # Max of today's capacity
			my $absolute_charge  = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge}            ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cap_info_absolute_state_of_charge}            : "--"; # Max on day 1
			my $design_voltage   = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}                               ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}                               : "--";
			my $current_voltage  = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage}                                 ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_voltage}                                 : "--";
			my $design_capacity  = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity}                              ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_capacity}                              : "--"; # Maximum mAh on day 1
			my $current_capacity = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity}                         ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{full_charge_capacity}                         : "--"; # Maximum capacity in mAh today
			my $current_charge   = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low}                       ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{remaining_capacity_low}                       : "--"; # Current charge in mAh
			my $cycle_count      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count}                                  ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{cycle_count}                                  : "--";
			my $hold_up_time     = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time}                   ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{battery_backup_charge_time}                   : "--";
			my $pack_energy      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_energy}                                  ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{pack_energy}                                  : "--";
			my $temperature      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature}                             ? $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{base_temperature}                             : "--";
			
			if ($part_name =~ /SuperCaP/i)
			{
				my $say_temp =  $temperature;
				$say_temp    =~ s/C/degrees Celcius/;
				# Convert to fahrenheit if needed.
				if ($conf->{'system'}{use_fahrenheit})
				{
					$say_temp = convert_to_fahrenheit($conf, $say_temp);
				}
				$bbu_string = "$part_name, sn: $serial_number
	        Failing:  $bbu_is_failing
                Capacity: $pack_energy, $design_capacity design
                Voltage:  $current_voltage, $design_voltage design
                Temp:     $say_temp";
			}
			elsif ($part_name =~ /iBBU/i)
			{
				$bbu_string = "$part_name, pn: $part_number, sn: $serial_number
	        Failing:  $bbu_is_failing
                Charge:   $relative_charge, $absolute_charge of design
                Capacity: $current_charge / $current_capacity, $design_capacity design
                Voltage:  $current_voltage, $design_voltage design
                Cycles:   $cycle_count
                Hold-Up:  $hold_up_time";
			}
		}

		$body .= "
Adapter: #$adapter
         Model:    $part_number
         Revision: $hw_revision
         Serial #: $serial_number
         Cache:    $memory_size
         BBU:      $bbu_string
";
		# Virtual disks
		foreach my $vd (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}})
		{
			foreach my $target_id (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}})
			{
				my $usable_size     = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size}                 ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{size}                 : "--";
				my $parity_size     = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size}          ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{parity_size}          : "--";
				my $raid_level      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level}           ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{raid_level}           : "--";
				my $drives_in_array = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives}     ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{number_of_drives}     : "--";
				my $state           = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{'state'}              ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{'state'}              : "--";
				my $cache_policy    = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy} ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{current_cache_policy} : "--";
				my $strip_size      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size}           ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{strip_size}           : "--";
				my $bad_blocks      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{bad_blocks_exist}     ? $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{bad_blocks_exist}     : "--";
				$body .= "
     Array: Virtual Drive $vd, Target ID $target_id
            State:        $state
            Drives:       $drives_in_array
            Usable Size:  $usable_size
            Parity Size:  $parity_size
            Strip Size:   $strip_size
            RAID Level:   $raid_level
            Cache Policy: $cache_policy
            Bad Blocks:   $bad_blocks
";
			}
			
			# Physical Drives.
			#record($conf, "$THIS_FILE ".__LINE__."; drives on adapter: [$adapter]\n");
			foreach my $slot (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}})
			{
				#record($conf, "$THIS_FILE ".__LINE__."; - slot: [$slot]\n");
				# Connected Path Number is in the format 'X(pathY)'.
				my $diskgroup       = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{diskgroup} ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{diskgroup} : "--";
				# Skip this disk if it's not in this virtual disk.
				next if $diskgroup ne $vd;
				
				my $span            = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{span}                            ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{span}                            : "--";
				my $arm             = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{arm}                             ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{arm}                             : "--";
				my $pd_type         = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pd_type}                         ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{pd_type}                         : "--";
				my $media_type      = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_type}                      ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{media_type}                      : "--";
				my $drive           = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{inquiry_data}                    ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{inquiry_data}                    : "--";
				my $capacity        = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_string}             ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{coerced_size_string}             : "--";
				my $state           = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{firmware_state}                  ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{firmware_state}                  : "--";
				my $temperature     = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_temperature}               ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_temperature}               : "--";
				my $drive_interface = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_speed}                    ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{device_speed}                    : "--";
				my $link_interface  = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{link_speed}                      ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{link_speed}                      : "--";
				my $smart_alert     = defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_has_flagged_a_smart_alert} ? $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{drive_has_flagged_a_smart_alert} : "--";
				my $position        = "disk group $diskgroup, span $span, arm $arm";
				my $say_drive       = $drive;
				if ($drive =~ /^SEAGATE\s+(.*?)\s(.*)/i)
				{
					my $model_number = $1;
					my $serial_drive = $2;
					$serial_drive    =~ s/\s.*//;
					$say_drive    = "Seagate $model_number, sn: $serial_drive";
				}
				my $say_temp = $temperature;
				if ($temperature =~ /^(\d+\.*\d*)C\s\((.*?)\s*F\)/i)
				{
					$say_temp =  $1;
					$say_temp .= " degrees Celcius";
					if ($conf->{'system'}{use_fahrenheit})
					{
						$say_temp = convert_to_fahrenheit($conf, $say_temp);
					}
				}
				my $say_slot = $slot;
				$say_slot =~ s/^0//;
				$body .= "
         Drive: $say_slot
                Position:  $position
                State:     $state
                Fault:     $smart_alert
                Temp:      $say_temp
                Device:    $say_drive
                Media:     $media_type
                Interface: $pd_type, drive: $drive_interface, bus: $link_interface
                Capacity:  $capacity
";
			}
		}
	}
	
	return($body)
}

# Check the storage on the server
sub check_storage
{
	my ($conf) = @_;
	
	# To check the storage, I must first know what kind of storage I have.
	# To do this, I check for certain files.
	# At this point, I only support LSI controllers.
	if (-e $conf->{path}{MegaCli64})
	{
		$conf->{'system'}{storage} = "lsi";
	}
	elsif (-e $conf->{path}{hpacucli})
	{
		$conf->{'system'}{storage} = "hp";
	}
	else
	{
		$conf->{'system'}{storage} = "unknown";
	}
	
	if ($conf->{'system'}{storage} eq "lsi")
	{
		check_storage_lsi($conf);
	}
	elsif ($conf->{'system'}{storage} eq "hp")
	{
		check_storage_hp($conf);
	}
	else
	{
		record($conf, "$THIS_FILE ".__LINE__."; Skipping storage check; unable to determine the underlying storage type\n");
	}
	
	return(0);
}

# This reads the network values; bonds, bridges and ethernet devices.
sub check_network
{
	my ($conf) = @_;
	
	# NOTE: I may want to look into /sys/class/net/$dev/* later.
	
	# Read in all interfaces from 'ifconfig -a'.
	delete $conf->{data}{network}{new};
	my $this_dev = "";
	my $fh       = IO::Handle->new();
	my $sc       = "$conf->{path}{ifconfig} -a";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$line =~ s/\s+/ /g;
		next if not $line;
		$conf->{data}{raw}{ifconfig} .= $line."\n";
		
		#record($conf, "$THIS_FILE ".__LINE__."; ifconfig line: [$line]\n");
		if (not $line)
		{
			$this_dev = "";
			next;
		}
		if ($line =~ /^(.*?) Link/i)
		{
			$this_dev = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev]\n");
		}
		if (not $this_dev)
		{
			next;
		}
		if ($line =~ /HWaddr (.*)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{hwaddr} = uc($1);
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - device: [$this_dev], MAC: [$conf->{data}{network}{new}{dev}{$this_dev}{hwaddr}]\n");
		}
		if ($line =~ /(.*?) MTU:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{'state'} = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{mtu}     = $2;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - state: [$conf->{data}{network}{new}{dev}{$this_dev}{'state'}], MTU: [$conf->{data}{network}{new}{dev}{$this_dev}{mtu}]\n");
		}
		if ($line =~ /Metric:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{metric} = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - metric: [$conf->{data}{network}{new}{dev}{$this_dev}{metric}]\n");
		}
		if ($line =~ /inet addr:(.*?)\s/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{ip_address} = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - ip_address: [$conf->{data}{network}{new}{dev}{$this_dev}{ip_address}]\n");
		}
		if ($line =~ /inet6 addr:(.*?)\s/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{ipv6_address} = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - ipv6_address: [$conf->{data}{network}{new}{dev}{$this_dev}{ipv6_address}]\n");
		}
		if ($line =~ /Mask:(.*)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{netmask} = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - netmask: [$conf->{data}{network}{new}{dev}{$this_dev}{netmask}]\n");
		}
		if ($line =~ /RX packets:(.*) errors:(\d+) dropped:(\d+) overruns:(\d+) frame:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{packets}  = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{errors}   = $2;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{dropped}  = $3;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{overruns} = $4;
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{frame}    = $5;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - rx - packets: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{packets}], errors: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{errors}], dropped: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{dropped}], overruns: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{overruns}], frame: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{frame}]\n");
		}
		if ($line =~ /TX packets:(.*) errors:(\d+) dropped:(\d+) overruns:(\d+) carrier:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{packets}  = $1;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{errors}   = $2;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{dropped}  = $3;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{overruns} = $4;
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{carrier}  = $5;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - tx - packets: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{packets}], errors: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{errors}], dropped: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{dropped}], overruns: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{overruns}], carrier: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{carrier}]\n");
		}
		if ($line =~ /RX bytes:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{rx}{'bytes'}  = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - rx - bytes: [$conf->{data}{network}{new}{dev}{$this_dev}{rx}{'bytes'}]\n");
		}
		if ($line =~ /TX bytes:(\d+)/i)
		{
			$conf->{data}{network}{new}{dev}{$this_dev}{tx}{'bytes'}  = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; this_dev: [$this_dev] - tx - bytes: [$conf->{data}{network}{new}{dev}{$this_dev}{tx}{'bytes'}]\n");
		}
	}
	$fh->close();
	
	# This requires that bonds be 'bondX', eth devices be 'ethX' and
	# bridges be 'vbrX'.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
	{
		# Bonds will sort first.
		if ($dev =~ /bond/)
		{
			# Read the bond's /proc FS file
			#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev]\n");
			$conf->{data}{network}{new}{bond}{$dev}{slave_count} = 0;
			$conf->{data}{raw}{bond}{$dev}                       = "";
			my $in = "bond";
			my $fh = IO::Handle->new();
			my $sc = "/proc/net/bonding/$dev";
			open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
			while (<$fh>)
			{
				chomp;
				my $line=$_;
				$conf->{data}{raw}{bond}{$dev} .= $line."\n";
				$line =~ s/^\s+//;
				$line =~ s/\s+$//;
				$line =~ s/\s+/ /g;
				#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], line: [$line]\n");
				next if not $line;
				
				# See when I switch the device I am looking at.
				if ($line =~ /Slave Interface: (.*)/i)
				{
					$in = $1;
					$conf->{data}{network}{new}{bond}{$dev}{slave_count}++;
					#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], in: [$in]\n");
				}
				next if not $in;
				
				# Parse out the main bond values.
				if ($in eq "bond")
				{
					if ($line =~ /Bonding Mode:.*?\((.*?)\)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mode} = $1;
					}
					if ($line =~ /Primary Slave: (.*?) \(primary_reselect (.*?)\)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{primary}{slave}    = $1;
						$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = $2;
					}
					if ($line =~ /Currently Active Slave: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{active_slave} = $1;
					}
					if ($line =~ /MII Status: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mii}{status} = $1;
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], MII stats: [$conf->{data}{network}{new}{bond}{$dev}{mii}{status}]\n");
					}
					if ($line =~ /MII Polling Interval \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval} = $1;
					}
					if ($line =~ /Up Delay \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{delay}{up} = $1;
					}
					if ($line =~ /Down Delay \(ms\): (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{delay}{down} = $1;
					}
				}
				else
				{
					# Parse out the slave interface values.
					if ($line =~ /MII Status: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{mii_status} = $1;
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], in: [$in], MII stats: [$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{mii_status}]\n");
					}
					if ($line =~ /Speed: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{speed} = $1;
					}
					if ($line =~ /Duplex: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{duplex} = $1;
					}
					if ($line =~ /Link Failure Count: (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{link_failure_count} = $1;
					}
					if ($line =~ /Permanent HW addr: (.*)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac} = uc($1);
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], real MAC: [$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac}]\n");
						my $if_mac    = $conf->{data}{network}{new}{dev}{$in}{hwaddr};
						my $slave_mac = $conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{real_mac};
						#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], real MAC: [$if_mac], recorded MAC: [$slave_mac]\n");
						if ($if_mac ne $slave_mac)
						{
							# Update the device's 
							# reported MAC address 
							# with the real one.
							$conf->{data}{network}{new}{dev}{$in}{hwaddr} = $slave_mac;
							#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], slave: [$in], MAC updated to: [$conf->{data}{network}{new}{dev}{$in}{hwaddr}]\n");
						}
					}
					if ($line =~ /Slave queue ID: (\d+)/i)
					{
						$conf->{data}{network}{new}{bond}{$dev}{slave}{$in}{slave_queue_id} = $1;
					}
				}
			}
			$fh->close();
			
			# Read the configuration file to parse the BOND_OPTS string.
			my $file = "/etc/sysconfig/network-scripts/ifcfg-$dev";
			if (-r $file)
			{
				my $fh = IO::Handle->new();
				my $sc = "/etc/sysconfig/network-scripts/ifcfg-$dev";
				open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
				while (<$fh>)
				{
					chomp;
					my $line=$_;
					$conf->{data}{raw}{bond}{$dev} .= $line."\n";
					$line =~ s/^\s+//;
					$line =~ s/\s+$//;
					$line =~ s/\s+/ /g;
					#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev], line: [$line]\n");
					if ($line =~ /BONDING_OPTS/i)
					{
						my $primary  = "none";
						my $reselect = "none";
						if ($line =~ /primary=(.*)/i)
						{
							$primary  =  $1;
							$primary  =~ s/\s.*//;
							$primary  =~ s/"//g;
							$reselect =  "always";
						}
						$conf->{data}{network}{new}{bond}{$dev}{primary}{slave} = $primary;
						if ($line =~ /primary_reselect=(.*)/i)
						{
							$reselect =  $1;
							$reselect =~ s/\s.*//;
							$reselect =~ s/"//g;
							if (($reselect eq "1") || ($reselect =~ /better/i))
							{
								$reselect = "better";
							}
							if (($reselect eq "2") || ($reselect =~ /failure/i))
							{
								$reselect = "failure";
							}
						}
						$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = $reselect;
					}
				}
				$fh->close();
			}
		}
		elsif ($dev =~ /eth/)
		{
			# Read the '/etc/sysconfig/network-scripts/ifcfg-${dev}'
			# file. This is needed because if a device was 
			# ifdown'ed, it won't show as a slave of a bond.
			$conf->{data}{raw}{ifcfg}{$dev} = "";
			my $file = "/etc/sysconfig/network-scripts/ifcfg-$dev";
			if (-r $file)
			{
				my $fh = IO::Handle->new();
				my $sc = "$file";
				open ($fh, "<$sc") || die "Failed to read: [$sc], error: $!\n";
				while (<$fh>)
				{
					chomp;
					my $line=$_;
					$conf->{data}{raw}{ifcfg}{$dev} .= $line."\n";
					$line =~ s/#.*//;
					$line =~ s/^\s+//;
					$line =~ s/\s+$//;
					$line =~ s/\s+/ /g;
					next if not $line;
					#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], line: [$line]\n");
					if ($line =~ /MASTER/)
					{
						# Got it.
						my $parent = $line;
						$parent =~ s/^.*?=//;
						$parent =~ s/"//g;
						$parent =~ s/\s+//g;
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{mii_status})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{mii_status} = "down";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{speed})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{speed} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{duplex})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{duplex} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{link_failure_count})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{link_failure_count} = "--";
						}
						if (not exists $conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac})
						{
							$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac} = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
							#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], parent: [$parent], MAC: [$conf->{data}{network}{new}{bond}{$parent}{slave}{$dev}{real_mac}]\n");
						}
						last;
					}
				}
				$fh->close();
			}
		}
		elsif ($dev =~ /vbr/)
		{
			# Read 'brctl show $dev'
			#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev]\n");
			my $in_bridge   = "";
			my $bridge_id   = "";
			my $stp_enabled = "";
			my $interfaces  = "";
			my $fh = IO::Handle->new();
			my $sc = "$conf->{path}{brctl} show $dev";
			#record($conf, "$THIS_FILE ".__LINE__."; calling: [$sc]\n");
			open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
			while (<$fh>)
			{
				chomp;
				my $line=$_;
				# There is a bug where all bridges are shown, 
				# despite a specific one having beed 
				# specified... See:
				# https://bugzilla.redhat.com/show_bug.cgi?id=882565
				$conf->{data}{raw}{bond}{$dev} .= $line."\n";
				if ($line !~ /^\s/)
				{
					$in_bridge = ($line =~ /^(.*?)\s/)[0];
					#record($conf, "$THIS_FILE ".__LINE__."; in_bridge: [$in_bridge]\n");
				}
				#record($conf, "$THIS_FILE ".__LINE__."; >> dev: [$dev], in_bridge: [$in_bridge]\n");
				next if ($in_bridge ne $dev);
				#record($conf, "$THIS_FILE ".__LINE__."; << dev: [$dev], in_bridge: [$in_bridge]\n");
				
				$line =~ s/\s+/ /g;
				$line =~ s/^\s+//;
				$line =~ s/\s+$//;
				#record($conf, "$THIS_FILE ".__LINE__."; > dev: [$dev], line: [$line]\n");
				next if not $line;
				next if $line =~ /^bridge name/i;
				#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], line: [$line]\n");
				
				# This can be one of three possible lines;
				# - bridge info with device
				# - bridge info, no devices
				# - device only.
				if ($line =~ /^$dev\s+(.*?)\s+(.*?)\s+(.*)/)
				{
					$bridge_id   =  $1;
					$stp_enabled =  $2;
					$interfaces  .= "$3, ";
					#record($conf, "$THIS_FILE ".__LINE__."; bridge_id: [$bridge_id], stp_enabled: [$stp_enabled], interfaces: [$interfaces]\n");
				}
				elsif ($line =~ /^$dev\s+(.*?)\s+(.*?)/)
				{
					$bridge_id   = $1;
					$stp_enabled = $2;
					$interfaces  = "--";
					#record($conf, "$THIS_FILE ".__LINE__."; bridge_id: [$bridge_id], stp_enabled: [$stp_enabled], interfaces: [$interfaces]\n");
				}
				else
				{
					$interfaces .= "$line, ";
					#record($conf, "$THIS_FILE ".__LINE__."; interfaces: [$interfaces]\n");
				}
			}
			$fh->close();
			$interfaces =~ s/, $//;
			$conf->{data}{network}{new}{bridge}{$dev}{id}         = $bridge_id;
			$conf->{data}{network}{new}{bridge}{$dev}{stp}        = $stp_enabled;
			$conf->{data}{network}{new}{bridge}{$dev}{interfaces} = $interfaces;
		}
	}
	#die "testing.\n";
	
	# Record the passive slave for each bond for easy reference
	# later.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		next if $dev !~ /bond/;
		#record($conf, "$THIS_FILE ".__LINE__."; bond: [$dev]\n");
		foreach my $slave (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}{$dev}{slave}})
		{
			#record($conf, "$THIS_FILE ".__LINE__."; - slave: [$slave]\n");
			if (not $conf->{data}{network}{new}{bond}{$dev}{first_slave})
			{
				$conf->{data}{network}{new}{bond}{$dev}{first_slave}  = $slave;
				#record($conf, "$THIS_FILE ".__LINE__."; - first slave:  [$conf->{data}{network}{new}{bond}{$dev}{first_slave}]\n");
			}
			else
			{
				$conf->{data}{network}{new}{bond}{$dev}{second_slave} = $slave;
				#record($conf, "$THIS_FILE ".__LINE__."; - second slave: [$conf->{data}{network}{new}{bond}{$dev}{second_slave}]\n");
			}
		}
	}
	
	return(0);
}

# This reads 'clustat'.
sub check_clustat
{
	my ($conf)=@_;
	
	delete $conf->{data}{clustat}{new};
	my $in = "";
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{clustat}";
	open ($fh, "$sc 2>&1 |") || die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line=$_;
		if ($line =~ /Could not connect to CMAN/i)
		{
			$conf->{'system'}{cluster_running} = 0;
			last;
		}
		$conf->{data}{raw}{clustat} .= $line."\n";
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		#record($conf, "$THIS_FILE ".__LINE__."; clustat line: [$line]\n");
		next if not $line;
		
		if ($line =~ /Member Name/)
		{
			$in = "members";
			next;
		}
		if ($line =~ /Service Name/)
		{
			$in = "services";
			next;
		}
		
		#print "reading: [$in], line: [$line]\n";
		if ($in eq "members")
		{
			if ($line =~ /^(.*?)\s+(\d+) (.*)/)
			{
				my $node   = $1;
				my $id     = $2;
				my $status = $3;
				$conf->{data}{clustat}{new}{node}{$node}{id}     = $id;
				$conf->{data}{clustat}{new}{node}{$node}{status} = $status;
				#record($conf, "$THIS_FILE ".__LINE__."; node:    [$node], ID: [$conf->{data}{clustat}{new}{node}{$node}{id}], Status: [$conf->{data}{clustat}{new}{node}{$node}{status}]\n");
			}
		}
		elsif ($in eq "services")
		{
			if ($line =~ /^(.*?)\s+(.*?)\s+(.*)/)
			{
				my $service = $1;
				my $member  = $2;
				my $state   = $3;
				next if $service =~ /^---/;
				$conf->{data}{clustat}{new}{service}{$service}{on}      = $member;
				$conf->{data}{clustat}{new}{service}{$service}{'state'} = $state;
				#record($conf, "$THIS_FILE ".__LINE__."; Service: [$service], on: [$conf->{data}{clustat}{new}{service}{$service}{on}], State: [$conf->{data}{clustat}{new}{service}{$service}{'state'}]\n");
			}
		}
		else
		{
			if ($line =~ /Member Status: (.*)/)
			{
				$conf->{data}{clustat}{new}{quorum} = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; Quorum:  [$conf->{data}{clustat}{new}{quorum}]\n");
			}
			elsif ($line =~ /Cluster Status for (.*) \@/)
			{
				$conf->{data}{clustat}{new}{cluster} = $1;
				#record($conf, "$THIS_FILE ".__LINE__."; Cluster: [$conf->{data}{clustat}{new}{cluster}]\n");
			}
		}
	}
	$fh->close();
	
	return (0);
}

# This checks to see if anything has changed since the last scan.
sub check_for_changes
{
	my ($conf) = @_;
	
	# TODO: This needs a way to track hash entries that vanished since the
	# last scan.
	check_clustat($conf);
	check_network($conf);
	check_storage($conf);
	check_host($conf);
	check_ups($conf);
	#record($conf, "$THIS_FILE ".__LINE__."; Comparing new to old.\n");
	compare_new_and_old($conf);
	
	return(0);
}

# This sends out the initial cluster status report.
sub initial_report
{
	my ($conf) = @_;

	$conf->{mail_data}{subject} = "Cluster Monitor Start";
	$conf->{mail_data}{body}    = get_current_state($conf);
	
	# Send the email.
	send_email($conf);
	
	#record($conf, "$THIS_FILE ".__LINE__."; Initial copy of new to old\n");
	copy_hash($conf, "new", "old");
	
	return(0);
}

# This gathers up all the data in the 'new' hash and formats it for an email.
sub get_current_state
{
	my ($conf) = @_;
	my $body = "";
	
	# Clustat data
	$body = "
Cluster node's monitor program has started.

Current State:

--[ Cluster Status ]--------------------------------------------------
";
	if ($conf->{'system'}{cluster_running})
	{
		$body .= "
Cluster: $conf->{data}{clustat}{new}{cluster}
Quorum:  $conf->{data}{clustat}{new}{quorum}
";
		foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{node}})
		{
			$body .= "Node:    $node - $conf->{data}{clustat}{new}{node}{$node}{status}\n";
		}
		$body .= "\n";
		foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{service}})
		{
			my $state = $conf->{data}{clustat}{new}{service}{$service}{'state'};
			my $on    = $conf->{data}{clustat}{new}{service}{$service}{on};
			my $say_service = $service;
			if ($service =~ /^service:(.*)/)
			{
				$say_service = "Service: $1";
			}
			elsif ($service =~ /^vm:(.*)/)
			{
				$say_service = "     VM: $1";
			}
			my $say_status = "$state on $on";
			if ($state ne "started")
			{
				$on =~ s/\(//;
				$on =~ s/\)//;
				if ($on =~ /none/i)
				{
					$say_status = "$state";
				}
				else
				{
					$say_status = "$state (last on $on)";
				}
			}
			$body .= "$say_service\t-> $say_status\n";
		}
	}
	else
	{
		$body .= "\nThis node is not currently in the cluster.\n";
	}
	
	# Network/bond data.
	$body .= "
--[ Network Status ]--------------------------------------------------
";
	# Bridge
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev]\n");
		my $bridge_id   = $conf->{data}{network}{new}{bridge}{$dev}{id};
		my $stp_enabled = $conf->{data}{network}{new}{bridge}{$dev}{stp};
		my $interfaces  = $conf->{data}{network}{new}{bridge}{$dev}{interfaces};
		my $mac         = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		my $say_stp = "STP disabled";
		if ($stp_enabled =~ /yes/i)
		{
			$say_stp = "STP enabled";
		}
		#record($conf, "$THIS_FILE ".__LINE__."; bridge ID: [$bridge_id], say_stp: [$say_stp], mac: [$mac], interfaces: [$interfaces]\n");
		my $interface0 = "";
		my @interfaces;
		if ($interfaces)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; interfaces: [$interfaces]\n");
			foreach my $iface (split/, /, $interfaces)
			{
				#record($conf, "$THIS_FILE ".__LINE__."; iface: [$iface]\n");
				if ($interface0 eq "")
				{
					$interface0 = $iface;
					#record($conf, "$THIS_FILE ".__LINE__."; interface0: [$interface0]\n");
				}
				else
				{
					push @interfaces, $iface;
					#record($conf, "$THIS_FILE ".__LINE__."; pushing iface: [$iface] onto \@interfaces\n");
				}
			}
		}
		my $say_iface_mac  = "";
		my $iface_count    = @interfaces;
		my $say_interface0 = "\\- $interface0";
		if ($interface0)
		{
			$say_iface_mac = $conf->{data}{network}{new}{dev}{$interface0}{hwaddr};
			#record($conf, "$THIS_FILE ".__LINE__."; interface0: [$interface0], say_iface_mac: [$say_iface_mac]\n");
			if ($iface_count > 0)
			{
				$say_interface0 = "|- $interface0, MAC: $say_iface_mac";
			}
		}
		else
		{
			$say_interface0 = "\\- No connections";
		}
		$body .= "
Bridge:   $dev, MAC: $mac, $say_stp
Links(s): $say_interface0
";
		foreach (my $i=0; $i<$iface_count; $i++)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; i: [$i], iface_count: [$iface_count], interface: [$interfaces[$i]]\n");
			$say_iface_mac = $conf->{data}{network}{new}{dev}{$interfaces[$i]}{hwaddr};
			my $say_iface = "|- $interfaces[$i], MAC: $say_iface_mac\n";
			if ($i == ($iface_count - 1))
			{
				$say_iface = "\\- $interfaces[$i], MAC: $say_iface_mac\n";
			}
			$body .= "          $say_iface";
		}
	}
	
	# Bonds
	$conf->{data}{network}{new}{iface_in_bond} = "";
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		my $say_out = "Internet-Facing Network";
		if ($dev =~ /bond0/i)
		{
			$say_out = "Back-Channel Network"
		}
		elsif ($dev =~ /bond1/i)
		{
			$say_out = "Storage Network"
		}
		my $first_slave       = $conf->{data}{network}{new}{bond}{$dev}{first_slave};
		my $active_slave      = $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		
		my $first_mac         = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{real_mac};
		my $first_mii_status  = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{mii_status};
		my $first_fail_count  = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{link_failure_count};
		my $first_speed       = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{speed};
		my $first_duplex      = $conf->{data}{network}{new}{bond}{$dev}{slave}{$first_slave}{duplex};
		
		my $second_slave      = $conf->{data}{network}{new}{bond}{$dev}{second_slave};
		my $second_mac        = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{real_mac};
		my $second_mii_status = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{mii_status};
		my $second_fail_count = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{link_failure_count};
		my $second_speed      = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{speed};
		my $second_duplex     = $conf->{data}{network}{new}{bond}{$dev}{slave}{$second_slave}{duplex};
		
		my $active_mac        = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		my $slave_count       = $conf->{data}{network}{new}{bond}{$dev}{slave_count};
		my $mode              = $conf->{data}{network}{new}{bond}{$dev}{mode};
		my $primary_slave     = $conf->{data}{network}{new}{bond}{$dev}{primary}{slave};
		my $primary_reselect  = $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect};
		my $up_delay          = $conf->{data}{network}{new}{bond}{$dev}{delay}{up};
		my $mii_mon           = $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval};
		my $mii_status        = $conf->{data}{network}{new}{bond}{$dev}{mii}{status};
		my $mtu               = $conf->{data}{network}{new}{dev}{$dev}{mtu};
		
		# Record the interfaces in the bond so that I can skip them in
		# the interface print out.
		$conf->{data}{network}{new}{iface_in_bond} .= "$first_slave,$second_slave,";
		
		# Draw the bond diagram
		my $say_line1 = "-+- $first_slave -+-> $say_out";
		my $say_line2 = "\\- $second_slave -/";
		if ($active_slave =~ /None/i)
		{
			# Bond is down.
			$say_line1 = "-+- $first_slave -x    *Link to $say_out lost!*";
			$say_line2 = "\\- $second_slave -x";
		}
		elsif ($active_slave eq $primary_slave)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; Secondary slave: [$second_slave], mii status: [$second_mii_status]\n");
			if ($second_mii_status =~ /down/i)
			{
				$say_line2 = "\\- $second_slave -x";
			}
		}
		elsif ($active_slave eq $second_slave)
		{
			$say_line1 = "-+- $first_slave -\\";
			$say_line2 = "\\- $second_slave -+-> $say_out";
			if ($first_mii_status =~ /down/i)
			{
				$say_line1 = "-+- $first_slave -x";
			}
		}
		
		# Prepare other details
		my $say_reselect        = "On Failure";
		my $say_reselect_policy = "";
		if (($primary_reselect =~ /none/i) || ($primary_reselect =~ /failure/i))
		{
			$say_reselect = "Reselect on failure";
		}
		elsif ($primary_reselect =~ /always/i)
		{
			if ($up_delay eq "0")
			{
				$say_reselect = "Primary always, without delay";
			}
			else
			{
				$say_reselect = "Primary always, after ${up_delay} seconds";
			}
		}
		elsif ($primary_reselect =~ /better/i)
		{
			if ($up_delay eq "0")
			{
				$say_reselect = "Whichever is faster, without delay";
			}
			else
			{
				$say_reselect = "Whichever is faster, after ${up_delay} seconds";
			}
		}
		my $say_link_check = "Rely on driver notification";
		if (($mii_mon =~ /^\d+$/) && ($mii_mon > 0))
		{
			$say_link_check = "Every $mii_mon ms";
		}
		
		# Sort out the interface details
		my $say_first_link_state  = "--";
		my $say_second_link_state = "--";
		my $say_first_duplex      = "";
		my $say_second_duplex     = "";
		
		#record($conf, "$THIS_FILE ".__LINE__."; first MII status: [$first_mii_status], second MII status: [$second_mii_status]\n");
		# First interface
		if ($first_mii_status =~ /up/i)
		{
			$say_first_link_state = "Up";
			if ($first_duplex)
			{
				if ($first_duplex =~ /full/i)
				{
					$say_first_duplex = "FD";
				}
				else
				{
					$say_first_duplex = "HD";
				}
			}
		}
		elsif ($first_mii_status =~ /down/i)
		{
			$say_first_link_state = "Down";
			$first_speed          = "--";
		}
		else
		{
			$say_first_link_state = "--";
		}
		
		# Second interface
		if ($second_mii_status =~ /up/i)
		{
			$say_second_link_state = "Up";
			if ($second_duplex)
			{
				if ($second_duplex =~ /full/i)
				{
					$say_second_duplex = "FD";
				}
				else
				{
					$say_second_duplex = "HD";
				}
			}
		}
		elsif ($second_mii_status =~ /down/i)
		{
			$say_second_link_state = "Down";
			$second_speed          = "--";
			$say_second_duplex     = "";
		}
		else
		{
			$say_second_link_state  = "--";
		}
		
		my $say_first_speed    = "$first_speed $say_first_duplex";
		my $say_second_speed   = "$second_speed $say_second_duplex";
		my $pad_length         = 17;
		$first_fail_count      = sprintf("%-${pad_length}s", $first_fail_count);
		$say_first_speed       = sprintf("%-${pad_length}s", $say_first_speed);
		$say_first_link_state  = sprintf("%-${pad_length}s", $say_first_link_state);
		$second_fail_count     = sprintf("%-${pad_length}s", $second_fail_count);
		$say_second_speed      = sprintf("%-${pad_length}s", $say_second_speed);
		$say_second_link_state = sprintf("%-${pad_length}s", $say_second_link_state);
		
		$body .= "
Bond: $dev $say_line1
             $say_line2
      
    Active Slave: $active_slave using MAC: $active_mac
    Prefer Slave: $primary_slave
    Reselect:     $say_reselect
    Link Check:   $say_link_check
    MTU Size:     $mtu Bytes

                 +-------------------+-------------------+
       Slaves    |       $first_slave        |       $second_slave        |
    +------------+-------------------+-------------------+
    | Link:      | $say_first_link_state | $say_second_link_state |
    | Speed:     | $say_first_speed | $say_second_speed |
    | MAC:       | $first_mac | $second_mac |
    | Failures:  | $first_fail_count | $second_fail_count |
    +------------+-------------------+-------------------+
";
	}

	# This will only show information for interfaces not in a bond.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
	{
		next if $dev !~ /eth/i;
		next if $conf->{data}{network}{new}{iface_in_bond} =~ /$dev,/;
		my $mac   = $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		my $state = $conf->{data}{network}{new}{dev}{$dev}{'state'};
		my $mtu   = $conf->{data}{network}{new}{dev}{$dev}{mtu};
		my $ip    = $conf->{data}{network}{new}{dev}{$dev}{ip_address} ? $conf->{data}{network}{new}{dev}{$dev}{ip_address} : "--";
		my $nm    = $conf->{data}{network}{new}{dev}{$dev}{netmask}    ? $conf->{data}{network}{new}{dev}{$dev}{netmask}    : "--";
		$body .= "
Interface: $dev
           Address: $ip / $nm
           State:   $state
           MAC:     $mac
           MTU:     $mtu
";
	}
	
	# Storage information.
	$body .= "
--[ Storage Status ]--------------------------------------------------
";
	# What to display depends on the storage type.
	if ($conf->{'system'}{storage} eq "lsi")
	{
		$body = get_current_state_lsi($conf, $body);
	}
	else
	{
		$body .= "\nUnknown storage type, information unavailable.\n\n";
	}
	
	$body .= "
--[ Host Power and Thermal Sensors ]----------------------------------
";
	# Power and thermal information
	if ($conf->{'system'}{ipmi_available})
	{
		# Power state
		my ($say_psu1_state, $say_psu1_watts) = (split/,/, $conf->{data}{ipmi}{new}{psu1_power}, 2);
		my ($say_psu2_state, $say_psu2_watts) = (split/,/, $conf->{data}{ipmi}{new}{psu2_power}, 2);
		
		$say_psu1_state = sprintf("%-6s", $say_psu1_state);
		$say_psu2_state = sprintf("%-6s", $say_psu2_state);
		$say_psu1_watts = sprintf("%-10s", $say_psu1_watts);
		$say_psu2_watts = sprintf("%-10s", $say_psu2_watts);
		
		# Some models have two PSU fans.
		if ((exists $conf->{data}{ipmi}{new}{fan1_psu1}) ||
		    (exists $conf->{data}{ipmi}{new}{fan2_psu1}) ||
		    (exists $conf->{data}{ipmi}{new}{fan1_psu2}) ||
		    (exists $conf->{data}{ipmi}{new}{fan2_psu2}))
		{
			# There are no temp readings in the RX300 S6, which 
			# this section supports.
			my ($say_fan1_psu1_state, $say_fan1_psu1_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan1_psu1}, 2);
			#record($conf, "$THIS_FILE ".__LINE__." say_fan1_psu1_state: [$say_fan1_psu1_state], say_fan1_psu1_rpms: [$say_fan1_psu1_rpms], data::ipmi::new::fan1_psu1: [$conf->{data}{ipmi}{new}{fan1_psu1}]\n");
			my ($say_fan2_psu1_state, $say_fan2_psu1_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan2_psu1}, 2);
			#record($conf, "$THIS_FILE ".__LINE__." say_fan2_psu1_state: [$say_fan2_psu1_state], say_fan2_psu1_rpms: [$say_fan2_psu1_rpms], data::ipmi::new::fan2_psu1: [$conf->{data}{ipmi}{new}{fan2_psu1}]\n");
			my ($say_fan1_psu2_state, $say_fan1_psu2_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan1_psu2}, 2);
			#record($conf, "$THIS_FILE ".__LINE__." say_fan1_psu2_state: [$say_fan1_psu2_state], say_fan1_psu2_rpms: [$say_fan1_psu2_rpms], data::ipmi::new::fan1_psu2: [$conf->{data}{ipmi}{new}{fan1_psu2}]\n");
			my ($say_fan2_psu2_state, $say_fan2_psu2_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan2_psu2}, 2);
			#record($conf, "$THIS_FILE ".__LINE__." say_fan2_psu2_state: [$say_fan2_psu2_state], say_fan2_psu2_rpms: [$say_fan2_psu2_rpms], data::ipmi::new::fan2_psu2: [$conf->{data}{ipmi}{new}{fan2_psu2}]\n");
			
			my $say_fan1_psu1 = $say_fan1_psu1_rpms;
			if ($say_fan1_psu1_state ne "ok")
			{
				$say_fan1_psu1 = $say_fan1_psu1_state;
				record($conf, "$THIS_FILE ".__LINE__." say_fan1_psu1: [$say_fan1_psu1]\n");
			}
			$say_fan1_psu1 = sprintf("%-13s", $say_fan1_psu1);
			
			my $say_fan2_psu1 = $say_fan2_psu1_rpms;
			if ($say_fan2_psu1_state ne "ok")
			{
				$say_fan2_psu1 = $say_fan2_psu1_state;
				record($conf, "$THIS_FILE ".__LINE__." say_fan2_psu1: [$say_fan2_psu1]\n");
			}
			$say_fan2_psu1 = sprintf("%-13s", $say_fan2_psu1);
			
			my $say_fan1_psu2 = $say_fan1_psu2_rpms;
			if ($say_fan1_psu2_state ne "ok")
			{
				$say_fan1_psu2 = $say_fan1_psu2_state;
				record($conf, "$THIS_FILE ".__LINE__." say_fan1_psu2: [$say_fan1_psu2]\n");
			}
			$say_fan1_psu2 = sprintf("%-13s", $say_fan1_psu2);
			
			my $say_fan2_psu2 = $say_fan2_psu2_rpms;
			if ($say_fan2_psu2_state ne "ok")
			{
				$say_fan2_psu2 = $say_fan2_psu2_state;
				record($conf, "$THIS_FILE ".__LINE__." say_fan2_psu2: [$say_fan2_psu2]\n");
			}
			$say_fan2_psu2 = sprintf("%-13s", $say_fan2_psu2);
			
			$body .= "
		+--------+------------+---------------+---------------+
 Power Supplies | Status |  Wattage   |  Fan 1 Speed  |  Fan 2 Speed  |
+---------------+--------+------------+---------------+---------------+
|     PSU 1     | $say_psu1_state | $say_psu1_watts | $say_fan1_psu1 | $say_fan2_psu1 |
|     PSU 2     | $say_psu2_state | $say_psu2_watts | $say_fan1_psu2 | $say_fan2_psu2 |
+---------------+--------+------------+---------------+---------------+

";
		}
		else
		{
			# This applies to the RX300 S7
			my ($say_psu1_fan_state, $say_psu1_fan_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan_psu1}, 2);
			my ($say_psu2_fan_state, $say_psu2_fan_rpms) = (split/,/, $conf->{data}{ipmi}{new}{fan_psu2}, 2);
			my $say_psu1_fan = $say_psu1_fan_rpms;
			if ($say_psu1_fan_state ne "ok")
			{
				$say_psu1_fan = $say_psu1_fan_state;
			}
			$say_psu1_fan = sprintf("%-11s", $say_psu1_fan);
			my $say_psu2_fan = $say_psu2_fan_rpms;
			if ($say_psu2_fan_state ne "ok")
			{
				$say_psu2_fan = $say_psu2_fan_state;
			}
			$say_psu2_fan = sprintf("%-11s", $say_psu2_fan);

			my ($say_psu1_temp_inlet_state, $say_psu1_temp_inlet) = (split/,/, $conf->{data}{ipmi}{new}{psu1_inlet}, 2);
			my ($say_psu2_temp_inlet_state, $say_psu2_temp_inlet) = (split/,/, $conf->{data}{ipmi}{new}{psu2_inlet}, 2);
			$say_psu1_temp_inlet =~ s/\s.*//g;
			$say_psu1_temp_inlet .= " *C";
			$say_psu2_temp_inlet =~ s/\s.*//g;
			$say_psu2_temp_inlet .= " *C";
			if ($conf->{'system'}{use_fahrenheit})
			{
				$say_psu1_temp_inlet = convert_to_fahrenheit($conf, $say_psu1_temp_inlet);
				$say_psu2_temp_inlet = convert_to_fahrenheit($conf, $say_psu2_temp_inlet);
			}
			my $say_psu1_intake = sprintf("%-14s", "$say_psu1_temp_inlet_state, $say_psu1_temp_inlet");
			my $say_psu2_intake = sprintf("%-14s", "$say_psu2_temp_inlet_state, $say_psu2_temp_inlet");

			my ($say_psu1_temp_state, $say_psu1_temp) = (split/,/, $conf->{data}{ipmi}{new}{psu1}, 2);
			my ($say_psu2_temp_state, $say_psu2_temp) = (split/,/, $conf->{data}{ipmi}{new}{psu2}, 2);
			$say_psu1_temp =~ s/\s.*//g;
			$say_psu1_temp .= " *C";
			$say_psu2_temp =~ s/\s.*//g;
			$say_psu2_temp .= " *C";
			if ($conf->{'system'}{use_fahrenheit})
			{
				$say_psu1_temp = convert_to_fahrenheit($conf, $say_psu1_temp);
				$say_psu2_temp = convert_to_fahrenheit($conf, $say_psu2_temp);
			}
			my $say_psu1_core = sprintf("%-14s", "$say_psu1_temp_state, $say_psu1_temp");
			my $say_psu2_core = sprintf("%-14s", "$say_psu2_temp_state, $say_psu2_temp");
		
			$body .= "
		+--------+------------+-------------+
 Power Supplies | Status |  Wattage   |  Fan Speed  |
+---------------+--------+------------+-------------+
|     PSU 1     | $say_psu1_state | $say_psu1_watts | $say_psu1_fan |
|     PSU 2     | $say_psu2_state | $say_psu2_watts | $say_psu2_fan |
+---------------+--------+------------+-------------+

		+----------------+----------------+
 Power Supplies |     Intake     |      Core      |
+---------------+----------------+----------------+
|     PSU 1     | $say_psu1_intake | $say_psu1_core |
|     PSU 2     | $say_psu2_intake | $say_psu2_core |
+---------------+----------------+----------------+

";
		}
	
		# Power levels
		$body .= "
                   +--------------+--------------+--------------+
   Power Levels    |    State     |   Voltage    |   Wattage    |
+------------------+--------------+--------------+--------------+
";
		foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{new}})
		{
			#record($conf, "$THIS_FILE ".__LINE__." key: [$key], var: [$conf->{translate}{ipmi}{$key}], val: [$conf->{data}{ipmi}{new}{$key}]\n");
			my $say_var = sprintf("%-16s", $conf->{translate}{ipmi}{$key});
			my ($say_state, $say_val) = (split/,/, $conf->{data}{ipmi}{new}{$key}, 2);
			$say_state =  sprintf("%-12s", $say_state);
			my $say_volt  =  sprintf("%-12s", "--");
			my $say_watt  =  sprintf("%-12s", "--");
			if ($say_val  =~ /Volt/i)
			{
				$say_volt = sprintf("%-12s", $say_val);
			}
			elsif ($say_val =~ /Watt/i)
			{
				$say_watt = sprintf("%-12s", $say_val);
			}
			else
			{
				next;
			}
			#record($conf, "$THIS_FILE ".__LINE__." var: [$conf->{translate}{ipmi}{$key}], volts: [$say_volt], watts: [$say_watts]\n");
			$body .= "| $say_var | $say_state | $say_volt | $say_watt |\n";
		}
		$body .= "+------------------+--------------+--------------+--------------+\n";
		
		# Temperature readings.
		my $say_units = "*C";
		if ($conf->{'system'}{use_fahrenheit})
		{
			$say_units = "*F";
		}
		$body .= "
                 +-----------+-----------+
  Temperatures   |   State   | Temp ($say_units) |
+----------------+-----------+-----------+
";
		foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{new}})
		{
			my $say_var = sprintf("%-14s", $conf->{translate}{ipmi}{$key});
			my ($say_state, $say_val) = (split/,/, $conf->{data}{ipmi}{new}{$key}, 2);
			$say_state =  sprintf("%-9s", $say_state);
			my $say_temp  =  sprintf("%-9s", "--");
			if ($say_val  =~ /(.*?) degrees C/i)
			{
				my $temp = $1;
				if ($conf->{'system'}{use_fahrenheit})
				{
					$temp = convert_to_fahrenheit($conf, $temp);
				}
				$say_temp = sprintf("%-9s", "$temp");
			}
			else
			{
				next;
			}
			$body .= "| $say_var | $say_state | $say_temp |\n";
		}
		$body .= "+----------------+-----------+-----------+\n";
		
		# Fans.
		$body .= "
                 +-----------+-----------+
  Cooling Fans   |   State   |   RPMs    |
+----------------+-----------+-----------+
";
		foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{new}})
		{
			my $say_var = sprintf("%-14s", $conf->{translate}{ipmi}{$key});
			my ($say_state, $say_val) = (split/,/, $conf->{data}{ipmi}{new}{$key}, 2);
			$say_state =  sprintf("%-9s", $say_state);
			my $say_speed =  sprintf("%-9s", "--");
			if ($say_val  =~ /(.*?) RPM/i)
			{
				my $speed = $1;
				$say_speed = sprintf("%-9s", "$speed");
			}
			else
			{
				next;
			}
			$body .= "| $say_var | $say_state | $say_speed |\n";
		}
		$body .= "+----------------+-----------+-----------+\n";
	}
	else
	{
		$body .= "
Unable to connect to the IPMI's BMC or no IPMI available on this node.
";
	}
	
	# UPS Info
	$body .= "
--[ UPS Status ]------------------------------------------------------
";
	# What to display depends on the storage type.
	if ($conf->{'system'}{ups_available})
	{
		#$body = get_current_state_lsi($conf, $body);
		foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{ups_name}})
		{
			my $say_status          = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{STATUS}   ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{STATUS}   : "--";
			my $say_model           = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{MODEL}    ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{MODEL}    : "--";
			my $say_serial          = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{SERIALNO} ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{SERIALNO} : "--";
			my $say_batter_voltage  = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{BATTV}    ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{BATTV}    : "--";
			my $say_battery_charge  = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{BCHARGE}  ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{BCHARGE}  : "--";
			my $say_load_percentage = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{LOADPCT}  ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{LOADPCT}  : "--";
			my $say_line_voltage    = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{LINEV}    ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{LINEV}    : "--";
			my $say_output_voltage  = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{OUTPUTV}  ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{OUTPUTV}  : "--";
			my $say_current_runtime = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{TIMELEFT} ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{TIMELEFT} : "--";
			my $say_internal_temp   = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{ITEMP}    ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{ITEMP}    : "--";
			my $say_firmware        = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{FIRMWARE} ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{FIRMWARE} : "--";
			my $say_self_test       = defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{SELFTEST} ? $conf->{data}{ups}{new}{ups_name}{$ups_name}{SELFTEST} : "--";
			   $say_internal_temp   =~ s/(\d) .*$/$1/;
			   $say_internal_temp   .= " *C";
			if ($conf->{'system'}{use_fahrenheit})
			{
				$say_internal_temp = convert_to_fahrenheit($conf, $say_internal_temp);
			}
			   $say_load_percentage =~ s/(\d) .*$/$1/;
			   $say_load_percentage .= " %";
			   $say_battery_charge  =~ s/(\d) .*$/$1/;
			   $say_battery_charge  .= " %";
			   $say_batter_voltage  =~ s/(\d) .*$/$1/;
			   $say_batter_voltage  .= " vAC";
			my $space               = 15;
			my $say_ups_name        = sprintf("%-${space}s", $ups_name);
			   $say_status          = sprintf("%-${space}s", $say_status);
			   $say_model           = sprintf("%-${space}s", $say_model);
			   $say_serial          = sprintf("%-${space}s", $say_serial);
			   $say_current_runtime = sprintf("%-${space}s", $say_current_runtime);
			   $say_self_test       = sprintf("%-${space}s", $say_self_test);
			   
			$body .= "
Name:        $say_ups_name 
Status:      $say_status Temperature:     $say_internal_temp
Model:       $say_model Battery Voltage: $say_batter_voltage
Serial #:    $say_serial Battery Charge:  $say_battery_charge
Holdup Time: $say_current_runtime Current Load:    $say_load_percentage
Self Test:   $say_self_test Firmware:        $say_firmware

Mains -> $say_line_voltage -> UPS -> $say_output_voltage -> PDU
";
		}
	}
	else
	{
		$body .= "\nUPSes not found or 'apcupsd' is not running.\n\n";
	}
	
# 	print "Email body:
# ===========================================================
# $body
# ===========================================================
# ";
# 	exit;
	
	return($body);
}

# This cycles through the 'new' and 'old' hashes, looking for changes. If
# anything has changed, it will send an email.
sub compare_new_and_old
{
	my ($conf) = @_;
	
	my $changes = "";
	
	# Check clustat for changes.
	$conf->{data}{clustat}{old}{cluster} = "--" if not defined $conf->{data}{clustat}{old}{cluster};
	$conf->{data}{clustat}{new}{cluster} = "--" if not defined $conf->{data}{clustat}{new}{cluster};
	if ($conf->{data}{clustat}{old}{cluster} ne $conf->{data}{clustat}{new}{cluster})
	{
		# Cluster name changed.
		$changes .= "\nCluster name change!\n";
		$changes .= "  $conf->{data}{clustat}{old}{cluster}\t-> $conf->{data}{clustat}{new}{cluster}\n";
	}
	$conf->{data}{clustat}{old}{quorum} = "--" if not defined $conf->{data}{clustat}{old}{quorum};
	$conf->{data}{clustat}{new}{quorum} = "--" if not defined $conf->{data}{clustat}{new}{quorum};
	if ($conf->{data}{clustat}{old}{quorum} ne $conf->{data}{clustat}{new}{cluster})
	{
		# Quorum status changed.
		$changes .= "\nQuorum state change!\n";
		$changes .= "  $conf->{data}{clustat}{old}{quorum}\t-> $conf->{data}{clustat}{new}{quorum}\n";
	}
	delete $conf->{data}{cluster}{diff}{cluster};
	delete $conf->{data}{cluster}{diff}{quorum};
	foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{node}})
	{
		my $say_title = 1;
		$conf->{data}{clustat}{old}{node}{$node}{status} = "--" if not defined $conf->{data}{clustat}{old}{node}{$node}{status};
		$conf->{data}{clustat}{new}{node}{$node}{status} = "--" if not defined $conf->{data}{clustat}{new}{node}{$node}{status};
		if ($conf->{data}{clustat}{old}{node}{$node}{status} ne $conf->{data}{clustat}{new}{node}{$node}{status})
		{
			if ($say_title)
			{
				$changes   .= "\nNode $node; State change!\n";
				$say_title =  1;
			}
			$changes .= "  $conf->{data}{clustat}{old}{node}{$node}{status}\t-> $conf->{data}{clustat}{new}{node}{$node}{status}\n";
		}
		delete $conf->{data}{clustat}{diff}{node}{$node}{status};
	}
	foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{new}{service}})
	{
		my $say_service_title = 1;
		my $say_vm_title      = 1;
		#record($conf, "$THIS_FILE ".__LINE__."; checking for state change in service: [$service]\n");
		$conf->{data}{clustat}{old}{service}{$service}{'state'} = "--" if not defined $conf->{data}{clustat}{old}{service}{$service}{'state'};
		$conf->{data}{clustat}{new}{service}{$service}{'state'} = "--" if not defined $conf->{data}{clustat}{new}{service}{$service}{'state'};
		$conf->{data}{clustat}{old}{service}{$service}{on}      = "--" if not defined $conf->{data}{clustat}{old}{service}{$service}{on};
		$conf->{data}{clustat}{new}{service}{$service}{on}      = "--" if not defined $conf->{data}{clustat}{new}{service}{$service}{on};
		#record($conf, "$THIS_FILE ".__LINE__."; old state / on: [$conf->{data}{clustat}{old}{service}{$service}{'state'}] / [$conf->{data}{clustat}{old}{service}{$service}{on}], new state / on: [$conf->{data}{clustat}{new}{service}{$service}{'state'}] / [$conf->{data}{clustat}{new}{service}{$service}{on}]\n");
		if (($conf->{data}{clustat}{old}{service}{$service}{'state'} ne $conf->{data}{clustat}{new}{service}{$service}{'state'}) ||
		    ($conf->{data}{clustat}{old}{service}{$service}{on}      ne $conf->{data}{clustat}{new}{service}{$service}{on}))
		{
			my $say_service = "";
			if ($service =~ /service:(.*)/i)
			{
				if ($say_service_title)
				{
					$say_service       = "Service $1; State change!";
					$say_service_title = 0;
				}
			}
			elsif ($service =~ /vm:(.*)/i)
			{
				if ($say_vm_title)
				{
					$say_service  = "VM $1; State change!";
					$say_vm_title = 0;
				}
			}
			$changes .= "\n$say_service\n";
			$changes .= "  $conf->{data}{clustat}{old}{service}{$service}{'state'}\t-> $conf->{data}{clustat}{new}{service}{$service}{'state'}\n";
			$changes .= "  $conf->{data}{clustat}{old}{service}{$service}{on}\t-> $conf->{data}{clustat}{new}{service}{$service}{on}\n";
		}
		delete $conf->{data}{clustat}{diff}{service}{$service}{on};
		delete $conf->{data}{clustat}{diff}{service}{$service}{'state'};
	}
	
	# Check for changes in the network.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		### NOTE: I don't care about the bridge ID at this point.
		#$conf->{data}{network}{old}{bridge}{$dev}{id} = "--" if not exists $conf->{data}{network}{old}{bridge}{$dev}{id};
		#$conf->{data}{network}{new}{bridge}{$dev}{id} = "--" if not exists $conf->{data}{network}{new}{bridge}{$dev}{id};
		#if ($conf->{data}{network}{old}{bridge}{$dev}{id} ne $conf->{data}{network}{new}{bridge}{$dev}{id})
		#{
		#	$changes .= "Bridge ID changed!\n";
		#	$changes .= "  $conf->{data}{network}{old}{bridge}{$dev}{id}\t-> $conf->{data}{network}{new}{bridge}{$dev}{id}\n";
		#}
		
		$conf->{data}{network}{old}{bridge}{$dev}{stp} = "--" if not exists $conf->{data}{network}{old}{bridge}{$dev}{stp};
		$conf->{data}{network}{new}{bridge}{$dev}{stp} = "--" if not exists $conf->{data}{network}{new}{bridge}{$dev}{stp};
		if ($conf->{data}{network}{old}{bridge}{$dev}{stp} ne $conf->{data}{network}{new}{bridge}{$dev}{stp})
		{
			$changes .= "\nBridge Spanning Tree Protocol changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bridge}{$dev}{stp}\t-> $conf->{data}{network}{new}{bridge}{$dev}{stp}\n";
		}
		delete $conf->{data}{network}{diff}{bridge}{$dev}{stp};
		
		$conf->{data}{network}{old}{dev}{$dev}{hwaddr} = "--" if not exists $conf->{data}{network}{old}{dev}{$dev}{hwaddr};
		$conf->{data}{network}{new}{dev}{$dev}{hwaddr} = "--" if not exists $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		if ($conf->{data}{network}{old}{dev}{$dev}{hwaddr} ne $conf->{data}{network}{new}{dev}{$dev}{hwaddr})
		{
			$changes .= "\nBridge $dev; MAC address has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{hwaddr}\t-> $conf->{data}{network}{new}{dev}{$dev}{hwaddr}\n";
		}
		delete $conf->{data}{network}{diff}{bridge}{$dev}{hwaddr};
		
		# I don't watch for changes of interfaces on the bridge because
		# they change with the coming and goind of the bonds or VM's
		# vnetX devices, which will trigger their own email changes.
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		my $say_out = "Internet-Facing Network";
		if ($dev =~ /bond0/i)
		{
			$say_out = "Back-Channel Network"
		}
		elsif ($dev =~ /bond1/i)
		{
			$say_out = "Storage Network"
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mode} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mode};
		$conf->{data}{network}{new}{bond}{$dev}{mode} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mode};
		if ($conf->{data}{network}{old}{bond}{$dev}{mode} ne $conf->{data}{network}{new}{bond}{$dev}{mode})
		{
			$changes .= "\nBond $dev ($say_out); Mode has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mode}\t-> $conf->{data}{network}{new}{bond}{$dev}{mode}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{primary}{slave} = "" if not exists $conf->{data}{network}{old}{bond}{$dev}{primary}{slave};
		$conf->{data}{network}{new}{bond}{$dev}{primary}{slave} = "" if not exists $conf->{data}{network}{new}{bond}{$dev}{primary}{slave};
		if ($conf->{data}{network}{old}{bond}{$dev}{primary}{slave} ne $conf->{data}{network}{new}{bond}{$dev}{primary}{slave})
		{
			$changes .= "\nBond $dev ($say_out); primary slave has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{primary}{slave}\t-> $conf->{data}{network}{new}{bond}{$dev}{primary}{slave}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{primary}{reselect} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{primary}{reselect};
		$conf->{data}{network}{new}{bond}{$dev}{primary}{reselect} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect};
		if ($conf->{data}{network}{old}{bond}{$dev}{primary}{reselect} ne $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect})
		{
			$changes .= "\nBond $dev ($say_out); primary reselect policy has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{primary}{reselect}\t-> $conf->{data}{network}{new}{bond}{$dev}{primary}{reselect}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{delay}{up} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{delay}{up};
		$conf->{data}{network}{new}{bond}{$dev}{delay}{up} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{delay}{up};
		if ($conf->{data}{network}{old}{bond}{$dev}{delay}{up} ne $conf->{data}{network}{new}{bond}{$dev}{delay}{up})
		{
			$changes .= "\nBond $dev ($say_out); Primary reselect delay has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{delay}{up}\t-> $conf->{data}{network}{new}{bond}{$dev}{delay}{up}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval};
		$conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval};
		if ($conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval} ne $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval})
		{
			$changes .= "\nBond $dev ($say_out); Link check internal has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mii}{polling_interval}\t-> $conf->{data}{network}{new}{bond}{$dev}{mii}{polling_interval}\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{mii}{status} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{mii}{status};
		$conf->{data}{network}{new}{bond}{$dev}{mii}{status} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{mii}{status};
		if ($conf->{data}{network}{old}{bond}{$dev}{mii}{status} ne $conf->{data}{network}{new}{bond}{$dev}{mii}{status})
		{
			$changes .= "\nBond $dev ($say_out); Link status has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{mii}{status}\t-> $conf->{data}{network}{new}{bond}{$dev}{mii}{status}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{mtu} = "--" if not exists $conf->{data}{network}{old}{dev}{$dev}{mtu};
		$conf->{data}{network}{new}{dev}{$dev}{mtu} = "--" if not exists $conf->{data}{network}{new}{dev}{$dev}{mtu};
		if ($conf->{data}{network}{old}{dev}{$dev}{mtu} ne $conf->{data}{network}{new}{dev}{$dev}{mtu})
		{
			$changes .= "\nBond $dev ($say_out); Maximum Transmition Unit (MTU) size has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{mtu} Bytes\t-> $conf->{data}{network}{new}{dev}{$dev}{mtu} Bytes\n";
		}
		
		$conf->{data}{network}{old}{bond}{$dev}{active_slave} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{active_slave};
		$conf->{data}{network}{new}{bond}{$dev}{active_slave} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		if ($conf->{data}{network}{old}{bond}{$dev}{active_slave} ne $conf->{data}{network}{new}{bond}{$dev}{active_slave})
		{
			$changes .= "\nBond $dev ($say_out); Active slave interface has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{active_slave}\t-> $conf->{data}{network}{new}{bond}{$dev}{active_slave}\n";
		}
		
		# Now the slaves
		my $first_slave  = $conf->{data}{network}{new}{bond}{$dev}{first_slave}  ? $conf->{data}{network}{new}{bond}{$dev}{first_slave}  : "";
		my $second_slave = $conf->{data}{network}{new}{bond}{$dev}{second_slave} ? $conf->{data}{network}{new}{bond}{$dev}{second_slave} : "";
		my $active_slave = $conf->{data}{network}{new}{bond}{$dev}{active_slave};
		
		my $first = 1;
		foreach my $slave ($first_slave, $second_slave)
		{
			my $say_position = $first ? "First" : "Second";
			if ($slave)
			{
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac})
				{
					# lulwut?
					$changes .= "\nBond $dev ($say_out); $say_position slave ${slave}'s MAC address has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{real_mac}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{real_mac}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status})
				{
					$changes .= "\nBond $dev ($say_out); $say_position slave ${slave}'s link status has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{mii_status}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{mii_status}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count})
				{
					$changes .= "\nBond $dev ($say_out); $say_position slave ${slave}'s link failure count has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{link_failure_count}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{link_failure_count}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed}  = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed}  = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed})
				{
					$changes .= "\nBond $dev ($say_out); $say_position slave ${slave}'s link speed has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{speed}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{speed}\n";
				}
				
				$conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex} = "--" if not exists $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex};
				$conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex} = "--" if not exists $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex};
				if ($conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex} ne $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex})
				{
					$changes .= "\nBond $dev ($say_out); $say_position slave ${slave}'s link duplex has changed!\n";
					$changes .= "  $conf->{data}{network}{old}{bond}{$dev}{slave}{$slave}{duplex}\t-> $conf->{data}{network}{new}{bond}{$dev}{slave}{$slave}{duplex}\n";
				}
			}
			else
			{
				$changes .= "\nBond $dev ($say_out); has lost it's ".lc($say_position)." slave interface!\n";
			}
			$first = 0;
		}
	}
	
	# Check network interfaces
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
	{
		next if $dev !~ /eth/i;
		$conf->{data}{network}{old}{dev}{$dev}{hwaddr}     = "--" if not defined $conf->{data}{network}{old}{dev}{$dev}{hwaddr};
		$conf->{data}{network}{new}{dev}{$dev}{hwaddr}     = "--" if not defined $conf->{data}{network}{new}{dev}{$dev}{hwaddr};
		if ($conf->{data}{network}{old}{dev}{$dev}{hwaddr} ne $conf->{data}{network}{new}{dev}{$dev}{hwaddr})
		{
			$changes .= "\nInterface $dev; MAC address has changed!\n";
			$changes .= "  NOTE: This is expected when the active slave in a bond changes\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{hwaddr}\t-> $conf->{data}{network}{new}{dev}{$dev}{hwaddr}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{'state'}    = "--" if not defined $conf->{data}{network}{old}{dev}{$dev}{'state'};
		$conf->{data}{network}{new}{dev}{$dev}{'state'}    = "--" if not defined $conf->{data}{network}{new}{dev}{$dev}{'state'};
		if ($conf->{data}{network}{old}{dev}{$dev}{'state'} ne $conf->{data}{network}{new}{dev}{$dev}{'state'})
		{
			$changes .= "\nInterface $dev; The state of the interface has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{'state'}\t-> $conf->{data}{network}{new}{dev}{$dev}{'state'}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{mtu}        = "--" if not defined $conf->{data}{network}{old}{dev}{$dev}{mtu};
		$conf->{data}{network}{new}{dev}{$dev}{mtu}        = "--" if not defined $conf->{data}{network}{new}{dev}{$dev}{mtu};
		if ($conf->{data}{network}{old}{dev}{$dev}{mtu} ne $conf->{data}{network}{new}{dev}{$dev}{mtu})
		{
			$changes .= "\nInterface $dev; MTU size has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{mtu}\t-> $conf->{data}{network}{new}{dev}{$dev}{mtu}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{ip_address} = "--" if not defined $conf->{data}{network}{old}{dev}{$dev}{ip_address};
		$conf->{data}{network}{new}{dev}{$dev}{ip_address} = "--" if not defined $conf->{data}{network}{new}{dev}{$dev}{ip_address};
		if ($conf->{data}{network}{old}{dev}{$dev}{ip_address} ne $conf->{data}{network}{new}{dev}{$dev}{ip_address})
		{
			$changes .= "\nInterface $dev; IP Address has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{ip_address}\t-> $conf->{data}{network}{new}{dev}{$dev}{ip_address}\n";
		}
		
		$conf->{data}{network}{old}{dev}{$dev}{netmask}    = "--" if not defined $conf->{data}{network}{old}{dev}{$dev}{netmask};
		$conf->{data}{network}{new}{dev}{$dev}{netmask}    = "--" if not defined $conf->{data}{network}{new}{dev}{$dev}{netmask};
		if ($conf->{data}{network}{old}{dev}{$dev}{netmask} ne $conf->{data}{network}{new}{dev}{$dev}{netmask})
		{
			$changes .= "\nInterface $dev; Subnet Mask has changed!\n";
			$changes .= "  $conf->{data}{network}{old}{dev}{$dev}{netmask}\t-> $conf->{data}{network}{new}{dev}{$dev}{netmask}\n";
		}
	}
	
	# Check for changes in the storage.
	if ($conf->{'system'}{storage} eq "lsi")
	{
		foreach my $adapter (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}})
		{
			foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}})
			{
				# Some keys are hash references
				if ($key eq "vd")
				{
					foreach my $vd (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}})
					{
						foreach my $target_id (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}})
						{
							foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}})
							{
								my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
								$conf->{data}{lsi}{old}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var};
								$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var};
								if ($conf->{data}{lsi}{old}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var})
								{
									$changes .= "\nRAID virtual disk $adapter:$vd:$target_id \"$say_translation\" has changed!\n";
									$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var}\n";
								}
							} 
						}
					}
				}
				elsif ($key eq "bbu")
				{
					foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}})
					{
						my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
						$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var};
						$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var};
						my $new_value = $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var};
						my $old_value = $conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var};
						next if $new_value eq $old_value;
						#record($conf, "$THIS_FILE ".__LINE__."; RAID adapter $adapter, BBU $say_translation ($var); old: [$old_value], new: [$new_value]\n");
						
						# These cause unnecessary emails
						if (($var eq "next_learn_time") ||
						    ($var eq "bbu_gasgauge_status") ||
						    ($var eq "learn_cycle_requested") ||
						    ($var eq "learn_cycle_active") ||
						    ($var eq "charging_status") ||
						    ($var eq "pack_stat_configuration") ||
						    ($var eq "estimated_time_to_full_recharge") ||
						    ($var eq "fw_status_relative_state_of_charge") ||
						    ($var eq "cap_info_relative_state_of_charge") ||
						    ($var eq "cap_info_absolute_state_of_charge") ||
						    ($var eq "fw_status_absolute_state_of_charge") ||
						    ($var eq "average_time_to_empty") ||
						    ($var eq "run_time_to_empty") ||
						    ($var eq "charger_system_state") ||
						    ($var eq "cycle_count") ||
						    ($var eq "current")
						)
						{
							record($conf, "$THIS_FILE ".__LINE__."; RAID ${adapter}'s Battery Backup Unit's \"$say_translation\" has changed; $conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var} -> $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var}\n");
							next;
						}
						
						
						# I need to watch for ranges in temperature, voltage and Joules.
						if ($new_value =~ /^(\d+\.*\d*) C$/)
						{
							# I've got a temperature.
							# Do I have an old temperature?
							my $new_temp =  $1;
							my $old_temp = ($old_value =~ /(\d+\.*\d*) C$/)[0];
							#record($conf, "$THIS_FILE ".__LINE__." Comparing new: [$new_temp] to old: [$old_temp] ($new_value/$old_value)\n");
							next if $new_temp eq $old_temp;
							if ($old_temp)
							{
								# Old value.
								my $alert =  $conf->{alerts}{bbu}{delta_temp};
								my $scan  =  $conf->{'system'}{sleep_time};
								my $diff  =  $new_temp - $old_temp;
								my $delta =  $diff;
								$delta    =~ s/^-//;
								if ($delta >= $alert)
								{
									#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
									my $units = "*C";
									if ($conf->{'system'}{use_fahrenheit})
									{
										$old_temp = convert_to_fahrenheit($conf, $old_temp);
										$new_temp = convert_to_fahrenheit($conf, $new_temp);
										$units = "*F";
									}
									$conf->{'system'}{warning_event} = 1;
									$changes .= "\nRAID ${adapter}'s Battery Backup Unit's \"$say_translation\" has rapidly changed (greater than $alert *C in $scan seconds)!\n";
									$changes .= "  $old_temp $units\t-> $new_temp $units\n";
								}
								else
								{
									# Log the difference, but don't send an email.
									record($conf, "$THIS_FILE ".__LINE__."; RAID ${adapter}'s Battery Backup Unit's \"$say_translation\" has changed; $old_temp *C -> $new_temp *C\n");
								}
							}
							else
							{
								# No prior temparature.
								my $units = "*C";
								if ($conf->{'system'}{use_fahrenheit})
								{
									$new_temp = convert_to_fahrenheit($conf, $new_temp);
									$units = "*F";
								}
								$changes .= "\nRAID ${adapter}'s Battery Backup Unit's \"$say_translation\" seen for the first time.\n";
								$changes .= "  --\t-> $new_temp $units\n";
							}
							
							# Check the current temperature and see if it's above threasholds.
							my $upper_threshold      = $conf->{alerts}{bbu}{upper_temp};
							my $power_down_threshold = $conf->{alerts}{bbu}{powerdown_temp};
							if ($new_temp >= $power_down_threshold)
							{
								my $units = "*C";
								if ($conf->{'system'}{use_fahrenheit})
								{
									$old_temp = convert_to_fahrenheit($conf, $old_temp);
									$new_temp = convert_to_fahrenheit($conf, $new_temp);
									$units = "*F";
								}
								$conf->{'system'}{migration_target}   = 0;
								$conf->{'system'}{emergency_shutdown} = 1;
								$changes .= "\n#######################################################################\n";
								$changes .= "RAID ${adapter}'s Battery Backup Unit's \"$say_translation\" is at or above the critical level of $power_down_threshold *C!\n";
								$changes .= "  $old_temp $units\t-> $new_temp $units\n";
								$changes .= "#######################################################################\n";
							}
							elsif ($new_temp >= $upper_threshold)
							{
								#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
								my $units = "*C";
								if ($conf->{'system'}{use_fahrenheit})
								{
									$old_temp = convert_to_fahrenheit($conf, $old_temp);
									$new_temp = convert_to_fahrenheit($conf, $new_temp);
									$units = "*F";
								}
								$conf->{'system'}{migration_target} = 0;
								$conf->{'system'}{warning_event}    = 1;
								$changes .= "\nRAID ${adapter}'s Battery Backup Unit's \"$say_translation\" is at or above the warning level of $upper_threshold *C!\n";
								$changes .= "  $old_temp $units\t-> $new_temp $units\n";
							}
						}
						elsif ($var eq "base_voltage")
						{
							# Calculate the lower voltage by subtracting from the design voltage.
							my $current_voltage = ($new_value =~ /^(\d+\.*\d*) mV/i)[0];
							                     # I use the old table in case I've not seen the new design_voltage yet.
							my $lower_voltage =  ($conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_voltage} =~ /^(\d+\.*\d*) mV/)[0];
							   $lower_voltage -= $conf->{alerts}{bbu}{base_voltage_diff};
							#record($conf, "$THIS_FILE ".__LINE__."; Checking if the voltage in the BBU on adapter $adapter is below the lower threshhold: [$current_voltage / $lower_voltage] (design voltage: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_voltage} - $conf->{alerts}{bbu}{base_voltage_diff}]\n");
							if ($current_voltage <= $lower_voltage)
							{
								next if $conf->{'system'}{bbu_needs_attention};
								$changes .= "\nRAID ${adapter}'s Battery Backup Unit has fallen below the lower voltage threshhold!\n";
								$changes .= "Current voltage is: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}], lower threshhold: [$lower_voltage], design voltage is: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_voltage}]\n"; 
								$changes .= "  Recharging or replacing he battery is required.\n";
								$conf->{'system'}{bbu_needs_attention} = 1;
								$conf->{'system'}{warning_event}       = 1;
							}
							elsif ($conf->{'system'}{bbu_needs_attention})
							{
								# To avoid rapid flips, I only send this when the voltage goes over half the delta.
								my $ok_voltage =  ($conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_voltage} =~ /^(\d+\.*\d*) mV/)[0];
								   $ok_voltage -= int($conf->{alerts}{bbu}{base_voltage_diff} / 2);
								#record($conf, "$THIS_FILE ".__LINE__."; BBU needs attention; Checking in charged: [$current_voltage] > [$ok_voltage]\n");
								if ($current_voltage > $ok_voltage)
								{
									$changes .= "\nRAID ${adapter}'s Battery Backup Unit has risen above the minimum charge threshhold.\n";
									$changes .= "Current voltage is: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_voltage}], OK voltage is: [$ok_voltage], design voltage is: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_voltage}]\n"; 
									$changes .= "  Recharging or replacing the backup unit is required.\n";
									$conf->{'system'}{bbu_needs_attention} = 0;
								}
							}
						}
						elsif ($new_value =~ /^(\d+\.*\d*) mA/i)
						{
							my $current_amperage =  $1;
							my $previous_amerage =  ($old_value =~ /^(\d+\.*\d*) mA/i)[0];
							   $previous_amerage =  0 if not $previous_amerage;
							my $max_delta        =  $conf->{alerts}{bbu}{max_milliamperage_delta};
							my $difference       =  $current_amperage - $previous_amerage;
							   $difference       =~ s/^-//;
							if ($difference >= $max_delta)
							{
								$changes .= "\nRAID ${adapter}'s Battery Backup Unit power draw has changed by an amount exceeding alert tolerances.\n";
								$changes .= "This may be do to a relearn cycle, which is normal.\n";
								$changes .= "  Current draw: [$new_value], old draw: [$old_value], Alert trigger threshhold: [$max_delta mA / $conf->{'system'}{sleep_time} seconds]\n"; 
							}
						}
						elsif ($var eq "pack_energy")
						{
							my $current_energy  =  ($new_value =~ /^(\d+\.*\d*) J/i)[0];
							my $previous_energy =  ($old_value =~ /^(\d+\.*\d*) J/i)[0];
							   $previous_energy =  0 if not $previous_energy;
							my $lower_energy    =  ($conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_capacity} =~ /^(\d+\.*\d*) J/)[0];
							   $lower_energy    -= $conf->{alerts}{bbu}{base_joules_diff};
							#record($conf, "$THIS_FILE ".__LINE__."; Checking if the energy in the BBU on adapter $adapter is below the lower threshhold: [$current_energy / $lower_energy] (design energy: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_capacity} - $conf->{alerts}{bbu}{base_joules_diff} J]\n");
							if ($current_energy <= $lower_energy)
							{
								next if $conf->{'system'}{bbu_needs_attention};
								$changes .= "\nRAID ${adapter}'s Capacitor Backup Unit has fallen below the lower energy threshhold!\n";
								$changes .= "Current energy is: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_energy}], lower threshhold: [$lower_energy], design energy is: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_energy}]\n"; 
								$changes .= "  Recharging or replacing the backup unit is required.\n";
								$conf->{'system'}{bbu_needs_attention} = 1;
								$conf->{'system'}{warning_event}       = 1;
							}
							elsif ($conf->{'system'}{bbu_needs_attention})
							{
								# To avoid rapid flips, I only send this when the energy goes over half the delta.
								my $ok_energy =  ($conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_capacity} =~ /^(\d+\.*\d*) J/)[0];
								   $ok_energy -= int($conf->{alerts}{bbu}{base_joules_diff} / 2);
								#record($conf, "$THIS_FILE ".__LINE__."; BBU needs attention; Checking in charged: [$current_energy] > [$ok_energy]\n");
								if ($current_energy > $ok_energy)
								{
									$changes .= "\nRAID ${adapter}'s Battery Backup Unit has risen above the minimum charge threshhold.\n";
									$changes .= "Current energy is: [$conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{design_energy}], OK energy is: [$ok_energy], design energy is: [$conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{design_energy}]\n"; 
									$changes .= "  Recharging or replacing he battery is required.\n";
									$conf->{'system'}{bbu_needs_attention} = 0;
								}
							}
						}
						elsif ($conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var})
						{
							$changes .= "\nRAID ${adapter}'s Battery \"$say_translation\" has changed!\n";
							$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{bbu}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{bbu}{$var}\n";
						}
					}
				}
				elsif ($key eq "slot")
				{
					foreach my $slot (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}})
					{
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}})
						{
							if ($var eq "port")
							{
								foreach my $i (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}})
								{
									foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}})
									{
										my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
										$conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var};
										$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var};
										if ($conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var})
										{
											my $say_slot =  $slot;
											$say_slot =~ s/^0//;
											$changes .= "\nRAID ${adapter}'s Physical Disk ${slot}'s port ${i}'s \"$say_translation\" has changed!\n";
											$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var}\n";
										}
									}
								}
							}
							else
							{
								my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
								$conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{$var};
								$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{$var};
								my $say_slot =  $slot;
								   $say_slot =~ s/^0//;
								   
								# If this is a temperature, don't fire unless the delta is greater than allowed.
								my $new_value = $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{$var};
								my $old_value = $conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{$var};
								#record($conf, "$THIS_FILE ".__LINE__." Checking if temperature: new: [$new_value] (old: [$old_value]).\n");
								if ($new_value =~ /(\d+\.*\d*)C \(.*? F\)/i)
								{
									# I've got a temperature.
									# Do I have an old temperature?
									my $new_temp =  $1;
									my $old_temp = ($old_value =~ /(\d+\.*\d*)C.*/)[0];
									#record($conf, "$THIS_FILE ".__LINE__." Comparing new: [$new_temp] to old: [$old_temp] ($new_value/$old_value)\n");
									next if $new_temp eq $old_temp;
									if ($old_value)
									{
										# Old value.
										my $alert =  $conf->{alerts}{storage}{delta};
										my $scan  =  $conf->{'system'}{sleep_time};
										my $diff  =  $new_temp - $old_temp;
										my $delta =  $diff;
										$delta    =~ s/^-//;
										if ($delta >= $alert)
										{
											#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
											my $units = "*C";
											if ($conf->{'system'}{use_fahrenheit})
											{
												$old_temp = convert_to_fahrenheit($conf, $old_temp);
												$new_temp = convert_to_fahrenheit($conf, $new_temp);
												$units = "*F";
											}
											$conf->{'system'}{warning_event} = 1;
											$changes .= "\nRAID ${adapter}'s Physical Disk ${say_slot}'s \"$say_translation\" has rapidly changed (greater than $alert *C in $scan seconds)!\n";
											$changes .= "  $old_temp $units\t-> $new_temp $units\n";
										}
										else
										{
											# Log the difference, but don't send an email.
											record($conf, "$THIS_FILE ".__LINE__."; RAID ${adapter}'s Physical Disk ${say_slot}'s \"$say_translation\" has changed; $old_temp *C -> $new_temp *C\n");
										}
									}
									else
									{
										# No prior temparature.
										my $units = "*C";
										if ($conf->{'system'}{use_fahrenheit})
										{
											$new_temp = convert_to_fahrenheit($conf, $new_temp);
											$units = "*F";
										}
										$changes .= "\nRAID ${adapter}'s Physical Disk ${say_slot}'s \"$say_translation\" seen for the first time.\n";
										$changes .= "  --\t-> $new_temp $units\n";
									}
									
									# Check the current temperature and see if it's above threasholds.
									my $upper_threshold      = $conf->{alerts}{storage}{upper_threshold};
									my $power_down_threshold = $conf->{alerts}{storage}{power_down_threshold};
									if ($new_temp >= $power_down_threshold)
									{
										my $units = "*C";
										if ($conf->{'system'}{use_fahrenheit})
										{
											$old_temp = convert_to_fahrenheit($conf, $old_temp);
											$new_temp = convert_to_fahrenheit($conf, $new_temp);
											$units = "*F";
										}
										$conf->{'system'}{migration_target}   = 0;
										$conf->{'system'}{emergency_shutdown} = 1;
										$changes .= "\n#######################################################################\n";
										$changes .= "RAID ${adapter}'s Physical Disk ${slot}'s \"$say_translation\" is at or above the critical level of $power_down_threshold *C!\n";
										$changes .= "  $old_temp $units\t-> $new_temp $units\n";
										$changes .= "#######################################################################\n";
									}
									elsif ($new_temp >= $upper_threshold)
									{
										#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
										my $units = "*C";
										if ($conf->{'system'}{use_fahrenheit})
										{
											$old_temp = convert_to_fahrenheit($conf, $old_temp);
											$new_temp = convert_to_fahrenheit($conf, $new_temp);
											$units = "*F";
										}
										$conf->{'system'}{migration_target} = 0;
										$conf->{'system'}{warning_event}    = 1;
										$changes .= "\nRAID ${adapter}'s Physical Disk ${say_slot}'s \"$say_translation\" is at or above the warning level of $upper_threshold *C!\n";
										$changes .= "  $old_temp $units\t-> $new_temp $units\n";
									}
								}
								else
								{
									if ($conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{$var})
									{
										$changes .= "\nRAID ${adapter}'s Physical Disk ${say_slot}'s \"$say_translation\" has changed!\n";
										$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{slot}{$slot}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{slot}{$slot}{$var}\n";
									}
								}
							}
						}
					}
				}
				elsif ($key eq "backend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; adapter: [$adapter], port: [$port]\n");
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}})
						{
							my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
							
							#record($conf, "$THIS_FILE ".__LINE__."; >> adapter: [$adapter], port: [$port], var: [$var], old: [$conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var}], new: [$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var}]\n");
							$conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var};
							$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var};
							#record($conf, "$THIS_FILE ".__LINE__."; << adapter: [$adapter], port: [$port], var: [$var], old: [$conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var}], new: [$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var}]\n");
							
							if ($conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var})
							{
								$changes .= "\nRAID ${adapter}'s Internal Port ${port}'s \"$say_translation\" has changed!\n";
								$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{backend_port}{$port}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}{$port}{$var}\n";
							}
						}
					}
				}
				elsif ($key eq "frontend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}})
					{
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}})
						{
							my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
							$conf->{data}{lsi}{old}{adapter}{$adapter}{frontend_port}{$port}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{frontend_port}{$port}{$var};
							$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{$var};
							if ($conf->{data}{lsi}{old}{adapter}{$adapter}{frontend_port}{$port}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{$var})
							{
								$changes .= "\nRAID ${adapter}'s External Port ${port}'s \"$say_translation\" has changed!\n";
								$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{frontend_port}{$port}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}{$port}{$var}\n";
							}
						}
					}
				}
				elsif ($key eq "roc_temperature")
				{
					# This is the RAID controller's internal temperature.
					my $var = $key;	# Keep things simple
					my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
					$conf->{data}{lsi}{old}{adapter}{$adapter}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{$var};
					$conf->{data}{lsi}{new}{adapter}{$adapter}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{$var};
					
					# If this is a temperature, don't fire unless the delta is greater than allowed.
					my $new_value = $conf->{data}{lsi}{new}{adapter}{$adapter}{$var};
					my $old_value = $conf->{data}{lsi}{old}{adapter}{$adapter}{$var};
					#record($conf, "$THIS_FILE ".__LINE__." Checking if ROC temperature has changed: new: [$new_value] (old: [$old_value]).\n");
					
					# Do I have an old temperature?
					my $new_temp = ($new_value =~ /^(\d+\.*\d*)/)[0];
					my $old_temp = ($old_value =~ /^(\d+\.*\d*)/)[0];
					#record($conf, "$THIS_FILE ".__LINE__." Comparing new: [$new_temp] to old: [$old_temp] ($new_value/$old_value)\n");
					next if $new_temp eq $old_temp;
					if ($old_value)
					{
						# Old value.
						my $alert =  $conf->{alerts}{storage}{roc_delta};
						my $scan  =  $conf->{'system'}{sleep_time};
						my $diff  =  $new_temp - $old_temp;
						my $delta =  $diff;
						$delta    =~ s/^-//;
						if ($delta >= $alert)
						{
							#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
							my $units = "*C";
							if ($conf->{'system'}{use_fahrenheit})
							{
								$old_temp = convert_to_fahrenheit($conf, $old_temp);
								$new_temp = convert_to_fahrenheit($conf, $new_temp);
								$units = "*F";
							}
							$conf->{'system'}{warning_event} = 1;
							$changes .= "\nRAID ${adapter}'s ROC temperature has rapidly changed (greater than $alert *C in $scan seconds)!\n";
							$changes .= "  $old_temp $units\t-> $new_temp $units\n";
						}
						else
						{
							# Log the difference, but don't send an email.
							record($conf, "$THIS_FILE ".__LINE__."; RAID ${adapter}'s ROC temperature has changed; $old_temp *C -> $new_temp *C\n");
						}
					}
					else
					{
						# No prior temparature.
						my $units = "*C";
						if ($conf->{'system'}{use_fahrenheit})
						{
							$new_temp = convert_to_fahrenheit($conf, $new_temp);
							$units = "*F";
						}
						$changes .= "\nRAID ${adapter}'s ROC temperature seen for the first time.\n";
						$changes .= "  --\t-> $new_temp $units\n";
					}
					
					# Check the current temperature and see if it's above threasholds.
					my $upper_threshold      = $conf->{alerts}{storage}{roc_threshold};
					my $power_down_threshold = $conf->{alerts}{storage}{roc_powerdown_temp};
					if ($new_temp >= $power_down_threshold)
					{
						my $units = "*C";
						if ($conf->{'system'}{use_fahrenheit})
						{
							$old_temp = convert_to_fahrenheit($conf, $old_temp);
							$new_temp = convert_to_fahrenheit($conf, $new_temp);
							$units = "*F";
						}
						$conf->{'system'}{migration_target}   = 0;
						$conf->{'system'}{emergency_shutdown} = 1;
						$changes .= "\n#######################################################################\n";
						$changes .= "RAID ${adapter}'s ROC temperature is at or above the critical level of $power_down_threshold *C!\n";
						$changes .= "  $old_temp $units\t-> $new_temp $units\n";
						$changes .= "#######################################################################\n";
					}
					elsif ($new_temp >= $upper_threshold)
					{
						my $units = "*C";
						if ($conf->{'system'}{use_fahrenheit})
						{
							$old_temp = convert_to_fahrenheit($conf, $old_temp);
							$new_temp = convert_to_fahrenheit($conf, $new_temp);
							$units = "*F";
						}
						#record($conf, "$THIS_FILE ".__LINE__."; Setting warning.\n");
						$conf->{'system'}{migration_target} = 0;
						$conf->{'system'}{warning_event}    = 1;
						$changes .= "\nRAID ${adapter}'s ROC temperature is at or above the warning level of $upper_threshold *C!\n";
						$changes .= "  $old_temp $units\t-> $new_temp $units\n";
					}
				}
				elsif (ref($conf->{data}{lsi}{new}{adapter}{$adapter}{$key}) eq "ARRAY")
				{
					my $say_translation = $conf->{translate}{lsi}{$key} ? $conf->{translate}{lsi}{$key} : $key;
					#record($conf, "$THIS_FILE ".__LINE__."; Warning: While checking for changed on adapter: [$adapter], I found a variable that is an array reference called \"$say_translation\". This is a program error.\n");
				}
				elsif (ref($conf->{data}{lsi}{new}{adapter}{$adapter}{$key}) eq "HASH")
				{
					my $say_translation = $conf->{translate}{lsi}{$key} ? $conf->{translate}{lsi}{$key} : $key;
					#record($conf, "$THIS_FILE ".__LINE__."; Warning: While checking for changed on adapter: [$adapter], I found a variable that is a hash reference called \"$say_translation\". This is a program error.\n");
				}
				else
				{
					my $var = $key;  # Just to keep it sane with the above code.
					my $say_translation = $conf->{translate}{lsi}{$var} ? $conf->{translate}{lsi}{$var} : $var;
					$conf->{data}{lsi}{old}{adapter}{$adapter}{$var} = "--" if not defined $conf->{data}{lsi}{old}{adapter}{$adapter}{$var};
					$conf->{data}{lsi}{new}{adapter}{$adapter}{$var} = "--" if not defined $conf->{data}{lsi}{new}{adapter}{$adapter}{$var};
					if ($conf->{data}{lsi}{old}{adapter}{$adapter}{$var} ne $conf->{data}{lsi}{new}{adapter}{$adapter}{$var})
					{
						$changes .= "\nRAID ${adapter}'s \"$say_translation\" has changed!\n";
						$changes .= "  $conf->{data}{lsi}{old}{adapter}{$adapter}{$var}\t-> $conf->{data}{lsi}{new}{adapter}{$adapter}{$var}\n";
					}
				}
			}
		}
	}
	
	# Check for changes in the host sensors.
	foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{new}})
	{
		my $var = $key; # Consistency
		my $say_translation = $conf->{translate}{ipmi}{$var};
		$conf->{data}{ipmi}{old}{$var} = "--" if not defined $conf->{data}{ipmi}{old}{$var};
		$conf->{data}{ipmi}{new}{$var} = "--" if not defined $conf->{data}{ipmi}{new}{$var};
		next if (($conf->{data}{ipmi}{new}{$var} ne "--") && ($conf->{data}{ipmi}{old}{$var} eq $conf->{data}{ipmi}{new}{$var}));
		#record($conf, "$THIS_FILE ".__LINE__."; Host sensor \"$say_translation\" ($var), old: [$conf->{data}{ipmi}{old}{$var}], new: [$conf->{data}{ipmi}{new}{$var}]\n");
		my ($old_state, $old_value) = (split /,/, $conf->{data}{ipmi}{old}{$var}, 2);
		my ($new_state, $new_value) = (split /,/, $conf->{data}{ipmi}{new}{$var}, 2);
		
		# I need to apply buffers to voltages and RPMs and ignore 
		# wattage changes.
		if ($new_value =~ /^(\d+\.*\d*) Watts/i)
		{
			my $new_wattage = $1;
			my $old_wattage = ($old_value =~ /^(\d+\.*\d*)/)[0];
			#record($conf, "$THIS_FILE ".__LINE__."; Checking \"$say_translation\"; old wattage: [$old_state, $old_wattage], new wattage: [$new_state, $new_wattage]\n");
			# If the state has changed, send an alert.
			if ($new_state ne "ok")
			{
				$changes .= "\nHost's \"$say_translation\" state has changed!\n";
				$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
				$conf->{'system'}{warning_event}    = 1;
				$conf->{'system'}{migration_target} = 0;
			}
			elsif ($old_wattage ne $new_wattage)
			{
				# This is mainly for debugging or tracking changes over time.
				record($conf, "$THIS_FILE ".__LINE__."; Host's \"$say_translation\" has change; $old_state, $old_value -> $new_state, $new_value.\n");
			}
		}
		elsif ($new_value =~ /^(\d+\.*\d*) RPM/i)
		{
			# Here I only care about lower thresholds.
			my $new_rpm = $1;
			my $old_rpm = ($old_value =~ /^(\d+\.*\d*) RPM/i)[0];
			my $minimum_rpm = $conf->{alerts}{host}{fan_minimum_rpm};
			my $reset_rpm   = $minimum_rpm * 2;
			#record($conf, "$THIS_FILE ".__LINE__."; FAN speed for $var; old: [$old_state, $old_value ($old_rpm)], new: [$new_state, $new_value ($new_rpm)], minimum RPM: [$minimum_rpm], reset RPM: [$reset_rpm]\n");
			
			if (exists $conf->{'system'}{fan_alert}{$var})
			{
				if (($new_state eq "ok") && ($new_rpm >= $reset_rpm))
				{
					delete $conf->{'system'}{fan_alert}{$var};
					$changes .= "\nHost's \"$say_translation\" fan speed has returned to normal. Alert cleared.\n";
					$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
					$conf->{'system'}{clear_event}      = 1;
					$conf->{'system'}{migration_target} = 1;
				}
				else
				{
					record($conf, "$THIS_FILE ".__LINE__."; Host's \"$say_translation\" fan is listed as failed, is not yet healthy but has changed; old: [$old_state, $old_value], new: [$new_state, $new_value].\n");
				}
			}
			elsif ($new_state ne "ok")
			{
				$conf->{'system'}{fan_alert}{$var}  = 1;
				$conf->{'system'}{warning_event}    = 1;
				$conf->{'system'}{migration_target} = 0;
				$changes .= "\nHost's \"$say_translation\" fan state has changed!\n";
				$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
			}
			elsif ($new_rpm < $minimum_rpm)
			{
				$conf->{'system'}{fan_alert}{$var}  = 1;
				$conf->{'system'}{warning_event}    = 1;
				$conf->{'system'}{migration_target} = 0;
				$changes .= "\nHost's \"$say_translation\" fan speed has dropped below the minimum of $minimum_rpm RPM!\n";
				$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
			}
			else
			{
				# This is mainly for debugging or tracking changes over time.
				record($conf, "$THIS_FILE ".__LINE__."; Host's \"$say_translation\" fan speed has change; $old_state, $old_value -> $new_state, $new_value.\n");
			}
		}
		elsif ($new_value =~ /^(\d+\.*\d*) degrees C/)
		{
			my $new_temp = $1;
			my $old_temp = ($old_value =~ /^(\d+\.*\d*) degrees C/)[0];
			#record($conf, "$THIS_FILE ".__LINE__." Comparing: [$var]'s new: [$new_temp ($new_value)] to old: [$old_temp ($old_value)]\n");
			
			my $alert                = 10;
			my $upper_threshold      = 45;
			my $power_down_threshold = 55;
			if ($var =~ /ambient/)
			{
				$alert                = $conf->{alerts}{host}{ambient_temp_delta};
				$upper_threshold      = $conf->{alerts}{host}{ambient_threshold_temp};
				$power_down_threshold = $conf->{alerts}{host}{ambient_powerdown_temp};
			}
			elsif ($var =~ /^cpu/)
			{
				$alert                = $conf->{alerts}{host}{cpu_temp_delta};
				$upper_threshold      = $conf->{alerts}{host}{cpu_threshold_temp};
				$power_down_threshold = $conf->{alerts}{host}{cpu_powerdown_temp};
			}
			elsif ($var =~ /^mem_/)
			{
				$alert                = $conf->{alerts}{host}{ram_temp_delta};
				$upper_threshold      = $conf->{alerts}{host}{ram_threshold_temp};
				$power_down_threshold = $conf->{alerts}{host}{ram_powerdown_temp};
			}
			elsif ($var =~ /^systemboard_/)
			{
				$alert                = $conf->{alerts}{host}{mb_temp_delta};
				$upper_threshold      = $conf->{alerts}{host}{mb_threshold_temp};
				$power_down_threshold = $conf->{alerts}{host}{mb_powerdown_temp};
			}
			my $clear_threshold = $upper_threshold - 5;
			#record($conf, "$THIS_FILE ".__LINE__." Alert: [$alert], upper threshold: [$upper_threshold], power down threshold: [$power_down_threshold]\n");
			
			if ($conf->{'system'}{use_fahrenheit})
			{
				$old_temp             = convert_to_fahrenheit($conf, $old_temp);
				$new_temp             = convert_to_fahrenheit($conf, $new_temp);
				$upper_threshold      = convert_to_fahrenheit($conf, $upper_threshold);
				$power_down_threshold = convert_to_fahrenheit($conf, $power_down_threshold);
				$clear_threshold      = convert_to_fahrenheit($conf, $clear_threshold);
				check_temperature($conf, $changes, {
					var				=>	$var,
					old_state			=>	$old_state,
					new_state			=>	$new_state,
					old_value			=>	$old_value,
					new_value			=>	$new_value,
					old_temp			=>	$old_temp,
					new_temp			=>	$new_temp,
					delta_threshold			=>	$alert,
					upper_threshold			=>	$upper_threshold,
					power_down_threshold		=>	$power_down_threshold,
					clear_threshold			=>	$clear_threshold,
					message_upper_to_power_down	=>	"Host's \"$say_translation\" temperature is now at or above the critical level of $power_down_threshold *F!",
					log_upper_to_power_down		=>	"Host's \"$say_translation\" temperature is now critical but poweroff has been disabled; $old_state, $old_value -> $new_state, $new_value.",
					message_power_down_to_upper	=>	"Host's \"$say_translation\" temperature is dropping, but it is still above the alert threshold of $upper_threshold *F!",
					log_power_down_to_upper		=>	"Host's \"$say_translation\" temperature is dropping, but it is still above alert levels; $old_state, $old_value -> $new_state, $new_value.",
					message_clear_threshold		=>	"Host's \"$say_translation\" temperature has returned to safe levels. Alert cleared.",
					log_in_alert_change		=>	"Host's \"$say_translation\" temperature is good now, but it hasn't dropped below the clear thredshold of $clear_threshold *F; $old_state, $old_value -> $new_state, $new_value.",
					message_over_power_down		=>	"Host's \"$say_translation\" temperature is suddenly at or above the critical level of $power_down_threshold *F!",
					message_over_alert		=>	"Host's \"$say_translation\" temperature has risen to or above the alert threshold of $upper_threshold *F!",
					log_normal_change		=>	"Host's \"$say_translation\" temperature has changed; old: $old_state, $old_value -> $new_state, $new_value.",
					units				=>	"*F",
				});
			}
			else
			{
				check_temperature($conf, $changes, {
					var				=>	$var,
					old_state			=>	$old_state,
					new_state			=>	$new_state,
					old_value			=>	$old_value,
					new_value			=>	$new_value,
					old_temp			=>	$old_temp,
					new_temp			=>	$new_temp,
					delta_threshold			=>	$alert,
					upper_threshold			=>	$upper_threshold,
					power_down_threshold		=>	$power_down_threshold,
					clear_threshold			=>	$clear_threshold,
					message_upper_to_power_down	=>	"Host's \"$say_translation\" temperature is now at or above the critical level of $power_down_threshold *C!",
					log_upper_to_power_down		=>	"Host's \"$say_translation\" temperature is now critical but poweroff has been disabled; $old_state, $old_value -> $new_state, $new_value.",
					message_power_down_to_upper	=>	"Host's \"$say_translation\" temperature is dropping, but it is still above the alert threshold of $upper_threshold *C!",
					log_power_down_to_upper		=>	"Host's \"$say_translation\" temperature is dropping, but it is still above alert levels; $old_state, $old_value -> $new_state, $new_value.",
					message_clear_threshold		=>	"Host's \"$say_translation\" temperature has returned to safe levels. Alert cleared.",
					log_in_alert_change		=>	"Host's \"$say_translation\" temperature is good now, but it hasn't dropped below the clear thredshold of $clear_threshold *C; $old_state, $old_value -> $new_state, $new_value.",
					message_over_power_down		=>	"Host's \"$say_translation\" temperature is suddenly at or above the critical level of $power_down_threshold *C!",
					message_over_alert		=>	"Host's \"$say_translation\" temperature has risen to or above the alert threshold of $upper_threshold *C!",
					log_normal_change		=>	"Host's \"$say_translation\" temperature has changed; old: $old_state, $old_value -> $new_state, $new_value.",
					units				=>	"*C",
				});
			}
		}
		elsif ($new_value =~ /^(\d+\.*\d*) Volts/i)
		{
			# I look at the base voltage and send alerts at >5% deviation. If a pending alert exists, clear it when the voltage falls below 3%.
			my $tolerance  = 0.05;
			my $recover    = 0.03;
			my $new_volts  = $1;
			my $old_volts  = ($old_value =~ /^(\d+\.*\d*) Volts/i)[0];
			my $base_volts = ($var =~ /.*_(\d+\.*\d*)v/)[0];
			#record($conf, "$THIS_FILE ".__LINE__."; Checking the current voltages for \"$say_translation\"; base: [$base_volts ($var)], old: [$old_state, $old_value ($new_volts)], new: [$new_state, $new_value ($new_volts)]\n");
			
			my $new_mv  =  $new_volts * 1000;
			my $old_mv  =  $old_volts * 1000;
			my $diff    =  $new_mv - $old_mv;
			   $diff    =~ s/^-//;
			my $base_mv =  $base_volts * 1000;
			my $range   =  $base_mv * $tolerance;
			my $restore =  $base_mv * $recover;
			#record($conf, "$THIS_FILE ".__LINE__."; As mV; base [$base_mv], old: [$old_mv], new: [$new_mv], diff: [$diff], allowed range: [$range], restore threshold: [$restore]\n");
			
			if (exists $conf->{'system'}{voltage_alert}{$var})
			{
				if (($new_state eq "ok") && ($diff <= $restore))
				{
					# All is right in the world.
					delete $conf->{'system'}{voltage_alert}{$var};
					$changes .= "\nHost's \"$say_translation\" voltage has returned to normal. Deviation now within $recover mV of base $base_mv mV. Alert cleared.\n";
					$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
					$conf->{'system'}{clear_event}      = 1;
					$conf->{'system'}{migration_target} = 0;
				}
				else
				{
					record($conf, "$THIS_FILE ".__LINE__."; Host's \"$say_translation\" voltage is listed as failed, is not yet healthy but has changed; old: [$old_state, $old_value], new: [$new_state, $new_value].\n");
				}
			}
			elsif ($new_state ne "ok")
			{
				$conf->{'system'}{voltage_alert}{$var} = 1;
				$conf->{'system'}{warning_event}       = 1;
				$conf->{'system'}{migration_target}    = 0;
				$changes .= "\nHost's \"$say_translation\" voltage state has changed!\n";
				$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
			}
			elsif ($new_mv <= $restore)
			{
				$conf->{'system'}{voltage_alert}{$var} = 1;
				$conf->{'system'}{warning_event}       = 1;
				$conf->{'system'}{migration_target}    = 0;
				$changes .= "\nHost's \"$say_translation\" level has fallen outside of tolerances! $diff mV off of base voltage of $base_mv mV, max deviation was $range mV\n";
				$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
			}
			else
			{
				# This is mainly for debugging or tracking changes over time.
				record($conf, "$THIS_FILE ".__LINE__."; Host's \"$say_translation\" voltage has change; $old_state, $old_value -> $new_state, $new_value.\n");
			}
		}
		elsif ($conf->{data}{ipmi}{old}{$var} ne $conf->{data}{ipmi}{new}{$var})
		{
			$old_state = "--" if not defined $old_state;
			$old_value = "--" if not defined $old_value;
			$changes .= "\nHost sensor \"$say_translation\" has change!\n";
			$changes .= "  $old_state, $old_value\t-> $new_state, $new_value\n";
		}
	}
	
	# UPS info.
	# Key variables;
	# STATUS - ONLINE == good
	
	# Informative variables.
	# SERIALNO = serial number
	# MODEL    = Generic model name
	# MANDATE  = UPS Manufacture Date
	# BATTDATE = Battery Manufactire Date
	# BATTV    = Battery Voltage
	
	# Variables with tolerances
	# LINEV   - Withing  HITRANS or below LOTRANS trigger
	# OUTPUTV - Look at the tolerances of the PSUs and set a sane upper/lower threshold (can be later version).
	# LOADPCT - Anything over 'upper_load_threshold' will fire an alert
	# BCHARGE - For now, don't trigger an alert, but log changes.
	
	# Variables with lower limits
	# TIMELEFT = When the second UPS drops below '5.0 Minutes', initiate power down.
	if ($conf->{'system'}{ups_available})
	{
		# First off, if the strongest UPS is below the hold-up
		# threshold, begin powering down. This will NOT try to migrate
		# as the other node is almost certainly in the same boat.
		if ($conf->{data}{ups}{new}{best_case}{status} ne "ONLINE")
		{
			my $best_time_left  = $conf->{data}{ups}{new}{best_case}{time_left};
			my $shutdown_buffer = $conf->{alerts}{ups}{shutdown_buffer};
			record($conf, "$THIS_FILE ".__LINE__."; Checking if the time remaining in the strongest UPS: [$best_time_left] is greater than: [$shutdown_buffer seconds]\n");
			# If I lose contact with the UPSes, the 'best_time_left' will be '0'.
			if (($best_time_left > 0) && ($shutdown_buffer > $best_time_left))
			{
				$conf->{'system'}{critical_event}     = 1;
				$conf->{'system'}{migration_target}   = 0;
				$conf->{'system'}{emergency_shutdown} = 1;
				if ($conf->{data}{ups}{new}{ups_count} == 1)
				{
					$changes .= "\n#######################################################################\n";
					$changes .= "The UPS is running on batteries and the remaining hold up time is below\n";
					$changes .= "critical levels! There are $best_time_left seconds remaining and the\n";
					$changes .= "shut down threshold is $shutdown_buffer seconds.\n";
					$changes .= "#######################################################################\n";
				}
				else
				{
					$changes .= "\n#######################################################################\n";
					$changes .= "The strongest remaining UPS is running on batteries and the remaining\n";
					$changes .= "hold up time below critical levels! There are $best_time_left seconds remaining\n";
					$changes .= "and the shut down threshold is $shutdown_buffer seconds.\n";
					$changes .= "#######################################################################\n";
				}
			}
		}
		
		# Now for UPS specific checks.
		foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{ups_name}})
		{
			foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{ups_name}{$ups_name}})
			{
				$conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} = "--" if not defined $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var};
				$conf->{data}{ups}{new}{ups_name}{$ups_name}{$var} = "--" if not defined $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var};
				next if (($conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} ne "--") && ($conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} eq $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}));
				
				if ($var =~ /STATUS/i)
				{
					if ($conf->{data}{ups}{new}{ups_name}{$ups_name}{$var} =~ /TRIM ONLINE/i)
					{
						$conf->{'system'}{clear_event} = 0;
						$conf->{'system'}{ups_alert}{$ups_name}{status} = 1;
						$changes .= "\nUPS ${ups_name}'s is in 'TRIM ONLINE', which means it is compensating for distorted input. Power from the mains circuit sub-optimal.\n";
						$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
					}
					elsif ($conf->{data}{ups}{new}{ups_name}{$ups_name}{$var} =~ /ONLINE/i)
					{
						$conf->{'system'}{clear_event} = 1;
						delete $conf->{'system'}{ups_alert}{$ups_name}{status};
						if ($conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} =~ /COMMLOST/i)
						{
							$changes .= "\nUPS ${ups_name}'s communication link has been re-established. Alert cleared.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
						else
						{
							$changes .= "\nUPS ${ups_name}'s status has returned to ONLINE. Alert cleared.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
					}
					elsif ($conf->{'system'}{ups_alert}{$ups_name}{status})
					{
						$changes .= "\nUPS ${ups_name}'s status has changed!\n";
						$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
					}
					else
					{
						$conf->{'system'}{warning_event}                = 1;
						$conf->{'system'}{ups_alert}{$ups_name}{status} = 1;
						if ($conf->{data}{ups}{new}{ups_name}{$ups_name}{$var} =~ /COMMLOST/i)
						{
							$changes .= "\nUPS ${ups_name}'s status has changed! Communications link has been lost!\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
						else
						{
							$changes .= "\nUPS ${ups_name}'s status has changed! Power from mains has been lost!\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
					}
				}
				elsif ($var =~ /LINEV/i)
				{
					my $min_voltage  = ($conf->{data}{ups}{new}{ups_name}{$ups_name}{LOTRANS} =~ /^(\d+\.*\d*) /)[0];
					my $max_voltage  = ($conf->{data}{ups}{new}{ups_name}{$ups_name}{HITRANS} =~ /^(\d+\.*\d*) /)[0];
					my $line_voltage = ($conf->{data}{ups}{new}{ups_name}{$ups_name}{LINEV}   =~ /^(\d+\.*\d*) /)[0];
					if ($conf->{'system'}{ups_alert}{$ups_name}{live_voltage})
					{
						# If the voltage is now within range, clear the warning.
						if (($line_voltage >= $min_voltage) && ($line_voltage <= $max_voltage))
						{
							# We're back in the clear.
							delete $conf->{'system'}{ups_alert}{$ups_name}{live_voltage};
							$conf->{'system'}{clear_event} = 1;
							$changes .= "\nUPS ${ups_name}'s voltage from mains as returned to normal ranges. Alert cleared.\n";
							$changes .= "  Minimum voltage is $conf->{data}{ups}{new}{ups_name}{$ups_name}{LOTRANS}, maximum voltage is $conf->{data}{ups}{new}{ups_name}{$ups_name}{HITRANS}.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
						else
						{
							# Voltage changed but we're not in the clear.
							record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name] line voltage has changed but is still outside tolerances. Currently: [$line_voltage vAC], minimum is: [$min_voltage vAC], maximum is: [$max_voltage vAC]\n");
						}
					}
					else
					{
						# If it's within spec, just log the change.
						if (($line_voltage >= $min_voltage) && ($line_voltage <= $max_voltage))
						{
							record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name] line voltage has changed but it is within acceptable range. Currently: [$line_voltage vAC], minimum is: [$min_voltage vAC], maximum is: [$max_voltage vAC]\n");
						}
						else
						{
							# Well shit.
							$conf->{'system'}{ups_alert}{$ups_name}{live_voltage} = 1;
							$conf->{'system'}{warning_event}                      = 1;
							$changes .= "\nUPS ${ups_name}'s voltage from mains has fallen outside of tolerances!\n";
							$changes .= "  Minimum voltage is $conf->{data}{ups}{new}{ups_name}{$ups_name}{LOTRANS}, maximum voltage is $conf->{data}{ups}{new}{ups_name}{$ups_name}{HITRANS}.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
					}
				}
				elsif ($var =~ /LOADPCT/i)
				{
					my $load_alert   = $conf->{alerts}{ups}{upper_load_threshold};
					my $clear_alert  = $load_alert - 5;	# Prevent bouncy alerts
					my $current_load = ($conf->{data}{ups}{new}{ups_name}{$ups_name}{$var} =~ /^(\d+\.*\d*) /)[0];
					#record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name], Checking if current load: [$current_load] is greater than alert threshold of: [$load_alert]\n");
					
					# Is there an existing alert?
					if ($conf->{'system'}{ups_alert}{$ups_name}{load_alert})
					{
						if ($current_load >= $load_alert)
						{
							# Still over loaded.
							record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name] load is still over the alert threshold of: [$load_alert %]; $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} -> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n");
						}
						elsif ($current_load <= $clear_alert)
						{
							# We're clear.
							delete $conf->{'system'}{ups_alert}{$ups_name}{load_alert};
							$conf->{'system'}{clear_event} = 1;
							$changes .= "\nUPS ${ups_name}'s load has fallen back down below: [$clear_alert %]. Alert cleared.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
						else
						{
							# Looking good, but not clear yet.
							record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name] load is back under the alert threshold of: [$load_alert %] but it is still above the clear threshold of: [$clear_alert %]; $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} -> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n");
							$changes .= "\nUPS ${ups_name}'s load has fallen back down below: [$clear_alert %]. Alert cleared.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
					}
					else
					{
						if ($current_load >= $load_alert)
						{
							# This isn't itself bad.
							$conf->{'system'}{ups_alert}{$ups_name}{load_alert} = 1;
							$conf->{'system'}{warning_event}                    = 1;
							$changes .= "\nUPS ${ups_name}'s load has exceed the alert level of: [$load_alert %].\n";
							$changes .= "This is not, itself, a problem. However, this minimizes the run time after a mains failure.\n";
							$changes .= "Please consider moving some load to another UPS or circuit if possible.\n";
							$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
						}
						else
						{
							# Still over loaded.
							record($conf, "$THIS_FILE ".__LINE__."; UPS: [$ups_name] load has changed; $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} -> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n");
						}
					}
				}
				else
				{
					# Something I am not (yet) concerned about has changed.
					#$changes .= "\nUPS ${ups_name}'s \"$var\" has had a state changed.\n";
					#$changes .= "  $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var}\t-> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n";
					record($conf, "$THIS_FILE ".__LINE__."; UPS ${ups_name}'s \"$var\" has had a state changed; $conf->{data}{ups}{old}{ups_name}{$ups_name}{$var} -> $conf->{data}{ups}{new}{ups_name}{$ups_name}{$var}\n");
				}
			}
		}
	}

	# Find anything that went missing since the last scan. Do this by
	# copying the 'old' hash over to 'diff', then looping through 'new' and
	# deleting the corresponding 'diff' entry. Once done, check if anything
	# is left in diff.
	copy_hash($conf, "old", "diff");
	
	# Clustat isn't a concern.
	delete $conf->{data}{clustat}{diff};
	
	# Bridge
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bridge}})
	{
		delete $conf->{data}{network}{diff}{bridge}{$dev};
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{bond}})
	{
		delete $conf->{data}{network}{diff}{bond}{$dev};
	}
	
	# Network cards.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{new}{dev}})
	{
		# Because I read the config files, this will only trigger if
		# both the iface and the config file were removed.
		delete $conf->{data}{network}{diff}{dev}{$dev};
	}
	
	# Storage
	if ($conf->{'system'}{storage} eq "lsi")
	{
		# When a drive is removed, it's corresponding 'slot' entry goes away.
		foreach my $adapter (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}})
		{
			foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}})
			{
				# Some keys are hash references
				if ($key eq "vd")
				{
					foreach my $vd (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{vd}})
					{
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{vd}{$vd};
					}
				}
				elsif ($key eq "bbu")
				{
					delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{bbu};
				}
				elsif ($key eq "slot")
				{
					foreach my $slot (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{slot}})
					{
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{slot}{$slot};
					}
				}
				elsif ($key eq "backend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{backend_port}})
					{
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{backend_port}{$port};
					}
				}
				elsif ($key eq "frontend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{new}{adapter}{$adapter}{frontend_port}})
					{
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{frontend_port}{$port};
					}
				}
				else
				{
					my $var = $key;  # Just to keep it sane with the above code.
					delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{$var};
				}
			}
		}
	}
	
	# Host sensors
	foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{new}})
	{
		delete $conf->{data}{ipmi}{diff}{$key};
	}
	
	# UPSes
	foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{new}{ups_name}})
	{
		delete $conf->{data}{ups}{diff}{ups_name}{$ups_name};
	}
	
#------------------------------------------------------------------------------
	# Now look for undeleted entries.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{diff}{bridge}})
	{
		$changes .= "\nThe bridge \"$dev\" appears to have been removed!\n";
		delete $conf->{data}{network}{diff}{bridge}{$dev};
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{diff}{bond}})
	{
		$changes .= "\nThe bond \"$dev\" appears to have been removed!\n";
		delete $conf->{data}{network}{diff}{bond}{$dev};
	}
	
	# Network cards.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{diff}{dev}})
	{
		# Because I read the config files, this will only trigger if
		# both the iface and the config file were removed.
		$changes .= "\nThe network interface \"$dev\" appears to have been removed!\n";
		delete $conf->{data}{network}{diff}{dev}{$dev};
	}
	
	# Storage
	if ($conf->{'system'}{storage} eq "lsi")
	{
		# When a drive is removed, it's corresponding 'slot' entry goes away.
		foreach my $adapter (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}})
		{
			foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}{$adapter}})
			{
				# Some keys are hash references
				if ($key eq "vd")
				{
					foreach my $vd (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}{$adapter}{vd}})
					{
						$changes .= "\nThe LSI adapter $adapter appears to no longer have the virtual disk \"$vd\"!\n";
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{vd}{$vd};
					}
				}
				elsif ($key eq "bbu")
				{
					# Is this even possible?
					$changes .= "\nThe LSI adapter $adapter appears to have lost it's BBU (Battery BackUp)!\n";
					delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{bbu};
				}
				elsif ($key eq "slot")
				{
					foreach my $slot (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}{$adapter}{slot}})
					{
						# TODO: I can probably add the drive type / serial number to this.
						$changes .= "\nThe LSI adapter $adapter appears to have lost the drive in slot $slot!\n";
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{slot}{$slot};
					}
				}
				elsif ($key eq "backend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}{$adapter}{backend_port}})
					{
						$changes .= "\nThe LSI adapter $adapter appears to have lost it's internal port $port!\n";
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{backend_port}{$port};
					}
				}
				elsif ($key eq "frontend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{diff}{adapter}{$adapter}{frontend_port}})
					{
						$changes .= "\nThe LSI adapter $adapter appears to have lost it's external port $port!\n";
						delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{frontend_port}{$port};
					}
				}
				else
				{
					my $var             =  $key;  # Just to keep it sane with the above code.
					my $say_translation =  $conf->{translate}{lsi}{$key} ? $conf->{translate}{lsi}{$key} : $key;
					$changes            .= "\nThe LSI adapter $adapter appears to have lost the \"$say_translation\" value!\n";
					delete $conf->{data}{lsi}{diff}{adapter}{$adapter}{$var};
				}
			}
		}
	}
	
	# Host sensors
	foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{diff}})
	{
		my $say_var = $conf->{translate}{ipmi}{$key};
		$changes .= "\nThe IPMI \"$say_var\" value has disappeared!\n";
		delete $conf->{data}{ipmi}{old}{$key};
	}
	delete $conf->{data}{ipmi}{diff};
	
	# UPSes
	foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{diff}{ups_name}})
	{
		$changes .= "\nThe UPS \"$ups_name\" has disappeared!\n";
	}
	
#==============================================================================
	
	copy_hash($conf, "new", "old");
	
	# Send an email and record the new values if there are changes.
	if ($changes)
	{
		$conf->{mail_data}{subject} = "State Change!";
		$conf->{mail_data}{body}    = "
Changes have been detected in the cluster. If you anticipated this
change then there is no reason for concern. If this change was 
unexpected, please feel free to contact support.

----------------------------------------------------------------------
$changes";
		send_email($conf);
		record($conf, "$THIS_FILE ".__LINE__."; After change copy of new to old\n");
		#die "testing...\n";
	}
	
	return(0);
}

# This takes the temperature of a device and determines it's current state.
sub check_temperature
{
	my ($conf, $changes, $vars) = @_;
	
	my $var                         = $vars->{var};
	my $old_state                   = $vars->{old_state};
	my $new_state                   = $vars->{new_state};
	my $old_value                   = $vars->{old_value};
	my $new_value                   = $vars->{new_value};
	my $old_temp                    = $vars->{old_temp};
	my $new_temp                    = $vars->{new_temp};
	my $delta_threshold             = $vars->{delta_threshold};
	my $upper_threshold             = $vars->{upper_threshold};
	my $power_down_threshold        = $vars->{power_down_threshold};
	my $clear_threshold             = $vars->{clear_threshold};
	my $message_upper_to_power_down = $vars->{message_upper_to_power_down};
	my $log_upper_to_power_down     = $vars->{log_upper_to_power_down};
	my $message_power_down_to_upper = $vars->{message_power_down_to_upper};
	my $log_power_down_to_upper     = $vars->{log_power_down_to_upper};
	my $message_clear_threshold     = $vars->{message_clear_threshold};
	my $log_in_alert_change         = $vars->{log_in_alert_change};
	my $message_over_power_down     = $vars->{message_over_power_down};
	my $message_over_alert          = $vars->{message_over_alert};
	my $log_normal_change           = $vars->{log_normal_change};
	my $units                       = $vars->{units};
	
	# Old value.
	my $scan  =  $conf->{'system'}{sleep_time};
	my $diff  =  $new_temp - $old_temp;
	my $delta =  $diff;
	$delta    =~ s/^-//;
	
	if (exists $conf->{'system'}{temp_alert}{$var})
	{
		# If the temp is over the poweroff threshold, do the deed.
		if ($delta >= $power_down_threshold)
		{
			if ($conf->{'system'}{temp_alert}{$var} == 1)
			{
				$conf->{'system'}{temp_alert}{$var}   = 2;
				$conf->{'system'}{critical_event}     = 1;
				$conf->{'system'}{migration_target}   = 0;
				$conf->{'system'}{emergency_shutdown} = 1;
				$changes .= "\n#######################################################################\n";
				$changes .= "$message_upper_to_power_down\n";
				$changes .= "  $old_state, $old_temp $units\t-> $new_state, $new_temp $units\n";
				$changes .= "#######################################################################\n";
			}
			else
			{
				# Log this, as the poweroff override is true.
				record($conf, "$THIS_FILE ".__LINE__."; $log_upper_to_power_down\n");
			}
		}
		elsif ($delta >= $delta_threshold)
		{
			# If the alert was 2, we're cooling down.
			if ($conf->{'system'}{temp_alert}{$var} == 2)
			{
				$conf->{'system'}{warning_event}    = 1;
				$conf->{'system'}{migration_target} = 0;
				$changes .= "\n$message_power_down_to_upper\n";
				$changes .= "  $old_state, $old_temp $units\t-> $new_state, $new_temp $units\n";
			}
			else
			{
				# They've already heard from us.
				record($conf, "$THIS_FILE ".__LINE__."; $log_power_down_to_upper\n");
			}
		}
		elsif ($delta <= $clear_threshold)
		{
			# We're ok now, clear the event.
			delete $conf->{'system'}{temp_alert}{$var};
			$conf->{'system'}{migration_target} = 1;
			$conf->{'system'}{clear_event}      = 1;
			$changes .= "\n$message_clear_threshold\n";
			$changes .= "  $old_state, $old_temp $units\t-> $new_state, $new_temp $units\n";
		}
		else
		{
			# We're below the alert threshold, but haven't reached the cleared threshold.
			record($conf, "$THIS_FILE ".__LINE__."; $log_in_alert_change\n");
		}
	}
	else
	{
		# No existing alert.
		if ($delta >= $power_down_threshold)
		{
			# It's gone straight to a critical temperature.
			$conf->{'system'}{temp_alert}{$var}   = 2;
			$conf->{'system'}{emergency_shutdown} = 1;
			$conf->{'system'}{critical_event}     = 1;
			$conf->{'system'}{migration_target}   = 0;
			$changes .= "\n#######################################################################\n";
			$changes .= "$message_over_power_down\n";
			$changes .= "  $old_state, $old_temp $units\t-> $new_state, $new_temp $units\n";
			$changes .= "#######################################################################\n";
		}
		elsif ($delta >= $delta_threshold)
		{
			$conf->{'system'}{temp_alert}{$var} = 1;
			$conf->{'system'}{warning_event}    = 1;
			$conf->{'system'}{migration_target} = 0;
			$changes .= "\n$message_over_alert\n";
			$changes .= "  $old_state, $old_temp $units\t-> $new_state, $new_temp $units\n";
		}
		else
		{
			# Just a normal change.
			record($conf, "$THIS_FILE ".__LINE__."; $log_normal_change\n");
		}
	}
	
	return($changes);
}

# This takes all the values in the 'new' hash and copies them to the 'old'
# hash.
sub copy_hash
{
	my ($conf, $src, $dst) = @_;
	
	# TODO: Delete the entire set of 'old' hashes. Will simply clearing the hash reference free the memory or do I need to actually delete the hash reference?
	# Clustat stuff.
	$conf->{data}{clustat}{$dst} = {};
	$conf->{data}{clustat}{$dst}{cluster} = $conf->{data}{clustat}{$src}{cluster};
	$conf->{data}{clustat}{$dst}{quorum}  = $conf->{data}{clustat}{$src}{cluster};
	foreach my $node (sort {$a cmp $b} keys %{$conf->{data}{clustat}{$src}{node}})
	{
		$conf->{data}{clustat}{$dst}{node}{$node}{status} = $conf->{data}{clustat}{$src}{node}{$node}{status};
	}
	foreach my $service (sort {$a cmp $b} keys %{$conf->{data}{clustat}{$src}{service}})
	{
		$conf->{data}{clustat}{$dst}{service}{$service}{'state'} = $conf->{data}{clustat}{$src}{service}{$service}{'state'};
		$conf->{data}{clustat}{$dst}{service}{$service}{on}      = $conf->{data}{clustat}{$src}{service}{$service}{on};
	}
	
	# Bridge
	$conf->{data}{network}{$dst} = {};
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{bridge}})
	{
		$conf->{data}{network}{$dst}{bridge}{$dev}{id}         = $conf->{data}{network}{$src}{bridge}{$dev}{id};
		$conf->{data}{network}{$dst}{bridge}{$dev}{stp}        = $conf->{data}{network}{$src}{bridge}{$dev}{stp};
		$conf->{data}{network}{$dst}{bridge}{$dev}{interfaces} = $conf->{data}{network}{$src}{bridge}{$dev}{interfaces};
		$conf->{data}{network}{$dst}{dev}{$dev}{hwaddr}        = $conf->{data}{network}{$src}{dev}{$dev}{hwaddr};
	}
	
	# Bonds
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{bond}})
	{
		$conf->{data}{network}{$dst}{dev}{$dev}{mtu}                    = $conf->{data}{network}{$src}{dev}{$dev}{mtu};
		$conf->{data}{network}{$dst}{bond}{$dev}{mode}                  = $conf->{data}{network}{$src}{bond}{$dev}{mode};
		$conf->{data}{network}{$dst}{bond}{$dev}{primary}{slave}        = $conf->{data}{network}{$src}{bond}{$dev}{primary}{slave};
		$conf->{data}{network}{$dst}{bond}{$dev}{primary}{reselect}     = $conf->{data}{network}{$src}{bond}{$dev}{primary}{reselect};
		$conf->{data}{network}{$dst}{bond}{$dev}{delay}{up}             = $conf->{data}{network}{$src}{bond}{$dev}{delay}{up};
		$conf->{data}{network}{$dst}{bond}{$dev}{mii}{polling_interval} = $conf->{data}{network}{$src}{bond}{$dev}{mii}{polling_interval};
		$conf->{data}{network}{$dst}{bond}{$dev}{mii}{status}           = $conf->{data}{network}{$src}{bond}{$dev}{mii}{status};
		$conf->{data}{network}{$dst}{bond}{$dev}{active_slave}          = $conf->{data}{network}{$src}{bond}{$dev}{active_slave};
		# TODO: This probably misses links that are lost by ifdown (leaving the old record behind)
		foreach my $slave (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{bond}{$dev}{slave}})
		{
			$conf->{data}{network}{$dst}{bond}{$dev}{slave}{$slave}{real_mac}           = $conf->{data}{network}{$src}{bond}{$dev}{slave}{$slave}{real_mac};
			$conf->{data}{network}{$dst}{bond}{$dev}{slave}{$slave}{mii_status}         = $conf->{data}{network}{$src}{bond}{$dev}{slave}{$slave}{mii_status};
			$conf->{data}{network}{$dst}{bond}{$dev}{slave}{$slave}{link_failure_count} = $conf->{data}{network}{$src}{bond}{$dev}{slave}{$slave}{link_failure_count};
			$conf->{data}{network}{$dst}{bond}{$dev}{slave}{$slave}{speed}              = $conf->{data}{network}{$src}{bond}{$dev}{slave}{$slave}{speed};
			$conf->{data}{network}{$dst}{bond}{$dev}{slave}{$slave}{duplex}             = $conf->{data}{network}{$src}{bond}{$dev}{slave}{$slave}{duplex};
		}
	}
	
	# Network cards.
	foreach my $dev (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{dev}})
	{
		#record($conf, "$THIS_FILE ".__LINE__."; COPYING - dev: [$dev]\n");
		if ($dev =~ /eth/)
		{
			foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{dev}{$dev}})
			{
				if (($var eq "tx") or ($var eq "rx"))
				{
					foreach my $var2 (sort {$a cmp $b} keys %{$conf->{data}{network}{$src}{dev}{$dev}{$var}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], var: [$var], var2: [$var2] -> [$conf->{data}{network}{$src}{dev}{$dev}{$var}{$var2}]\n");
						$conf->{data}{network}{$dst}{dev}{$dev}{$var}{$var2} = $conf->{data}{network}{$src}{dev}{$dev}{$var}{$var2};
					}
				}
				else
				{
					#record($conf, "$THIS_FILE ".__LINE__."; dev: [$dev], var: [$var] -> [$conf->{data}{network}{$src}{dev}{$dev}{$var}]\n");
					$conf->{data}{network}{$dst}{dev}{$dev}{$var} = $conf->{data}{network}{$src}{dev}{$dev}{$var};
				}
			}
		}
	}
	
	# Storage
	#record($conf, "$THIS_FILE ".__LINE__."; Copying storage values from new to old.\n");
	if ($conf->{'system'}{storage} eq "lsi")
	{
		foreach my $adapter (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}})
		{
			#record($conf, "$THIS_FILE ".__LINE__."; LSI Adapter: [$adapter].\n");
			foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}})
			{
				# Some keys are hash references
				#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key].\n");
				if ($key eq "vd")
				{
					foreach my $vd (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{vd}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], vd: [$vd].\n");
						foreach my $target_id (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{vd}{$vd}{target}})
						{
							#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], vd: [$vd], target id: [$target_id].\n");
							foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}})
							{
								$conf->{data}{lsi}{$dst}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var};
								#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], vd: [$vd], target id: [$target_id], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{vd}{$vd}{target}{$target_id}{$var}].\n");
							} 
						}
					}
				}
				elsif ($key eq "bbu")
				{
					foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{bbu}})
					{
						$conf->{data}{lsi}{$dst}{adapter}{$adapter}{bbu}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{bbu}{$var};
						#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{bbu}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{bbu}{$var}].\n");
					}
				}
				elsif ($key eq "slot")
				{
					foreach my $slot (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], slot: [$slot].\n");
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}})
						{
							#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], slot: [$slot], var: [$var].\n");
							if ($var eq "port")
							{
								foreach my $i (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{port}})
								{
									#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], slot: [$slot], var: [$var], i: [$i].\n");
									foreach my $var2 (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{port}{$i}})
									{
										$conf->{data}{lsi}{$dst}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var2} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var2};
										#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], slot: [$slot], var: [$var], i: [$i], var2: [$var2], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var2}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{port}{$i}{$var2}].\n");
									}
								}
							}
							else
							{
								$conf->{data}{lsi}{$dst}{adapter}{$adapter}{slot}{$slot}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{$var};
								#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], slot: [$slot], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{slot}{$slot}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{slot}{$slot}{$var}].\n");
							}
						}
					}
				}
				elsif ($key eq "backend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{backend_port}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], port: [$port].\n");
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{backend_port}{$port}})
						{
							$conf->{data}{lsi}{$dst}{adapter}{$adapter}{backend_port}{$port}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{backend_port}{$port}{$var};
							#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], port: [$port], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{backend_port}{$port}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{backend_port}{$port}{$var}].\n");
						}
					}
				}
				elsif ($key eq "frontend_port")
				{
					foreach my $port (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{frontend_port}})
					{
						#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], port: [$port].\n");
						foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{lsi}{$src}{adapter}{$adapter}{frontend_port}{$port}})
						{
							$conf->{data}{lsi}{$dst}{adapter}{$adapter}{frontend_port}{$port}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{frontend_port}{$port}{$var};
							#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], port: [$port], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{backend_port}{$port}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{backend_port}{$port}{$var}].\n");
						}
					}
				}
				elsif (ref($conf->{data}{lsi}{$src}{adapter}{$adapter}{$key}) eq "ARRAY")
				{
					my $say_translation = $conf->{translate}{lsi}{$key} ? $conf->{translate}{lsi}{$key} : $key;
					#record($conf, "$THIS_FILE ".__LINE__."; Warning: While archiving details of adapter: [$adapter], I found a variable that is an array reference called \"$say_translation\". This is a program error.\n");
				}
				elsif (ref($conf->{data}{lsi}{$src}{adapter}{$adapter}{$key}) eq "HASH")
				{
					my $say_translation = $conf->{translate}{lsi}{$key} ? $conf->{translate}{lsi}{$key} : $key;
					#record($conf, "$THIS_FILE ".__LINE__."; Warning: While archiving details of on adapter: [$adapter], I found a variable that is a hash reference called \"$say_translation\". This is a program error.\n");
				}
				else
				{
					my $var = $key;  # Just to keep it sane with the above code.
					$conf->{data}{lsi}{$dst}{adapter}{$adapter}{$var} = $conf->{data}{lsi}{$src}{adapter}{$adapter}{$var};
					#record($conf, "$THIS_FILE ".__LINE__."; Adapter: [$adapter], key: [$key], var: [$var], old: [$conf->{data}{lsi}{$dst}{adapter}{$adapter}{$var}], new: [$conf->{data}{lsi}{$src}{adapter}{$adapter}{$var}].\n");
				}
			}
		}
	}
	
	# Host sensors
	foreach my $key (sort {$a cmp $b} keys %{$conf->{data}{ipmi}{$src}})
	{
		$conf->{data}{ipmi}{$dst}{$key} = $conf->{data}{ipmi}{$src}{$key};
	}
	
	# Now for UPS specific checks.
	foreach my $ups_name (sort {$a cmp $b} keys %{$conf->{data}{ups}{$src}{ups_name}})
	{
		foreach my $var (sort {$a cmp $b} keys %{$conf->{data}{ups}{$src}{ups_name}{$ups_name}})
		{
			$conf->{data}{ups}{$dst}{ups_name}{$ups_name}{$var} = $conf->{data}{ups}{$src}{ups_name}{$ups_name}{$var};
		}
	}
	
	return(0);
}

# Send am email.
sub send_email
{
	my ($conf) = @_;
	
	# If the password is in a file, read it.
	if ($conf->{smtp}{password} =~ /^file:(.*)/)
	{
		my $file = $1;
		my $sc = "$file";
		#record($conf, "$THIS_FILE ".__LINE__."; Reading: [$sc]\n");
		my $fh = IO::Handle->new();
		open ($fh, "<$sc") or die "Failed to read: [$sc]\n";
		while(<$fh>)
		{
			chomp;
			$conf->{smtp}{password} = $_;
			last;
		}
		$fh->close();
	}
	
	if ($conf->{'system'}{emergency_shutdown})
	{
		if ($conf->{'system'}{disable_emergency_shutdown})
		{
			$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - EMERGENCY MANUAL SHUTDOWN REQUIRED! - $conf->{mail_data}{subject}";
		}
		else
		{
			$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - EMERGENCY SHUTDOWN! - $conf->{mail_data}{subject}";
		}
	}
	elsif ($conf->{'system'}{critical_event})
	{
		$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - CRITICAL! - $conf->{mail_data}{subject}";
		$conf->{'system'}{critical_event} = 0;
	}
	elsif ($conf->{'system'}{warning_event})
	{
		$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - Warning! - $conf->{mail_data}{subject}";
		$conf->{'system'}{warning_event} = 0;
	}
	elsif ($conf->{'system'}{clear_event})
	{
		$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - Alert Cleared! - $conf->{mail_data}{subject}";
		$conf->{'system'}{clear_event} = 0;
	}
	else
	{
		$conf->{mail_data}{subject} =  "$conf->{mail_data}{subject_prefix} - $conf->{mail_data}{subject}";
	}
	$conf->{mail_data}{body}    .= $conf->{mail_data}{body_suffix};
	my $transport = Email::Sender::Transport::SMTP::TLS->new(
		host		=>	$conf->{smtp}{server},
		port		=>	$conf->{smtp}{port},
		username	=>	$conf->{smtp}{username},
		password	=>	$conf->{smtp}{password},
		helo		=>	$conf->{smtp}{helo_domain},
	);

	my $message = Email::Simple->create(
		header	=> [
			From	=>	$conf->{smtp}{username},
			To	=>	$conf->{mail_data}{to},
			Subject	=>	$conf->{mail_data}{subject},
		],
		body	=>	$conf->{mail_data}{body},
	);
	
	try {
		sendmail($message, { transport => $transport });
	} catch {
		die "Error sending email: $_";
	};
	
	#record($conf, "$THIS_FILE ".__LINE__."; Sent: [$conf->{mail_data}{subject}], body: [$conf->{mail_data}{body}] to: [$conf->{mail_data}{to}]\n");
	$conf->{mail_data}{subject} = "";
	$conf->{mail_data}{body}    = "";
	
	# Shutdown if needed.
	if ($conf->{'system'}{emergency_shutdown})
	{
		$conf->{'system'}{emergency_shutdown} = 0;
		if ($conf->{'system'}{disable_emergency_shutdown})
		{
			# Welp, they just voided their warranty...
			$conf->{'system'}{critical_event} = 1;
			$conf->{mail_data}{subject}       = "Automatic Shutdown DISABLED. Immediate shutdown required!";
			$conf->{mail_data}{body}          = "
Shutdown of: $conf->{node}{me}{long_name} is required!

Sensors have detected dangerous operating conditions. This would
normally trigger an automatic shutdown, but this has been disabled.

IF THE NODE IS NOT POWERED OFF IMMEDIATELY, THE HARDWARE WARRANTY MAY
BE VOIDED!

The hardware is reporting that it is about to exceed maximum operating
specifications. If this occurs, the hardware warranty will be voided.
Please immediately shut down this machine if at all possible!
";
		}
		else
		{
			# Shutdown.
			### TODO: Call an-scs...
		}
	}
	
	return(0);
}

# Record a message to the log file.
sub record
{
	my ($conf, $message)=@_;

	my $fh = $conf->{handles}{'log'};
	if (not $fh)
	{
		$fh = IO::Handle->new();
		open ($fh, ">>$conf->{path}{'log'}") or die "Can't write to: [$conf->{path}{'log'}], error: $!\n";
		print $fh "======\nOpening AN!CDB - Cluster Dasboard log at ".time."\n";
		$conf->{handles}{'log'} = $fh;
	}
	print $fh time." ".$message;
	#print time." ".$message;
	
	return (0);
}

# This sets the host name of this machine based on the output of `uname -n`
sub get_hostname
{
	my ($conf)=@_;
	
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{uname} -n 2>&1 |";
	open ($fh, $sc) or die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		$conf->{node}{me}{short_name} = $_;
	}
	$fh->close();
	
	$conf->{node}{me}{long_name}  =  $conf->{node}{me}{short_name};
	$conf->{node}{me}{short_name} =~ s/\..*//;
	#record($conf, "$THIS_FILE ".__LINE__."; local host name: [$conf->{node}{me}{long_name}], short: [$conf->{node}{me}{short_name}]\n");
	
	return (0); 
}

# This causes the script to exit if another instance is already running.
sub avoid_duplicate_run
{
	my ($conf)=@_;
	
	my $my_pid     = $$;
	my $short_name =  $THIS_FILE;
	   $short_name =~ s/\..*//;
	#record($conf, "$THIS_FILE ".__LINE__."; Checking if $short_name is already running. I have pid: [$my_pid]...\n");
	my $fh = IO::Handle->new();
	my $sc = "$conf->{path}{pgrep} $short_name";
	open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		#record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
		my $prog_name = $conf->{misc}{program_name};
		if ($line ne $my_pid)
		{
			my $ps_pid = $line;
			#record ($conf, "$THIS_FILE ".__LINE__."; Found another instance of $short_name with pid: [$ps_pid]. Exiting...\n");
			$fh->close();
			exit (1);
		}
	}
	$fh->close();
	
	return (0);
}

# This reads the cluster.conf file for information about this node and the
# cluster.
sub read_cluster_conf
{
	my ($conf) = @_;
	
	my $fh=IO::Handle->new();
	my $sc="$conf->{path}{cluster_conf}";
	open ($fh, "<$sc") or die "Failed to read: [$sc], error was: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		if ($line =~ /<cluster.*name="(.*?)"/)
		{
			$conf->{cluster}{name} = $1;
		}
		if ($line =~ /<clusternode.*name="(.*?)"/)
		{
			my $node = $1;
			push @{$conf->{cluster}{node}}, $node;
		}
	}
	$fh->close();
	
	return(0);
}

# This reads in the configuration file.
sub read_conf
{
	my ($conf) = @_;
	
	my $fh=IO::Handle->new();
	my $sc="$conf->{path}{an_conf}";
	open ($fh, "<$sc") or die "Failed to read: [$sc], error was: $!\n";
	while (<$fh>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		next if $line !~ /=/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		next if $line =~ /^#/;
		next if not $line;
		my ($var, $val) = (split/=/, $line, 2);
		$var =~ s/^\s+//;
		$var =~ s/\s+$//;
		$val =~ s/^\s+//;
		$val =~ s/\s+$//;
		next if (not $var);
		_make_hash_reference($conf, $var, $val);
	}
	$fh->close();
	
	return(0);
}
###############################################################################
# Sssh, there are private functions                                           #
###############################################################################

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This is a helper to the below '_make_hash_reference' function. It is called
# each time a new string is to be created as a new hash key in the passed hash
# reference.
sub _add_hash_reference
{
	my ($href1, $href2) = @_;

	for my $key (keys %$href2)
	{
		if (ref $href1->{$key} eq 'HASH')
		{
			_add_hash_reference($href1->{$key}, $href2->{$key});
		}
		else
		{
			$href1->{$key} = $href2->{$key};
		}
	}
}

### Contributed by Shaun Fryer and Viktor Pavlenko by way of TPM.
# This takes a string with double-colon seperators and divides on those
# double-colons to create a hash reference where each element is a hash key.
sub _make_hash_reference
{
	my ($href, $key_string, $value) = @_;

	my @keys            = split /::/, $key_string;
	my $last_key        = pop @keys;
	my $_href           = {};
	$_href->{$last_key} = $value;
	while (my $key = pop @keys)
	{
		my $elem      = {};
		$elem->{$key} = $_href;
		$_href        = $elem;
	}
	_add_hash_reference($href, $_href);
}

1;
