#!/usr/bin/perl
#
# This program can change the password of the local Striker dashboard (and update the nodes that talk to 
# it's ScanCore database). It can also change the password of an Anvil!.
# 
# Return Codes:
# 0  = OK
# 1  = Not run as root.
# 2  = Not run on a Striker dashboard.
# 3  = No password given
# 4  = Neither 'local' or 'anvil' set.
# 5  = Could not connect to any ScanCore database.
# 6  = Password was too short.
# 7  = One or both nodes offline for an Anvil! password change request.
# 8  = The requested Anvil! was not found.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $program_name        =  $0;
my $THIS_FILE           =  ($program_name =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($program_name =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({
	data		=> {
		anvil		=>	{
			name		=>	"",
			uuid		=>	"",
		},
		password	=>	{
			'truncate'	=>	{
				ipmi		=>	16,
			},
			minimum_length	=>	6,
			to_set		=>	{
				apache		=>	"",
				'cluster.conf'	=>	"",
				ipmi		=>	"",
				scancore	=>	"",
				'striker.conf'	=>	"",
				'system'	=>	"",
			},
		},
		sys		=>	{
			log_level	=>	2,
			new_password	=>	"",
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Log->db_transactions(1) if $an->data->{'anvil-safe-start'}{log_db_transactions};
$an->Readable->base2(1);

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or 
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Make sure we're running as 'root'
# $< == real UID, $> == effective UID
if (($< != 0) && ($> != 0))
{
	# Not root
	print $an->String->get({key => "scp_error_0001"})."\n";
	$an->nice_exit({exit_code => 1});
}

if ((-e $an->data->{path}{cluster_conf}) or (not -e $an->data->{path}{htpasswd}))
{
	# Not a dashboard
	print $an->String->get({key => "scp_error_0002"})."\n";
	$an->nice_exit({exit_code => 2});
}

if ((not $an->data->{switches}{password}) or ($an->data->{switches}{password} eq "#!SET!#"))
{
	# No password...
	print $an->String->get({key => "scp_error_0003"})."\n";
	$an->nice_exit({exit_code => 3});
}

# Prepare the passwords and ask the user to confirm.
prepare_passwords($an);

# Can I connect to a database?
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
	name1 => "connections", value1 => $connections, 
}, file => $THIS_FILE, line => __LINE__});
if (not $connections)
{
	# No databases...
	print $an->String->get({key => "scp_error_0005"})."\n";
	$an->nice_exit({exit_code => 5});
}

# How are we running?
if ($an->data->{switches}{'local'})
{
	print $an->String->get({key => "scp_message_0004"})."\n";
	print $an->String->get({key => "scp_message_0011"})."\n";
	my $offline = check_all_nodes($an);
	if ($an->data->{switches}{force})
	{
		# Force requested.
		print $an->String->get({key => "scp_message_0003"})."\n";
	}
}
elsif (($an->data->{switches}{anvil}) && ($an->data->{switches}{anvil} ne "#!SET!#"))
{
	# Make sure we know about this anvil. It will error out if the Anvil! isn't found.
	print $an->String->get({key => "scp_message_0012", variables => { anvil_name => $an->data->{switches}{anvil} }})."\n";
	print $an->String->get({key => "scp_message_0011"})."\n";
	find_anvil($an);
}
else
{
	print $an->String->get({key => "scp_error_0004"})."\n";
	$an->nice_exit({exit_code => 4});
}

# Finally, ask the user to confirm
print $an->String->get({key => "scp_message_0005", variables => { password => $an->data->{switches}{password} }});
my $answer = <STDIN>;
chomp($answer);
if (($answer) && (lc($answer) =~ /^y/))
{
	# Proceed!
	print $an->String->get({key => "scp_message_0006"})."\n";
}
else
{
	# Eject, eject!
	print $an->String->get({key => "scp_message_0007"})."\n";
	$an->nice_exit({exit_code => 0});
}



=cut Notes:
### Change system users;
echo "<escaped new pw>" | passwd <users> --stdin"

### Change apache
<$an->data->{path}{htpasswd_access}
if ($line =~ s/^(.*?):/)
{
	my $apache_user = $1;
}

if ($apache_user)
{
	unlink $an->data->{path}{htpasswd_access};
	su apache -c "htpasswd -cdb $conf->{path}{apache_htpasswd} $conf->{sys}{striker_user} \\\"$conf->{sys}{striker_password}\\\"\"";
}
else
{
	die
}

### Postgresql
su - postgres -c "psql template1 -c \"ALTER ROLE $user WITH PASSWORD '$striker_password';\""

### Node's ScanCore DB access
# read in striker.conf, find the ID for this dashboard, change password.

--------------------

when updating nodes, update the IPMI interfaces and then update cluster.conf
# Require both nodes be online
# Require one node to be withdrawn?

=cut



$an->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This looks at all known Anvil! systems and checks for access to all nodes. Returns '1' is any are found to
# be offline.
sub check_all_nodes
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "check_all_nodes" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $offline = 0;
	my $anvil_data = $an->ScanCore->get_anvils();
	foreach my $hash_ref (@{$anvil_data})
	{
		my $this_anvil_uuid = $hash_ref->{anvil_uuid};
		my $this_anvil_name = $hash_ref->{anvil_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "this_anvil_uuid", value1 => $this_anvil_uuid, 
			name2 => "this_anvil_name", value2 => $this_anvil_name, 
		}, file => $THIS_FILE, line => __LINE__});
		
		print $an->String->get({key => "scp_message_0008", variables => { anvil_name => $this_anvil_name }})."\n";
		
		# Load this Anvil!
		$an->Striker->load_anvil({anvil_uuid => $this_anvil_uuid});
		
		# Quick scan both nodes to make sure we have access.
		foreach my $node_key ("node1", "node2")
		{
			# Tell the user we're going to try connecting
			print $an->String->get({key => "scp_message_0009", variables => { node_name => $an->data->{sys}{anvil}{$node_key}{name} }});
			
			$an->Striker->scan_node({uuid => $an->data->{sys}{anvil}{$node_key}{uuid}, short_scan => 1});
			
			# If either node is offline, error out. We don't care about '--force' here because 
			# they've asked us to change the passwords on an Anvil!, which requires both nodes 
			# be up.
			if ($an->data->{sys}{anvil}{$node_key}{online})
			{
				# Accessed!
				print $an->String->get({key => "scp_message_0010"})."\n";
			}
			else
			{
				# Failed. :(
				print $an->String->get({key => "scp_warning_0003"})."\n";
				$offline = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "offline", value1 => $offline, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "offline", value1 => $offline, 
	}, file => $THIS_FILE, line => __LINE__});
	return($offline);
}

# This looks for the anvil_uuid of the requested anvil.
sub find_anvil
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_anvil" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $anvil_data = $an->ScanCore->get_anvils();
	foreach my $hash_ref (@{$anvil_data})
	{
		my $this_anvil_uuid = $hash_ref->{anvil_uuid};
		my $this_anvil_name = $hash_ref->{anvil_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "this_anvil_uuid", value1 => $this_anvil_uuid, 
			name2 => "this_anvil_name", value2 => $this_anvil_name, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($an->data->{switches}{anvil} eq $this_anvil_name)
		{
			print $an->String->get({key => "scp_message_0008", variables => { anvil_name => $this_anvil_name }})."\n";
			
			$an->data->{anvil}{uuid} = $this_anvil_uuid;
			$an->data->{anvil}{name} = $this_anvil_name;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "anvil::uuid", value1 => $an->data->{anvil}{uuid}, 
			}, file => $THIS_FILE, line => __LINE__});
			last;
		}
	}
	
	if ($an->data->{anvil}{uuid})
	{
		# Load the Anvil!
		$an->Striker->load_anvil({anvil_uuid => $an->data->{anvil}{uuid}});
		
		# Quick scan both nodes to make sure we have access.
		my $offline = 0;
		foreach my $node_key ("node1", "node2")
		{
			print $an->String->get({key => "scp_message_0009", variables => { node_name => $an->data->{sys}{anvil}{$node_key}{name} }});
			
			$an->Striker->scan_node({uuid => $an->data->{sys}{anvil}{$node_key}{uuid}, short_scan => 1});
			
			if ($an->data->{sys}{anvil}{$node_key}{online})
			{
				# Accessed!
				print $an->String->get({key => "scp_message_0010"})."\n";
			}
			else
			{
				# Failed. :(
				print $an->String->get({key => "scp_warning_0003"})."\n";
				$offline = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "offline", value1 => $offline, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# If either node is offline, error out. We don't care about '--force' here because they've 
		# asked us to change the passwords on an Anvil!, which requires both nodes be up.
		if ($offline)
		{
			# Can't proceed without both nodes being accessible
			print $an->String->get({key => "scp_error_0007"})."\n";
			$an->nice_exit({exit_code => 7});
		}
	}
	else
	{
		# Could not find this anvil.
		print $an->String->get({key => "scp_error_0008", variables => { anvil_name => $an->data->{anvil}{name} }})."\n";
		$an->nice_exit({exit_code => 8});
	}
	
	return(0);
}

# This mangles the passwords to prepare them for setting in the various places.
sub prepare_passwords
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "prepare_passwords" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the password long enough?
	if (length($an->data->{switches}{password}) < $an->data->{password}{minimum_length})
	{
		if ($an->data->{switches}{force})
		{
			# Force requested.
			print $an->String->get({key => "scp_warning_0001"})."\n";
		}
		else
		{
			# Not forced, password is too short.
			print $an->String->get({key => "scp_error_0006"})."\n";
			$an->nice_exit({exit_code => 6});
		}
	}
	
	# We'll set all the passwords, then adjust as needed.
	$an->data->{password}{to_set}{apache}         = $an->data->{switches}{password};
	$an->data->{password}{to_set}{'cluster.conf'} = $an->data->{switches}{password};
	$an->data->{password}{to_set}{ipmi}           = $an->data->{switches}{password};
	$an->data->{password}{to_set}{scancore}       = $an->data->{switches}{password};
	$an->data->{password}{to_set}{'striker.conf'} = $an->data->{switches}{password};
	$an->data->{password}{to_set}{'system'}       = $an->data->{switches}{password};
	
	# We'll truncate IPMI to 16 characters.
	if (length($an->data->{password}{to_set}{ipmi}) > $an->data->{password}{'truncate'}{ipmi})
	{
		# Truncate
		$an->data->{password}{to_set}{ipmi}           = substr($an->data->{password}{to_set}{ipmi}, 0, $an->data->{switches}{'truncate'}{ipmi});
		$an->data->{password}{to_set}{'cluster.conf'} = $an->data->{password}{to_set}{ipmi};
		print $an->String->get({key => "scp_warning_0002", variables => { ipmi_password => $an->data->{password}{to_set}{ipmi} }})."\n";
	}
	
	# The password that will be written to cluster.conf for IPMI fencing needs to have some escapes 
	# (well, just one for now).
	$an->data->{password}{to_set}{'cluster.conf'} =~ s/'/&apos;/g;
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $an->String->get({key => "scp_message_0001"})."\n";
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
