#!/usr/bin/perl
# 
# This pushes the local Striker's user's SSH RSA keys to the target Anvil!'s node's authorized_keys file. 
# This is needed to enable Virtual Machine Manager passwordless access to the hosted Servers.
# 
# This doesn't use 'ssh-copy-id' because 'expect' is a PITA.
# 
# Return codes:
# 0  = Normal exit.
# 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	        $running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		path		=>	{
			'chown'		=>	"/bin/chown",
			'chmod'		=>	"/bin/chmod",
			'echo'		=>	"/bin/echo",
			'grep'		=>	"/bin/grep",
			log_file	=>	"/var/log/striker.log",
			ls		=>	"/bin/ls",
			ssh_config	=>	"/etc/ssh/ssh_config",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
			gethostip	=>	"/usr/bin/gethostip",
			'ssh-keygen'	=>	"/usr/bin/ssh-keygen",
			'ssh-keyscan'	=>	"/usr/bin/ssh-keyscan",
			'ssh-copy-id'	=>	"/usr/bin/ssh-copy-id",
		},
		switches	=>	{},
		sys		=>	{
			key_size	=>	8191,
			language	=>	"en_CA",
			local_users	=>	[],
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

# Log our startup
$an->Log->entry({log_level => 3, message_key => "sps_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});

# Exit if no Anvil! defined.
if (not $an->data->{switches}{anvil})
{
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "sps_error_0001", code => 1, file => "$THIS_FILE", line => __LINE__});
}

# Log that we're looking for the login credentials to the defined node.
$an->Log->entry({log_level => 2, message_key => "sps_log_0002", message_variables => {
	anvil	=>	$an->data->{switches}{anvil},
}, file => $THIS_FILE, line => __LINE__});

# Find the login details
foreach my $id (sort {$a cmp $b} keys %{$an->data->{cluster}})
{
	if ($an->data->{cluster}{$id}{name} eq $an->data->{switches}{anvil})
	{
		# Split out the node names.
		my ($node1, $node2) = (split/,/, $an->data->{cluster}{$id}{nodes});
		$node1 =~ s/^\s+//g;
		$node1 =~ s/\s+$//g;
		$node2 =~ s/^\s+//g;
		$node2 =~ s/\s+$//g;
		
		$an->data->{anvil}{id}       = $id;
		$an->data->{anvil}{node1}    = $node1;
		$an->data->{anvil}{node2}    = $node2;
		$an->data->{anvil}{password} = $an->data->{cluster}{$id}{root_pw} ? $an->data->{cluster}{$id}{root_pw} : $an->data->{cluster}{$id}{ricci_pw};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "anvil::id",       value1 => $an->data->{anvil}{id}, 
			name2 => "anvil::node1",    value2 => $an->data->{anvil}{node1}, 
			name3 => "anvil::node2",    value3 => $an->data->{anvil}{node2}, 
			name4 => "anvil::password", value4 => $an->data->{anvil}{password}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
}

# If I didn't find an Anvil!, exit.
if ($an->data->{anvil}{id})
{
	# Woot!
	$an->Log->entry({log_level => 2, message_key => "sps_log_0003", message_variables => {
		anvil	=>	$an->data->{switches}{anvil}, 
	}, file => $THIS_FILE, line => __LINE__});
}
else
{
	# Well foo. 
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "sps_error_0002", message_variables => {
		anvil	=>	$an->data->{switches}{anvil},
	}, code => 2, file => "$THIS_FILE", line => __LINE__});
}

# Now determine what local users exist.
$an->data->{sys}{local_users} = $an->Get->local_users();
my $local_user_count          = @{$an->data->{sys}{local_users}};
if (not $local_user_count)
{
	# No users found, nothing to do.
	$an->Log->entry({log_level => 2, message_key => "sps_log_0004", file => $THIS_FILE, line => __LINE__});
	exit(0);
}

# If I am still alive, loop through the list of users, get their local RSA key (generating it as needed) and
# then add it to each target node.
foreach my $user (sort {$a cmp $b} @{$an->data->{sys}{local_users}})
{
	### TODO: When moving to the new module methods, we'll need to process the general success/failure as
	###       it won't report per-user failures.
	push_ssh_keys($an, $user);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This reads in the given user's RSA public key, generating it if needed, and then copies it to each node in
# the Anvil!.
sub push_ssh_keys
{
	my ($an, $user) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "push_ssh_keys" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "user", value1 => $user, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# First up, read (and generate, if needed) the user's RSA public key.
	my ($owner, $key) = $an->Get->rsa_public_key({user => $user, key_size => $an->data->{sys}{key_size}});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "owner", value1 => $owner, 
		name2 => "key",   value2 => $key, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# If I read the key, push it to the nodes now.
	if ($key)
	{
		# OK, loop through the nodes.
		foreach my $node ($an->data->{anvil}{node1}, $an->data->{anvil}{node2})
		{
			# First, is it up?
			if ($an->Check->ping({target => $node, count => 3}))
			{
				# Failed to reach it.
				$an->Alert->warning({message_key => "sps_warning_0003", message_variables => {
					node	=>	$node,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			
			# Make sure I've got the remote machine's RSA fingerprint recorded.
			$an->Remote->add_target_to_known_hosts({user => $user, target => $node});
			
			# If I'm still here, I can reach the node so it's time to add they key.
			# 0 == Existed
			# 1 == Failed to add
			# 2 == Added successfully
			my $return = $an->Remote->add_rsa_key_to_target({
				user      => "root",
				target    => $node,
				password  => $an->data->{anvil}{password},
				key       => $key, 
				key_owner => $owner,
			});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "return", value1 => $return, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}
