#!/usr/bin/perl
# 
# This tool does not do or change anything. It uses the information from 'anvil-report-state' and formats a 
# subset of it for display in a clean(ish) way on the command line.
# 
# Return Codes:
# 0  = OK
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;
use Term::ANSIColor;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $program_name        =  $0;
my $THIS_FILE           =  ($program_name =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($program_name =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $time = time;

=cut colours (from the Term::ANSIColor source)
%ATTRIBUTES = ('clear'      => 0,
               'reset'      => 0,
               'bold'       => 1,
               'dark'       => 2,
               'faint'      => 2,
               'underline'  => 4,
               'underscore' => 4,
               'blink'      => 5,
               'reverse'    => 7,
               'concealed'  => 8,

               'black'      => 30,   'on_black'   => 40,
               'red'        => 31,   'on_red'     => 41,
               'green'      => 32,   'on_green'   => 42,
               'yellow'     => 33,   'on_yellow'  => 43,
               'blue'       => 34,   'on_blue'    => 44,
               'magenta'    => 35,   'on_magenta' => 45,
               'cyan'       => 36,   'on_cyan'    => 46,
               'white'      => 37,   'on_white'   => 47);
=cut 

my $an = AN::Tools->new({
	data		=> {
		colours		=>	{
			anvil		=>	{
				name		=>	"bold magenta",
				hostnames	=>	"bold blue",
				node_offline	=>	"bold white",
				node_hung	=>	"bold red",
				node_starting	=>	"yellow",
			},
			services	=>	{
				online		=>	"bold green",
				offline		=>	"faint white",
				starting	=>	"yellow",
				failed		=>	"bold red",
				unknown		=>	"bold magenta",
			},
		},
		padding		=>	{
			anvil		=>	{
				name		=>	14,
				hostnames	=>	30,
				short_hostnames	=>	14,
				whole_line	=>	106,
			},
			status		=>	{
				services	=>	20,
			},
		},
		status		=>	{
			anvil		=>	{
				name		=>	"",
				hostname	=>	{
					me		=>	"",
					peer		=>	"",
				},
			},
		},
		sys		=>	{
			current_time	=>	"",
			log_level	=>	2,
			interval	=>	0,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Log->db_transactions(1) if $an->data->{'anvil-safe-start'}{log_db_transactions};
$an->Readable->base2(1);

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or 
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

if (($an->data->{switches}{interval}) && ($an->data->{switches}{interval} =~ /^\d+$/))
{
	$an->data->{sys}{interval} = $an->data->{switches}{interval};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "sys::interval", value1 => $an->data->{sys}{interval}, 
	}, file => $THIS_FILE, line => __LINE__});
}

my $run = 1;
while($run)
{
	# Gather whatever we can find.
	gather_data($an);
	
	# Get the current time
	$an->data->{sys}{current_time} = $an->Get->date_and_time({time_only => 1});
	
	# Clear the screen and reposition the cursor to 0,0
	print "\033[2J";    #clear the screen
	print "\033[0;0H"; #jump to 0,0
	
	# Display the data
	report_status($an);
	
	if ($an->data->{sys}{interval})
	{
		sleep $an->data->{sys}{interval};
	}
	else
	{
		$run = 0;
	}
}

$an->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This builds the header
sub build_header
{
	my ($an) = @_;
	
	### Pad left
	# sprintf("%${padding}s", $1);
	### Pad right
	# sprintf("%-${padding}s", $1);
	my $coloured_anvil_name    = colored(sprintf("%-".$an->data->{padding}{anvil}{name}."s",      $an->data->{gathered}{anvil}{name}),    $an->data->{colours}{anvil}{name});
	my $coloured_my_hostname   = colored(sprintf("%-".$an->data->{padding}{anvil}{hostnames}."s", $an->data->{gathered}{hostname}{me}),   $an->data->{colours}{anvil}{hostnames});
	my $coloured_peer_hostname = colored(sprintf("%-".$an->data->{padding}{anvil}{hostnames}."s", $an->data->{gathered}{hostname}{peer}), $an->data->{colours}{anvil}{hostnames});
	my $page                   = $an->String->get({key => "acs_report_0001", variables => {
		anvil_name          => $coloured_anvil_name,
		my_hostname         => $coloured_my_hostname,
		peer_hostname       => $coloured_peer_hostname,
	}})."\n";
	
	return($page);
}

# This builds the clustat section
sub build_clustat_section
{
	my ($an, $node1_key, $node2_key) = @_;
	
	# If this node is not running cman or rgmanager, we can't report on any state information.
	if (not $an->data->{gathered}{clustat}{cman}{me})
	{
		my $say_offline = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0003"}), width => $an->data->{padding}{anvil}{whole_line} });
		   $say_offline = colored($say_offline, $an->data->{colours}{anvil}{node_offline});
		my $say_message = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0008"}), width => $an->data->{padding}{anvil}{whole_line} });
		my $page        = $an->String->get({key => "acs_report_0003", variables => { 
			'state' => $say_offline,
			message => $say_message,
		}})."\n";
		return($page);
	}
	elsif (not $an->data->{gathered}{clustat}{rgmanager}{me})
	{
		my $say_starting = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0011"}), width => $an->data->{padding}{anvil}{whole_line} });
		   $say_starting = colored($say_starting, $an->data->{colours}{anvil}{node_starting});
		my $say_message  = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0010"}), width => $an->data->{padding}{anvil}{whole_line} });
		my $page         = $an->String->get({key => "acs_report_0003", variables => { 
			'state' => $say_starting,
			message => $say_message,
		}})."\n";
		return($page);
	}
	elsif ($an->data->{gathered}{clustat}{hung})
	{
		# This node's clustat is hung.
		my $say_hung    = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0007"}), width => $an->data->{padding}{anvil}{whole_line} });
		   $say_hung    = colored($say_hung, $an->data->{colours}{anvil}{node_hung});
		my $say_message = $an->Readable->center_text({string => $an->String->get({key => "acs_message_0009"}), width => $an->data->{padding}{anvil}{whole_line} });
		my $page        = $an->String->get({key => "acs_report_0003", variables => { 
			'state' => $say_hung,
			message => $say_message,
		}})."\n";
		return($page);
	}
	
	### Setup my values
	# Top row (node 1)
	my $node1_name               = ($an->data->{gathered}{hostname}{$node1_key} =~ /^(.*?)\./)[0];
	my $say_node1_name           = colored($an->Readable->center_text({string => $node1_name, width => $an->data->{padding}{anvil}{short_hostnames}}), $an->data->{colours}{anvil}{hostnames});
	my $node1_cluster_member     = "";
	my $node1_resource_manager   = "";
	my $node1_storage_services   = "";
	my $node1_hypervisor_service = "";
	# cman/corosync
	if ($an->data->{gathered}{clustat}{cman}{$node1_key})
	{
		$node1_cluster_member = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node1_cluster_member = colored($node1_cluster_member, $an->data->{colours}{services}{online});
	}
	else
	{
		$node1_cluster_member = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node1_cluster_member = colored($node1_cluster_member, $an->data->{colours}{services}{offline});
	}
	# rgmanager
	if ($an->data->{gathered}{clustat}{rgmanager}{$node1_key})
	{
		$node1_resource_manager = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node1_resource_manager = colored($node1_resource_manager, $an->data->{colours}{services}{online});
	}
	else
	{
		$node1_resource_manager = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node1_resource_manager = colored($node1_resource_manager, $an->data->{colours}{services}{offline});
	}
	# Storage services
	if ($an->data->{gathered}{clustat}{service}{storage_n01}{'state'} eq "started")
	{
		$node1_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{online});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n01}{'state'} eq "stopped")
	{
		$node1_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{offline});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n01}{'state'} eq "starting")
	{
		$node1_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0004!#", width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n01}{'state'} eq "stopping")
	{
		$node1_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0006!#", width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n01}{'state'} eq "failed")
	{
		$node1_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0005!#", width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{failed});
	}
	else
	{
		# ?? This will print the raw string we got
		$node1_storage_services = $an->Readable->center_text({string => $an->data->{gathered}{clustat}{service}{storage_n01}{'state'}, width => $an->data->{padding}{status}{services}});
		$node1_storage_services = colored($node1_storage_services, $an->data->{colours}{services}{unknown});
	}
	# Hypervisor service
	if ($an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'} eq "started")
	{
		$node1_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{online});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'} eq "stopped")
	{
		$node1_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{offline});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'} eq "starting")
	{
		$node1_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0004!#", width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'} eq "stopping")
	{
		$node1_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0006!#", width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'} eq "failed")
	{
		$node1_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0005!#", width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{failed});
	}
	else
	{
		# ?? This will print the raw string we got
		$node1_hypervisor_service = $an->Readable->center_text({string => $an->data->{gathered}{clustat}{service}{libvirtd_n01}{'state'}, width => $an->data->{padding}{status}{services}});
		$node1_hypervisor_service = colored($node1_hypervisor_service, $an->data->{colours}{services}{unknown});
	}
	
	# Bottom row (node 2)
	my $node2_name               = ($an->data->{gathered}{hostname}{$node2_key} =~ /^(.*?)\./)[0];
	my $say_node2_name           = colored($an->Readable->center_text({string => $node2_name, width => $an->data->{padding}{anvil}{short_hostnames}}), $an->data->{colours}{anvil}{hostnames});
	my $node2_cluster_member     = "";
	my $node2_resource_manager   = "";
	my $node2_storage_services   = "";
	my $node2_hypervisor_service = "";
	# cman/corosync
	if ($an->data->{gathered}{clustat}{cman}{$node2_key})
	{
		$node2_cluster_member = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node2_cluster_member = colored($node2_cluster_member, $an->data->{colours}{services}{online});
	}
	else
	{
		$node2_cluster_member = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node2_cluster_member = colored($node2_cluster_member, $an->data->{colours}{services}{offline});
	}
	# rgmanager
	if ($an->data->{gathered}{clustat}{rgmanager}{$node2_key})
	{
		$node2_resource_manager = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node2_resource_manager = colored($node2_resource_manager, $an->data->{colours}{services}{online});
	}
	else
	{
		$node2_resource_manager = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node2_resource_manager = colored($node2_resource_manager, $an->data->{colours}{services}{offline});
	}
	# Storage services
	if ($an->data->{gathered}{clustat}{service}{storage_n02}{'state'} eq "started")
	{
		$node2_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{online});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n02}{'state'} eq "stopped")
	{
		$node2_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{offline});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n02}{'state'} eq "starting")
	{
		$node2_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0004!#", width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n02}{'state'} eq "stopping")
	{
		$node2_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0006!#", width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{storage_n02}{'state'} eq "failed")
	{
		$node2_storage_services = $an->Readable->center_text({string => "#!string!acs_message_0005!#", width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{failed});
	}
	else
	{
		# ?? This will print the raw string we got
		$node2_storage_services = $an->Readable->center_text({string => $an->data->{gathered}{clustat}{service}{storage_n02}{'state'}, width => $an->data->{padding}{status}{services}});
		$node2_storage_services = colored($node2_storage_services, $an->data->{colours}{services}{unknown});
	}
	# Hypervisor service
	if ($an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'} eq "started")
	{
		$node2_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0002!#", width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{online});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'} eq "stopped")
	{
		$node2_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0003!#", width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{offline});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'} eq "starting")
	{
		$node2_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0004!#", width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'} eq "stopping")
	{
		$node2_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0006!#", width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{starting});
	}
	elsif ($an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'} eq "failed")
	{
		$node2_hypervisor_service = $an->Readable->center_text({string => "#!string!acs_message_0005!#", width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{failed});
	}
	else
	{
		# ?? This will print the raw string we got
		$node2_hypervisor_service = $an->Readable->center_text({string => $an->data->{gathered}{clustat}{service}{libvirtd_n02}{'state'}, width => $an->data->{padding}{status}{services}});
		$node2_hypervisor_service = colored($node2_hypervisor_service, $an->data->{colours}{services}{unknown});
	}
	
	my $page = $an->String->get({key => "acs_report_0002", variables => {
		node1_name               => $say_node1_name,
		node1_cluster_member     => $node1_cluster_member,
		node1_resource_manager   => $node1_resource_manager,
		node1_storage_services   => $node1_storage_services,
		node1_hypervisor_service => $node1_hypervisor_service, 
		node2_name               => $say_node2_name,
		node2_cluster_member     => $node2_cluster_member,
		node2_resource_manager   => $node2_resource_manager,
		node2_storage_services   => $node2_storage_services,
		node2_hypervisor_service => $node2_hypervisor_service, 
	}})."\n";
	
	return($page);
}

# This prints out the information we gathered
sub report_status
{
	my ($an) = @_;
	
	# Build the header
	my $page = build_header($an);
	
	# Am I node 1 or 2? 
	my $node1_key = "me";
	my $node2_key = "peer";
	if (($an->data->{gathered}{clustat}{name}{me} =~ /n2/)    or 
	    ($an->data->{gathered}{clustat}{name}{me} =~ /n02/)   or 
	    ($an->data->{gathered}{clustat}{name}{me} =~ /node2/) or 
	    ($an->data->{gathered}{clustat}{name}{me} =~ /node02/))
	{
		$node1_key = "peer";
		$node2_key = "me";
	}
	
	# Build the clustat section
	$page .= build_clustat_section($an, $node1_key, $node2_key);
	
=cut
drbd::build_date = [2016-07-18]
drbd::build_time = [15:13:48]
drbd::builder = [root@rhel6-builder-production.alteeve.ca]
drbd::fence::handler::name = [fence-peer]
drbd::fence::handler::path = [/sbin/striker/rhcs_fence]
drbd::fence::policy = [resource-and-stonith]
drbd::git_hash = [22b4c802192646e433d3f7399d578ec7fecc6272]
drbd::minor_number::0::resource = [r0]
drbd::net::after-sb-0pri = [discard-zero-changes]
drbd::net::after-sb-1pri = [discard-secondary]
drbd::net::after-sb-2pri = [disconnect]
drbd::net::allow-two-primaries = [yes]
drbd::net::ping-timeout = [100 ms]
drbd::net::protocol = [C]
drbd::net::timeout = [100 ms]
drbd::options::on-no-data-accessible = [suspend-io]
drbd::resource::r0::activity_log_updates = [147]
drbd::resource::r0::app_pending_requests = [0]
drbd::resource::r0::backing_device = [/dev/drbd0]
drbd::resource::r0::bitmap_updates = [0]
drbd::resource::r0::connection_state = [WFConnection]
drbd::resource::r0::disk_read = [3485253632 Bytes]
drbd::resource::r0::disk_write = [265224192 Bytes]
drbd::resource::r0::drbd_device = [/dev/drbd0]
drbd::resource::r0::drbd_protocol = [C]
drbd::resource::r0::epoch_objects = [1]
drbd::resource::r0::hostname::an-a07n01.alteeve.ca::ip_address = [10.10.70.1]
drbd::resource::r0::hostname::an-a07n01.alteeve.ca::ip_type = [ipv4]
drbd::resource::r0::hostname::an-a07n01.alteeve.ca::tcp_port = [7788]
drbd::resource::r0::hostname::an-a07n02.alteeve.ca::ip_address = [10.10.70.2]
drbd::resource::r0::hostname::an-a07n02.alteeve.ca::ip_type = [ipv4]
drbd::resource::r0::hostname::an-a07n02.alteeve.ca::tcp_port = [7788]
drbd::resource::r0::io_flags = [r-----]
drbd::resource::r0::local_count = [0]
drbd::resource::r0::metadisk = [internal]
drbd::resource::r0::minor_number = [0]
drbd::resource::r0::my_disk_state = [UpToDate]
drbd::resource::r0::my_role = [Primary]
drbd::resource::r0::network_received = [51499008 Bytes]
drbd::resource::r0::network_sent = [163241984 Bytes]
drbd::resource::r0::out_of_sync = [20021248 Bytes]
drbd::resource::r0::peer_disk_state = [Outdated]
drbd::resource::r0::peer_role = [Unknown]
drbd::resource::r0::pending_requests = [0]
drbd::resource::r0::unacknowledged_requests = [0]
drbd::resource::r0::write_order = [drain]
drbd::startup::become-primary-on = [both]
drbd::status = [online]
drbd::version = [8.4.8-1]
	
	my $node2_name     = ($an->data->{status}{anvil}{hostname}{$node2_key} =~ /^(.*?)\./);
	my $say_node2_name = colored(sprintf("%".$mode1_name."s", $an->data->{status}{anvil}{hostname}{$node2_key}), $an->data->{colours}{anvil}{hostnames});
	
	# Build the header
	my $node1_membership_state       =  $an->Readable->center_text({string => "#!string!acs_report_0002!#", width => $an->data->{padding}{status}{services}});
=cut
	
	# We're ready!
	print $page;
	
	return(0);
}

# This calls 'anvil-report-state' to gather information about the node.
sub gather_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "gather_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $shell_call = $an->data->{path}{'anvil-report-state'}." --fast";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "error_title_0020", message_key => "error_message_0022", message_variables => { shell_call => $shell_call, error => $! }, code => 30, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /(.*?) = \[(.*?)\]/)
		{
			my $variable = "gathered::".$1;
			my $value    = $2;
			$an->_make_hash_reference($an->data, $variable, $value);
		}
	}
	close $file_handle;
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $an->String->get({key => "acs_message_0001"})."\n";
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
