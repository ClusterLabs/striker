#!/usr/bin/perl
# 
# This tool is used to deal with cases where rgmanager refuses to exit during an automated (emergency) 
# shutdown. It's operation is extremely simple; It will sleep for 120 seconds, then self-fence the node if
# cman is still running.
# 
# Exit Codes;
# 0  = OK
# 1  = Ubable to find this machine in cluster.conf.
#
# NOTE:
#

use strict;
use warnings;
use IO::Handle;
use AN::Tools;
use Data::Dumper;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $time = time;

my $an = AN::Tools->new({data => {
		path		=>	{
			cluster_conf		=>	"/etc/cluster/cluster.conf", 
			log_file		=>	"/var/log/striker.log",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		peer		=>	{
			short_name		=>	"",
			bcn_name		=>	"",
			sn_name			=>	"",
			ifn_name		=>	"",
		},
		daemon		=>	{
			cman			=>	{
				'local'			=>	0,
				peer			=>	0,
			},
			rgmanager			=>	{
				'local'			=>	0,
				peer			=>	0,
			},
		},
		drbd		=>	{
			resource		=>	{},
		},
		sys		=>	{
			delay			=>	120,
			language		=>	"en_CA",
			log_language		=>	"en_CA",
			log_level		=>	2,
			peer_node		=>	"",
			program_name		=>	$THIS_FILE,
			stop_reason		=>	"host_poweroff",
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Log->db_transactions(1) if $an->data->{'anvil-safe-stop'}{log_db_transactions};
$an->Readable->base2(1);

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or 
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Log our startup
$an->Log->entry({log_level => 1, message_key => "ans_log_0001", message_variables => { this_file => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});

# Can I connect to a database? I don't care if I can't, though.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
	name1 => "connections", value1 => $connections, 
}, file => $THIS_FILE, line => __LINE__});
if (not $connections)
{
	# We'll fall back to local data only.
	$an->Log->entry({log_level => 1, message_key => "ans_log_0002", file => $THIS_FILE, line => __LINE__});
}

# And by which weapon?
get_fence_methods($an);

# Find out which node I am.
go_to_sleep($an);

# We're done.
$an->Log->entry({log_level => 1, message_key => "ans_log_0004", message_variables => { this_file => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
$an->nice_exit({exit_code => 0});

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This loops through the fence methods until we die. It should never exit this function.
sub go_to_sleep
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "go_to_sleep" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Sleep for how long?
	my $delay = $an->data->{sys}{delay};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "delay", value1 => $delay, 
	}, file => $THIS_FILE, line => __LINE__});
	if ((defined $an->data->{switches}{delay}) && ($an->data->{switches}{delay} =~ /^\d+$/) && ($an->data->{switches}{delay} > 0))
	{
		$delay = $an->data->{switches}{delay};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "delay", value1 => $delay, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ($delay !~ /^\d+$/)
	{
		$delay = 120;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "delay", value1 => $delay, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Sleep
	sleep $delay;
	
	# Go into the suicide loop.
	while (1)
	{
		foreach my $source_machine (sort {$a cmp $b} keys %{$an->data->{fence}{source}})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "source_machine", value1 => $source_machine, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $order (sort {$a cmp $b} keys %{$an->data->{fence}{source}{$source_machine}{order}})
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "order", value1 => $order, 
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $method (sort {$a cmp $b} keys %{$an->data->{fence}{source}{$source_machine}{order}{$order}{method}})
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "method", value1 => $method, 
					}, file => $THIS_FILE, line => __LINE__});
					foreach my $number (sort {$a cmp $b} keys %{$an->data->{fence}{source}{$source_machine}{order}{$order}{method}{$method}{device}})
					{
						my $shell_call = $an->data->{fence}{source}{$source_machine}{order}{$order}{method}{$method}{device}{$number};
						$an->Log->entry({log_level => 1, message_key => "an_variables_0002", message_variables => {
							name1 => "number",     value1 => $number,
							name2 => "shell_call", value2 => $shell_call,
						}, file => $THIS_FILE, line => __LINE__});
						open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
						while(<$file_handle>)
						{
							chomp;
							my $line = $_;
							$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
								name1 => "line", value1 => $line, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						close $file_handle;
					}
				}
			}
		}
	}
}

# This finds the fence method(s) I can self-fence with. 
sub get_fence_methods
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "get_fence_methods" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Read the method(s) in.
	my $query = "
SELECT 
    c.host_name, 
    b.node_cache_data 
FROM 
    nodes a, 
    nodes_cache b, 
    hosts c 
WHERE 
    a.node_uuid = b.node_cache_node_uuid 
AND 
    b.node_cache_name = 'power_check' 
AND 
    b.node_cache_host_uuid = c.host_uuid 
AND
    a.node_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	my $count   = @{$results};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "results", value1 => $results, 
		name2 => "count",   value2 => $count
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $source_machine = defined $row->[0] ? $row->[0] : "";
		my $power_check    = defined $row->[1] ? $row->[1] : "";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "source_machine", value1 => $source_machine, 
			name2 => "power_check",    value2 => $power_check, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Parse and store
		my $order  = -1;
		my $method = "";
		my $device = "";
		my $number = 0;
		foreach my $substring (split/#;/, $power_check)
		{
			$substring .= "#";
			$substring  =~ s/#!action!#/off/g;
			if ($substring =~ /^(\d+):(\w+):\s+(.*)$/)
			{
				$order  = $1;
				$method = $2;
				$device = $3;
				$number = 0;
			}
			elsif ($substring =~ /^\s+(.*)$/)
			{
				$device = $1;
				$number++;
			}
			if (not exists $an->data->{fence}{seen_devices}{$device})
			{
				$an->data->{fence}{seen_devices}{$device} = 1;
				$an->data->{fence}{source}{$source_machine}{order}{$order}{method}{$method}{device}{$number} = $device;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "fence::seen_devices::${device}",                                                          value1 => $an->data->{fence}{seen_devices}{$device}, 
					name2 => "fence::source::${source_machine}::order::${order}::method::${method}::device::${number}", value2 => $an->data->{fence}{source}{$source_machine}{order}{$order}{method}{$method}{device}{$number}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
	}

	return(0);
}
