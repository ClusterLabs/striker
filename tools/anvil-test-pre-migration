#!/usr/bin/perl
# 
# This is a test script used during release validation. All it does is write an entry to Striker's logs 
# indicating that it ran and which server name was passed in.
# 
# NOTE:    This program is designed to be machine-readable. For this reason, the data is NOT translated.
# WARNING: This program reports passwords!
# 
# Return Codes:
# 0  = OK
# 1  = Failed to find local hostname.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $program_name        =  $0;
my $THIS_FILE           =  ($program_name =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($program_name =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $time = time;

my $an = AN::Tools->new();

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Log->db_transactions(1) if $an->data->{$THIS_FILE}{log_db_transactions};
$an->Readable->base2(1);

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or 
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

if (not $an->data->{switches}{server})
{
	$an->Log->entry({log_level => 0, message_key => "atprem_warning_0001", file => $THIS_FILE, line => __LINE__});
}
else
{
	# Who is the current host and which node is out target?
	my $server = $an->data->{switches}{server};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "server", value1  => $server, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $clustat_data = $an->Cman->get_clustat_data();
	if (not exists $clustat_data->{server}{$server})
	{
		# We don't know about this server.
		$an->Log->entry({log_level => 0, message_key => "atprem_warning_0002", message_variables => { server => $server }, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		my $host = $clustat_data->{server}{$server}{host};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "host", value1  => $host, 
		}, file => $THIS_FILE, line => __LINE__});
		if ((not $host) or ($host eq "none"))
		{
			# The server isn't running...
			$an->Log->entry({log_level => 0, message_key => "atprem_warning_0003", message_variables => { server => $server }, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# We have a host, so who is the peer?
			my $peer = $clustat_data->{node}{'local'}{name} eq $host ? $clustat_data->{node}{peer}{name} : $clustat_data->{node}{'local'}{name};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1  => "peer", value1  => $peer, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Report!
			$an->Log->entry({log_level => 0, message_key => "atprem_message_0002", message_variables => { 
				server => $server, 
				host   => $host, 
				peer   => $peer, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
}

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $an->String->get({key => "atprem_message_0001"})."\n";
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
