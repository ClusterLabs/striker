#!/usr/bin/perl
# 
# This asks the user to unplug and plug back in each physical network interface
# when prompted about a specific NIC. This allows the program to map the MAC
# addresses to desired device names.
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# https://alteeve.com
# 
# Exit Codes:
# 0  - Success
# 1  - The referenced network interface seen when the user unplugged a network
#      cable did not (properly) record that interfaces MAC address.
# 2  - The referenced network interface seen when the user unplugged a network
#      cable did not (properly) record that interfaces current device name.
# 3  - Installer didn't run as 'root'.
# 4  - Failed to bring up a network interface and network configuration was
#      requested.
# 5  - The '$conf->{path}{backups}' value is not set.
# 6  - The '$conf->{path}{backups}' backup directory failed to be created. The
#      failure warning should be displayed immediately prior to this error.
# 7  - backup_file() was called without a specified file to backup.
# 8  - Failed to find the '$conf->{path}{network_configs}' directory. I hope
#      for the user's sake that this is a program problem...
# 9  - There was one or more problems while sanity checking the command line
#      options. The problems will be displayed prior to the exit.
# 

my $THIS_FILE =  $0;
   $THIS_FILE =~ s/^.*\///;

use strict;
use warnings;
use File::Path qw(make_path);

# No capes!^H^H^H^Hbuffers!
$| = 1;

my $conf = {
	debug		=>	0,
	executable	=>	{
		cat			=>	"/bin/cat",
		cp			=>	"/bin/cp",
		ifup			=>	"/sbin/ifup",
		ip			=>	"/sbin/ip",
		sed			=>	"/bin/sed",
	},
	path		=>	{
		backups			=>	"/root/anvil",
		hostname		=>	"/etc/sysconfig/network",
		hosts			=>	"/etc/hosts",
		network_configs		=>	"/etc/sysconfig/network-scripts",
		persistent_net		=>	"/etc/udev/rules.d/70-persistent-net.rules",
	},
	mode		=>	"interactive",
	nics		=>	["bcn_link1", "bcn_link2", "sn_link1", "sn_link2", "ifn_link1", "ifn_link2"],
	script		=>	0,
};

# Make sure we got what we needed from the command line.
get_switches($conf);

# Make sure we're running as 'root'
# $< == real UID, $> == effective UID
if (($< != 0) && ($> != 0))
{
	# No sense translating this.
	print "[ Error ] - I am sorry, but this program must be run as the root user.\n\n";
	exit(3);
}

# This sanity-checks the passed in command line switches and returns '1' if
# any problems were found.
if (check_switches($conf))
{
	exit(9);
}

# Make sure we've got the right paths to executables.
find_executables($conf);

# Make backups. Even if we're just doing a summary, the main InstallManifest
# module expects the backups to exist already.
backup_original_files($conf);

# If it is just a request for a summary, print what we see and exit.
if ($conf->{switches}{summary})
{
	print_summary($conf);
	exit(0);
}

# Make sure all NICs are up. If any aren't, start them.
start_all_nics($conf);

# Exit if 'start-only'
if ($conf->{switches}{'start-only'})
{
	if ($conf->{switches}{summary})
	{
		print_summary($conf);
	}
	exit(0);
}

# Go into the loop that asks the user to unplug cables until they are happy 
# with their selection. When it exits, we go to work.
until(select_nics($conf))
{
	sleep 1;
}

exit(0);


###############################################################################
# Here be function!                                                           #
###############################################################################

# This simply lists the current MAC addresses and their device names.
sub print_summary
{
	my ($conf) = @_;
	
	if ($conf->{script})
	{
		print "#!string!script_0067!#\n" if $conf->{debug};
	}
	else
	{
		print "Interface summary:\n" if $conf->{debug};
	}
	### If there are bonds, we can't trust the interface MAC addresses. So
	### for each interface in a bond, check for the mac in 
	### /proc/net/bonding/X
	my @ip_addr_raw;
	my @bonds;
	my $bonds_exist = 0;
	my $this_nic    = "";
	my $shell_call  = $conf->{executable}{ip}." addr";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		# TODO: Should this cause the installer to bail?
		# This should not return anything, but just in case...
		chomp;
		my $line = $_;
		push @ip_addr_raw, $line;
		if ($line =~ /^\d+: (.*?): </)
		{
			$this_nic = $1;
			if ($this_nic =~ /bond/)
			{
				push @bonds, $this_nic;
			}
		}
		if ($line =~ /link\/ether (.*?) brd/)
		{
			my $mac = $1;
			if ($this_nic)
			{
				$conf->{nic}{$this_nic}{mac} = $mac;
				$this_nic = "";
				$mac      = "";
			}
			else
			{
				if ($conf->{script})
				{
					#print "#!string!script_0026!#,,nic=$nic\n" if $conf->{debug};
				}
				else
				{
					print "[ Error ] - Parse error. Saw MAC address without an interface name.\n";
				}
			}
		}
	}
	close $file_handle;
	
	# Now check for MAC addresses in bonds
	foreach my $bond (sort {$a cmp $b} @bonds)
	{
		my $this_nic   = "";
		my $shell_call = $conf->{executable}{cat}." /proc/net/bonding/$bond";
		#print "shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			# TODO: Should this cause the installer to bail?
			# This should not return anything, but just in case...
			chomp;
			my $line = $_;
			if (not $line)
			{
				$this_nic = "";
				next;
			}
			#print "line: [$line]\n";
			if ($line =~ /Slave Interface: (.*)$/)
			{
				$this_nic = $1;
				#print "this_nic: [$this_nic]\n";
			}
			#print "this_nic: [$this_nic], line: [$line]\n";
			if (($this_nic) && ($line =~ /Permanent HW addr: (.*)$/))
			{
				my $mac = $1;
				$conf->{nic}{$this_nic}{mac} = $mac;
				#print "nic::${this_nic}mac: [$conf->{nic}{$this_nic}{mac}]\n";
				$this_nic = "";
				$mac      = "";
			}
		}
		close $file_handle;
	}
	
	foreach my $this_nic (sort {$a cmp $b} keys %{$conf->{nic}})
	{
		next if $conf->{nic}{$this_nic}{mac} eq "00:00:00:00:00:00";
		print "nic=".$this_nic.",,mac=".$conf->{nic}{$this_nic}{mac}."\n";
	}
	
	return(0);
}

# This looks at all NICs and 'ifup's any that are down.
sub start_all_nics
{
	my ($conf) = @_;
	
	# This can take a minute, so tell the user what's going on.
	if ($conf->{script})
	{
		print "#!string!script_0025!#\n" if not $conf->{switches}{'start-only'};
	}
	else
	{
		print "Making sure all network interfaces are up and running.\n";
	}
	check_nic_states($conf);
	foreach my $this_iface (sort {$a cmp $b} keys %{$conf->{nic}{by_name}})
	{
		# See if it is up already.
		my $link_state = $conf->{nic}{by_name}{$this_iface}{link_state};
		my $mac        = $conf->{nic}{by_name}{$this_iface}{mac};
		next if $link_state != 2;
		
		# If I am here, the interface is down
		my $nic       = $this_iface;
		my $nic_file = $conf->{path}{network_configs}."/ifcfg-$nic";
		if ($conf->{script})
		{
			print "#!string!script_0026!#,,nic=$nic\n" if $conf->{debug};
			print "#!string!script_0027!#,,file=$nic_file\n" if $conf->{debug};
		}
		else
		{
			print "- The network interface: [$nic] is down. It must be started for the next stage.\n" if $conf->{debug};
			print "- Checking if: [$nic_file] exists.\n" if $conf->{debug};
		}
		if (not -e $nic_file)
		{
			if ($conf->{script})
			{
				print "#!string!script_0028!#,,file=$this_iface\n" if $conf->{debug};
			}
			else
			{
				print "- New device, writing a skeleton config file for: [$this_iface]... " if $conf->{debug};
			}
			my $shell_call = $nic_file;
			open (my $file_handle, '>', "$shell_call") || die "\nFailed to write: [$shell_call], error was: $!\n";
			print $file_handle "# Generated by: [$THIS_FILE] on: [".get_date($conf)."].\n";
			print $file_handle "# Temporary configuration file for discovered NIC.\n";
			print $file_handle "HWADDR=\"$mac\"\n" if $mac;
			print $file_handle "DEVICE=\"$nic\"\n";
			print $file_handle "BOOTPROTO=\"none\"\n";
			print $file_handle "NM_CONTROLLED=\"no\"\n";
			close $file_handle;
			if ($conf->{script})
			{
				print "#!string!script_0019!#\n" if $conf->{debug};
			}
			else
			{
				print "- Done.\n" if $conf->{debug};
			}
		}
		else
		{
			# It exists, edit it if needed.
			if ($conf->{script})
			{
				print "#!string!script_0029!#\n" if $conf->{debug};
			}
			else
			{
				print "- Config file exists, changing BOOTPROTO to 'none'.\n" if $conf->{debug};
			}
			my $shell_call = $conf->{executable}{sed}." -i 's/BOOTPROTO=.*/BOOTPROTO=\"none\"/\' $nic_file";
			#print "[ Debug ] - Calling: [$shell_call]\n";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				# TODO: Should this cause the installer to bail?
				# This should not return anything, but just in case...
				chomp;
				my $line = $_;
				if ($conf->{script})
				{
					print "#!string!script_0030!#,,line=$line\n" if $conf->{debug};
				}
				else
				{
					print "[ Warning ] - Unexpected output: [$line]\n" if $conf->{debug};
				}
			}
			close $file_handle;
		}
			
		# Now start the nic.
		if ($conf->{script})
		{
			print "#!string!script_0031!#,,nic=$nic\n" if $conf->{debug};
		}
		else
		{
			print "- Attempting to bring up: [$nic]...\n" if $conf->{debug};
		}
		my $shell_call = $conf->{executable}{ifup}." $nic";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			next if not $line;
			if ($conf->{script})
			{
				print "#!string!script_0024!#,,line=$line\n" if $conf->{debug};
			}
			else
			{
				print "- Output: [$line]\n" if $conf->{debug};
			}
		}
		close $file_handle;
		
		# See that it came up.
		if ($conf->{script})
		{
			print "#!string!script_0032!#\n" if $conf->{debug};
		}
		else
		{
			print "- Checking to see if it is up now.\n" if $conf->{debug};
		}
		sleep 2;
		my $is_up   = 0;
		$shell_call = $conf->{executable}{ip}." link show $nic";
		open ($file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			if ($line =~ /UP/)
			{
				$is_up = 1;
				last;
			}
		}
		close $file_handle;
		if ($is_up)
		{
			if ($conf->{script})
			{
				print "#!string!script_0033!#,,nic=$nic\n" if $conf->{debug};
			}
			else
			{
				print "- The interface: [$nic] is now up!\n" if $conf->{debug};
			}
		}
		else
		{
			if ($conf->{script})
			{
				print "#!string!script_0034!#,,nic=$nic\n";
				print "#!string!script_0035!#\n";
			}
			else
			{
				print "[ Error ] - Unable to bring up the interface: [$nic]!\n";
				print "[ Error ] - Please bring it up manually and try again.\n";
			}
			exit(4);
		}
	}
	if ($conf->{script})
	{
		print "#!string!script_0019!#\n\n" if $conf->{debug};
	}
	else
	{
		print "Done.\n\n" if $conf->{debug};
	}
	
	return(0);
}

# This returns the current date and time in 'YYYY/MM/DD HH:MM:SS' format. It
# always uses 24-hour time and it zero-pads single digits.
sub get_date
{
	my ($conf) = @_;
	my $date = "";
	
	# This doesn't support offsets or other advanced features.
	my %time;
	($time{sec}, $time{min}, $time{hour}, $time{mday}, $time{mon}, $time{year}, $time{wday}, $time{yday}, $time{isdst}) = localtime();
	
	# Increment the month by one.
	$time{mon}++;
	
	# 24h time.
	$time{pad_hour} = sprintf("%02d", $time{hour});
	$time{pad_min}  = sprintf("%02d", $time{min});
	$time{pad_sec}  = sprintf("%02d", $time{sec});
	$time{year}     = ($time{year} + 1900);
	$time{pad_mon}  = sprintf("%02d", $time{mon});
	$time{pad_mday} = sprintf("%02d", $time{mday});
	$time{mon}++;
	
	$date = "$time{year}/$time{pad_mon}/$time{pad_mday} $time{pad_hour}:$time{pad_min}:$time{pad_sec}";
	
	return($date);
}

# This backs up the udev (if it exists) and network files before making any
# actual changes to the system.
sub backup_original_files
{
	my ($conf) = @_;
	
	if ($conf->{script})
	{
		print "#!string!script_0001!#\n" if $conf->{debug};
	}
	else
	{
		print "Backing up some network related system files.\n" if $conf->{debug};
	}
	if (not $conf->{path}{backups})
	{
		if ($conf->{script})
		{
			print "#!string!script_0006!#\n";
			print "#!string!script_0007!#\n";
		}
		else
		{
			print "[ Error ] - The backup directory is not defined!\n";
			print "[ Error ] - Unable to safely proceed, exiting.\n";
		}
		exit(5);
	}
	elsif (not -e $conf->{path}{backups})
	{
		if ($conf->{script})
		{
			print "#!string!script_0009!#,,backups=$conf->{path}{backups}\n" if $conf->{debug};
			mkdir $conf->{path}{backups} or die warn "#!string!script_0011!#,,backups=$conf->{path}{backups},,error=$!\n";
		}
		else
		{
			print "- The backup directory: [$conf->{path}{backups}] doesn't exist, creating it.\n" if $conf->{debug};
			mkdir $conf->{path}{backups} or die warn "[ Warning ] - Failed to create the directory: [$conf->{path}{backups}].\n[ Warning ] - The error was: $!\n";
		}
		if (not -e $conf->{path}{backups})
		{
			if ($conf->{script})
			{
				print "#!string!script_0006!#\n";
				print "#!string!script_0007!#\n";
			}
			else
			{
				print "[ Error ] - The backup directory was not created.\n";
				print "[ Error ] - Unable to safely proceed, exiting.\n";
			}
			exit(6);
		}
		else
		{
			if ($conf->{script})
			{
				print "#!string!script_0010!#\n" if $conf->{debug};
			}
			else
			{
				print "- Backup directory successfully created.\n" if $conf->{debug};
			}
		}
	}
	
	# If there is already a backup created, skip it as we're probably being
	# run a second (of thirteenth) time.
	if ($conf->{script})
	{
		print "#!string!script_0012!#,,file=$conf->{path}{persistent_net}\n" if $conf->{debug};
	}
	else
	{
		print "- Backing up: [$conf->{path}{persistent_net}]\n" if $conf->{debug};
	}
	if (-e $conf->{path}{backups}."/70-persistent-net.rules")
	{
		if ($conf->{script})
		{
			print "#!string!script_0013!#\n" if $conf->{debug};
		}
		else
		{
			print "- Previous backup exists, skipping.\n" if $conf->{debug};
		}
	}
	else
	{
		# Backup '70-persistent-net.rules' if it exists.
		if (-e $conf->{path}{persistent_net})
		{
			if ($conf->{script})
			{
				print "#!string!script_0014!#\n" if $conf->{debug};
			}
			else
			{
				print "- It exists, backing it up.\n" if $conf->{debug};
			}
			backup_file($conf, $conf->{path}{persistent_net});
		}
		else
		{
			if ($conf->{script})
			{
				print "#!string!script_0015!#\n" if $conf->{debug};
			}
			else
			{
				print "- Doesn't exist, skipping.\n" if $conf->{debug};
			}
		}
	}
	
	# This is where we set the hostname.
	if ($conf->{script})
	{
		print "#!string!script_0012!#,,file=$conf->{path}{hostname}\n" if $conf->{debug};
	}
	else
	{
		print "- Backing up: [$conf->{path}{hostname}]\n" if $conf->{debug};
	}
	if (-e $conf->{path}{backups}."/network")
	{
		if ($conf->{script})
		{
			print "#!string!script_0013!#\n" if $conf->{debug};
		}
		else
		{
			print "- Previous backup exists, skipping.\n" if $conf->{debug};
		}
	}
	else
	{
		# Backup 'network'.
		backup_file($conf, $conf->{path}{hostname});
	}
	
	# This is where we set the hosts file.
	if ($conf->{script})
	{
		print "#!string!script_0012!#,,file=$conf->{path}{hosts}\n" if $conf->{debug};
	}
	else
	{
		print "- Backing up: [$conf->{path}{hosts}]\n" if $conf->{debug};
	}
	if (-e $conf->{path}{backups}."/hosts")
	{
		if ($conf->{script})
		{
			print "#!string!script_0013!#\n" if $conf->{debug};
		}
		else
		{
			print "- Previous backup exists, skipping.\n" if $conf->{debug};
		}
	}
	else
	{
		# Backup 'hosts'.
		backup_file($conf, $conf->{path}{hosts});
	}
	
	# Backup the '/etc/sysconfig/network-scripts' directory.
	if ($conf->{script})
	{
		print "#!string!script_0012!#,,file=$conf->{path}{network_configs}\n" if $conf->{debug};
	}
	else
	{
		print "- Backing up: [$conf->{path}{network_configs}]\n" if $conf->{debug};
	}
	if (-e $conf->{path}{backups}."/network-scripts")
	{
		if ($conf->{script})
		{
			print "#!string!script_0013!#\n" if $conf->{debug};
		}
		else
		{
			print "- Previous backup exists, skipping.\n" if $conf->{debug};
		}
	}
	else
	{
		if (-e $conf->{path}{network_configs})
		{
			# No need to say it exists
			backup_file($conf, $conf->{path}{network_configs});
		}
		else
		{
			# Ok, the user has bigger problems
			if ($conf->{script})
			{
				print "#!string!script_0016!#\n";
				print "#!string!script_0017!#\n";
				print "#!string!script_0018!#\n";
			}
			else
			{
				print "[ Error ] - The network configuration directory was not found!\n";
				print "[ Error ] - This should not be possible.\n";
				print "[ Error ] - Please check the internal path::network_configs value.\n";
			}
			exit(8);
		}
	}
	if ($conf->{script})
	{
		print "#!string!script_0019!#\n\n" if $conf->{debug};
	}
	else
	{
		print "Done.\n\n" if $conf->{debug};
	}
	
	return(0);
}

# This backups up a file (or directory) to the backups directory. It is
# expected that the existance of the source and backup directories are done.
sub backup_file
{
	my ($conf, $file) = @_;
	
	if (not $file)
	{
		if ($conf->{script})
		{
			print "#!string!script_0020!#\n";
			print "#!string!script_0021!#\n";
		}
		else
		{
			print "[ Error ] - The backup function was called, but no source file was given.\n";
			print "[ Error ] - This is likely a program error, exiting.\n";
		}
		exit(7);
	}
	
	# I want the source, if it is a directory, to not have a trailing
	# slash. Conversly, I want the backup directory to have a trailing
	# slash, if it doesn't have it already.
	$file =~ s/\/$//g;
	$conf->{path}{backups} .= "/" if $conf->{path}{backups} !~ /\/$/;
	
	if (not -e $conf->{path}{backups})
	{
		if ($conf->{script})
		{
			print "#!string!script_0009!#,,backups=$conf->{path}{backups}\n" if $conf->{debug};
			mkdir $conf->{path}{backups} or die warn "#!string!script_0011!#,,backups=$conf->{path}{backups},,error=$!\n";
		}
		else
		{
			print "- The backup directory: [$conf->{path}{backups}] doesn't exist, creating it.\n" if $conf->{debug};
			mkdir $conf->{path}{backups} or die warn "[ Warning ] - Failed to create the directory: [$conf->{path}{backups}].\n[ Warning ] - The error was: $!\n";
		}
		if (not -e $conf->{path}{backups})
		{
			if ($conf->{script})
			{
				print "#!string!script_0006!#\n";
				print "#!string!script_0007!#\n";
			}
			else
			{
				print "[ Error ] - The backup directory was not created.\n";
				print "[ Error ] - Unable to safely proceed, exiting.\n";
			}
		}
	}
	
	# This must be 'undef' or it will error with 'Can't use string ("") as
	# a symbol ref while "strict refs" in use'.
	my $file_handle = undef;
	my $shell_call  = $conf->{executable}{cp}." -ab $file $conf->{path}{backups}";
	if ($conf->{script})
	{
		print "#!string!script_0022!#,,file=$file,backups=$conf->{path}{backups}\n" if $conf->{debug};
		open ($file_handle, '-|', "$shell_call") || warn "#!string!script_0023!#,,shell_call=$shell_call,,error=$!\n";
	}
	else
	{
		print "- Copying: [$file] to: [$conf->{path}{backups}]\n" if $conf->{debug};
		open ($file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	}
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		if ($conf->{script})
		{
			print "#!string!script_0024!#,,line=$line\n" if $conf->{debug};
		}
		else
		{
			print "- Shell output: [$line]\n" if $conf->{debug};
		}
	}
	close $file_handle;
	
	### TODO: Verify the backed up file exists in the backup directory.
	if ($conf->{script})
	{
		print "#!string!script_0019!#\n\n" if $conf->{debug};
	}
	else
	{
		print "Done.\n\n" if $conf->{debug};
	}
	
	return(0);
}

# This breaks out the command-line switches and varifies that their values are
# (more or less) sane
sub check_switches
{
	my ($conf) = @_;
	
	# Something has been set for all values, sanity check them.
	# This will fail out if set to '1' once all sanity checking is done.
	my $bad_value = 0;

	# The network is a little tricker
	if (($conf->{switches}{h}) or ($conf->{switches}{help}) or ($conf->{switches}{'?'}))
	{
		print_usage($conf);
		exit(0);
	}
	
	if ($conf->{switches}{script})
	{
		$conf->{script} = 1;
	}
	
	return($bad_value);
}

# Print the usage information.
sub print_usage
{
	my ($conf) = @_;
	
	my $help = q|
 -=] Anvil! Map Network Interfaces
 
DESCRIPTION

This tool will prompt you to unplug a physical network interface when prompted
to identify a given NIC. This allows the program to map the hardware MAC
addresses to the desired interface names.

SWITCHES

 -h, -?, --help
 
	Show this dialogue and exit.

 --script
	
	This tells the program that it is being called by a script. It alters
	the output to use string keys and variable replacement values for
	translating into other languages.

 --start-only

	This checks for any NICs that are not yet started and starts them.
	Nothing further is done.

 --summary

	This tells the program to simply list the current interfaces and their
	MAC addresses, then exit. It does not activate deactivated interfaces,
	make backups or prompt the user. Its main purpose is to let a caller
	know if the MAC addresses match those on file (thus avoiding the user
	prompts to cycle cables, if so).

EXAMPLE

Normal install:

 ./anvil-map-network
                  
SUPPORT

https://alteeve.com/w/Support
                                                              Alteeve's Niche!
|;
	open (my $file_handle, ">", "/tmp/anvil-map-network-help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system("/usr/bin/less /tmp/anvil-map-network-help");

	return(0);
}

# This collects the command line switches
sub get_switches
{
	my ($conf) = @_;
	
	my $last_argument = "";
	foreach my $argument (@ARGV)
	{
		if ($last_argument eq "raw")
		{
			# Don't process anything.
			$conf->{switches}{raw} .= " $argument";
		}
		elsif ($argument =~ /^-/)
		{
			# If the argument is just '--', appeand everything
			# after it to 'raw'.
			$conf->{sys}{switch_count}++;
			if ($argument eq "--")
			{
				$last_argument         = "raw";
				$conf->{switches}{raw} = "";
			}
			else
			{
				($last_argument) = ($argument =~ /^-{1,2}(.*)/)[0];
				if ($last_argument =~ /=/)
				{
					# Break up the variable/value.
					($last_argument, my $value) = (split /=/, $last_argument, 2);
					$conf->{switches}{$last_argument} = $value;
				}
				else
				{
					$conf->{switches}{$last_argument} = "#!SET!#";
				}
			}
		}
		else
		{
			if ($last_argument)
			{
				$conf->{switches}{$last_argument} = $argument;
				$last_argument                    = "";
			}
			else
			{
				# Got a value without an argument.
				$conf->{switches}{error} = 1;
			}
		}
	}
	# Clean up the initial space added to 'raw'.
	if ($conf->{switches}{raw})
	{
		$conf->{switches}{raw} =~ s/^ //;
	}
	
	# Debug
	#foreach my $variable (sort {$a cmp $b} keys %{$conf->{switches}}) { print "Variable: [$variable]\t-> value: [$conf->{switches}{$variable}]\n"; } exit;
	
	return(0);
}

# This asks the user to unplug (and plug back in) NICs to identify which
# physical interface they want to use for a given role.
sub select_nics
{
	my ($conf) = @_;
	
	if ($conf->{script})
	{
		print "#!string!script_0036!#\n" if $conf->{debug};
		print "#!string!script_0069!#\n";
	}
	else
	{
		print "-=] Configuring network to enable access to Anvil! systems.\n\n" if $conf->{debug};
	}
	foreach my $nic (@{$conf->{nics}})
	{
		#print "[ Debug ] ".__LINE__."; - nic: [$nic]\n";
		my $timer = 0;
		my $plug_in_message_printed = 0;
		while (my $down_links = check_nic_states($conf))
		{
			#print "[ Debug ] ".__LINE__."; - time: [$timer]\n";
			if ($timer > 5)
			{
				if (not $plug_in_message_printed)
				{
					if ($conf->{script})
					{
						print "#!string!script_0038!#\n";
					}
					else
					{
						print "- Please plug in all network cables to proceed.\n";
					}
					$plug_in_message_printed = 1;
				}
				#print "[ Debug ] ".__LINE__."; - MAC address of down links: [$down_links]\n";
				sleep 1;
			}
			$timer++;
			sleep 1;
		}
		if ($conf->{script})
		{
			print "#!string!script_0037!#\n";
		}
		else
		{
			print "Please unplug, wait a moment, and plug back in the interface you want to make:\n";
		}
		my $say_nic    = $nic;
		my $script_nic = $nic;
		my $link       = "";
		if    ($nic =~ /^bcn_link(\d)/)
		{
			# brand_0005
			$link       = $1;
			$script_nic = "#!string!brand_0005!#";
			$say_nic    = "Back-Channel Network, Link $1";
		}
		elsif ($nic =~ /^sn_link(\d)/)
		{
			# brand_0007
			$link       = $1;
			$script_nic = "#!string!brand_0007!#";
			$say_nic    = "Storage Network, Link $1";
		}
		elsif ($nic =~ /^ifn_link(\d)/)
		{
			# brand_0009
			$link       = $1;
			$script_nic = "#!string!brand_0009!#";
			$say_nic    = "Internet-Facing Network, Link $1";
		}
		if ($conf->{script})
		{
			# Translate the NIC's short names.
			print "#!string!script_0039!#,,nic=$script_nic,,link=$link\n";
		}
		else
		{
			print "- $say_nic: ";
		}
		my $last_conflict = "";
		while(1)
		{
			my $down_links = check_nic_states($conf);
			if (($down_links) && ($down_links !~ /,/))
			{
				if ($conf->{nic}{mac}{$down_links}{new_name})
				{
					if ($last_conflict ne $down_links)
					{
						if ($conf->{script})
						{
							print "#!string!script_0040!#,,mac=$down_links,,conflict=$conf->{nic}{mac}{$down_links}{new_name}\n";
							print "#!string!script_0039!#,,nic=$nic\n";
						}
						else
						{
							print "- The NIC with MAC address: [$down_links] is already allocated to: [$conf->{nic}{mac}{$down_links}{new_name}]\n";
							print "- $say_nic: ";
						}
					}
					$last_conflict = $down_links;
				}
				else
				{
					$conf->{nic}{mac}{$down_links}{new_name} = $nic;
					$conf->{nic}{name}{$nic}                 = $down_links;
					if ($conf->{script})
					{
						print "#!string!script_0041!#,,mac=$down_links,,is=$conf->{nic}{mac}{$down_links}{current_name}\n";
					}
					else
					{
						print "MAC: [$down_links ($conf->{nic}{mac}{$down_links}{current_name})].\n";
					}
					last;
				}
			}
			sleep 1;
		}
	}
	my $timer = 0;
	my $plug_in_message_printed = 0;
	while (my $down_links = check_nic_states($conf))
	{
		#print "[ Debug ] - time: [$timer]\n";
		if ($timer > 10)
		{
			if (not $plug_in_message_printed)
			{
				# This may not be seen when running over SSH and the
				# active link goes down.
				if ($conf->{script})
				{
					print "#!string!script_0038!#\n";
				}
				else
				{
					print "- Please plug in all network cables to proceed.\n";
				}
				$plug_in_message_printed = 1;
			}
		}
		sleep 1;
		$timer++;
	}

	my $proceed = 1;
	if ($conf->{script})
	{
		print "#!string!script_0042!#\n" if $conf->{debug};
	}
	else
	{
		print "\nIdentification summary:\n";
	}
	foreach my $nic (@{$conf->{nics}})
	{
		my $say_nic = $nic;
		if    ($nic =~ /^bcn_link(\d)/) { $say_nic = "Back-Channel Network, Link $1" }
		elsif ($nic =~ /^sn_link(\d)/)  { $say_nic = "Storage Network, Link $1" }
		elsif ($nic =~ /^ifn_link(\d)/) { $say_nic = "Internet-Facing Network, Link $1" }
		my $this_mac = $conf->{nic}{name}{$nic};
		if (not $this_mac)
		{
			if ($conf->{script})
			{
				print "#!string!script_0043!#\n";
				print "#!string!script_0044!#,,nic=$nic\n";
				print "#!string!script_0045!#\n";
			}
			else
			{
				print "[ Error ] - There seems to be a problem.\n";
				print "[ Error ] - Desired NIC: [$nic] doesn't have a referenced MAC address!\n";
				print "[ Error ] - Exiting.\n";
			}
			exit(1);
		}
		my $current_name = $conf->{nic}{mac}{$this_mac}{current_name};
		if (not $current_name)
		{
			if ($conf->{script})
			{
				print "#!string!script_0043!#\n";
				print "#!string!script_0046!#,,nic=$nic\n";
				print "#!string!script_0045!#\n";
			}
			else
			{
				print "[ Error ] - There seems to be a problem.\n";
				print "[ Error ] - Desired NIC: [$nic] doesn't have a referenced interface!\n";
				print "[ Error ] - Exiting.\n";
			}
			exit(2);
		}
		if ($conf->{script})
		{
			print "nic=$nic,,mac=$this_mac\n";
			#print "#!string!script_0047!#,,mac=".uc($this_mac).",,current=$current_name,,new=$nic\n";
		}
		else
		{
			print "Interface: [$nic] will use MAC: [$this_mac]\n";
			#print "- Interface: [$nic] will use: [".uc($this_mac)." ($current_name)]\n";
			#print "- $say_nic will use the NIC with MAC: [$this_mac] ($current_name -> $nic)\n";
		}
	}
	if ($conf->{script})
	{
		print "#!string!script_0068!#\n";
	}
	else
	{
		print "Done, thank you.\n";
	}

	return($proceed);
}

sub check_nic_states
{
	my ($conf) = @_;
	
	my $unplugged_macs  = "";
	my $this_iface      = "";
	my $this_mac        = "";
	my $this_link_state = "";
	my $shell_call = $conf->{executable}{ip}." addr";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		if ($line =~ /^\d+: (.*?): <(.*?)>/)
		{
			$this_iface      = $1;
			$this_link_state = $2;
			$this_mac        = "";
			if ($this_link_state =~ /UP/)
			{
				# This will be either BROADCAST or NO-CARRIER
				$this_link_state =~ s/,.*//;
			}
			else
			{
				# The interface has been 'ifdown'ed or was not
				# started on boot.
				$this_link_state = "DOWN";
			}
			next;
		}
		next if not $this_iface;
		next if $this_iface eq "lo";
		next if $this_iface eq "bond0";
		next if $this_iface =~ /wlan/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		if ($line =~ /ether ([0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2})/)
		{
			$this_mac = $1;
			#print "this_mac: [$this_mac]\n";
			if ($this_link_state eq "DOWN")
			{
				$this_link_state = 2;
			}
			else
			{
				$this_link_state = $this_link_state eq "NO-CARRIER" ? 0 : 1;
			}
			$conf->{nic}{mac}{$this_mac}{current_name}     = $this_iface;
			$conf->{nic}{mac}{$this_mac}{link_state}       = $this_link_state;
			$conf->{nic}{by_name}{$this_iface}{link_state} = $this_link_state;
			$conf->{nic}{by_name}{$this_iface}{mac}        = $this_mac;
		}
	}
	close $file_handle;

	my $nic_count = 0;
	foreach my $this_mac (sort {$a cmp $b} keys %{$conf->{nic}{mac}})
	{
		# Somewhere in the loop, an empty '$this_mac' is being created... 
		# (I'm looking at you, autovivication >_>)
		next if not $this_mac;
		my $this_iface = $conf->{nic}{mac}{$this_mac}{current_name};
		
		if (($this_iface eq "lo") || ($this_iface =~ /wlan/))
		{
			#print "[ Debug ] - Skipping interface: [$this_iface]\n";
		}
		else
		{
			$nic_count++;
			#print "[ Debug ] - NIC: [$this_iface] w/ MAC: [$this_mac]; Link: [$conf->{nic}{mac}{$this_mac}{link_state}], current name: [$conf->{nic}{mac}{$this_mac}{current_name}]\n";
		}
		if ($conf->{nic}{mac}{$this_mac}{link_state} ne "1")
		{
			$unplugged_macs .= "$this_mac,";
		}
	}
	
	$unplugged_macs =~ s/,$//;
	#print "- DEBUG: unpluggd_macs: [$unplugged_macs]\n";
	return($unplugged_macs);
}

# This looks for an executable.
sub find_executables
{
	my ($conf) = @_;
	
	my $search = $ENV{'PATH'};
	#print "Searching in: [$search] for programs.\n";
	foreach my $program (keys %{$conf->{executable}})
	{
		#print "Seeing if: [$program] is really at: [$conf->{executable}{$program}]: ";
		if ( -e $conf->{executable}{$program} )
		{
			#print "Found it.\n";
		}
		else
		{
			#print "Not found, searching for it now.\n";
			foreach my $directory (split /:/, $search)
			{
				my $full_path = "$directory/$program";
				if ( -e $full_path )
				{
					$conf->{executable}{$program} = $full_path;
					#print "Found it in: [$full_path]\n";
				}
			}
		}
	}
	
	return (0);
}
