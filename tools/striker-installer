#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# https://alteeve.ca
# 
# Exit Codes:
# 0  - Success
# 1  - The referenced network interface seen when the user unplugged a network
#      cable did not (properly) record that interfaces MAC address.
# 2  - The referenced network interface seen when the user unplugged a network
#      cable did not (properly) record that interfaces current device name.
# 3  - 
# 4  - Insufficient number of network interfaces found. This program requires
#      two interfaces to run. Wireless interfaces are not supported.
# 5  - The '$conf->{path}{backups}' value is not set.
# 6  - The '$conf->{path}{backups}' backup directory failed to be created. The
#      failure warning should be displayed immediately prior to this error.
# 7  - backup_file() was called without a specified file to backup.
# 8  - Failed to find the '$conf->{path}{network_configs}' directory. I hope
#      for the user's sake that this is a program problem...
# 9  - There was one or more problems while sanity checking the command line
#      options. The problems will be displayed prior to the exit.
# 10 - No switches passed.
# 11 - Failed to bring up a network interface and network configuration was
#      requested.
# 12 - Failed to install all required packages.
# 13 - OS isn't RHEL based.
# 14 - OS isn't EL6.x
# 15 - Unable to get the apache user's UID.
# 16 - Unable to get the apache user's GID.
# 17 - Installer didn't run as 'root'.
# 18 - Failed to download a requested file.
# 19 - Failed to copy a file.
# 20 - Failed to create a symlink.
# 21 - Failed to rsync a file or directory.
# 22 - Failed to find CentOS source ISO.
# 23 - Failed to find RHEL source ISO.
# 
# TODO: Create an init script that deletes anything in the media directory on
#       boot. Can't use /tmp as it's usually too small.

my $THIS_FILE =  $0;
   $THIS_FILE =~ s/^.*\///;

use strict;
use warnings;

# No capes!^H^H^H^Hbuffers!
$| = 1;

my $conf = {
	daemons		=>	{
		# These will be both chkconfig on'ed and started after
		# 'disable' is processes.
		# NOTE: 'haldaemon' needs to restart before 'acpid' will work,
		#       if 'acpid' was just installed.
		enable			=>	["iptables", "httpd", "haldaemon", "acpid", "tomcat6", "guacd", "ntpd"],
		# These will be both chkconfig off'ed and stopped.
		disable			=>	["ip6tables", "dhcpd", "xinetd"],
	},
	directory	=>	{
		apache			=>	"/etc/httpd",
		apache_manifests	=>	"/var/www/html/manifests",
		apache_subdirs		=>	["archive", "cache", "media", "status"],
		centos_pxe_web		=>	"html/c6",			# Appeanded to 'document_root' + arch appended after
		centos_tftp_boot	=>	"c6",				# Appeanded to 'pxelinux_config' + arch
		document_root		=>	"/var/www/",
		guac_classpath		=>	"/var/lib/guacamole/classpath",
		guac_etc		=>	"/etc/guacamole",
		guac_lib		=>	"/var/lib/guacamole",
		guac_tomcat		=>	"/usr/share/tomcat6/.guacamole",
		media			=>	"/var/www/home/media",
		pxelinux_boot		=>	"/var/lib/tftpboot/pxelinux.cfg",
		pxelinux_config		=>	"/var/lib/tftpboot/boot",
		pxe_iso_subdirs		=>	["iso", "img", "ks", "files"],	# appended to {centos,rhel}_pxe_web + arch
		rhel_pxe_web		=>	"html/rhel6",			# Appeanded to 'document_root' + arch appended after
		rhel_tftp_boot		=>	"rhel6",			# Appeanded to 'pxelinux_config' + arch
		source			=>	"",
	},
	executable	=>	{
		cp			=>	"/bin/cp",
		chkconfig		=>	"/sbin/chkconfig",
		'chmod'			=>	"/bin/chmod",
		'chown'			=>	"/bin/chown",
		echo			=>	"/bin/echo",
		git			=>	"/usr/bin/git",
		htpasswd		=>	"/usr/bin/htpasswd",
		ifup			=>	"/sbin/ifup",
		ip			=>	"/sbin/ip",
		iptables		=>	"/sbin/iptables",
		'iptables-save'		=>	"/sbin/iptables-save",
		ln			=>	"/bin/ln",
		mount			=>	"/bin/mount",
		passwd			=>	"/usr/bin/passwd",
		restorecon		=>	"/sbin/restorecon",
		'rhn-channel'		=>	"/usr/sbin/rhn-channel",
		rhnreg_ks		=>	"/usr/sbin/rhnreg_ks",
		rsync			=>	"/usr/bin/rsync",
		sed			=>	"/bin/sed",
		semanage		=>	"/usr/sbin/semanage",
		setenforce		=>	"/usr/sbin/setenforce",
		setsebool		=>	"/usr/sbin/setsebool",
		'ssh-keygen'		=>	"/usr/bin/ssh-keygen",
		su			=>	"/bin/su",
		tar			=>	"/bin/tar",
		unzip			=>	"/usr/bin/unzip",
		wget			=>	"/usr/bin/wget",
		yum			=>	"/usr/bin/yum",
	},
	packages	=>	{
		# These get set to '1' when their found to be installed.
		to_install	=>	{
			acpid				=>	0,
			ccs				=>	0, 
			'perl-YAML-Tiny'		=>	0, 
			'cyrus-sasl'			=>	0, 
			'cyrus-sasl-plain'		=>	0,
			dhcp				=>	0,
			expect				=>	0, 
			'fence-agents'			=>	0, 
			guacd				=>	0, 
			httpd				=>	0, 
			libcdio				=>	0, 
			'libguac-client-rdp'		=>	0,
			'libguac-client-ssh'		=>	0, 
			'libguac-client-vnc'		=>	0, 
			man				=>	0, 
			mlocate				=>	0, 
			mod_ssl				=>	0,
			ntp				=>	0,
			'perl-CGI'			=>	0, 
			'perl-CPAN'			=>	0, 
			'perl-Net-SSH2'			=>	0,
			'perl-Net-SSLeay'		=>	0, 
			'perl-TermReadKey'		=>	0,
			'perl-Test-Simple'		=>	0,
			'perl-XML-Simple'		=>	0,
			'policycoreutils-python'	=>	0, 
			postfix				=>	0, 
			rsync				=>	0,
			screen				=>	0, 
			syslinux			=>	0, 
			'syslinux-tftpboot'		=>	0,
			'openssl-devel'			=>	0,
			'tftp-server'			=>	0,
			tomcat6				=>	0, 
			'vim-common'			=>	0, 
			wget				=>	0,
			xinetd				=>	0,
		},
		# This is populated by 'get_list_of_installed_packages()' and
		# uses the found package name as the key and sets the value to
		# '1'.
		installed	=>	{},
	},
	path		=>	{
		an_repo			=>	"/etc/yum.repos.d/an.repo",
		apache_config		=>	"/etc/httpd/conf/httpd.conf",
		apache_home		=>	"/var/www/home",
		apache_htpasswd		=>	"/var/www/home/htpasswd",
		apache_manifest_conf	=>	"/etc/httpd/conf.d/manifest.conf",
		apache_shell		=>	"/bin/bash",
		backups			=>	"/root/anvil",
		dhcpd_conf		=>	"/etc/dhcp/dhcpd.conf",
		guac_noauth		=>	"/var/lib/guacamole/classpath/guacamole-auth-noauth-#!guac_version!#.jar",
		guac_noauth_config	=>	"/etc/guacamole/noauth-config.xml",
		guac_properties		=>	"/etc/guacamole/guacamole.properties",
		guac_properties_symlink	=>	"/usr/share/tomcat6/.guacamole/guacamole.properties",
		guac_war		=>	"/var/lib/guacamole/guacamole-#!guac_version!#.war",
		guac_war_symlink	=>	"/var/lib/tomcat6/webapps/guacamole.war",
		hostname		=>	"/etc/sysconfig/network",
		iptables		=>	"/etc/sysconfig/iptables",
		network_configs		=>	"/etc/sysconfig/network-scripts",
		os_release		=>	"/etc/redhat-release",
		passwd			=>	"/etc/passwd",
		persistent_net		=>	"/etc/udev/rules.d/70-persistent-net.rules",
		pxe_background_source	=>	"/var/www/html/skins/alteeve/images/pxe_splash_1024_768.png",
		pxe_default_config	=>	"/var/lib/tftpboot/pxelinux.cfg/default",
		rhn_file		=>	"/etc/sysconfig/rhn/systemid",
		selinux_config		=>	"/etc/selinux/config",
		sshd_config		=>	"/etc/ssh/sshd_config",
		striker_config		=>	"/etc/an/an.conf",
		striker_log		=>	"/var/log/an-cdb.log",
		tomcat_server		=>	"/etc/tomcat6/server.xml",
		xinetd_tftp_config	=>	"/etc/xinted.d/tftp",
	},
	permissions	=>	{
		document_root		=>	{
			path			=>	"/var/www",
			owner			=>	"apache",
			group			=>	"apache",
			mode			=>	"g+w",
			recursive		=>	1,
		},
		striker_log		=>	{
			path			=>	"/var/log/an-cdb.log",
			owner			=>	"apache",
			group			=>	"apache",
			mode			=>	"g+w",
			recursive		=>	0,
			selinux			=>	"httpd_sys_content_t",
		},
		striker_config_dir	=>	{
			path			=>	"/etc/an",
			owner			=>	"apache",
			group			=>	"apache",
			mode			=>	"g+w",
			recursive		=>	1,
		},
		striker_config	=>	{
			path			=>	"/etc/an/an.conf",
			owner			=>	"apache",
			group			=>	"apache",
			mode			=>	"0660",
			recursive		=>	0,
			selinux			=>	"httpd_sys_content_t",
		},
		ssh_config		=>	{
			path			=>	"/etc/ssh/ssh_config",
			owner			=>	"root",
			group			=>	"apache",
			mode			=>	"g+w",
			recursive		=>	0,
			selinux			=>	"httpd_sys_content_t",
		},
		hosts			=>	{
			path			=>	"/etc/hosts",
			owner			=>	"root",
			group			=>	"apache",
			mode			=>	"g+w",
			recursive		=>	0,
			selinux			=>	"httpd_sys_content_t",
		},
		guac_noauth_config	=>	{
			path			=>	"/etc/guacamole/noauth-config.xml",
			owner			=>	"root",
			group			=>	"apache",
			mode			=>	"0664",
			recursive		=>	0,
			selinux			=>	"httpd_sys_content_t",
		},
		pxelinux		=>	{
			path			=>	"/var/lib/tftpboot/pxelinux.cfg",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"755",
			recursive		=>	0,
		},
		# The following entries must sort last to ensure the setuid
		# doesn't get changed by a change to the parent directory.
		z_restart_tomcat	=>	{
			path			=>	"/var/www/tools/restart_tomcat6",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"6755",
			recursive		=>	0,
		},
		z_restart_guacd	=>	{
			path			=>	"/var/www/tools/restart_guacd",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"6755",
			recursive		=>	0,
		},
		z_check_dvd		=>	{
			path			=>	"/var/www/tools/check_dvd",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"6755",
			recursive		=>	0,
		},
		z_do_dd			=>	{
			path			=>	"/var/www/tools/do_dd",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"6755",
			recursive		=>	0,
		},
		'z_call_gather-system-info'	=>	{
			path			=>	"/var/www/tools/call_gather-system-info",
			owner			=>	"root",
			group			=>	"root",
			mode			=>	"6755",
			recursive		=>	0,
		},
	},
	sys		=>	{
		apache_group		=>	"apache",
		apache_timeout		=>	"60000",	# This will go away with AJAX
		apache_user		=>	"apache",
		customer		=>	"Striker Dashboard",
		guac_version		=>	"0.9.2",
		hostname		=>	"",
		is_rhel			=>	0,
		mail_server		=>	"",
		mail_user		=>	"",
		mail_password		=>	"",
		rhn_user		=>	"",
		rhn_password		=>	"",
		skip_hostname		=>	0,
		skip_mail		=>	0,
		skip_network		=>	0,
		stable_version		=>	"1.1.6",
		striker_user		=>	"admin",
		striker_pass		=>	"",		# no default password, evar!
		switch_count		=>	0,
		tarball_dir		=>	"an-cdb-#!striker_version!#",
	},
	url		=>	{
		git_master	=>	"https://github.com/digimer/an-cdb/archive/master.zip",
		striker		=>	"https://github.com/digimer/an-cdb/archive/#!striker_version!#.zip",
	},
	nics		=>	["bcn-link1", "ifn-link1"],
	network		=>	{
		bcn		=>	{
			ip		=>	"",
			netmask		=>	"",
		},
		ifn		=>	{
			ip		=>	"",
			netmask		=>	"",
			gateway		=>	"",
			dns1		=>	"8.8.8.8",
			dns2		=>	"8.8.4.4",
		},
	},
	pxe		=>	{
		centos		=>	{
			enabled		=>	0,
			node_ks		=>	"anvil-m3-node-basic-bios_centos.ks",
			striker_ks	=>	"striker-m3-basic-bios_centos.ks",
			short_name	=>	"c6",
		},
		rhel		=>	{
			enabled		=>	0,
			node_ks		=>	"anvil-m3-node-basic-bios_rhel.ks",
			striker_ks	=>	"striker-m3-basic-bios_rhel.ks",
			short_name	=>	"rhel6",
		}
	},
};

# Make sure we're running as 'root'
# $< == real UID, $> == effective UID
if (($< != 0) && ($> != 0))
{
	print "[ Error ] - I am sorry, but this program must be run as the root user.\n\n";
	exit(17);
}

# Make sure we got what we needed from the command line.
get_switches($conf);
if (not $conf->{sys}{switch_count})
{
	print_usage($conf);
	exit(10);
}

system('clear');
# Credit to Martin Allchin for this ASCII art!
print q`
 ##############################################################################
 #   ___ _       _ _                                    The Anvil! Dashboard  #
 #  / __| |_ _ _(_) |_____ _ _                                 -=] Installer  #
 #  \__ \  _| '_| | / / -_) '_|                                               #
 #  |___/\__|_| |_|_\_\___|_|                                                 #
 #                                               https://alteeve.ca/w/Striker #
 ##############################################################################

`;

# This sanity-checks the passed in command line switches and returns '1' if
# any problems were found.
if (sanity_check_switches($conf))
{
	exit(9);
}

# Make sure we're on EL6.x
verify_os($conf);

# Go into the loop that asks the user to unplug cables until they are happy 
# with their selection. When it exits, we go to work.
if (not $conf->{sys}{skip_network})
{
	# Make backups, of course.
	backup_original_files($conf);
	
	# Make sure all NICs are up. If any aren't, start them.
	start_all_nics($conf);
	
	until(select_nics($conf))
	{
		sleep 1;
	}
	
	# If we're here, the user has OK'ed the changes.
	reconfigure_network($conf);
}

# If passed, set the hostname.
if (not $conf->{sys}{skip_hostname})
{
	set_hostname($conf);
}

# TODO: See if we can set contexts on files when selinux is disabled entirely.
#       If not, and if relabeling is needed, write a run-once script to relabel
#       our stuff on the next boot.
# Now configure the Striker dashboard.
setup_striker($conf);

# If the user reconfigured the network, tell them they will need to reboot.
if (not $conf->{sys}{skip_network})
{
	print "\n[ Warning ] - You may need to reboot the network if the network interfances\n";
	print "[ Warning ] - were renamed. Simply restarting the network will likely not\n";
	print "[ Warning ] - work.\n\n";
}
print "Installation of Striker is complete!\n\n";
exit(0);


###############################################################################
# Here be function!                                                           #
###############################################################################

# This handles the rest of the install (everything except the network).
sub setup_striker
{
	my ($conf) = @_;
	
	print "-=] Beginning configuration and installation processes now. [=-\n\n";
	
	# First up, install RPMs to make sure we've got everything we need.
	install_packages($conf);
	
	# Download Striker, if needed.
	download_striker($conf);
	
	# Configure apache.
	configure_apache($conf);
	
	# Configure Tomcat
	configure_tomcat($conf);
	
	# Configure guacamole
	configure_guacamole($conf);
	
	# Configure SSH to allow faster logins when there is not Internet
	# access. Also, create an SSH RSA keyset for apache, though it
	# probably isn't needed anymore and might go away in a later update.
	configure_ssh($conf);
	
	# Configure iptables to allow incoming HTTP and HTTPS traffic.
	configure_iptables($conf);
	
	# Copy Striker files into place
	install_striker_files($conf);
	
	# Configure PXE and dhcpd stuff
	configure_pxe($conf);
	
	# Set owners and file modes.
	set_file_ownership_and_modes($conf);
	
	# (Re)start daemons.
	manage_daemons($conf);

	# Make sure that selinux is enabled. This runs after the main installer so that
	# we can ensure any files we created or installed have the right
	# labels/contexts.
	configure_selinux($conf);
	
	# NOTE: Always call this last. If the password gets set, there is a
	#       notice box informing the user that we want to ensure doesn't
	#       get scrolled off the screen.
	# Set the root user's password.
	set_root_password($conf);
	
	return(0);
}

# This configures DHCP and PXE servers.
sub configure_pxe
{
	my ($conf) = @_;
	
	if ($conf->{switches}{p} eq "none")
	{
		print "PXE configuration disabled, skipping.\n";
	}
	else
	{
		configure_dhcp($conf);
		configure_xinetd($conf);
		configure_iso_source($conf);
		configure_pxe_config($conf);
	}
	
	return(0);
}

# This sets up the install ISOs, if available.
sub configure_iso_source
{
	my ($conf) = @_;
	
	print "Setting up the install ISOs for PXE installs.\n";
	if ($conf->{switches}{'centos-iso'})
	{
		my $file_name  = "";
		my $local_copy = "";
		if ($conf->{switches}{'centos-iso'} eq "none")
		{
			print "- CentOS disabled, skipping.\n";
		}
		else
		{
			print "- CentOS source defined, configuring.\n";
			# Setup the directories.
			my @subdirectories = ($conf->{directory}{centos_pxe_web}, "$conf->{directory}{centos_pxe_web}/x86_64");
			foreach my $subdirectory (@{$conf->{directory}{pxe_iso_subdirs}})
			{
				push @subdirectories, "$conf->{directory}{centos_pxe_web}/x86_64/$subdirectory";
			}
			foreach my $directory (@subdirectories)
			{
				if (-e $directory)
				{
					print "- Directory already exists: [$directory]\n";
				}
				else
				{
					mkdir $directory or die "Failed to create the directory: [$directory], error was: $!\n";
					print "- Created: [$directory]\n";
				}
			}
			
			# Ok, acquire it!
			if ($conf->{switches}{'centos-iso'} =~ /:\/\//)
			{
				print "- CentOS ISO appears to be a URL, will attempt to download now...\n";
				   $file_name  = ($conf->{switches}{'centos-iso'} =~ /^.*\/(.*?)$/)[0];
				   $local_copy = "$conf->{directory}{centos_pxe_web}/x86_64/iso/$file_name";
				my $shell_call = "$conf->{executable}{wget} -c $conf->{switches}{'centos-iso'} -O $local_copy";
				print "[ Debug ] - shell_call: [$shell_call]\n";
				open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
				print "==============================================================================\n";
				while(<$file_handle>)
				{
					chomp;
					my $line = $_;
					print "- Output: [$line]\n";
				}
				print "==============================================================================\n";
				close $file_handle;
				
				# Make sure it downloaded.
				if (-e $local_copy)
				{
					print "- Download successful.\n";
				}
				else
				{
					print "[ Error ] - Failed to download: [$conf->{switches}{'centos-iso'}]\n";
					exit(22);
				}
			}
			elsif (-e $conf->{switches}{'centos-iso'})
			{
				print "- CentOS ISO is local, will copy into place.\n";
				$file_name  = ($conf->{switches}{'centos-iso'} =~ /^.*\/(.*?)$/)[0];
				$local_copy = "$conf->{directory}{centos_pxe_web}/x86_64/iso/$file_name";
				if ($local_copy eq $conf->{switches}{'centos-iso'})
				{
					print "- Local copy already in the right place.\n";
				}
				else
				{
					print "- Copying the local ISO into the apache directory.\n";
					rsync_files($conf, "$conf->{switches}{'centos-iso'}", "$conf->{directory}{centos_pxe_web}/x86_64/iso/");
				}
			}
			else
			{
				print "[ Error ] - The CentOS ISO doesn't appear to be valid. Is this right?:\n";
				print "[ Error ] - [$conf->{switches}{'centos-iso'}]\n";
				exit(22);
			}
			
			# If I'm here, we're ready to configure.
			print "- Mounting the ISO: [$local_copy]\n";
			print "- At mount point:   [$conf->{directory}{centos_pxe_web}/x86_64/img/]\n";
			mount_iso($conf, $local_copy, "$conf->{directory}{centos_pxe_web}/x86_64/img/");
			$conf->{pxe}{centos}{enabled} = 1;
			
			# copy the isolinux directory.
			print "- Copying isolinux boot files to TFTP.\n";
			my $isolinux_source = "$conf->{directory}{document_root}/$conf->{directory}{centos_pxe_web}/x86_64/img/isolinux";
			my $isolinux_target = "$conf->{directory}{pxelinux_config}/$conf->{directory}{centos_tftp_boot}/x86_64/";
			rsync_files($conf, "$isolinux_source", "$isolinux_target");
			
			# Write out the kickstart files.
			my $centos_node_ks         = generate_kickstart($conf, "centos", "node");
			my $centos_striker_ks      = generate_kickstart($conf, "centos", "striker");
			my $centos_node_ks_file    = "$conf->{directory}{document_root}/$conf->{directory}{centos_pxe_web}/x86_64/ks/$conf->{pxe}{centos}{node_ks}";
			my $centos_striker_ks_file = "$conf->{directory}{document_root}/$conf->{directory}{centos_pxe_web}/x86_64/ks/$conf->{pxe}{centos}{striker_ks}";
			
			# Write out the files.
			print "- Writing out CentOS node kickstart file.\n";
			open (my $file_handle, ">", $centos_node_ks_file) or die "Failed to write: [$centos_node_ks_file], the error was: $!\n";
			print $file_handle $centos_node_ks;
			close $file_handle;
			print "- Wrote: [$centos_node_ks_file].\n\n";

			print "- Writing out CentOS striker kickstart file.\n";
			open ($file_handle, ">", $centos_striker_ks_file) or die "Failed to write: [$centos_striker_ks_file], the error was: $!\n";
			print $file_handle $centos_striker_ks;
			close $file_handle;
			print "- Wrote: [$centos_striker_ks_file].\n\n";
			print "- CentOS PXE configuration complete.\n";
		}
	}

	# Now RHEL
	if ($conf->{switches}{'rhel-iso'})
	{
		my $file_name  = "";
		my $local_copy = "";
		if ($conf->{switches}{'rhel-iso'} eq "none")
		{
			print "- RHEL disabled, skipping.\n";
		}
		else
		{
			print "- RHEL source defined, configuring.\n";
			# Setup the directories.
			my @subdirectories = ($conf->{directory}{rhel_pxe_web}, "$conf->{directory}{rhel_pxe_web}/x86_64");
			foreach my $subdirectory (@{$conf->{directory}{pxe_iso_subdirs}})
			{
				push @subdirectories, "$conf->{directory}{rhel_pxe_web}/x86_64/$subdirectory";
			}
			foreach my $directory (@subdirectories)
			{
				if (-e $directory)
				{
					print "- Directory already exists: [$directory]\n";
				}
				else
				{
					mkdir $directory or die "Failed to create the directory: [$directory], error was: $!\n";
					print "- Created: [$directory]\n";
				}
			}
			
			# Ok, acquire it!
			if ($conf->{switches}{'rhel-iso'} =~ /:\/\//)
			{
				print "- RHEL ISO appears to be a URL, will attempt to download now...\n";
				   $file_name  = ($conf->{switches}{'rhel-iso'} =~ /^.*\/(.*?)$/)[0];
				   $local_copy = "$conf->{directory}{rhel_pxe_web}/x86_64/iso/$file_name";
				my $shell_call = "$conf->{executable}{wget} -c $conf->{switches}{'rhel-iso'} -O $local_copy";
				print "[ Debug ] - shell_call: [$shell_call]\n";
				open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
				print "==============================================================================\n";
				while(<$file_handle>)
				{
					chomp;
					my $line = $_;
					print "- Output: [$line]\n";
				}
				print "==============================================================================\n";
				close $file_handle;
				
				# Make sure it downloaded.
				if (-e $local_copy)
				{
					print "- Download successful.\n";
				}
				else
				{
					print "[ Error ] - Failed to download: [$conf->{switches}{'rhel-iso'}]\n";
					exit(22);
				}
			}
			elsif (-e $conf->{switches}{'rhel-iso'})
			{
				print "- RHEL ISO is local, will copy into place.\n";
				$file_name  = ($conf->{switches}{'rhel-iso'} =~ /^.*\/(.*?)$/)[0];
				$local_copy = "$conf->{directory}{rhel_pxe_web}/x86_64/iso/$file_name";
				if ($local_copy eq $conf->{switches}{'rhel-iso'})
				{
					print "- Local copy already in the right place.\n";
				}
				else
				{
					print "- Copying the local ISO into the apache directory.\n";
					rsync_files($conf, "$conf->{switches}{'rhel-iso'}", "$conf->{directory}{rhel_pxe_web}/x86_64/iso/");
				}
			}
			else
			{
				print "[ Error ] - The RHEL ISO doesn't appear to be valid. Is this right?:\n";
				print "[ Error ] - [$conf->{switches}{'rhel-iso'}]\n";
				exit(22);
			}
			
			# If I'm here, we're ready to configure.
			print "- Mounting the ISO: [$local_copy]\n";
			print "- At mount point:   [$conf->{directory}{rhel_pxe_web}/x86_64/img/]\n";
			mount_iso($conf, $local_copy, "$conf->{directory}{rhel_pxe_web}/x86_64/img/");
			$conf->{pxe}{rhel}{enabled} = 1;
			
			# copy the isolinux directory.
			print "- Copying isolinux boot files to TFTP.\n";
			my $isolinux_source = "$conf->{directory}{document_root}/$conf->{directory}{rhel_pxe_web}/x86_64/img/isolinux";
			my $isolinux_target = "$conf->{directory}{pxelinux_config}/$conf->{directory}{rhel_tftp_boot}/x86_64/";
			rsync_files($conf, "$isolinux_source", "$isolinux_target");
			
			# Write out the kickstart files.
			my $rhel_node_ks         = generate_kickstart($conf, "rhel", "node");
			my $rhel_striker_ks      = generate_kickstart($conf, "rhel", "striker");
			my $rhel_node_ks_file    = "$conf->{directory}{document_root}/$conf->{directory}{rhel_pxe_web}/x86_64/ks/$conf->{pxe}{rhel}{node_ks}";
			my $rhel_striker_ks_file = "$conf->{directory}{document_root}/$conf->{directory}{rhel_pxe_web}/x86_64/ks/$conf->{pxe}{rhel}{striker_ks}";
			
			# Write out the files.
			print "- Writing out RHEL node kickstart file.\n";
			open (my $file_handle, ">", $rhel_node_ks_file) or die "Failed to write: [$rhel_node_ks_file], the error was: $!\n";
			print $file_handle $rhel_node_ks;
			close $file_handle;
			print "- Wrote: [$rhel_node_ks_file].\n\n";

			print "- Writing out RHEL striker kickstart file.\n";
			open ($file_handle, ">", $rhel_striker_ks_file) or die "Failed to write: [$rhel_striker_ks_file], the error was: $!\n";
			print $file_handle $rhel_striker_ks;
			close $file_handle;
			print "- Wrote: [$rhel_striker_ks_file].\n\n";
			print "- RHEL PXE configuration complete.\n";
		}
	}
	print "- Done!\n\n";

	return(0);
}

# Mounts an ISO at the specified path, if not already mounted.
sub mount_iso
{
	my ($conf, $source, $target) = @_;
	
	# First make sure the target isn't already mounted.
	my $shell_call = "$conf->{executable}{mount} -o loop $source $target; echo \"mount:\$?\"";
	#print "[ Debug ] - shell_call: [$shell_call]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		if ($line =~ /^mount:(\d+)/)
		{
			my $rc = $1;
			if ($rc == 0)
			{
				print "- Mounted successfully\n";
			}
			elsif ($rc == 32)
			{
				print "- Was already mounted!\n";
			}
		}
		#print "- Output: [$line]\n";
	}
	close $file_handle;
	
	return(0);
}

# This generates a kickstart file.
sub generate_kickstart
{
	my ($conf, $os, $machine) = @_;
	
	my $short_os_name = $conf->{pxe}{centos}{short_name};
	my $machine_name  = "new-node";
	if ($os eq "rhel")
	{
		$short_os_name = $conf->{pxe}{rhel}{short_name};
	}
	if ($machine eq "striker")
	{
		$machine_name = "new-striker";
	}
	
	my $domain_name   = ($conf->{sys}{hostname} =~ /^(.*?)\.(.*)$/)[0];
	   $domain_name   = "localdomain" if not $domain_name;
	
	# Common part.
	my $kickstart = "
# Kickstart file created by 
# Updated:   


### Setup values.
# Doing a full install.
install

# This is the web server with the installation image.
url --url=http://http://$conf->{network}{bcn}{ip}/$short_os_name/x86_64/img/

# Set the language and keyboard to en_US, UTF-8. Adjust as needed.
lang en_US.UTF-8
keyboard us

# Set the timezone to Eastern Standard/Daylight Time. To get your preferred
# time zone, run 'tzselect'. When finished, looks for the line like:
# - Therefore TZ='America/Toronto' will be used.
# Take the value in \"TZ='...'\" and use it below.
timezone --utc America/Toronto

# This sets the (first) ethernet device. There is currently no way to map
# device names to physical interfaces. For this reason, I use DHCP for install
# and configure the network manually post-install.
network --device eth0 --bootproto dhcp --onboot yes --hostname $machine_name.$domain_name

# This is the root user's password, which is \"initial\". To change this, set the
# password you want for a user on an existing system. Once set, look in
# '/etc/shadow' for the line starting with the user name whom you set the
# password for. Here is an example for the user 'digimer':
authconfig --enableshadow --passalgo=sha512 --enablefingerprint
rootpw --iscrypted \$6\$W8AdoMvC\$ZX87YTlVdutpsmsISVEqEkblJLPilP46PNTACN2r2MRzH2xgBOFciZgFsx7f5i07scC/fjNuR/B5Y2eOLXpz31

# In a production system, you will likely want to enable a firewall and
# SELinux. Given that this script is likely to be used while learning though,
# I turn them both off to reduce potential problems. Please be sure to build a
# firewall (Shorewall is good) and to re-enable SELinux as final steps before
# going into production. This way you will be able to focus on resolving issues
# specific to firewalling and SELinux without wondering if problems are caused
# by the general configuration.
firewall --service=ssh
selinux --enforcing

# Given how often I rebuild machines, I like to pre-define the initial user and
# thus skip 'firstboot' to save time.
firstboot --disable

# Reboot after the install completes rather than waiting for the user to
# manually reboot.
reboot

# This runs a script (below) that generates the partitioning information
# depending on a rudamentary test for available storage devices.
\%include /tmp/part-include

# This is a very, very minimal installation. It's suitable for testing install
# programs or for machines with the minimal attack surface area.
\%packages
\@core
\@server-policy
perl
\%end

# Tell the machine to save downloaded RPM updates (for possible distribution to
# other machines for low-bandwidth users). It also makes sure all NICs start on
# boot.
\%post
sed -i 's/keepcache=0/keepcache=1/g' /etc/yum.conf
for nic in $(ls /etc/sysconfig/network-scripts/ifcfg-eth*); do sed -i 's/ONBOOT=.*/ONBOOT=\"yes\"/' \$nic; done
\%end

### Script to setup partitions.
\%pre --log=/tmp/ks-preinstall.log

#!/bin/sh

# Prepare the disks in the script below. It checks '/proc/partitions' to see
# what configuration to use. It's obviously just a basic script, and should 
# be customized for each use-case. IE: RAID 5 doesn't make sense with disks >
# 1 TB... etc.
";

	if ($machine eq "node")
	{
		$kickstart .= "
###############################################################################
# Below is for 40 GiB / partitions with the balance of free space to be       #
# configured later.                                                           #
###############################################################################

### SATA disks
# EeeBox machine
if grep -q sdb /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=sdb
ignoredisk --only-use=sdb
bootloader --location=mbr --driveorder=sdb

part     /boot --fstype ext4 --size=512   --asprimary --ondisk=sdb
part     swap  --fstype swap --size=4096  --asprimary --ondisk=sdb
part     /     --fstype ext4 --size=40960 --asprimary --ondisk=sdb

END

# /dev/sda Single drive, or hardware RAID
elif grep -q sda /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=sda
ignoredisk --only-use=sda
bootloader --location=mbr --driveorder=sda

part     /boot --fstype ext4 --size=512   --asprimary --ondisk=sda
part     swap  --fstype swap --size=4096  --asprimary --ondisk=sda
part     /     --fstype ext4 --size=40960 --asprimary --ondisk=sda

END

# /dev/vda KVM virtual machine
elif grep -q vda /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=vda
ignoredisk --only-use=vda
bootloader --location=mbr --driveorder=vda

part     /boot --fstype ext4 --size=512   --asprimary --ondisk=vda
part     swap  --fstype swap --size=4096  --asprimary --ondisk=vda
part     /     --fstype ext4 --size=40960 --asprimary --ondisk=vda

END

fi
\%end
";
	}
	elsif ($machine eq "striker")
	{
		# This is the storage for nodes with all remaining space.
		$kickstart .= "
###############################################################################
# Below is for full disk / partitions suitable for striker dashboards and     #
# generic VMs.                                                                #
###############################################################################

### SATA disks
# EeeBox machine
if grep -q sdb /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=sdb
ignoredisk --only-use=sdb
bootloader --location=mbr --driveorder=sdb

part     /boot --fstype ext4 --size=512  --asprimary --ondisk=sdb
part     swap  --fstype swap --size=4096 --asprimary --ondisk=sdb
part     /     --fstype ext4 --size=100  --asprimary --ondisk=sdb --grow

END

# /dev/sda Single drive, or hardware RAID
elif grep -q sda /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=sda
ignoredisk --only-use=sda
bootloader --location=mbr --driveorder=sda

part     /boot --fstype ext4 --size=512  --asprimary --ondisk=sda
part     swap  --fstype swap --size=4096 --asprimary --ondisk=sda
part     /     --fstype ext4 --size=100  --asprimary --ondisk=sda --grow

END

# /dev/vda KVM virtual machine
elif grep -q vda /proc/partitions; then
cat >> /tmp/part-include <<END

zerombr
clearpart --linux --drives=vda
ignoredisk --only-use=vda
bootloader --location=mbr --driveorder=vda

part     /boot --fstype ext4 --size=512  --asprimary --ondisk=vda
part     swap  --fstype swap --size=4096 --asprimary --ondisk=vda
part     /     --fstype ext4 --size=100  --asprimary --ondisk=vda --grow

END

fi
\%end
";
	}
	
	return($kickstart);
}

# This configures the PXE server itself.
sub configure_pxe_config
{
	my ($conf) = @_;
	
	print "Configuring PXE server configuration files.\n";
	if (-e $conf->{path}{pxe_default_config})
	{
		backup_file($conf, $conf->{path}{pxe_default_config});
	}
	
	my $default_config = "
# Use the high-colour menu system.
UI vesamenu.c32
 
# Time out and use the default menu option. Defined as tenths of a second.
TIMEOUT 600
 
# Prompt the user. Set to '1' to automatically choose the default option. This
# is really meant for files matched to MAC addresses.
PROMPT 0
 
# Set the boot menu to be 1024x768 with a nice background image. Be careful to
# ensure that all your user's can see this resolution! Default is 640x480.
MENU RESOLUTION 1024 768

# The background image
MENU BACKGROUND pxe_splash_1024_768.png
 
# These do not need to be set. I set them here to show how you can customize or
# localize your PXE server's dialogue.
MENU TITLE    Alteeve's Niche! Install Server

# Below, the hash (#) character is replaced with the countdown timer. The
# '{,s}' allows for pluralizing a word and is used when the value is >= '2'.
MENU AUTOBOOT Will boot the next device as configured in your BIOS in # second{,s}.
MENU TABMSG   Press the <tab> key to edit the boot parameters of the highlighted option.
MENU NOTABMSG Editing of this option is disabled.
 
# The following options set the various colours used in the menu. All possible
# options are specified except for F# help options. The colour is expressed as
# two hex characters between '00' and 'ff' for alpha, red, green and blue
# respectively (#AARRGGBB).
# Format is: MENU COLOR <Item> <ANSI Seq.> <foreground> <background> <shadow type>
MENU COLOR screen      0  #80ffffff #00000000 std      # background colour not covered by the splash image
MENU COLOR border      0  #ffffffff #ee000000 std      # The wire-frame border
MENU COLOR title       0  #ffff3f7f #ee000000 std      # Menu title text
MENU COLOR sel         0  #ff00dfdf #ee000000 std      # Selected menu option
MENU COLOR hotsel      0  #ff7f7fff #ee000000 std      # The selected hotkey (set with ^ in MENU LABEL)
MENU COLOR unsel       0  #ffffffff #ee000000 std      # Unselected menu options
MENU COLOR hotkey      0  #ff7f7fff #ee000000 std      # Unselected hotkeys (set with ^ in MENU LABEL)
MENU COLOR tabmsg      0  #c07f7fff #00000000 std      # Tab text
MENU COLOR timeout_msg 0  #8000dfdf #00000000 std      # Timout text
MENU COLOR timeout     0  #c0ff3f7f #00000000 std      # Timout counter
MENU COLOR disabled    0  #807f7f7f #ee000000 std      # Disabled menu options, including SEPARATORs
MENU COLOR cmdmark     0  #c000ffff #ee000000 std      # Command line marker - The '> ' on the left when editing an option
MENU COLOR cmdline     0  #c0ffffff #ee000000 std      # Command line - The text being edited
# Options below haven't been tested, descriptions may be lacking.
MENU COLOR scrollbar   0  #40000000 #00000000 std      # Scroll bar
MENU COLOR pwdborder   0  #80ffffff #20ffffff std      # Password box wire-frame border
MENU COLOR pwdheader   0  #80ff8080 #20ffffff std      # Password box header
MENU COLOR pwdentry    0  #80ffffff #20ffffff std      # Password entry field
MENU COLOR help        0  #c0ffffff #00000000 std      # Help text, if set via 'TEXT HELP ... ENDTEXT'
 
### Now define the menu options
 
# I feel it is safest to return booting to the client as the first and default
# option. This entry below will do just that.
LABEL next
	MENU LABEL ^1) Boot the next device as configured in your BIOS
	MENU DEFAULT
	localboot
";
	my $centos_short = $conf->{pxe}{centos}{short_name};
	my $rhel_short   = $conf->{pxe}{rhel}{short_name};
	my $i = 1;
	if ($conf->{pxe}{centos}{enabled})
	{
		$i++;
		$default_config .= "
LABEL generic-centos-anvil-node-basic-bios
        MENU LABEL ^$i) Anvil! M3 node - Traditional BIOS - CentOS 6
	TEXT HELP
		Installs a generic Anvil! m3 node using CentOS 6. Will create a
		traditional /boot + MBR install for systems with traditional BIOSes.
		Partition will be 0.5 GiB /boot, 4 GiB <swap>, 40 GiB /.
	ENDTEXT
        KERNEL boot/$centos_short/x86_64/vmlinuz
        APPEND initrd=boot/$centos_short/x86_64/initrd.img inst.repo=http://$conf->{network}{bcn}{ip}/$centos_short/x86_64/img/ ks=http://$conf->{network}{bcn}{ip}/$centos_short/x86_64/ks/$conf->{pxe}{centos}{node_ks}
";
	}
	if ($conf->{pxe}{rhel}{enabled})
	{
		$i++;
		$default_config .= "
LABEL generic-rhel-anvil-node-basic-bios
        MENU LABEL ^$i) Anvil! M3 node - Traditional BIOS - RHEL 6
	TEXT HELP
		Installs a generic Anvil! m3 node using CentOS 6. Will create a
		traditional /boot + MBR install for systems with traditional BIOSes.
		Partition will be 0.5 GiB /boot, 4 GiB <swap>, 40 GiB /.
	ENDTEXT
        KERNEL boot/$rhel_short/x86_64/vmlinuz
        APPEND initrd=boot/$rhel_short/x86_64/initrd.img inst.repo=http://$conf->{network}{bcn}{ip}/$rhel_short/x86_64/img/ ks=http://$conf->{network}{bcn}{ip}/$rhel_short/x86_64/ks/$conf->{pxe}{rhel}{node_ks}
";
	}
	if ($conf->{pxe}{centos}{enabled})
	{
		$i++;
		$default_config .= "
LABEL generic-centos-striker-basic-bios
        MENU LABEL ^$i) Striker Dashboard - Traditional BIOS - CentOS 6
	TEXT HELP
		Installs a generic Striker dashboard using CentOS 6. Will create a
		traditional /boot + MBR install for systems with traditional BIOSes.
		Partition will be 0.5 GiB /boot, 4 GiB <swap>, remainder for /.
	ENDTEXT
        KERNEL boot/$centos_short/x86_64/vmlinuz
        APPEND initrd=boot/$centos_short/x86_64/initrd.img inst.repo=http://$conf->{network}{bcn}{ip}/$centos_short/x86_64/img/ ks=http://$conf->{network}{bcn}{ip}/$centos_short/x86_64/ks/$conf->{pxe}{centos}{striker_ks}
";
	}
	if ($conf->{pxe}{rhel}{enabled})
	{
		$i++;
		$default_config .= "
LABEL generic-rhel-striker-basic-bios
        MENU LABEL ^5) Striker Dashboard - Traditional BIOS - RHEL 6
	TEXT HELP
		Installs a generic Striker dashboard using RHEL 6. Will create a
		traditional /boot + MBR install for systems with traditional BIOSes.
		Partition will be 0.5 GiB /boot, 4 GiB <swap>, remainder for /.
	ENDTEXT
        KERNEL boot/$rhel_short/x86_64/vmlinuz
        APPEND initrd=boot/$rhel_short/x86_64/initrd.img inst.repo=http://$conf->{network}{bcn}{ip}/$rhel_short/x86_64/img/ ks=http://$conf->{network}{bcn}{ip}/$rhel_short/x86_64/ks/$conf->{pxe}{rhel}{striker_ks}
";
	}
	
	# Write out the new one.
	print "- Writing out dhcp daemon configuration file.\n";
	open (my $file_handle, ">", $conf->{path}{pxe_background_source}) or die "Failed to write: [$conf->{path}{pxe_background_source}], the error was: $!\n";
	print $file_handle $default_config;
	close $file_handle;
	print "Done.\n\n";
	
	return(0);
}

# Configure xinetd to enable tftp access.
sub configure_xinetd
{
	my ($conf) = @_;
	
	print "Configuring xinetd/tftp server for PXE installs.\n";
	if (-e $conf->{path}{xinetd_tftp_config})
	{
		backup_file($conf, $conf->{path}{xinetd_tftp_config});
	}
	
	print "- Reading in current: [$conf->{path}{xinetd_tftp_config}]\n";
	my $xinetd_tftp_config = "";
	open (my $file_handle, "<", $conf->{path}{xinetd_tftp_config}) or die "Failed to read: [$conf->{path}{xinetd_tftp_config}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		#print "[ Debug ] >> line: [$line]\n";
		$line =~ s/^disable(\s+)=(\s+).*$/disable${1}=${2}no/;
		#print "[ Debug ] << line: [$line]\n";
		
		$xinetd_tftp_config .= "$line\n";
	}
	close $file_handle;
	# Next, write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{xinetd_tftp_config}) or die "Failed to write: [$conf->{path}{xinetd_tftp_config}], the error was: $!\n";
	print $file_handle $xinetd_tftp_config;
	close $file_handle;
	
	print "- Verifying the PXE config directory exists.\n";
	if (not -e $conf->{directory}{pxelinux_config})
	{
		mkdir $conf->{directory}{pxelinux_config} or die "Failed to create the directory: [$conf->{directory}{pxelinux_config}], error was: $!\n";
		print "- Created: [$conf->{directory}{pxelinux_config}]\n";
	}
	
	print "- Verifying the PXE boot directory exists.\n";
	if (not -e $conf->{directory}{pxelinux_boot})
	{
		mkdir $conf->{directory}{pxelinux_boot} or die "Failed to create the directory: [$conf->{directory}{pxelinux_boot}], error was: $!\n";
		print "- Created: [$conf->{directory}{pxelinux_boot}]\n";
	}
	print "Done.\n\n";
	
	return(0);
}

# This sets up DHCP
sub configure_dhcp
{
	my ($conf) = @_;
	
	print "Configuring DHCP server for PXE installs.\n";
	# Backup any existing config.
	if (-e $conf->{path}{dhcpd_conf})
	{
		backup_file($conf, $conf->{path}{dhcpd_conf});
	}
	
	### TODO: I have no checks yet to verify that the lease range is in the
	###       BCN subnet... Fix that.
	my $domain_name  = ($conf->{sys}{hostname} =~ /^(.*?)\.(.*)$/)[0];
	   $domain_name  = "localdomain" if not $domain_name;
	my $bcn_network   = "";
	if ($conf->{network}{bcn}{netmask} eq "255.255.0.0")
	{
		$bcn_network =  ($conf->{network}{bcn}{ip} =~ /^(\d+\.\d+\.)/)[0];
		$bcn_network .= "0.0";
	}
	if ($conf->{network}{bcn}{netmask} eq "255.255.255.0")
	{
		$bcn_network =  ($conf->{network}{bcn}{ip} =~ /^(\d+\.\d+\.\d+\.)/)[0];
		$bcn_network .= "0";
	}
	my $dhcpd_config = "
# Generated by: [$THIS_FILE] on: [".get_date($conf)."].
# DHCP Daemon config for PXE-based installs of nodes and striker dashboards.

### Global options
# General domain information
option domain-name \"$domain_name\";
option domain-name-servers $conf->{network}{ifn}{dns1}, $conf->{network}{ifn}{dns2};
 
# Tell the server that it's authoritative on our network.
authoritative;
 
# This controls how dynamic DNS updating is handled. In our case, we aren't
# concerned about DDNS so we'll set it to 'none'.
ddns-update-style none;
 
### Subnet options
subnet $bcn_network netmask $conf->{network}{bcn}{netmask} {
	# These two options tell clients where to go to get the file needed to
	# start the boot process.
        next-server $conf->{network}{bcn}{ip};
        filename \"pxelinux.0\";
 
	# Our servers are installed on the BCN where they have no Internet
	# access, so this value is largely meaningless. We set it to this
	# machine for reasons.
	option routers $conf->{network}{bcn}{ip};
 
	# Set our range. This can be whatever you want so long as it fits in
	# your netmask.
        range $conf->{switches}{lease_start} $conf->{switches}{lease_end};
 
	# If clients don't ask, make the lease available for the following
	# number of seconds. If the client does ask, allow up to this number of
	# seconds. Being that we're only handing out IPs long enough to install
	# an OS, we can keep this quite short. One hour is more than enough.
	default-lease-time 3600;
	max-lease-time 3600;
}
\n";
	
	# Write out the new one.
	print "- Writing out dhcp daemon configuration file.\n";
	open (my $file_handle, ">", $conf->{path}{dhcpd_conf}) or die "Failed to write: [$conf->{path}{dhcpd_conf}], the error was: $!\n";
	print $file_handle $dhcpd_config;
	close $file_handle;
	print "Done.\n\n";
	
	return(0);
}

# This is call restart or stop on daemons and makes sure they're set to (not)
# run on boot.
sub manage_daemons
{
	my ($conf) = @_;
	
	print "Configuring daemons to start/stop on boot and start/stop daemons.\n";
	foreach my $daemon (@{$conf->{daemons}{disable}})
	{
		print "- Disabling: [$daemon] on boot and stopping it.\n";
		my $shell_call = "$conf->{executable}{chkconfig} $daemon off && /etc/init.d/$daemon stop";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$line =~ s/\n//g;
			$line =~ s/\r//g;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		sleep 1;
	}
	foreach my $daemon (@{$conf->{daemons}{enable}})
	{
		print "- Enabling: [$daemon] on boot and (re)starting it.\n";
		my $shell_call = "$conf->{executable}{chkconfig} $daemon on && /etc/init.d/$daemon restart";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$line =~ s/\n//g;
			$line =~ s/\r//g;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		sleep 1;
	}
	print "Done.\n\n";
	
	return(0);
}

# Set the owning user and group for various files and set the mode/permissions
# as well.
sub set_file_ownership_and_modes
{
	my ($conf) = @_;
	
	print "Setting ownership and permissions/modes on Striker files.\n";
	# I make shell calls here because it's too tricky to handle the
	# recursive calls in native perl.
	foreach my $file (sort {$a cmp $b} keys %{$conf->{permissions}})
	{
		my $path      = $conf->{permissions}{$file}{path};
		my $owner     = $conf->{permissions}{$file}{owner};
		my $group     = $conf->{permissions}{$file}{group};
		my $mode      = $conf->{permissions}{$file}{mode};
		my $recursive = $conf->{permissions}{$file}{recursive} ? "-R" : "";
		my $selinux   = $conf->{permissions}{$file}{selinux};
		print "- On: [$path],\n";
		print "  Setting ownership and mode to: [$owner:$group] and: [$mode], respectively.\n";
		my $shell_call = "$conf->{executable}{chown} $recursive $owner:$group $path && $conf->{executable}{chmod} $recursive $mode $path";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		
		# NOTE: Disabled until I get the media library tools working
		#       with selinux.
		#if ($selinux)
		if (0)
		{
			#[root@striker ~]# semanage fcontext -a -t httpd_sys_content_t /var/log/an-cdb.log 
			#[root@striker ~]# restorecon /var/log/an-cdb.log 
			print "  Setting selinux context to: [$selinux].\n";
			my $shell_call = "$conf->{executable}{semanage} fcontext -a -t $selinux $path && $conf->{executable}{restorecon} $path";
			#print "[ Debug ] - shell_call: [$shell_call]\n";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				print "- Output: [$line]\n";
			}
			close $file_handle;
		}
	}
	
	# Allow httpd to make outbound network connections.
	if (0)
	{
		print "- Giving apache permission to create network connections.\n";
		my $shell_call = "$conf->{executable}{setsebool} -P httpd_can_network_connect 1";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	print "Done.\n\n";
	
	return(0);
}

# Copy the files for Striker from the source directory into the apache
# directory.
sub install_striker_files
{
	my ($conf) = @_;
	
	# Copy the 'html' directory
	print "Copying Striker program files into place.\n";
	
	if (-e "$conf->{path}{backups}/www")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		my $www_directory =  $conf->{directory}{document_root};
		   $www_directory =~ s/\/$//;
		print "- Backing up: [$www_directory].\n";
		backup_file($conf, $www_directory);
	}
	
	print "- Copying HTML files and skins.\n";
	rsync_files($conf, "$conf->{directory}{source}/html",    $conf->{directory}{document_root});
	
	print "- Copying executable files and languages.\n";
	rsync_files($conf, "$conf->{directory}{source}/cgi-bin", $conf->{directory}{document_root});
	
	print "- Copying tools.\n";
	rsync_files($conf, "$conf->{directory}{source}/tools",   $conf->{directory}{document_root});
	
	# Split the directory from the file.
	my ($striker_conf_dir, $striker_conf_file) = ($conf->{path}{striker_config} =~ /^(.*)\/(.*)$/);
	if (-e "$conf->{path}{striker_config}")
	{
		print "- Existing Striker configuration file found, not replacing it.\n";
	}
	else
	{
		# Make sure the striker /etc/ directory exists.
		my $parent_dir       = ($striker_conf_dir =~ /^.*\/(.*)$/)[0];
		if (-d $striker_conf_dir)
		{
			print "- Striker configuration directory already exists.\n";
		}
		else
		{
			print "- Creating the Striker configuration directory.\n";
			mkdir $striker_conf_dir or die "Failed to create the directory: [$striker_conf_dir], error was: $!\n";
		}
		
		print "- Copying base Striker configuration file.\n";
		my $source      = "$conf->{directory}{source}/$striker_conf_file";
		my $destination = $striker_conf_dir;
		copy_file($conf, $source, $destination);
		print "- Copying: [$source]\n";
		print "       to: [$destination]\n";
		copy_file($conf, $source, $destination);
	}
	
	# Update the mail settings if the user passed any.
	if (($conf->{sys}{mail_server}) || ($conf->{sys}{mail_user}) || ($conf->{sys}{mail_password}))
	{
		# Update the an.conf file with the user's selected mail server
		# values.
		my $mail_server;
		my $mail_port;
		if ($conf->{sys}{mail_server} =~ /^(.*?):(\d+)$/)
		{
			$mail_server = $1;
			$mail_port   = $2;
		}
		elsif ($conf->{sys}{mail_server})
		{
			$mail_server = $conf->{sys}{mail_server};
		}
		
		print "- Updating mail server values in Striker's configuration file.\n";
		#print "[ Debug ] - mail_server: [$mail_server], mail_port: [$mail_port]\n";
		#print "[ Debug ] - mail user: [$conf->{sys}{mail_user}], password: [$conf->{sys}{mail_password}]\n";
		#print "[ Debug ] - Reading: [$conf->{path}{striker_config}]\n";
		my $striker_config = "";
		open (my $file_handle, "<", $conf->{path}{striker_config}) or die "Failed to read: [$conf->{path}{striker_config}], the error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			
			#print "[ Debug ] >> line: [$line]\n";
			$line =~ s/^smtp::server(\s+)=(\s+).*$/smtp::server$1=$2$mail_server/;
			$line =~ s/^smtp::port(\s+)=(\s+).*$/smtp::port$1=$2$mail_port/;
			$line =~ s/^smtp::username(\s+)=(\s+).*$/smtp::username$1=$2$conf->{sys}{mail_user}/     if $conf->{sys}{mail_user};
			$line =~ s/^smtp::password(\s+)=(\s+).*$/smtp::password$1=$2$conf->{sys}{mail_password}/ if $conf->{sys}{mail_password};
			#print "[ Debug ] << line: [$line]\n";
			
			$striker_config .= "$line\n";
		}
		close $file_handle;
		# Next, write it out.
		print "- Writing out the new version.\n";
		open ($file_handle, ">", $conf->{path}{striker_config}) or die "Failed to write: [$conf->{path}{striker_config}], the error was: $!\n";
		print $file_handle $striker_config;
		close $file_handle;
		print "Done.\n\n";
	}
	
	# Create an empty log file
	print "- Creating empty Striker log file.\n";
	open (my $file_handle, ">", $conf->{path}{striker_log}) or die "Failed to write: [$conf->{path}{striker_log}], the error was: $!\n";
	print $file_handle "";
	close $file_handle;
	
	print "Done.\n\n";
	
	return(0);
}

# This copies multiple files using rsync
sub rsync_files
{
	my ($conf, $source, $destination) = @_;
	
	my $shell_call = "$conf->{executable}{rsync} -a $source $destination";
	#print "[ Debug ] - shell_call: [$shell_call]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		print "- Output: [$line]\n";
	}
	close $file_handle;
	
	# Verify it copied successfully.
	my $file = ($source =~ /^.*\/(.*)$/)[0];
	   $file = "$destination/$file";
	if (not -e $file)
	{
		print "[ Error ] - Failed to rsync: [$source]\n";
		print "[ Error ] -              to: [$destination]\n";
		exit(21);
	}
}

# Configure guacamole.
sub configure_guacamole
{
	my ($conf) = @_;
	
	print "Configuring guacamole\n";
	
	# Create the guacamole directory if needed.
	if (-e $conf->{directory}{guac_etc})
	{
		print "- Guacamole configuration directory already exists.\n";
	}
	else
	{
		print "- Creating the Guacamole configuration directory.\n";
		mkdir $conf->{directory}{guac_etc} or die "Failed to create the directory: [$conf->{directory}{guac_etc}], error was: $!\n";
	}
	
	# Make sure gacamole tomcat diretory exists
	if (-e $conf->{directory}{guac_tomcat})
	{
		print "- Guacamole Tomcat directory already exists.\n";
	}
	else
	{
		print "- Creating the Guacamole Tomcat directory.\n";
		mkdir $conf->{directory}{guac_tomcat} or die "Failed to create the directory: [$conf->{directory}{guac_tomcat}], error was: $!\n";
	}
	
	# Make sure the library path directory exists (before we check classpath}.
	if (-e $conf->{directory}{guac_lib})
	{
		print "- Guacamole library directory already exists.\n";
	}
	else
	{
		print "- Creating the Guacamole library directory.\n";
		mkdir $conf->{directory}{guac_lib} or die "Failed to create the directory: [$conf->{directory}{guac_lib}], error was: $!\n";
	}
	
	# Make sure the class path directory exists.
	if (-e $conf->{directory}{guac_classpath})
	{
		print "- Guacamole classpath directory already exists.\n";
	}
	else
	{
		print "- Creating the Guacamole classpath directory.\n";
		mkdir $conf->{directory}{guac_classpath} or die "Failed to create the directory: [$conf->{directory}{guac_classpath}], error was: $!\n";
	}
	
	# insert guacamole version into path names.
	$conf->{path}{guac_noauth} =~ s/#!guac_version!#/$conf->{sys}{guac_version}/;
	$conf->{path}{guac_war}    =~ s/#!guac_version!#/$conf->{sys}{guac_version}/;
	
	# Now start copying things into place.
	if (-e $conf->{path}{guac_noauth})
	{
		print "- The 'auth-noauth' module is already in place.\n";
	}
	else
	{
		print "- Copying the 'auth-noauth' module into place.\n";
		my $noauth_file =  ($conf->{path}{guac_noauth} =~ /^.*\/(.*)$/)[0];
		my $destination =  $conf->{path}{guac_noauth};
		   $destination =~ s/$noauth_file$//;
		my $source      =  "$conf->{directory}{source}/guacamole/$noauth_file";
		print "- Copying: [$source]\n";
		print "       to: [$destination]\n";
		copy_file($conf, $source, $destination);
	}
	
	# Create the noauth config, if needed.
	if (-e $conf->{path}{guac_noauth_config})
	{
		print "- The 'noauth' config already exists.\n";
	}
	else
	{
		print "- Copying the 'auth-noauth' module into place.\n";
		my $noauth_file =  ($conf->{path}{guac_noauth_config} =~ /^.*\/(.*)$/)[0];
		my $destination =  $conf->{path}{guac_noauth_config};
		   $destination =~ s/$noauth_file$//;
		my $source      =  "$conf->{directory}{source}/guacamole/$noauth_file";
		print "- Copying: [$source]\n";
		print "       to: [$destination]\n";
		copy_file($conf, $source, $destination);
	}
	
	# Copy the .war file and symlink it.
	if (-e $conf->{path}{guac_war})
	{
		print "- Guacamole web archive file already in place.\n";
	}
	else
	{
		# Delete the symlink if it exists.
		if (-l $conf->{path}{guac_war_symlink})
		{
			print "- Deleting the existing symlink.\n";
			unlink $conf->{path}{guac_war_symlink} or die "Failed to delete the symlink: [$conf->{path}{guac_war_symlink}]\n";
		}
		
		# Now copy.
		my ($destination, $war_file) = ($conf->{path}{guac_war} =~ /^(.*)\/(.*)$/);
		my $source                   = "$conf->{directory}{source}/guacamole/$war_file";
		print "- Copying: [$source]\n";
		print "       to: [$destination]\n";
		copy_file($conf, $source, $destination);
		
		# If I am here, the copy succeeded.
		print "- Creating guacamole web archive symlink.\n";
		my $shell_call = "$conf->{executable}{ln} -s $destination/$war_file $conf->{path}{guac_war_symlink}";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		
		if (-l $conf->{path}{guac_war_symlink})
		{
			print "- Symlink created successfully.\n";
		}
		else
		{
			print "[ Error ] - I was unable to link: [$destination/$war_file]\n";
			print "[ Error ] -                   to: [$conf->{path}{guac_war_symlink}]\n";
			exit(20);
		}
	}
	
	# Copy the guacamoly properties file into place.
	if (-e $conf->{path}{guac_properties})
	{
		print "- Properties file already in place.\n";
	}
	else
	{
		my $properties_file =  ($conf->{path}{guac_properties} =~ /^.*\/(.*)$/)[0];
		my $destination     =  $conf->{path}{guac_properties};
		   $destination     =~ s/$properties_file$//;
		my $source          =  "$conf->{directory}{source}/guacamole/$properties_file";
		print "- Copying: [$source]\n";
		print "       to: [$destination]\n";
		copy_file($conf, $source, $destination);
		
		# Create the symlink, if needed.
		print "- Creating guacamole properties symlink.\n";
		my $shell_call = "$conf->{executable}{ln} -s $destination/$properties_file $conf->{path}{guac_properties_symlink}";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		
		if (-l $conf->{path}{guac_properties_symlink})
		{
			print "- Symlink created successfully.\n";
		}
		else
		{
			print "[ Error ] - I was unable to link: [$destination/$properties_file]\n";
			print "[ Error ] -                   to: [$conf->{path}{guac_properties_symlink}]\n";
			exit(20);
		}
	}
	
	print "Done.\n\n";
	
	return(0);
}

# This copies a file... Hey, what it says on the tin.
sub copy_file
{
	my ($conf, $source, $destination) = @_;
	
	my $shell_call = "$conf->{executable}{cp} -af $source $destination";
	#print "[ Debug ] - shell_call: [$shell_call]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		print "- Output: [$line]\n";
	}
	close $file_handle;
	
	# Verify it copied successfully.
	my $file = ($source =~ /^.*\/(.*)$/)[0];
	   $file = "$destination/$file";
	if (not -e $file)
	{
		print "[ Error ] - Failed to copy: [$source]\n";
		print "[ Error ] -             to: [$destination]\n";
		exit(19);
	}
	
	return(0);
}

# Download Striker, if needed.
sub download_striker
{
	my ($conf) = @_;
	
	print "Downloading Striker, if needed.\n";
	my $extract  = "";
	my $download = "";
	if ($conf->{sys}{install_version} eq "git")
	{
		print "- Downloading the developer version from github.\n";
		$download                  = $conf->{url}{git_master};
		$extract                   = ($conf->{url}{git_master} =~ /^.*\/(.*)$/)[0];
		$conf->{directory}{source} = "./an-cdb-master";
	}
	else
	{
		if (-e "./version")
		{
			my $version;
			print "- Version file exists, checking if it matches the requested version.\n";
			open (my $file_handle, "<", "./version") or die "Failed to read: [./version], the error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				$version = $_;
			}
			close $file_handle;
			
			if ($version eq $conf->{sys}{install_version})
			{
				print "- Download not needed, files already available.\n";
				$conf->{directory}{source} = "./";
			}
			else
			{
				print "- Local version: [$version] doesn't match requested version: [$conf->{sys}{install_version}]\n";
				print "- Downloading requested version from: [$conf->{url}{striker}]\n";
				$download                  = $conf->{url}{striker};
				$extract                   = ($conf->{url}{striker} =~ /^.*\/(.*)$/)[0];
				$conf->{directory}{source} = "./an-cdb-".$conf->{sys}{install_version};
			}
		}
		else
		{
			# Download needed.
			print "- Downloading version: [$conf->{sys}{install_version}] from: [$conf->{url}{striker}]\n";
			$download                  = $conf->{url}{striker};
			$extract                   = ($conf->{url}{striker} =~ /^.*\/(.*)$/)[0];
			$conf->{directory}{source} = "./an-cdb-".$conf->{sys}{install_version};
		}
	}
	
	# Download, if needed
	if ($download)
	{
		# See if it's already downloaded.
		if (-e "./$extract")
		{
			print "- The source: [$extract] already exists, skipping.\n";
		}
		else
		{
			my $shell_call = "$conf->{executable}{wget} -c $download";
			#print "[ Debug ] - shell_call: [$shell_call]\n";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			print "==============================================================================\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				print "- Output: [$line]\n";
			}
			print "==============================================================================\n";
			close $file_handle;
			
			# Make sure it downloaded.
			if (not -e $extract)
			{
				print "[ Error ] - The download failed!\n";
				print "[ Error ] - Does: [$download] exist?\n";
				print "[ Error ] - Is there a working network connection?\n";
				exit(18);
			}
			else
			{
				print "- Download complete.\n";
			}
		}
	}
	
	# Extract, if needed.
	if ($extract)
	{
		print "- Extracting: [$extract]\n";
		#print "[ Debug ] - Checking if the directory: [$conf->{directory}{source}] exists already.\n";
		if (-d $conf->{directory}{source})
		{
			print "- The source appears to already be extracted, skipping.\n";
		}
		else
		{
			my $source_dir_found = 0;
			my $shell_call       = "$conf->{executable}{tar} -xvf $extract";
			if ($extract =~ /\.zip$/)
			{
				$shell_call = "$conf->{executable}{unzip} $extract";
			}
			print "[ Debug ] - shell_call: [$shell_call]\n";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				if (($line =~ /^(.*?)\/$/) && (not $source_dir_found))
				{
					#print __LINE__."; [ Debug ] - line: [$line]\n";
					# This overrides anything set above
					# (though those need to be set in-case
					# extraction wasn't needed).
					my $source = $1;
					#print __LINE__."; [ Debug ] - source: [$source]\n";
					# When using 'unzip', the line as 'creating:' in it.
					if ($line =~ /creating: (.*?\/)$/)
					{
						$source = $1;
						#print __LINE__."; [ Debug ] - source: [$source]\n";
					}
					$conf->{directory}{source} = "./$source";
					#print __LINE__."; [ Debug ] - directory::source: [$conf->{directory}{source}]\n";
					$source_dir_found          = 1;
				}
				print "- Output: [$line]\n";
			}
			close $file_handle;
		}
	}
	print "- Will use the source directory: [$conf->{directory}{source}]\n";
	print "Done.\n\n";
	
	return(0);
}

# Configure iptables to allow incoming HTTP and HTTPS traffic.
sub configure_iptables
{
	my ($conf) = @_;
	
	# Read in the current rules so we don't recreate rules that already exist.
	print "Configuring the firewall to allow normal and secure web access.\n";
	if (-e "$conf->{path}{backups}/iptables")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		print "- Backing up: [$conf->{path}{iptables}].\n";
		backup_file($conf, $conf->{path}{iptables});
	}
	
	my $http_open  = 0;
	my $https_open = 0;
	print "- Reading the current firewall configuration.\n";
	my $shell_call = "$conf->{executable}{'iptables-save'}";
	#print "[ Debug ] - shell_call: [$shell_call]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		#print "- Output: [$line]\n";
		if (($line =~ /--state NEW/) && ($line =~ /--dport 80/) && ($line =~ /ACCEPT/))
		{
			print "- Standard web access is already enabled.\n";
			$http_open = 1;
		}
		if (($line =~ /--state NEW/) && ($line =~ /--dport 443/) && ($line =~ /ACCEPT/))
		{
			print "- Secure web access is already enabled.\n";
			$https_open = 1;
		}
	}
	close $file_handle;
	
	if (not $http_open)
	{
		print "- Opening access for standard web access.\n";
		my $shell_call = "$conf->{executable}{iptables} -I INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	if (not $https_open)
	{
		print "- Opening access for secure web access.\n";
		my $shell_call = "$conf->{executable}{iptables} -I INPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	if ((not $http_open) || (not $https_open))
	{
		# Save the changes.
		print "- Saving the new iptables configuration.\n";
		my $shell_call = "/etc/init.d/iptables save";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			# The formatting here isn't nice.
			$line =~ s/\n//g;
			$line =~ s/\r//g;
			#print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	print "Done.\n\n";
	
	return(0);
}

# Configre SSH to disable IP lookup to enable faster SSH access when there is
# no Internet access. Also, create the apache user's RSA keys.
sub configure_ssh
{
	my ($conf) = @_;
	
	print "Configuring SSH daemon to allow faster logins.\n";
	        
	if (-e "$conf->{path}{backups}/sshd_config")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		print "- Backing up: [$conf->{path}{sshd_config}].\n";
		backup_file($conf, $conf->{path}{sshd_config});
	}
	
	# Read in and then write out the server.xml file to enable UTF-8
	my $sshd_config = "";
	print "- Reading in the existing ssh daemon configuration file.\n";
	open (my $file_handle, "<", $conf->{path}{sshd_config}) or die "Failed to read: [$conf->{path}{sshd_config}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Change the lines, if needed.
		$line =~ s/#GSSAPIAuthentication no/GSSAPIAuthentication no/;
		$line =~ s/GSSAPIAuthentication yes/#GSSAPIAuthentication yes/;
		$line =~ s/#UseDNS yes/UseDNS no/;
		
		$sshd_config .= "$line\n";
	}
	close $file_handle;
	# Next, write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{sshd_config}) or die "Failed to write: [$conf->{path}{sshd_config}], the error was: $!\n";
	print $file_handle $sshd_config;
	close $file_handle;
	
	if (-e "$conf->{path}{apache_home}/.ssh/id_rsa")
	{
		print "- SSH RSA keys for: [$conf->{sys}{apache_user}] already created, skipping.\n";
	}
	else
	{
		print "- Generating: [$conf->{sys}{apache_user}]'s RSA keys.\n";
		print "[ Note ] - Please be patient! It might take time to collect entropy.\n";
		my $shell_call = "$conf->{executable}{su} apache -c \"$conf->{executable}{'ssh-keygen'} -t rsa -N \\\"\\\" -b 8191 -f ~/.ssh/id_rsa\"";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	print "Done.\n\n";
	
	return(0);
}

# This configures Tomcat, which we use for Guacamole.
sub configure_tomcat
{
	my ($conf) = @_;
	
	print "Configuring Tomcat.\n";
	        
	if (-e "$conf->{path}{backups}/server.xml")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		print "- Backing up: [$conf->{path}{tomcat_server}].\n";
		backup_file($conf, $conf->{path}{tomcat_server});
	}
	
	# Read in and then write out the server.xml file to enable UTF-8
	my $tomcat_config = "";
	print "- Reading in the existing tomcat server configuration server.\n";
	#print "[ Debug ] - Reading: [$conf->{path}{tomcat_server}]\n";
	open (my $file_handle, "<", $conf->{path}{tomcat_server}) or die "Failed to read: [$conf->{path}{tomcat_server}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Avoid multiple 'URIEncoding="UTF-8"' entries
		#print "[ Debug ] >> line: [$line]\n";
		next if $line =~ /^\s+URIEncoding="UTF-8"$/;
		
		# Insert the UTF-8 string
		if ($line =~ /<Connector port="8080" protocol="HTTP\/1.1"/)
		{
			$tomcat_config .= "$line\n";
			$tomcat_config .= "               URIEncoding=\"UTF-8\"\n";
		}
		else
		{
			$tomcat_config .= "$line\n";
		}
	}
	close $file_handle;
	# Next, write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{tomcat_server}) or die "Failed to write: [$conf->{path}{tomcat_server}], the error was: $!\n";
	print $file_handle $tomcat_config;
	close $file_handle;
	print "Done.\n\n";
	
	return(0);
}

# This makes sure that selinux is enabled.
sub configure_selinux
{
	my ($conf) = @_;
	
	### TODO: Get the media library stuff working... ;_;
	#print "Making sure that selinux is enabled.\n";
	print "Making sure that selinux is permissive.\n";
	if (-e "$conf->{path}{backups}/config")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		print "- Backing up: [$conf->{path}{selinux_config}].\n";
		backup_file($conf, $conf->{path}{selinux_config});
	}
	
	# If selinux is off, warn the user that the next boot might be slow.
	my $current_policy = "";
	my $selinux_config = "";
	print "- Reading in the existing selinux config file.\n";
	open (my $file_handle, "<", $conf->{path}{selinux_config}) or die "Failed to read: [$conf->{path}{selinux_config}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Update the SELinux policy.
		if ($line =~ /^SELINUX=(.*)/)
		{
			# Record the current policy in case we want to alert
			# the user.
			$current_policy =  $1;
			#$selinux_config .= "SELINUX=enforcing\n";
			$selinux_config .= "SELINUX=permissive\n";
		}
		else
		{
			$selinux_config .= "$line\n";
		}
	}
	close $file_handle;
	
	# If the old policy was 'disabled', want that the next reboot could be
	# slow.
	if ($current_policy eq "disabled")
	{
		print "[ Warning ] - It looks like selinux was disabled.\n";
		print "[ Warning ] - The next reboot might take longer than normal if a filesystem\n";
		print "[ Warning ] - relabel is required.\n";
		sleep 5;
	}
	elsif ($current_policy eq "enforcing")
	{
		# Set enforcing to 0.
		print "- Setting selinux to 'permissive'.\n";
		my $shell_call = "$conf->{executable}{setenforce} 0";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
	}
	
	# Next, write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{selinux_config}) or die "Failed to write: [$conf->{path}{selinux_config}], the error was: $!\n";
	print $file_handle $selinux_config;
	close $file_handle;
	print "Done.\n\n";
	
	# TODO: Set labels here.
	
	return(0);
}

# This sets the hostname of the system.
sub set_hostname
{
	my ($conf) = @_;
	
	# First, edit the hostname file.
	print "Configuring this system's host name.\n";
	print "- Reading in the existing hostname file.\n";
	my $hostname = "";
	open (my $file_handle, "<", $conf->{path}{hostname}) or die "Failed to read: [$conf->{path}{hostname}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Update the apache user entry.
		if ($line =~ /^HOSTNAME=/)
		{
			# Now insert our new authentication lines
			$hostname .= "HOSTNAME=$conf->{sys}{hostname}\n";
		}
		else
		{
			$hostname .= "$line\n";
		}
	}
	close $file_handle;
	
	# Next, write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{hostname}) or die "Failed to write: [$conf->{path}{hostname}], the error was: $!\n";
	print $file_handle $hostname;
	close $file_handle;
	print "Done.\n\n";
	
	# And finally, change the hostname for the current session.
	system("hostname $conf->{sys}{hostname}");
	
	return(0);
}

# This handles configuring apache.
sub configure_apache
{
	my ($conf) = @_;
	
	print "Configuring Apache.\n";
	
	# Start by backing things up.
	if (-e "$conf->{path}{backups}/httpd")
	{
		print "- Backup already made, skipping.\n";
	}
	else
	{
		print "- Backing up original files.\n";
		backup_file($conf, $conf->{directory}{apache});
	}
	
	# Enable the 'apache' user.
	enable_apache_user($conf);
	
	# Create the apache user's home directory and sub-directories.
	create_apache_home_directories($conf);
	
	# Create the htpasswd file.
	create_apache_htpasswd($conf);
	
	# Now to start updating.
	print "- Reading in the existing config file and adjusting as needed.\n";
	my $in_guacamole  = 0;
	my $apache_config = "";
	open (my $file_handle, "<", $conf->{path}{apache_config}) or die "Failed to read: [$conf->{path}{apache_config}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Skip lines from previous htpasswd configs.
		next if $line =~ /^\s+# Password login/;
		next if $line =~ /^\s+AuthType /;
		next if $line =~ /^\s+AuthName /;
		next if $line =~ /^\s+AuthUserFile /;
		next if $line =~ /^\s+Require user /;
		
		# Skip prior proxy entries.
		if ($line =~ /^<Location \/guacamole\/>/)
		{
			$in_guacamole = 1;
		}
		if ($line =~ /CustomLog \/var\/log\/httpd\/guac.log/)
		{
			$in_guacamole = 0;
			next;
		}
		next if $in_guacamole;
		
		### TODO: Set SSL as default and add an option for a user to
		###       load their own certs.
		# Now insert and/or modify things.
		if ($line =~ /<Directory "\/var\/www\/cgi-bin/)
		{
			# Now insert our new authentication lines
			$apache_config .= "$line\n";
			$apache_config .= "    # Password login\n";
			$apache_config .= "    AuthType Basic\n";
			$apache_config .= "    AuthName \"Striker - $conf->{sys}{customer}\"\n";
			$apache_config .= "    AuthUserFile $conf->{path}{apache_htpasswd}\n";
			$apache_config .= "    Require user $conf->{sys}{striker_user}\n";
		}
		elsif ($line =~ /#<\/Proxy>/)
		{
			$apache_config .= "$line\n";
			$apache_config .= "<Location /guacamole/>\n";
			$apache_config .= "    Order allow,deny\n";
			$apache_config .= "    Allow from all\n";
			$apache_config .= "    ProxyPass http://localhost:8080/guacamole/ max=20 flushpackets=on\n";
			$apache_config .= "    ProxyPassReverse http://localhost:8080/guacamole/\n";
			$apache_config .= "</Location>\n";
			$apache_config .= "SetEnvIf Request_URI \"^/guacamole/tunnel\" dontlog\n";
			$apache_config .= "CustomLog /var/log/httpd/guac.log common env=!dontlog\n";
		}
		elsif ($line =~ /^Timeout /)
		{
			$apache_config .= "Timeout $conf->{sys}{apache_timeout}\n";
		}
		else
		{
			$apache_config .= "$line\n";
		}
	}
	close $file_handle;
	
	# Now write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{apache_config}) or die "Failed to write: [$conf->{path}{apache_config}], the error was: $!\n";
	print $file_handle $apache_config;
	close $file_handle;
	print "Done.\n\n";
	
	# Write out the manifest.conf file
	print "- Writing out the apache manifest configuration file.\n";
	if (-e $conf->{path}{apache_manifest_conf})
	{
		print "- Apache manifest configuration file already exists.\n";
	}
	else
	{
		open ($file_handle, ">", $conf->{path}{apache_manifest_conf}) or die "Failed to write: [$conf->{path}{apache_manifest_conf}], the error was: $!\n";
		print $file_handle "<Directory \"/var/www/html/manifests/\">\n";
		print $file_handle "  <FilesMatch \"\.xml\$\">\n";
		print $file_handle "    Header set Content-Disposition attachment\n";
		print $file_handle "  </FilesMatch>\n";
		print $file_handle "</Directory>\n";
		close $file_handle;
		print "Done.\n\n";
	}
	
	return(0);
}

# This edits the passwd file to enable logins by apache.
sub enable_apache_user
{
	my ($conf) = @_;
	
	print "- Reading in the existing system user file.\n";
	my $passwd = "";
	open (my $file_handle, "<", $conf->{path}{passwd}) or die "Failed to read: [$conf->{path}{passwd}], the error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		# Update the apache user entry.
		if ($line =~ /apache:x:(\d+):(\d+):(.*?):(.*?):(.*)/)
		{
			# Now insert our new authentication lines
			my $uid  = $1;
			my $gid  = $2;
			my $name = $3;	# I don't care about this
			my $home = $4;	# or this.
			$passwd .= "apache:x:$uid:$gid:$name:$conf->{path}{apache_home}:$conf->{path}{apache_shell}\n";
		}
		else
		{
			$passwd .= "$line\n";
		}
	}
	close $file_handle;
	
	# Now write it out.
	print "- Writing out the new version.\n";
	open ($file_handle, ">", $conf->{path}{passwd}) or die "Failed to write: [$conf->{path}{passwd}], the error was: $!\n";
	print $file_handle $passwd;
	close $file_handle;
	
	return(0);
}

# This sets the local 'root' user's password.
sub set_root_password
{
	my ($conf) = @_;
	
	print "Setting root user's password.\n";
	if ($conf->{sys}{striker_pass})
	{
		$conf->{sys}{striker_pass} =~ s/"/\\"/g;
		my $shell_call = "$conf->{executable}{echo} \"$conf->{sys}{striker_pass}\" | $conf->{executable}{passwd} root --stdin";
		#print "[ Debug ] - shell_call: [$shell_call]\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		print "Done!\n\n";
		print " ##############################################################################\n";
		print " # NOTE: Your 'root' user password is now the same as the Striker user's      #\n";
		print " #       password you just specified. If you want a different password,       #\n";
		print " #       change it now with 'passwd'!                                         #\n";
		print " ##############################################################################\n\n";
	}
	else
	{
		print "- Password not set, leaving it unchanged.\n";
		print "Done!\n\n";
	}
	
	return(0);
}

# Create the htpasswd file.
sub create_apache_htpasswd
{
	my ($conf) = @_;
	
	print "- Setting up Striker's authentication via Apache's htpasswd...\n";
	if (-e $conf->{path}{apache_htpasswd})
	{
		print "- Old: [$conf->{path}{apache_htpasswd}] found, deleting it.\n";
		unlink $conf->{path}{apache_htpasswd} or die "Failed to delete: [$conf->{path}{apache_htpasswd}], error was: $!\n";
	}
	
	# Escape any single-quotes in the user's password.
	$conf->{sys}{striker_pass} =~ s/"/\\\\\\\"/g;
	print "- Generating: [$conf->{sys}{striker_user}]'s: [$conf->{path}{apache_htpasswd}] password file.\n";
	my $shell_call = "$conf->{executable}{su} apache -c \"$conf->{executable}{htpasswd} -cdb $conf->{path}{apache_htpasswd} $conf->{sys}{striker_user} \\\"$conf->{sys}{striker_pass}\\\"\"";
	#print "[ Debug ] - shell_call: [$shell_call]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		print "- Output: [$line]\n";
	}
	close $file_handle;
	
	return(0);
}

# This creates the apache home directories and sets their permissions.
sub create_apache_home_directories
{
	my ($conf) = @_;
	
	print "- Creating the apache home directories.\n";
	my @dirs;
	push @dirs, $conf->{path}{apache_home};
	if (not -e $conf->{path}{apache_home})
	{
		print "- Creating: [$conf->{path}{apache_home}].\n";
		mkdir $conf->{path}{apache_home} or die "Failed to create the directory: [$conf->{path}{apache_home}], the error was: $!\n";
	}
	else
	{
		print "- Home already exists: [$conf->{path}{apache_home}].\n";
	}
	foreach my $directory (@{$conf->{directory}{apache_subdirs}})
	{
		my $full_path = "$conf->{path}{apache_home}/$directory";
		push @dirs, $full_path;
		if (not -e $full_path)
		{
			print "- Creating: [$full_path].\n";
			mkdir $full_path or die "Failed to create the directory: [$full_path], the error was: $!\n";
		}
		else
		{
			print "- Already exists: [$full_path].\n";
		}
	}
	
	# Make sure the directory that install manifests will be stored in is available.
	if (not -e $conf->{directory}{apache_manifests})
	{
		print "- Creating: [$conf->{directory}{apache_manifests}].\n";
		mkdir $conf->{directory}{apache_manifests} or die "Failed to create the directory: [$conf->{directory}{apache_manifests}], the error was: $!\n";
	}
	else
	{
		print "- Install manifests directory already exists: [$conf->{directory}{apache_manifests}].\n";
	}
	
	print "- Setting ownership to: [$conf->{sys}{apache_user}:$conf->{sys}{apache_group}].\n";
	my $apache_uid = getpwnam($conf->{sys}{apache_user}); 
	my $apache_gid = getgrnam($conf->{sys}{apache_group});
	my $dir_mode   = 0775;
	if (not $apache_uid)
	{
		print "[ Error ] - Unable to get the User ID for the apache user: [$conf->{sys}{apache_user}]\n";
		print "[ Error ] - Did apache actually install properly?\n";
		exit(15);
	}
	if (not $apache_gid)
	{
		print "[ Error ] - Unable to get the Group ID for the apache group: [$conf->{sys}{apache_group}]\n";
		print "[ Error ] - Did apache actually install properly?\n";
		exit(16);
	}
	chown $apache_uid, $apache_gid, @dirs;
	print "- Setting mode to: [".sprintf("%04o", $dir_mode)."].\n";
	chmod $dir_mode, @dirs;
	
	return(0);
}

# This verifies that this is running on a RHEL 6 (or derivative) OS.
sub verify_os
{
	my ($conf) = @_;
	
	# If the release file doesn't exist, it's most likely not EL.
	print "Checking the operating system to ensure it is compatible.\n";
	if (not -e $conf->{path}{os_release})
	{
		print "[ Error ] - This does not appear to be a RHEL (based) operating system.\n";
		print "[ Error ] - At this time, only RHEL and derivatives version 6.x are supported.\n";
		exit(13);
	}
	
	# Read the release file and dig out the version.
	my $major   = -1;
	my $minor   = -1;
print "- We're on a RHEL (based) OS, good. Checking version.\n";
	open (my $file_handle, "<", $conf->{path}{os_release}) or die "Failed to read: [$conf->{path}{os_release}], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		if ($line =~ /release (\d+)\.(.*)/)
		{
			$major = $1;
			$minor = $2;
			# CentOS uses 'CentOS Linux release 7.0.1406 (Core)', 
			# so I need to parse off the second '.' and whatever 
			# is after it.
			$minor =~ s/\..*$//;
			
			# Some have 'x.y (Final)', this strips that last bit off.
			$minor =~ s/\ \(.*?\)$//;
		}
		if ($line =~ /Red Hat Enterprise Linux Server/)
		{
			$conf->{sys}{is_rhel} = 1;
		}
	}
	close $file_handle;
	
	if ($major == 6)
	{
		# We're ok, but warn if minor is < 5
		if ($minor < 5)
		{
			print "[ Warning ] - This OS appears to be a little old, you are on: [$major.$minor].\n";
			print "[ Warning ] - Upgrading to at least version 6.5 is recommended, though not\n";
			print "[ Warning ] - strictly required. If you encounter issues, please update before\n";
			print "[ Warning ] - before filing a bug. Thank you.\n\n";
			sleep 5;
		}
		else
		{
			print "- Looks good! You're on: [$major.$minor]\n";
		}
	}
	elsif ($major > 6)
	{
		print "[ Error ] - I am sorry, but EL$major is not yet supported.\n";
		print "[ Error ] - Please use RHEL 6.x or similar.\n";
		exit(14);
	}
	else
	{
		print "[ Error ] - I am sorry, but EL$major is not supported.\n";
		print "[ Error ] - Please use RHEL 6.x or similar.\n";
		exit(14);
	}
	
	# If the OS is RHEL proper, see if the OS needs to be activated and do
	# so if the user has passed the --rhn switch.
	if ($conf->{sys}{is_rhel})
	{
		print "- This OS is RHEL proper.\n";
		if (-e $conf->{path}{rhn_file})
		{
			print "- The system appears to already be registered with RHN.\n";
		}
		elsif (($conf->{sys}{rhn_user}) && ($conf->{sys}{rhn_password}))
		{
			### TODO: Escape bash special vars in passwords.
			print "- RHN credentials given. Attempting to register now...\n";
			my $shell_call = "$conf->{executable}{rhnreg_ks} --username '$conf->{sys}{rhn_user}' --password '$conf->{sys}{rhn_password}' --force --profilename '$conf->{sys}{hostname} && $conf->{executable}{'rhn-channel'} --add --user '$conf->{sys}{rhn_user}' --password '$conf->{sys}{rhn_password}' --channel=rhel-x86_64-server-optional-6";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				print "- Output: [$line]\n";
			}
			close $file_handle;
			print "Done.\n\n";
		}
		else
		{
			print "[ Warning ] - This system does not appear to be registered with RHN and no RHN\n";
			print "[ Warning ] - credentials have been given. The install will likely fail!\n";
			sleep 2;
		}
	}
	
	print "Done.\n\n";
	
	return(0);
}

# This looks at the list of installed RPMs, compares them against the list of
# needed RPMs and installs any that are missing.
sub install_packages
{
	my ($conf) = @_;
	
	print "Checking if anything needs to be installed.\n";
	
	# First up, has the 'an-repo' been added?
	configure_an_repo($conf);
	
	# Check for OS updates.
	update_os($conf);
	
	# Get a list of already installed packages.
	get_list_of_installed_packages($conf);
	
	# Install missing packages, if any.
	install_missing_packages($conf);
	
	return(0);
}

# This will compare the list of required packages against the list of installed
# packages and, if any are missing, install them
sub install_missing_packages
{
	my ($conf) = @_;
	
	print "Checking to see if any packages need to be installed.\n";
	my $to_install = "";
	foreach my $package (sort {$a cmp $b} keys %{$conf->{packages}{to_install}})
	{
		# Watch for autovivication...
		if ((exists $conf->{packages}{installed}{$package}) && ($conf->{packages}{installed}{$package} == 1))
		{
			$conf->{packages}{to_install}{$package} = 1;
			print "- Package: [$package] already installed.\n";
		}
		else
		{
			print "- Package: [$package] needs to be installed.\n";
			$to_install .= "$package ";
		}
	}
	print "- Done\n\n";
	
	if ($to_install)
	{
		# Install the packages, then verify they actually installed.
		print "Installing missing packages now. Please be patient.\n";
		#print "[ Note ] - Please be patient! It may appear that nothing is happening for a\n";
		#print "[ Note ] - while. This is likely because of how buffering is handled. If you\n";
		#print "[ Note ] - really think nothing is happening, please open a new terminal and\n";
		#print "[ Note ] - look for activity using 'top' or 'ps aux'.\n";
		my $shell_call = "$conf->{executable}{yum} -y install $to_install";
		print "==============================================================================\n";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			print $_;
		}
		print "==============================================================================\n";
		close $file_handle;
		print "Done.\n\n";
		
		# Verify that everything is installed.
		sleep 5;
		get_list_of_installed_packages($conf);
		print "Verifying that everything is installed now.\n";
		my $missing = 0;
		foreach my $package (sort {$a cmp $b} keys %{$conf->{packages}{to_install}})
		{
			# Watch for autovivication...
			if ((exists $conf->{packages}{installed}{$package}) && ($conf->{packages}{installed}{$package} == 1))
			{
				$conf->{packages}{to_install}{$package} = 1;
				print "- Package: [$package] installed.\n";
			}
			else
			{
				print "[ Error ] - Package: [$package] failed to install!\n";
				$missing = 1;
			}
		}
		# If anything is missing, fail.
		if ($missing)
		{
			print "[ Error ] - Not all required packages installed properly.\n";
			print "[ Error ] - I am sorry, but this is a fatal error.\n";
			print "[ Error ] - If you are on RHEL, is this machine registered?\n";
			print "[ Error ] - If there was a problem accessing the repos, please check the\n";
			print "[ Error ] - network connection and try again.\n\n";
			exit(12);
		}
		else
		{
			print "- All required packages are now installed.\n\n";
		}
	}
	
	return(0);
}

# This updates the OS, if needed.
sub update_os
{
	my ($conf) = @_;
	
	print "Checking for OS updates.\n";
	#print "[ Note ] - Please be patient! It may appear that nothing is happening for a\n";
	#print "[ Note ] - while. This is likely because of how buffering is handled. If you\n";
	#print "[ Note ] - really think nothing is happening, please open a new terminal and\n";
	#print "[ Note ] - look for activity using 'top' or 'ps aux'.\n";
	my $shell_call = "$conf->{executable}{yum} -y update";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	print "==============================================================================\n";
	while(<$file_handle>)
	{
		print $_;
	}
	close $file_handle;
	print "==============================================================================\n";
	print "Done.\n\n";
	
	return(0);
}

# This gets a list of installed packages
sub get_list_of_installed_packages
{
	my ($conf) = @_;
	
	# TODO: Use 'tput cols' to get the user's screen width.
	my $dots = 0;
	print "Getting a list of currently installed packages.\n- ";
	my $shell_call = "$conf->{executable}{yum} list installed";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		next if $line =~ /^Loaded plugins/;
		next if $line =~ /^Loading mirror/;
		next if $line =~ /^Installed Packages/;
		next if $line =~ /^\s/;
		#print "[ Debug ] - line: [$line]\n";
		if ($line =~ /^(.*?)\.(.*?)\s+(.*?)\s+\@/)
		{
			my $package   = $1;
			my $arch      = $2;
			my $version   = $3;
			# NOTE: Someday record the arch and version, but for
			#       now, we don't care.
			$conf->{packages}{installed}{$package} = 1;
			#print "[ Debug ] - a) Package: [$package], arch: [$arch], version: [$version]\n";
			if ($dots > 75)
			{
				print "\n- .";
				$dots = 0;
			}
			else
			{
				print ".";
				$dots++;
			}
		}
		elsif ($line =~ /^(.*?)\.(.*?)\s+(.*)/)
		{
			my $package   = $1;
			my $arch      = $2;
			my $version   = $3;
			$conf->{packages}{installed}{$package} = 1;
			#print "[ Debug ] - b) Package: [$package], arch: [$arch], version: [$version]\n";
			if ($dots > 75)
			{
				print "\n- .";
				$dots = 0;
			}
			else
			{
				print ".";
				$dots++;
			}
		}
		elsif ($line =~ /^(.*?)\.(\S*)$/)
		{
			my $package   = $1;
			my $arch      = $2;
			$conf->{packages}{installed}{$package} = 1;
			#print "[ Debug ] - c) Package: [$package], arch: [$arch]\n";
			if ($dots > 75)
			{
				print "\n- .";
				$dots = 0;
			}
			else
			{
				print ".";
				$dots++;
			}
		}
	}
	close $file_handle;
	print "\nDone!\n\n";
	
	return(0);
}

# This installs the AN!Repo if needed.
sub configure_an_repo
{
	my ($conf) = @_;
	
	if (-e $conf->{path}{an_repo})
	{
		print "- The AN!Repo is already installed.\n";
	}
	else
	{
		# Create the repo
		print "- The AN!Repo hasn't been added yet, adding it now.\n";
		open (my $file_handle, ">", $conf->{path}{an_repo}) or die "Failed to write: [$conf->{path}{an_repo}], the error was: $!\n";
		print $file_handle "[an-repo]\n";
		print $file_handle "name=AN! Repo for Anvil! stuff\n";
		print $file_handle "baseurl=https://alteeve.ca/repo/el6/\n";
		print $file_handle "enabled=1\n";
		print $file_handle "gpgcheck=0\n";
		print $file_handle "protect=1\n";
		close $file_handle;
		
		# No clear yum's cache
		print "- Added. Clearing yum's cache.\n";
		my $shell_call = "$conf->{executable}{yum} clean all";
		open ($file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- output: [$line]\n";
		}
		close $file_handle;
		print "- Done!\n\n";
	}
	
	return(0);
}

# This looks at all NICs and 'ifup's any that are down.
sub start_all_nics
{
	my ($conf) = @_;
	
	print "Making sure all network interfaces are up.\n";
	check_nic_states($conf);
	foreach my $this_iface (sort {$a cmp $b} keys %{$conf->{nic}{by_name}})
	{
		# See if it is up already.
		my $link_state = $conf->{nic}{by_name}{$this_iface}{link_state};
		my $mac        = $conf->{nic}{by_name}{$this_iface}{mac};
		next if $link_state != 2;
		
		# If I am here, the interface is down
		my $nic       = $this_iface;
		my $nic_file = "$conf->{path}{network_configs}/ifcfg-$nic";
		print "- The network interface: [$nic] is down. It must be started for the next stage.\n";
		print "- Checking if: [$nic_file] exists.\n";
		if (not -e $nic_file)
		{
			print "- New device, writing a skeleton config file... ";
			my $shell_call = $nic_file;
			open (my $file_handle, '>', "$shell_call") || die "\nFailed to write: [$shell_call], error was: $!\n";
			print $file_handle "# Generated by: [$THIS_FILE] on: [".get_date($conf)."].\n";
			print $file_handle "# Temporary configuration file for discovered NIC.\n";
			print $file_handle "HWADDR=\"$mac\"\n" if $mac;
			print $file_handle "DEVICE=\"$nic\"\n";
			print $file_handle "BOOTPROTO=\"none\"\n";
			print $file_handle "NM_CONTROLLED=\"no\"\n";
			close $file_handle;
			print "- Done.\n";
		}
		else
		{
			# It exists, edit it if needed.
			print "- Config file exists, changing BOOTPROTO to 'none'.\n";
			my $shell_call = "$conf->{executable}{sed} -i 's/BOOTPROTO=.*/BOOTPROTO=\"none\"/\' $nic_file";
			#print "[ Debug ] - Calling: [$shell_call]\n";
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				# TODO: Should this cause the installer to bail?
				# This should not return anything, but just in case...
				chomp;
				my $line = $_;
				print "[ Warning ] - Unexpected output: [$line]\n";
			}
			close $file_handle;
		}
			
		# Now start the nic.
		print "- Attempting to bring up: [$nic]...\n";
		my $shell_call = "$conf->{executable}{ifup} $nic";
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			next if not $line;
			print "- Output: [$line]\n";
		}
		close $file_handle;
		
		# See that it came up.
		print "- Checking to see if it is up now.\n";
		sleep 2;
		my $is_up   = 0;
		$shell_call = "$conf->{executable}{ip} link show $nic";
		open ($file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			if ($line =~ /UP/)
			{
				$is_up = 1;
				last;
			}
		}
		close $file_handle;
		if ($is_up)
		{
			print "- The interface: [$nic] is now up!\n";
		}
		else
		{
			print "[ Error ] - Unable to bring up the interface: [$nic]!\n";
			print "[ Error ] - Please bring it up manually and try again.\n";
			exit(11);
		}
	}
	print "Done.\n\n";
	
	return(0);
}

# This is a wrapper function that calls the various task-specific functions
# that make the actual changes to the network.
sub reconfigure_network
{
	my ($conf) = @_;
	
	### TODO: Confirm that this is needed, may have to reboot anyway
	# Stop the network.
	#daemon_control($conf, "NetworkManager.service", "stop");
	
	# Write the udev file
	write_udev_persistent_net($conf);
	
	# Remove existing ifcfg-* files and then write the new ones.
	update_network_config_files($conf);
	
	return(0);
}

# This will remove all 'ifcfg-*' (save for 'ifcfg-lo') files and the writes
# the new config files.
sub update_network_config_files
{
	my ($conf) = @_;
	
	# First up, delete the old files.
	print "Deleting old network configuration files:\n"; 
	$conf->{path}{network_configs} =~ s/\/$//g;
	local(*DIRECTORY);
	opendir(DIRECTORY, $conf->{path}{network_configs});
	while(my $file = readdir(DIRECTORY))
	{
		next if $file eq ".";
		next if $file eq "..";
		next if $file eq "ifcfg-lo";
		if ($file =~ /^ifcfg-/)
		{
			my $full_path = "$conf->{path}{network_configs}/$file";
			print "- Deleting file: [$full_path]\n";
			unlink $full_path or die "Unable to delete: [$full_path]. The error was: $!\n";
		}
	}
	print "Done.\n\n";
	print "Writing new network configuration files.\n";
	
	# Now write out the config files.
	# IFN first
	my $ifn_link1_file = "$conf->{path}{network_configs}/ifcfg-ifn-link1";
	print "- IFN Link 1: [$ifn_link1_file]\n";
	my $shell_call = $ifn_link1_file;
	open (my $file_handle, '>', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	print $file_handle "# Generated by: [$THIS_FILE] on: [".get_date($conf)."].\n";
	print $file_handle "# Internet-Facing Network - Link 1\n";
	print $file_handle "DEVICE=\"ifn-link1\"\n";
	print $file_handle "BOOTPROTO=\"static\"\n";
	print $file_handle "NM_CONTROLLED=\"no\"\n";
	print $file_handle "IPADDR=\"$conf->{network}{ifn}{ip}\"\n";
	print $file_handle "NETMASK=\"$conf->{network}{ifn}{netmask}\"\n";
	print $file_handle "GATEWAY=\"$conf->{network}{ifn}{gateway}\"\n";
	print $file_handle "DNS1=\"$conf->{network}{ifn}{dns1}\"\n";
	print $file_handle "DNS2=\"$conf->{network}{ifn}{dns2}\"\n";
	print $file_handle "DEFROUTE=\"yes\"\n";
	close $file_handle;
	
	# Now the BCN
	my $bcn_link1_file = "$conf->{path}{network_configs}/ifcfg-bcn-link1";
	print "- BCN Link 1: [$bcn_link1_file]\n";
	$shell_call = $bcn_link1_file;
	open ($file_handle, '>', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	print $file_handle "# Generated by: [$THIS_FILE] on: [".get_date($conf)."].\n";
	print $file_handle "# Back-Channel Network - Link 1\n";
	print $file_handle "DEVICE=\"bcn-link1\"\n";
	print $file_handle "BOOTPROTO=\"static\"\n";
	print $file_handle "NM_CONTROLLED=\"no\"\n";
	print $file_handle "IPADDR=\"$conf->{network}{bcn}{ip}\"\n";
	print $file_handle "NETMASK=\"$conf->{network}{bcn}{netmask}\"\n";
	print $file_handle "DEFROUTE=\"no\"\n";
	close $file_handle;
	print "Done.\n\n";
	
	return(0);
}

# This returns the current date and time in 'YYYY/MM/DD HH:MM:SS' format. It
# always uses 24-hour time and it zero-pads single digits.
sub get_date
{
	my ($conf) = @_;
	my $date = "";
	
	# This doesn't support offsets or other advanced features.
	my %time;
	($time{sec}, $time{min}, $time{hour}, $time{mday}, $time{mon}, $time{year}, $time{wday}, $time{yday}, $time{isdst}) = localtime();
	
	# Increment the month by one.
	$time{mon}++;
	
	# 24h time.
	$time{pad_hour} = sprintf("%02d", $time{hour});
	$time{pad_min}  = sprintf("%02d", $time{min});
	$time{pad_sec}  = sprintf("%02d", $time{sec});
	$time{year}     = ($time{year} + 1900);
	$time{pad_mon}  = sprintf("%02d", $time{mon});
	$time{pad_mday} = sprintf("%02d", $time{mday});
	$time{mon}++;
	
	$date = "$time{year}/$time{pad_mon}/$time{pad_mday} $time{pad_hour}:$time{pad_min}:$time{pad_sec}";
	
	return($date);
}

# This writes out the udev 70-persistent-net.rules file.
sub write_udev_persistent_net
{
	my ($conf) = @_;
	
	my $shell_call = "$conf->{path}{persistent_net}";
	print "Writing the new udev rules file: [$conf->{path}{persistent_net}]\n";
	open (my $file_handle, '>', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	print $file_handle "# Generated by: [$THIS_FILE] on: [".get_date($conf)."].\n";
	foreach my $nic (@{$conf->{nics}})
	{
		my $say_nic = $nic;
		if    ($nic =~ /^bcn-link(\d)/) { $say_nic = "Back-Channel Network, Link $1" }
		elsif ($nic =~ /^ifn-link(\d)/) { $say_nic = "Internet-Facing Network, Link $1" }
		my $this_mac = $conf->{nic}{name}{$nic};
		if (not $this_mac)
		{
			print "[ Error ] - There seems to be a problem.\n";
			print "[ Error ] - Desired NIC: [$nic] doesn't have a referenced MAC address!\n";
			print "[ Error ] - Exiting.\n";
			exit(1);
		}
		print $file_handle "# $say_nic\n";
		print $file_handle "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"$this_mac\", NAME=\"$nic\"\n\n";
	}
	close $file_handle;
	print "Done.\n\n";
	
	return(0);
}

# This starts or stops the specified systemd service.
sub daemon_control
{
	my ($conf, $service, $task) = @_;
	
	my $message    = "";
# 	my $shell_call = "$conf->{executable}{systemctl} $task $service";
# 	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
# 	while(<$file_handle>)
# 	{
# 		chomp;
# 		my $line = $_;
# 		$message .= "$line\n";
# 		print "- Shell output: [$line]\n";
# 	}
# 	close $file_handle;
	
	return($message);
}

# This backs up the udev (if it exists) and network files before making any
# actual changes to the system.
sub backup_original_files
{
	my ($conf) = @_;
	
	print "Backing up some network related system files.\n";
	if (not $conf->{path}{backups})
	{
		print "[ Error ] - The backup directory is not defined!\n";
		print "[ Error ] - Unable to safely proceed, exiting.\n";
		exit(5);
	}
	elsif (not -e $conf->{path}{backups})
	{
		print "- The backup directory: [$conf->{path}{backups}] doesn't exist, creting it.\n";
		mkdir $conf->{path}{backups} or die warn "[ Warning ] - Failed to create the directory: [$conf->{path}{backups}].\n[ Warning ] - The error was: $!\n";
		if (not -e $conf->{path}{backups})
		{
			print "[ Error ] - The backup directory was not created.\n";
			print "[ Error ] - Unable to safely proceed, exiting.\n";
			exit(6);
		}
		else
		{
			print "- Backup directory successfully created.\n";
		}
	}
	
	# If there is already a backup created, skip it as we're probably being
	# run a second (of thirteenth) time.
	print "- Backing up: [$conf->{path}{persistent_net}]\n";
	if (-e "$conf->{path}{backups}/70-persistent-net.rules")
	{
		print "- Previous backup exists, skipping.\n";
	}
	else
	{
		# Backup '70-persistent-net.rules' if it exists.
		if (-e $conf->{path}{persistent_net})
		{
			print "- It exists, backing it up.\n";
			backup_file($conf, $conf->{path}{persistent_net});
		}
		else
		{
			print "- Doesn't exist, skipping.\n";
		}
	}
	
	# Backup the '/etc/sysconfig/network-scripts' directory.
	print "- Backing up: [$conf->{path}{network_configs}]\n";
	if (-e "$conf->{path}{backups}/network-scripts")
	{
		print "- Previous backup exists, skipping.\n";
	}
	else
	{
		if (-e $conf->{path}{network_configs})
		{
			# No need to say it exists
			backup_file($conf, $conf->{path}{network_configs});
		}
		else
		{
			# Ok, the user has bigger problems
			print "[ Error ] - The network configuration directory was not found!\n";
			print "[ Error ] - This should not be possible.\n";
			print "[ Error ] - Please check the internal path::network_configs value.\n";
			exit(8);
		}
	}
	print "Done.\n\n";
	
	return(0);
}

# This backups up a file (or directory) to the backups directory. It is
# expected that the existance of the source and backup directories are done.
sub backup_file
{
	my ($conf, $file) = @_;
	
	if (not $file)
	{
		print "[ Error ] - The backup function was called, but no source file was given.\n";
		print "[ Error ] - This is likely a program error, exiting.\n";
		exit(7);
	}
	
	# I want the source, if it is a directory, to not have a trailing
	# slash. Conversly, I want the backup directory to have a trailing
	# slash, if it doesn't have it already.
	$file =~ s/\/$//g;
	$conf->{path}{backups} .= "/" if $conf->{path}{backups} !~ /\/$/;
	
	my $shell_call = "$conf->{executable}{cp} -ab $file $conf->{path}{backups}";
	print "- Copying: [$file] to: [$conf->{path}{backups}]\n";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		print "- Shell output: [$line]\n";
	}
	close $file_handle;
	
	### TODO: Verify the backed up file exists in the backup directory.
	#print "- Done\n";
	
	return(0);
}

# This breaks out the command-line switches and varifies that their values are
# (more or less) sane
sub sanity_check_switches
{
	my ($conf) = @_;
	
	# Something has been set for all values, sanity check them.
	# This will fail out if set to '1' once all sanity checking is done.
	my $bad_value = 0;

	# The network is a little tricker
	if (($conf->{switches}{h}) or ($conf->{switches}{help}) or ($conf->{switches}{'?'}))
	{
		print_usage($conf);
		exit(0);
	}
	if (($conf->{switches}{b}) && ($conf->{switches}{i}))
	{
		# Both defined, sanity check them.
		($bad_value) = sanity_check_network($conf, $bad_value);
	}
	elsif ((not $conf->{switches}{b}) && (not $conf->{switches}{i}))
	{
		print "[ Note ] - No network details given. Skipping Network config!\n";
		$conf->{sys}{skip_network} = 1;
	}
	elsif (not $conf->{switches}{b})
	{
		print "[ Error ] - The IFN settings were given, but not the BCN. I am sorry but both\n";
		print "[ Error ] - or neither network must be defined at this time.\n";
		$bad_value = 1;
	}
	elsif (not $conf->{switches}{i})
	{
		print "[ Error ] - The BCN settings were given, but not the IFN. I am sorry but both\n";
		print "[ Error ] - or neither network must be defined at this time.\n";
		$bad_value = 1;
	}
	
	# Check the DHCP/PXE stuff
	### TODO: Add some logic to make sure the DHCP lease range matches
	###       either the BCN or IFN subnet
	if ($conf->{switches}{p})
	{
		($bad_value) = sanity_check_dhcp($conf, $bad_value);
	}
	else
	{
		print "[ Error ] - The DHCP lease range must be defined for PXE-based installs to\n";
		print "[ Error ] - work. Note that the DHCP server will *only* run when enabled via\n";
		print "[ Error ] - the Striker dashboard. It will never start on boot.\n";
		$bad_value = 1;
	}

	# Check the hostname
	if ($conf->{switches}{n})
	{
		# Make sure the hostname is sane.
		$conf->{sys}{hostname} = $conf->{switches}{n};
		($bad_value) = sanity_check_hostname($conf, $conf->{switches}{n}, 0, $bad_value);
	}
	else
	{
		print "[ Note ] - No hostname given. Will not change it.\n";
		$conf->{sys}{skip_hostname} = 1;
	}
	
	# See if they set an owner name
	if (not $conf->{switches}{c})
	{
		print "[ Note ] - No customer/owner name given, will use: [$conf->{sys}{customer}]\n";
		# TODO: check to see if apache limits the names allowed.
	}
	else
	{
		# TODO: Does this need to be sanitized to prevent injection of
		#       malicious code? If so, how? Escape all quotes?
		$conf->{sys}{customer} = $conf->{switches}{c};
	}
	
	# See if they've asked for a specific version.
	if (not $conf->{switches}{d})
	{
		print "[ Note ] - No specific version requested, will install: [$conf->{sys}{stable_version}]\n";
		$conf->{sys}{install_version} = $conf->{sys}{stable_version};
		$conf->{url}{striker}         =~ s/#!striker_version!#/$conf->{sys}{install_version}/;
		$conf->{sys}{tarball_dir}     =~ s/#!striker_version!#/$conf->{sys}{install_version}/;
		# TODO: check to see if the requested version exists
	}
	else
	{
		# Make sure the request is sane. First check for a supported
		# version:
		$conf->{sys}{install_version} =  $conf->{switches}{d};
		$conf->{url}{striker}         =~ s/#!striker_version!#/$conf->{sys}{install_version}/;
		$conf->{sys}{tarball_dir}     =~ s/#!striker_version!#/$conf->{sys}{install_version}/;
		if (($conf->{switches}{d} eq "1.1.4") || ($conf->{switches}{d} eq "1.1.5"))
		{
			print "[ Note ] - Will install version: [$conf->{switches}{d}]\n";
		}
		elsif ($conf->{switches}{d} eq "git")
		{
			print "[ Note ] - Will install the latest version from git.\n";
			print "\n ##############################################################################\n";
			print " # [ Warning ] - Please do NOT use a git version in production!               #\n";
			print " ##############################################################################\n\n";
			sleep 5;
		}
		else
		{
			print "[ Error ] - Unsupported Striker version requested!\n";
			print "[ Error ] - Is this installer too old?\n";
			$bad_value = 1;
		}
	}
	
	# With mail, both or neither must be provided (XNOR y'all!)
	if (($conf->{switches}{e}) && ($conf->{switches}{m}))
	{
		# Validate the mail domain
		($bad_value) = sanity_check_hostname($conf, $conf->{switches}{m}, 1, $bad_value);
		# TODO: Validate the email local user part. Note that a lot 
		#       more flexibility is allowed here than in the domain, 
		#       including UTF-8. See:
		#       https://en.wikipedia.org/wiki/Email_address#Local_part
		$conf->{sys}{mail_server}   = $conf->{switches}{m};
		if ($conf->{switches}{e} =~ /^(.*?):(.*)$/)
		{
			$conf->{sys}{mail_user}     = $1;
			$conf->{sys}{mail_password} = $2;
		}
		else
		{
			print "[ Error ] - The email switch needs to be in the format '<email>:<password>'\n";
			$bad_value = 1;
		}
	}
	elsif ((not $conf->{switches}{e}) && (not $conf->{switches}{m}))
	{
		print "[ Note ]    - Mail server information not provided.\n";
		print "[ Warning ] - If mail sending was not previously configured, you may encounter\n";
		print "[ Warning ] - problems later!\n";
		$conf->{sys}{skip_mail} = 1;
	}
	elsif (not $conf->{switches}{e})
	{
		print "[ Error ] - A mail server alone can not be specified. Please specify\n";
		print "[ Error ] - credentials to use when logging into: [$conf->{switches}{m}].\n";
		$bad_value = 1;
	}
	elsif (not $conf->{switches}{m})
	{
		print "[ Error ] - Credentials for logging into a mail server were given but the mail\n";
		print "[ Error ] - server address itself was not.\n";
		$bad_value = 1;
	}
	
	# Check to see if either the htpasswd file exists or the user is giving us a user now.
	if ((not -e $conf->{path}{apache_htpasswd}) && (not $conf->{switches}{u}))
	{
		print "[ Error ] - No apache credentials were set, and: [$conf->{path}{apache_htpasswd}]\n";
		print "[ Error ] - doesn't exist. This is required for Striker to work securely.\n";
		$bad_value = 1;
	}
	elsif ($conf->{switches}{u})
	{
		if ($conf->{switches}{u} =~ /^(.*?):(.*)$/)
		{
			$conf->{sys}{striker_user} = $1;
			$conf->{sys}{striker_pass} = $2;
		}
		else
		{
			print "[ Error ] - The Striker user name and password were not specified correctly.\n";
			print "[ Error ] - Please use '-u \"<user>:<password>\".\n";
			$bad_value = 1;
		}
	}
	
	# Make sure the --rhn' switch parses, if set.
	if ($conf->{switches}{rhn})
	{
		if ($conf->{switches}{rhn} =~ /user=(.*)/)
		{
			$conf->{sys}{rhn_user} =  $1;
			$conf->{sys}{rhn_user} =~ s/,password=.*$//;
		}
		if ($conf->{switches}{rhn} =~ /password=(.*)/)
		{
			$conf->{sys}{rhn_password} =  $1;
			$conf->{sys}{rhn_password} =~ s/,user=.*$//;
		}
	}
	
	print "Sanity checks complete.\n\n";
	
	return($bad_value);
}

# This checks the DHCP lease start and end range.
sub sanity_check_dhcp
{
	my ($conf, $bad_value) = @_;
	
	$conf->{switches}{lease_start} = "";
	$conf->{switches}{lease_end}   = "";
	if ($conf->{switches}{p} =~ /lease-start=(\d+\.\d+\.\d+\.\d+)/)
	{
		$conf->{switches}{lease_start} = $1;
	}
	if ($conf->{switches}{p} =~ /lease-end=(\d+\.\d+\.\d+\.\d+)/)
	{
		$conf->{switches}{lease_end} = $2;
	}
	
	if ((not $conf->{switches}{lease_start}) && (not $conf->{switches}{lease_end}))
	{
		print "[ Error ] - You need to specify the start and end IP lease range as\n";
		print "[ Error ] - '-p lease-start=<start_ip>,lease-end=<end_ip>'\n";
		$bad_value = 1;
	}
	elsif ((not $conf->{switches}{lease_start}) || (not $conf->{switches}{lease_end}))
	{
		print "[ Error ] - Both 'lease-start=<start_ip>,lease-end=<end_ip>' are needed with\n";
		print "[ Error ] - the '-p' switch.\n";
		$bad_value = 1;
	}
	
	# Lastly, make sure the start and end range are in the same subnet.
	### TODO: Make this work across all subnet/CIDR ranges
	my $start_prefix = "";
	my $end_prefix   = "";
	if ($conf->{network}{bcn}{netmask} eq "255.255.0.0")
	{
		$start_prefix = ($conf->{switches}{lease_start} =~ /^(\d+\.\d+\.)/)[0];
		$end_prefix   = ($conf->{switches}{lease_end}   =~ /^(\d+\.\d+\.)/)[0];
	}
	elsif ($conf->{network}{bcn}{netmask} eq "255.255.255.0")
	{
		$start_prefix = ($conf->{switches}{lease_start} =~ /^(\d+\.\d+\.\d+\.)/)[0];
		$end_prefix   = ($conf->{switches}{lease_end}   =~ /^(\d+\.\d+\.\d+\.)/)[0];
	}
	if ((not $start_prefix) && (not $end_prefix))
	{
		print "[ Warning ] - Unable to check if the start and end IPs are in the same subnet.\n";
	}
	elsif ($start_prefix ne $end_prefix)
	{
		print "[ Error ] - The DHCP lease start: [$conf->{switches}{lease_start}] and end: [$conf->{switches}{lease_end}]\n";
		print "[ Error ] - IPs do not appear to be in the same subnet: [xxx.xxx.xxx.xxx].\n";
		print "[ Note ]  - The BCN subnet is used.\n";
		$bad_value = 1;
	}
	
	return($bad_value);
}

# This sanity-checks the host name.
sub sanity_check_hostname
{
	my ($conf, $hostname, $port_allowed, $bad_value) = @_;
	
	my $port;
	if ($hostname =~ /(.*?):(\d+)$/)
	{
		$hostname = $1;
		$port     = $2;
		
		if (not $port_allowed)
		{
			print "[ Error ] - A port number was set for: [$hostname]\n";
			print "[ Error ] - but it is not allowed here.\n";
			$bad_value = 1;
		}
		elsif (($port < 1) || ($port > 65535))
		{
			print "[ Error ] - The port number: [$port] is out of range!\n";
			print "[ Error ] - Port numbers must be between 1 and 65535.\n";
			$bad_value = 1;
		}
	}
	
	if ($hostname =~ /\.\./)
	{
		print "[ Error ] - The hostname: [$hostname] has multiple periods!\n";
		$bad_value = 1;
	}
	if ($hostname =~ /^\./)
	{
		print "[ Error ] - The hostname: [$hostname] starts with a period!\n";
		$bad_value = 1;
	}
	if ($hostname =~ /\.$/)
	{
		print "[ Error ] - The hostname: [$hostname] ends with a period!\n";
		$bad_value = 1;
	}
	# Now loop through the hostname's elements and make sure they're sane.
	foreach my $name (split/\./, $hostname)
	{
		if (not $name)
		{
			print "[ Error ] - The hostname: [$hostname] appears to have an empty element!\n";
			print "[ Error ] - This might be a program error.\n";
			$bad_value = 1;
		}
		if (length($name) > 255)
		{
			print "[ Error ] - The hostname: [$hostname]'s section: [$name] is too long!\n";
			$bad_value = 1;
		}
		if ($name =~ /[^0-9a-zA-Z\-]/)
		{
			print "[ Error ] - The hostname: [$hostname]'s section: [$name] contains an illegal character!\n";
			print "[ Error ] - only alpha-numeric and the '-' character are allowed\n";
			$bad_value = 1;
		}
	}
	
	return($bad_value);
}

# This sanity checks the network settings passed by the user.
sub sanity_check_network
{
	my ($conf, $bad_value) = @_;
	
	### Now sanity check passed values
	# First up, the BCN
	if ($conf->{switches}{b} =~ /^(.*?)\/(.*)$/)
	{
		my $ip      = $1;
		my $netmask = $2;

		### Verify sanity
		# IP address
		$ip = validate_ip_address($conf, $ip);
		if ($ip eq "#!INVALID!#")
		{
			print "[ Error ] - The specified BCN IP address is not valid.\n";
			$bad_value = 1;
		}
		else
		{
			$conf->{network}{bcn}{ip} = $ip;
		}
		
		# Netmask
		if ($netmask =~ /^\d{1,2}$/)
		{
			# Convert from CIDR to dotted-decimal
			$netmask = convert_cidr_to_dotted_decimal($conf, $netmask);
		}
		else
		{
			$netmask = validate_ip_address($conf, $netmask);
		}
		if ($netmask eq "#!INVALID!#")
		{
			print "[ Error ] - The specified BCN netmask value is not valid.\n";
			$bad_value = 1;
		}
		else
		{
			$conf->{network}{bcn}{netmask} = $netmask;
		}
	}
	else
	{
		print "[ Error ] - The specified BCN IP address and netmask are malformed.\n";
		$bad_value = 1;
	}

	# Next is the IFN, which is a little more complicated.
	if ($conf->{switches}{i} =~ /^(.*?)\/(.*)$/)
	{
		my $ip      = $1;
		my $netmask = $2;
		my $gateway = "";
		my $dns1    = "";
		my $dns2    = "";
		
		# The netmask should have ',dg=X' and possibly 'dns[12]=[YZ]',
		# so pull those out.
		#print "$THIS_FILE ".__LINE__."; ip: [$ip], netmask: [$netmask]\n";
		if ($netmask =~ /,dg=/)
		{
			# Good, strip it out.
			if ($netmask =~ /,dg=(.*?),/)
			{
				$gateway = $1;
				#print "$THIS_FILE ".__LINE__."; gateway: [$gateway]\n";
			}
			else
			{
				$gateway = ($netmask =~ /,dg=(.*)/)[0];
				#print "$THIS_FILE ".__LINE__."; gateway: [$gateway]\n";
			}
		}
		
		# Now the nameservers.
		if ($netmask =~ /,dns1=/)
		{
			# Good, strip it out.
			if ($netmask =~ /,dns1=(.*?),/)
			{
				$dns1 = $1;
				#print "$THIS_FILE ".__LINE__."; dns1: [$dns1]\n";
			}
			else
			{
				$dns1 = ($netmask =~ /,dns1=(.*)/)[0];
				#print "$THIS_FILE ".__LINE__."; dns1: [$dns1]\n";
			}
		}
		if ($netmask =~ /,dns2=/)
		{
			# Good, strip it out.
			if ($netmask =~ /,dns2=(.*?),/)
			{
				$dns2 = $1;
				#print "$THIS_FILE ".__LINE__."; dns2: [$dns2]\n";
			}
			else
			{
				$dns2 = ($netmask =~ /,dns2=(.*)/)[0];
				#print "$THIS_FILE ".__LINE__."; dns2: [$dns2]\n";
			}
		}
		
		# Now delete everything from the netmask after the ','
		$netmask =~ s/,.*$//;
		#print "$THIS_FILE ".__LINE__."; netmask: [$netmask]\n";

		### Verify sanity
		# IP address
		$ip = validate_ip_address($conf, $ip);
		if ($ip eq "#!INVALID!#")
		{
			print "[ Error ] - The specified IFN IP address is not valid.\n";
			$bad_value = 1;
		}
		else
		{
			$conf->{network}{ifn}{ip} = $ip;
		}
		
		# Netmask
		if ($netmask =~ /^\d{1,2}$/)
		{
			# Convert from CIDR to dotted-decimal
			$netmask = convert_cidr_to_dotted_decimal($conf, $netmask);
		}
		else
		{
			$netmask = validate_ip_address($conf, $netmask);
		}
		if ($netmask eq "#!INVALID!#")
		{
			print "[ Error ] - The specified IFN netmask value is not valid.\n";
			$bad_value = 1;
		}
		else
		{
			$conf->{network}{ifn}{netmask} = $netmask;
		}
		
		# Gateway
		#print "$THIS_FILE ".__LINE__."; gateway: [$gateway]\n";
		if ($gateway)
		{
			$gateway = validate_ip_address($conf, $gateway);
			#print "$THIS_FILE ".__LINE__."; gateway: [$gateway]\n";
			if ($gateway eq "#!INVALID!#")
			{
				print "[ Error ] - The specified IFN gateway value is not valid.\n";
				$bad_value = 1;
			}
			else
			{
				$conf->{network}{ifn}{gateway} = $gateway;
				#print "$THIS_FILE ".__LINE__."; network::ifn::gateway: [$conf->{network}{ifn}{gateway}]\n";
			}
		}
		else
		{
			print "[ Error ] - The IFN gateway is not specified.\n";
			$bad_value = 1;
		}
		
		# DNS 1 and 2, if defined.
		if ($dns1)
		{
			$dns1 = validate_ip_address($conf, $dns1);
			if ($dns1 eq "#!INVALID!#")
			{
				print "[ Error ] - The specified IFN dns1 value is not valid.\n";
				$bad_value = 1;
			}
			else
			{
				$conf->{network}{ifn}{dns1} = $dns1;
			}
		}
		if ($dns2)
		{
			$dns2 = validate_ip_address($conf, $dns2);
			if ($dns2 eq "#!INVALID!#")
			{
				print "[ Error ] - The specified IFN dns2 value is not valid.\n";
				$bad_value = 1;
			}
			else
			{
				$conf->{network}{ifn}{dns2} = $dns2;
			}
		}
	}
	else
	{
		print "[ Error ] - The specified IFN IP address and netmask are malformed.\n";
		$bad_value = 1;
	}
	
	return($bad_value);
}

# This validates a string as being an IPv4 address in dotted-decimal notation.
sub validate_ip_address
{
	my ($conf, $ip) = @_;

	if ($ip =~ /(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/)
	{
		my $first_octal  = $1;
		my $second_octal = $2;
		my $third_octal  = $3;
		my $fourth_octal = $4;
		# First octal has to be >= 1. The rest can be 0.
		if (($first_octal < 1)  || ($first_octal > 255)  ||
		    ($second_octal < 0) || ($second_octal > 255) ||
		    ($third_octal < 0)  || ($third_octal > 255)  ||
		    ($fourth_octal < 0) || ($fourth_octal > 255))
		{
			$ip = "#!INVALID!#";
		}
	}
	else
	{
		# Not even formatted properl.
		$ip = "#!INVALID!#";
	}

	return($ip);
}

# This takes an integer and, if it is a valid CIDR range, returns the 
# dotted-decimal equivalent. If it's not, it returns '#!INVALID!#'.
sub convert_cidr_to_dotted_decimal
{
	my ($conf, $netmask) = @_;
	
	if ($netmask =~ /^\d{1,2}$/)
	{
		# Make sure it's a (useful) CIDR
		if (($netmask >= 1) && ($netmask <= 29))
		{
			# Yes, I know that technically '0' and '30-32' are 
			# valid, but not in our case.
			if    ($netmask == 1)  { $netmask = "128.0.0.0"; }
			elsif ($netmask == 2)  { $netmask = "192.0.0.0"; }
			elsif ($netmask == 3)  { $netmask = "224.0.0.0"; }
			elsif ($netmask == 4)  { $netmask = "240.0.0.0"; }
			elsif ($netmask == 5)  { $netmask = "248.0.0.0"; }
			elsif ($netmask == 6)  { $netmask = "252.0.0.0"; }
			elsif ($netmask == 7)  { $netmask = "254.0.0.0"; }
			elsif ($netmask == 8)  { $netmask = "255.0.0.0"; }
			elsif ($netmask == 9)  { $netmask = "255.128.0.0"; }
			elsif ($netmask == 10) { $netmask = "255.192.0.0"; }
			elsif ($netmask == 11) { $netmask = "255.224.0.0"; }
			elsif ($netmask == 12) { $netmask = "255.240.0.0"; }
			elsif ($netmask == 13) { $netmask = "255.248.0.0"; }
			elsif ($netmask == 14) { $netmask = "255.252.0.0"; }
			elsif ($netmask == 15) { $netmask = "255.254.0.0"; }
			elsif ($netmask == 16) { $netmask = "255.255.0.0"; }
			elsif ($netmask == 17) { $netmask = "255.255.128.0"; }
			elsif ($netmask == 18) { $netmask = "255.255.192.0"; }
			elsif ($netmask == 19) { $netmask = "255.255.224.0"; }
			elsif ($netmask == 20) { $netmask = "255.255.240.0"; }
			elsif ($netmask == 21) { $netmask = "255.255.248.0"; }
			elsif ($netmask == 22) { $netmask = "255.255.252.0"; }
			elsif ($netmask == 23) { $netmask = "255.255.254.0"; }
			elsif ($netmask == 24) { $netmask = "255.255.255.0"; }
			elsif ($netmask == 25) { $netmask = "255.255.255.128"; }
			elsif ($netmask == 26) { $netmask = "255.255.255.192"; }
			elsif ($netmask == 27) { $netmask = "255.255.255.224"; }
			elsif ($netmask == 28) { $netmask = "255.255.255.240"; }
			elsif ($netmask == 29) { $netmask = "255.255.255.248"; }
			else
			{
				# This should never be hit.
				$netmask = "#!INVALID!#";
			}
		}
		else
		{
			$netmask = "#!INVALID!#";
		}
	}
	
	return($netmask);
}

# Print the usage information.
sub print_usage
{
	my ($conf) = @_;
	
	my $help = q|
 -=] Striker installer

DESCRIPTION

This program installs and configures Striker, the Anvil! dashboard, on an
almost minimal EL6 install.


SWITCHES

 -b <ip_address/netmask>
	
	This sets the IP address and subnet to be assigned to the Back-Channel
	Network interface.

 -c <customer/owner>

	This sets the name of the customer/owner of the dashboard. This is used
	by apache at the top of the input box when asking the user for their 
	credentials. If this is not set, "Striker Dashboard" will be used alone.

 --centos-iso <local path or URL>

	This is the local path or URL of the ISO to download for setting up the
	CentOS PXE server installer options. If this is set to 'none', CentOS
	will not be configured.

 -d <version>

	This tells the installer what version of Striker dashboard to install.
	The default is to download the latest stable version. If set to 'git',
	the latest version in github will be installed. You probably don't want
	this unless you're a developer.

 -e <user:password>

	This is the email address user and password to use when logging in to
	the mail server. This information will be recorded in postfix's
	/etc/postfix/relay_password file.

 -h, -?, --help

	Show this dialoge and exit.

 -i <ip_address/netmask>,dg=<ip_address>[,dns1=<ip_address>,dns2=<ip_address>]

	This sets the IP address and subnet to be assigned to the 
	Internet-Facing Network interface. Unlike -b switch, this switch
	requires a default gateway be specified after the IP address via:

	dg=<ip_address>
	
		IPv4 address of the default gateway.

	Optionally, one or two DNS servers may be specified via:
	
	dns1=<ip_address>
	dns2=<ip_address>

		IPv4 addresses of the first and/or secondary DNS server. If
		these are not set, dns1 will default to 8.8.8.8 and dns2 will
		default to 8.8.4.4

 -m <mail server:port>

	This sets the mail server and port to use for sending email. If no port
	is set, 587 will be used. This information will be recorded in
	postfix's /etc/postfix/relay_password file.

 -n <hostname>

	This sets the host name of the Striker dashboard.

 -p lease-start=<start_ip>,lease-end=<end_ip>
 
	This sets the DHCP range that this Striker dashboard will offer IPs on
	for new machines being installed off of the local PXE server. If set to
	'none', PXE will not be configured.

	NOTE: This lease range must be in the BCN subet. We do not want to
	      interfere with real DHCP servers on the IFN!

 --rhel-iso <local path or URL>

	This is the local path or URL of the ISO to download for setting up the
	Red Hat Enterprise Linux PXE server installer options. If this is set
	to 'none', RHEL will not be configured.

 --rhn user=foo,password=secret

	When installing on a RHEL server, these credentials can be passed to
	add the machine to yout RHN account. If you do not pass this and if
	your machine is not already activated, the install will fail.

 -u <striker user:password>

	This is the user name and password to set for Striker. This will be
	used in apache's htpasswd authentication and will be stored in the
|;
	$help .= "	$conf->{path}{apache_htpasswd} file.\n";
	$help .= q|

	NOTE: This also sets the 'root' user's password on the striker
	      appliance! 
	
NOTE: that all IP addresses must be IPv4 in dotted-decimal notation. The
netmask can be in CIDR or dotted-decimal notation. Do not leave a space
between the IP address and netmask


EXAMPLE

Normal install, downloading ISOs from local web server:

 ./striker-installer -c "Alteeve's Niche\!" \
                  -e "foo@alteeve.ca:secret password" \
                  -m mail.alteeve.ca:587 \
                  -n an-m01.alteeve.ca \
                  -u "admin:secret password" \
                  -p lease-start=10.20.10.200,lease-end=10.20.10.210 \
                  --centos-iso http://10.255.255.254/c6/x86_64/iso/CentOS-6.6-x86_64-bin-DVD1.iso \
                  --rhel-iso http://10.255.255.254/rhel6/x86_64/iso/rhel-server-6.6-x86_64-dvd.iso \
                  -b 10.20.4.1/16 \
                  -i 10.255.4.1/16,dg=10.255.255.254,dns1=8.8.8.8,dns2=8.8.4.4

Developer install, using local copies of ISOs:

 ./striker-installer -c "Alteeve's Niche\!" \
                  -e "foo@alteeve.ca:secret password" \
                  -m mail.alteeve.ca:587 \
                  -n an-m01.alteeve.ca \
                  -d git \
                  -u "admin:secret password" \
                  -p lease-start=10.20.10.200,lease-end=10.20.10.210 \
                  --centos-iso ./iso/CentOS-6.6-x86_64-bin-DVD1.iso \
                  --rhel-iso ./iso/rhel-server-6.6-x86_64-dvd.iso \
                  -b 10.20.4.1/16 \
                  -i 10.255.4.1/16,dg=10.255.255.254,dns1=8.8.8.8,dns2=8.8.4.4

Install without configuring the network or PXE server:

 ./striker-installer -c "Alteeve's Niche\!" \
                  -e "foo@alteeve.ca:secret password" \
                  -m mail.alteeve.ca:587 \
                  -n an-m01.alteeve.ca \
                  -p none \
                  -u "admin:secret password"

Note: As with any bash call, you must escape '!' characters with '\!'.

                  
SUPPORT

https://alteeve.ca/w/Support

							      Alteeve's Niche!
|;
	open (my $file_handle, ">", "/tmp/striker-installer-help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system("/usr/bin/less /tmp/striker-installer-help");

	return(0);
}

# This collects the command line switches
sub get_switches
{
	my ($conf) = @_;
	
	my $last_argument = "";
	foreach my $argument (@ARGV)
	{
		if ($last_argument eq "raw")
		{
			# Don't process anything.
			$conf->{switches}{raw} .= " $argument";
		}
		elsif ($argument =~ /^-/)
		{
			# If the argument is just '--', appeand everything
			# after it to 'raw'.
			$conf->{sys}{switch_count}++;
			if ($argument eq "--")
			{
				$last_argument         = "raw";
				$conf->{switches}{raw} = "";
			}
			else
			{
				($last_argument) = ($argument =~ /^-{1,2}(.*)/)[0];
				if ($last_argument =~ /=/)
				{
					# Break up the variable/value.
					($last_argument, my $value) = (split /=/, $last_argument, 2);
					$conf->{switches}{$last_argument} = $value;
				}
				else
				{
					$conf->{switches}{$last_argument} = "#!SET!#";
				}
			}
		}
		else
		{
			if ($last_argument)
			{
				$conf->{switches}{$last_argument} = $argument;
				$last_argument                    = "";
			}
			else
			{
				# Got a value without an argument.
				$conf->{switches}{error} = 1;
			}
		}
	}
	# Clean up the initial space added to 'raw'.
	if ($conf->{switches}{raw})
	{
		$conf->{switches}{raw} =~ s/^ //;
	}
	
	# Debug
	#foreach my $variable (sort {$a cmp $b} keys %{$conf->{switches}}) { print "Variable: [$variable]\t-> value: [$conf->{switches}{$variable}]\n"; } exit;
	
	return(0);
}

# This asks the user to unplug (and plug back in) NICs to identify which
# physical interface they want to use for a given role.
sub select_nics
{
	my ($conf) = @_;

	print "-=] Configuring network to enable access to Anvil! systems.\n\n";
	print "Beginning NIC identification...\n";
	foreach my $nic (@{$conf->{nics}})
	{
		my $plug_in_message_printed = 0;
		while (my $down_links = check_nic_states($conf))
		{
			if (not $plug_in_message_printed)
			{
				print "- Please plug in all network cables to proceed.\n";
				$plug_in_message_printed = 1;
			}
			#print "MAC address of down links: [$down_links]\n";
			sleep 1;
		}
		my $say_nic = $nic;
		if    ($nic =~ /^bcn-link(\d)/) { $say_nic = "Back-Channel Network, Link $1" }
		elsif ($nic =~ /^ifn-link(\d)/) { $say_nic = "Internet-Facing Network, Link $1" }
		print "- Please unplug the interface you want to make:\n";
		print "- [$say_nic]\n";
		my $last_conflict = "";
		while(1)
		{
			my $down_links = check_nic_states($conf);
			if (($down_links) && ($down_links !~ /,/))
			{
				if ($conf->{nic}{mac}{$down_links}{new_name})
				{
					print "- The NIC with MAC address: [$down_links] is already allocated to: [$conf->{nic}{mac}{$down_links}{new_name}]\n" if ($last_conflict ne $down_links);
					$last_conflict = $down_links;
				}
				else
				{
					$conf->{nic}{mac}{$down_links}{new_name} = $nic;
					$conf->{nic}{name}{$nic}                 = $down_links;
					print "- NIC with MAC: [$down_links] will become: [$conf->{nic}{mac}{$down_links}{new_name}]\n";
					print "- (it is currently: [$conf->{nic}{mac}{$down_links}{current_name}])\n";
					last;
				}
			}
			sleep 1;
		}
	}
	my $plug_in_message_printed = 0;
	while (my $down_links = check_nic_states($conf))
	{
		if (not $plug_in_message_printed)
		{
			print "- Please plug in all network cables to proceed.\n";
			$plug_in_message_printed = 1;
		}
		sleep 1;
	}

	my $proceed = 1;
	print "\nHere is what you selected:\n";
	foreach my $nic (@{$conf->{nics}})
	{
		my $say_nic = $nic;
		if    ($nic =~ /^bcn-link(\d)/) { $say_nic = "Back-Channel Network, Link $1" }
		elsif ($nic =~ /^ifn-link(\d)/) { $say_nic = "Internet-Facing Network, Link $1" }
		my $this_mac = $conf->{nic}{name}{$nic};
		if (not $this_mac)
		{
			print "[ Error ] - There seems to be a problem.\n";
			print "[ Error ] - Desired NIC: [$nic] doesn't have a referenced MAC address!\n";
			print "[ Error ] - Exiting.\n";
			exit(1);
		}
		my $current_name = $conf->{nic}{mac}{$this_mac}{current_name};
		if (not $current_name)
		{
			print "[ Error ] - There seems to be a problem.\n";
			print "[ Error ] - Desired NIC: [$nic] doesn't have a referenced interface!\n";
			print "[ Error ] - Exiting.\n";
			exit(2);
		}
		print "- Interface: [".uc($this_mac)."], currently named: [$current_name],\n";
		print "- will be renamed to: [$nic]\n";
		#print "- $say_nic will use the NIC with MAC: [$this_mac] ($current_name -> $nic)\n";
	}
	my $bcn_ip      = $conf->{network}{bcn}{ip};
	my $bcn_netmask = $conf->{network}{bcn}{netmask};
	print "\nThe Back-Channel Network interface will be set to:\n";
	print "- IP:      [$bcn_ip]\n";
	print "- Netmask: [$bcn_netmask]\n\n";
	my $ifn_ip      = $conf->{network}{ifn}{ip};
	my $ifn_netmask = $conf->{network}{ifn}{netmask};
	my $ifn_gateway = $conf->{network}{ifn}{gateway};
	my $ifn_dns1    = $conf->{network}{ifn}{dns1};
	my $ifn_dns2    = $conf->{network}{ifn}{dns2};
	print "The Internet-Facing Network interface will be set to:\n";
	print "- IP:      [$ifn_ip]\n";
	print "- Netmask: [$ifn_netmask]\n";
	print "- Gateway: [$ifn_gateway]\n";
	print "- DNS1:    [$ifn_dns1]\n";
	print "- DNS2:    [$ifn_dns2]\n\n";
	print "Shall I proceed? [Y/n] ";
	my $answer = <STDIN>;
	chomp($answer);
	if (($answer) && (lc($answer) =~ /^n/))
	{
		$proceed = 0;
		print "- Ok, starting over.\n";
		sleep 2;
		system('clear');
	}
	else
	{
		print "- Thank you, I will start to work now.\n\n";
	}

	return($proceed);
}

sub check_nic_states
{
	my ($conf) = @_;
	
	my $unplugged_macs  = "";
	my $this_iface      = "";
	my $this_mac        = "";
	my $this_link_state = "";
	my $shell_call = "$conf->{executable}{ip} addr";
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		if ($line =~ /^\d+: (.*?): <(.*?)>/)
		{
			$this_iface      = $1;
			$this_link_state = $2;
			$this_mac        = "";
			if ($this_link_state =~ /UP/)
			{
				# This will be either BROADCAST or NO-CARRIER
				$this_link_state =~ s/,.*//;
			}
			else
			{
				# The interface has been 'ifdown'ed or was not
				# started on boot.
				$this_link_state = "DOWN";
			}
			next;
		}
		next if not $this_iface;
		next if $this_iface eq "lo";
		next if $this_iface =~ /wlan/;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		if ($line =~ /ether ([0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2})/)
		{
			$this_mac = $1;
			#print "this_mac: [$this_mac]\n";
			if ($this_link_state eq "DOWN")
			{
				$this_link_state = 2;
			}
			else
			{
				$this_link_state = $this_link_state eq "NO-CARRIER" ? 0 : 1;
			}
			$conf->{nic}{mac}{$this_mac}{current_name}     = $this_iface;
			$conf->{nic}{mac}{$this_mac}{link_state}       = $this_link_state;
			$conf->{nic}{by_name}{$this_iface}{link_state} = $this_link_state;
			$conf->{nic}{by_name}{$this_iface}{mac}        = $this_mac;
		}
	}
	close $file_handle;

	my $nic_count = 0;
	foreach my $this_mac (sort {$a cmp $b} keys %{$conf->{nic}{mac}})
	{
		# Somewhere in the loop, an empty '$this_mac' is being created... 
		# (I'm looking at you, autovivication >_>)
		next if not $this_mac;
		my $this_iface = $conf->{nic}{mac}{$this_mac}{current_name};
		
		if (($this_iface eq "lo") || ($this_iface =~ /wlan/))
		{
			#print "[ Debug ] - Skipping interface: [$this_iface]\n";
		}
		else
		{
			$nic_count++;
			#print "[ Debug ] - NIC: [$this_iface] w/ MAC: [$this_mac]; Link: [$conf->{nic}{mac}{$this_mac}{link_state}], current name: [$conf->{nic}{mac}{$this_mac}{current_name}]\n";
		}
		if ($conf->{nic}{mac}{$this_mac}{link_state} ne "1")
		{
			$unplugged_macs .= "$this_mac,";
		}
	}
	
	# If there are less than two NICs and the user is trying to configure
	# the network, bail.
# 	if ((not $conf->{sys}{skip_network}) && ($nic_count != 2))
# 	{
# 		print "[ Error ] - Found a total of: [$nic_count] NIC(s).\n";
# 		print "[ Error ] - Two are needed for this program to work.\n";
# 		print "[ Error ] - Merged networks are not supported by this tool.\n";
# 		exit(4);
# 	}
	
	$unplugged_macs =~ s/,$//;
	#print "- DEBUG: unpluggd_macs: [$unplugged_macs]\n";
	return($unplugged_macs);
}
