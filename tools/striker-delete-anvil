#!/usr/bin/perl
# 
# This removes the specified '--anvil X' from the striker.conf file and from virtual machine manager, if
# installed and managed by Striker.
# 
# Return codes:
# 0  = Normal exit.
# 1  = No '--anvil X' passed in
# 2  = Requested Anvil! was not found in striker.conf.
# 3  = 
# 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE         = ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory = ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		anvil		=>	{
			id		=>	"",
			node1		=>	"",
			node2		=>	"",
			company		=>	"",
			description	=>	"",
		},
		path		=>	{
			# 'connection' will be appended to each user's home directory.
			connections	=>	".gconf/apps/virt-manager/connections/\%gconf.xml",
			log_file	=>	"/var/log/striker.log",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
			'virt-manager'	=>	"/usr/bin/virt-manager",
		},
		switches	=>	{},
		sys		=>	{
			language	=>	"en_CA",
			local_users	=>	[],
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	print_usage($an);
	exit(0);
}

# We'll be backing up files, so prep a time stamp.
my ($date, $time) = $an->Get->date_and_time();
$time =~ s/:/-/g;
$an->data->{sys}{date}   = $date;
$an->data->{sys}{'time'} = $time;
$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
	name1 => "sys::date", value1 => $an->data->{sys}{date}, 
	name2 => "sys::time", value2 => $an->data->{sys}{'time'}, 
}, file => $THIS_FILE, line => __LINE__});

# Log our startup
$an->Log->entry({log_level => 3, message_key => "sda_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});

# Exit if no Anvil! defined.
if (not $an->data->{switches}{anvil})
{
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "sda_error_0001", code => 1, file => "$THIS_FILE", line => __LINE__});
}

# Find the Anvil! ID to delete.
foreach my $anvil_id (sort {$a cmp $b} keys %{$an->data->{cluster}})
{
	if ($an->data->{cluster}{$anvil_id}{name} eq $an->data->{switches}{anvil})
	{
		# Split out the node names.
		my ($node1, $node2) = (split/,/, $an->data->{cluster}{$anvil_id}{nodes});
		$node1 =~ s/^\s+//g;
		$node1 =~ s/\s+$//g;
		$node2 =~ s/^\s+//g;
		$node2 =~ s/\s+$//g;
		
		$an->data->{anvil}{anvil_id}    = $anvil_id;
		$an->data->{anvil}{node1}       = $node1;
		$an->data->{anvil}{node2}       = $node2;
		$an->data->{anvil}{company}     = $an->data->{cluster}{$anvil_id}{company};
		$an->data->{anvil}{description} = $an->data->{cluster}{$anvil_id}{description};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
			name1 => "anvil::anvil_id",    value1 => $an->data->{anvil}{anvil_id}, 
			name2 => "anvil::node1",       value2 => $an->data->{anvil}{node1}, 
			name3 => "anvil::node2",       value3 => $an->data->{anvil}{node2}, 
			name4 => "anvil::company",     value4 => $an->data->{anvil}{company}, 
			name5 => "anvil::description", value5 => $an->data->{anvil}{description}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
}

# If I didn't find an Anvil!, exit.
if ($an->data->{anvil}{anvil_id})
{
	# Woot!
	$an->Log->entry({log_level => 2, message_key => "sda_log_0002", message_variables => {
		anvil    => $an->data->{switches}{anvil}, 
		anvil_id => $an->data->{anvil}{anvil_id}, 
	}, file => $THIS_FILE, line => __LINE__});
}
else
{
	# Well foo. 
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "sda_error_0002", message_variables => {
		anvil => $an->data->{switches}{anvil},
	}, code => 2, file => "$THIS_FILE", line => __LINE__});
}

# Read in the hosts and ssh_config files and then remove them.
process_hosts($an);
process_ssh_config($an);

# If virt-manager is installed and 'tools::striker-configure-vmm::enabled = 1', remove the nodes from each
# user's VMM.
if ((-e $an->data->{path}{'virt-manager'}) && ($an->data->{tools}{'striker-configure-vmm'}{enabled}))
{
	# Now determine what local users exist.
	$an->data->{sys}{local_users} = $an->Get->local_users();
	my $local_user_count          = @{$an->data->{sys}{local_users}};

	# Loop through the list of users (if any) and read in their 'connections' file (if it exists) and 
	# remove any entries for the deleted nodes.
	foreach my $user (sort {$a cmp $b} @{$an->data->{sys}{local_users}})
	{
		### TODO: When moving to the new module methods, we'll need to process the general success/failure as
		###       it won't report per-user failures.
		remove_node_from_vmm($an, $user);
	}
}

# Now delete the Anvil! from striker.conf.
write_new_striker_conf($an);

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# Generate and write out the new striker.conf file.
sub write_new_striker_conf
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "write_new_striker_conf" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Read in the existing config file, skipping the deleted Anvil! and comments with it's company and 
	# description in it.
	my $changed  = 0;
	my $new_file = "";
	
	my $anvil_id    = $an->data->{anvil}{anvil_id};
	my $description = $an->data->{anvil}{description};
	my $shell_call  = $an->data->{path}{striker_config};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "<$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 254, file => "$THIS_FILE", line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if (($line =~ /#.*$description/) or ($line =~ /^cluster::${anvil_id}::/))
		{
			$changed = 1;
			next;
		}
		$new_file .= "$line\n";
	}
	close $file_handle;
	
	# If there was a change, write out the new file.
	if ($changed)
	{
		# Backup the original file
		my $say_date  = $an->data->{sys}{date}."_".$an->data->{sys}{'time'};
		my $backup    = $an->data->{path}{striker_config}.".".$say_date;
		my $variables = {
			source      => $an->data->{path}{striker_config}, 
			destination => $backup, 
		};
		print $an->String->get({key => "sda_message_0002", variables => $variables})."\n";
		$an->Log->entry({log_level => 2, message_key => "sda_message_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
		$an->Storage->rsync({
			source      => $an->data->{path}{striker_config}, 
			destination => $backup, 
		});
		
		# Write out the new one.
		my $shell_call = $an->data->{path}{striker_config};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
		print $file_handle $new_file;
		close $file_handle;
	}
	
	return(0);
}

# This deletes an entry from an array by blanking it's value if it's existing value matches the string passed
# in.
sub delete_string_from_array
{
	my ($conf, $string, $array) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "delete_string_from_array" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "string", value1 => $string, 
		name2 => "array",  value2 => $array, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Useful for debugging.
	foreach my $line (@{$array})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Delete the nodes (empty values are skipped later)
	for (my $i = 0; $i < @{$array}; $i++)
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
			name1 => "i",           value1 => $i,
			name2 => "array->[$i]", value2 => $array->[$i],
			name3 => "string",      value3 => $string,
		}, file => $THIS_FILE, line => __LINE__});
		if (($string) && ($array->[$i] eq $string))
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => ">> array->[$i]", value1 => $array->[$i],
				name2 => "string",         value2 => $string,
			}, file => $THIS_FILE, line => __LINE__});
			$array->[$i] = "";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< array->[$i]", value1 => $array->[$i],
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return($array);
}

### NOTE: This isn't smart enough yet to know when nothing has changed.
# Remove entries for the nodes from /etc/hosts
sub process_hosts
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_hosts" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Storage->read_hosts;
	my $node1_name = $an->data->{anvil}{node1};
	my $node2_name = $an->data->{anvil}{node2};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "node1_name", value1 => $node1_name,
		name2 => "node2_name", value2 => $node2_name,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Build the date stamp.
	my $say_date  = $an->data->{sys}{date}."_".$an->data->{sys}{'time'};
	
	# Delete this from hosts and ssh_config
	delete $an->data->{hosts}{$node1_name} if exists $an->data->{hosts}{$node1_name};
	delete $an->data->{hosts}{$node2_name} if exists $an->data->{hosts}{$node2_name};
	foreach my $this_ip (keys %{$an->data->{hosts}{by_ip}})
	{
		# Delete the nodes (empty values are skipped later)
		delete_string_from_array($an, $node1_name, $an->data->{hosts}{by_ip}{$this_ip});
		delete_string_from_array($an, $node2_name, $an->data->{hosts}{by_ip}{$this_ip});
	}
	
	# Generate the new hosts file contents.
	my $new_file        =  "";
	my $say_date_header =  $an->String->get({key => "text_0003", variables => { date => $say_date }});
	my $say_host_header =  $an->String->get({key => "text_0005"});
	   $new_file        .= "$say_date_header\n";
	   $new_file        .= "$say_host_header\n";
	
	# Print 127.0.0.1 first to keep things cleaner.
	my $hosts      = "";
	my $seen_hosts = {};
	my $this_ip    = "127.0.0.1";
	foreach my $this_host (sort {$a cmp $b} @{$an->data->{hosts}{by_ip}{$this_ip}})
	{
		# Avoid dupes
		next if $seen_hosts->{$this_ip}{$this_host};
		$seen_hosts->{$this_ip}{$this_host} = 1;
		$hosts .= "$this_host ";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "hosts", value1 => $hosts,
		}, file => $THIS_FILE, line => __LINE__});
	}
	$hosts     =~ s/ $//;
	$new_file .= "$this_ip\t$hosts\n"; 
	delete $an->data->{hosts}{by_ip}{'127.0.0.1'} if exists $an->data->{hosts}{by_ip}{'127.0.0.1'};
	
	# Push the IPs into an array for sorting.
	my @ip;
	foreach my $this_ip (sort {$a cmp $b} keys %{$an->data->{hosts}{by_ip}})
	{
		push @ip, $this_ip;
	}
	
	# Sort (from gryng's post here: http://www.perlmonks.org/?node=Sorting%20IP%20Addresses%20Quickly)
	my @sorted_ip = map  { $_->[0] }
	                sort { $a->[1] <=> $b->[1] }
	                map  { my ($x, $y) = (0, $_);
	                       $x = $_ + $x * 256 for split(/\./, $y);
	                       [$y,$x]
	                     } @ip;
	
	# Cycle through the passed variables and add them to the hashed created when the hosts file was last 
	# read.
	my $last_start_octals = "";
	foreach my $this_ip (@sorted_ip)
	{
		# There can be one or more hosts for a given IP, contained in an array
		my $hosts      = "";
		my $seen_hosts = {};
		my $host_count = 0;
		foreach my $this_host (sort {$a cmp $b} @{$an->data->{hosts}{by_ip}{$this_ip}})
		{
			# Avoid dupes
			next if $seen_hosts->{$this_ip}{$this_host};
			$seen_hosts->{$this_ip}{$this_host} = 1;
			$hosts .= "$this_host ";
			$host_count++ if $this_host;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "host_count", value1 => $host_count,
				name2 => "hosts",      value2 => $hosts,
			}, file => $THIS_FILE, line => __LINE__});
		}
		$hosts =~ s/ $//;
		
		# Skip IPs with no remaining hosts.
		next if not $host_count;
		
		# Add a space if the first three octals have changed.
		my $start_octals = ($this_ip =~ /^(\d+\.\d+\.\d+)\./)[0];
		if ($start_octals ne $last_start_octals)
		{
			$last_start_octals =  $start_octals;
			$new_file          .= "\n";
		}
		
		# Record the entry
		$new_file .= "$this_ip\t$hosts\n";
	}
	$new_file .= "\n";
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "new_file", value1 => $new_file, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Backup the original file
	my $backup    = $an->data->{path}{etc_hosts}.".".$say_date;
	my $variables = {
		source      => $an->data->{path}{etc_hosts}, 
		destination => $backup, 
	};
	print $an->String->get({key => "sda_message_0002", variables => $variables})."\n";
	$an->Log->entry({log_level => 2, message_key => "sda_message_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
	$an->Storage->rsync({
		source      => $an->data->{path}{etc_hosts}, 
		destination => $backup, 
	});
	
	# Write out the new file.
	my $shell_call = $an->data->{path}{etc_hosts};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
	print $file_handle $new_file;
	close $file_handle;
	
	return(0);
}

# Remove entries for the nodes from /etc/ssh/ssh_config
sub process_ssh_config
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_ssh_config" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Storage->read_ssh_config;
	my $node1_name =  $an->data->{anvil}{node1};
	my $node2_name =  $an->data->{anvil}{node2};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "node1_name", value1 => $node1_name,
		name2 => "node2_name", value2 => $node2_name,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Build the date stamp.
	my $say_date = $an->data->{sys}{date}."_".$an->data->{sys}{'time'};
	
	# Get a normal time stamp for the header.
	my ($date, $time) = $an->Get->date_and_time();
	
	# Start building the new file.
	my $say_date_header = $an->String->get({key => "text_0003", variables => { date => "$date, $time" }});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "say_date_header", value1 => $say_date_header,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Re print the ssh_config, but skip 'Host' sections for now.
	my $new_file            = "$say_date_header\n";
	my $last_line_was_blank = 0;
	foreach my $line (split/\n/, $an->data->{raw}{ssh_config})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => ">> line", value1 => $line,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Skip our header and end before hosts so that we don't keep adding it over and over.
		next if $line =~ /^### /;
		last if ($line =~ /^Host\s+(.*)$/);
		last if ($line =~ /^###############/);
		
		# This cleans out multiple blank spaces which seem to creep in.
		if (not $line)
		{
			if ($last_line_was_blank)
			{
				next;
			}
			else
			{
				$last_line_was_blank = 1;
			}
		}
		else
		{
			$last_line_was_blank = 0;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "<< line", value1 => $line,
		}, file => $THIS_FILE, line => __LINE__});
		$new_file .= "$line\n";
	}
	
	# Print the header box that separates the main config from our 'Host ...' entries.
	my $say_host_header =  $an->String->get({key => "text_0004"});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "say_host_header", value1 => $say_host_header,
	}, file => $THIS_FILE, line => __LINE__});
	$new_file .= "$say_host_header\n\n";
	
	# Now add any new entries.
	foreach my $this_host (sort {$a cmp $b} keys %{$an->data->{hosts}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "this_host",                 value1 => $this_host,
			name2 => "hosts::${this_host}::port", value2 => $an->data->{hosts}{$this_host}{port},
		}, file => $THIS_FILE, line => __LINE__});
		next if not $an->data->{hosts}{$this_host}{port};
		$new_file .= "Host $this_host\n";
		$new_file .= "\tPort $an->data->{hosts}{$this_host}{port}\n\n";
	}
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "new_file", value1 => $new_file,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Backup the original file
	my $backup    = $an->data->{path}{ssh_config}.".".$say_date;
	my $variables = {
		source      => $an->data->{path}{ssh_config}, 
		destination => $backup, 
	};
	print $an->String->get({key => "sda_message_0002", variables => $variables})."\n";
	$an->Log->entry({log_level => 3, message_key => "sda_message_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
	$an->Storage->rsync({
		source      => $an->data->{path}{ssh_config}, 
		destination => $backup, 
	});
	
	# Write out the new file.
	my $shell_call = $an->data->{path}{ssh_config};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
	print $file_handle $new_file;
	close $file_handle;
	
	return(0);
}

# This reads in the given user's .gconf/apps/virt-manager/connections/%gconf.xml file and removes any 
# reference to the deleted nodes.
sub remove_node_from_vmm
{
	my ($an, $user) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "remove_node_from_vmm" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "user", value1 => $user, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $node1_name      =  $an->data->{anvil}{node1};
	my $node2_name      =  $an->data->{anvil}{node2};
	my $home_directory  =  $an->Get->users_home({user => $user});
	my $connection_path =  $home_directory."/".$an->data->{path}{connections};
	   $connection_path =~ s/\/\//\//g;
	$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
		name1 => "node1_name",        value1 => $node1_name,
		name2 => "node2_name",        value2 => $node2_name,
		name3 => "home_directory",    value3 => $home_directory,
		name4 => "path::connections", value4 => $an->data->{path}{connections},
		name5 => "connection_path",   value5 => $connection_path,
	}, file => $THIS_FILE, line => __LINE__});
	if (-r $connection_path)
	{
		# Read in the existing file connections file into an array and note the index number where we
		# find entries so that we can delete it and the lines before and after it.
		my $raw_file     = [];
		my $delete_index = "";
		my $shell_call   = $connection_path;
		my $line_number  = 0;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "<$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 254, file => "$THIS_FILE", line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$raw_file}, $line;
			
			if (($line =~ /\@$node1_name\//) or ($line =~ /\@$node2_name\//))
			{
				my $previous_line =  $line_number - 1;
				my $next_line     =  $line_number + 1;
				   $delete_index  .= "$previous_line,$line_number,$next_line,";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "delete_index", value1 => $delete_index, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			$line_number++;
		}
		close $file_handle;
		
		# Now create a variable with the new body, minus any deleted lines, if I am removing 
		# anything.
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "delete_index", value1 => $delete_index, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($delete_index)
		{
			# Generate the new body.
			   $delete_index =~ s/,$//;
			my $new_file     =  "";
			for (my $i = 0; $i < @{$raw_file}; $i++)
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "i",              value1 => $i, 
					name2 => "raw_file->[$i]", value2 => $raw_file->[$i],
				}, file => $THIS_FILE, line => __LINE__});
				my $skip = 0;
				foreach my $j (split/,/, $delete_index)
				{
					next if $skip;
					$skip = 1 if $i == $j;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "j",    value1 => $j, 
						name2 => "skip", value2 => $skip,
					}, file => $THIS_FILE, line => __LINE__});
				}
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "i",    value1 => $i, 
					name2 => "skip", value2 => $skip,
				}, file => $THIS_FILE, line => __LINE__});
				next if $skip;
				$new_file .= $raw_file->[$i]."\n";
			}
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "new_file", value1 => $new_file, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Backup the old file.
			my $backup    = "$connection_path.".$an->data->{sys}{date}."_".$an->data->{sys}{'time'};
			my $variables = {
				source      => $connection_path, 
				destination => $backup, 
			};
			print $an->String->get({key => "sda_message_0002", variables => $variables})."\n";
			$an->Log->entry({log_level => 2, message_key => "sda_message_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			$an->Storage->rsync({
				source      => $connection_path, 
				destination => $backup, 
			});
			
			# Write out the new file.
			my $shell_call = $connection_path;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "shell_call", value1 => $shell_call, 
			}, file => $THIS_FILE, line => __LINE__});
			open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
			print $file_handle $new_file;
			close $file_handle;
		}
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $help = $an->String->get({key => "sda_message_0001"})."\n";
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
