#!/usr/bin/perl
# 
# This configures virtual machine manager on a given dashboard. Specifically, it disables automatically 
# connecting to localhost, enables network and disk IO polling, displays server CPU, host CPU, network and
# disk graphs. It then walks through striker.conf and adds an autoconnect entry for each node it finds.
# 
# Return codes:
# 0  = Normal exit.
# 1  = Disabled in striker.conf
# 2  = Failed to create a required path.
# 3  = virt-manager not installed, nothing to do.
# 

# - Add this to /etc/gdm/PreSession/Default 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	        $running_directory =~ s/^\./$ENV{PWD}/;
}
my $time = time;

my $an = AN::Tools->new({data => {
		path		=>	{
			gdm_presession	=>	"/etc/gdm/PreSession/Default",
			log_file	=>	"/var/log/striker.log",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
			'virt-manager'	=>	"/usr/bin/virt-manager",
		},
		# All 'path' entries will have the user's home directory added as a prefix. An owner or group
		# set to '~' will be converted to the username being processed.
		permissions	=>	{
			directories	=>	{
				'01_.gconf'		=>	{
					path			=>	".gconf",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
				'02_apps'		=>	{
					path			=>	".gconf/apps",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
				'03_virt-manager'	=>	{
					path			=>	".gconf/apps/virt-manager",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
				'04_connections'	=>	{
					path			=>	".gconf/apps/virt-manager/connections",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
				'05_stats'	=>	{
					path			=>	".gconf/apps/virt-manager/stats",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
				'06_vmlist-fields'	=>	{
					path			=>	".gconf/apps/virt-manager/vmlist-fields",
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0700",
				},
			},
			files		=>	{
				'01_%gconf.xml'		=>	{
					path			=>	'.gconf/apps/%gconf.xml',
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0600",
					body			=>	"",
				},
				'02_%gconf.xml'		=>	{
					path			=>	'.gconf/apps/virt-manager/%gconf.xml',
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0600",
					body			=>	
'<?xml version="1.0"?>
<gconf>
	<entry name="manager_window_height" mtime="'.$time.'" type="int" value="596"/>
	<entry name="manager_window_width" mtime="'.$time.'" type="int" value="864"/>
</gconf>',
				},
				# Nodes will be added to this file. Don't change the key name without 
				# updating it below as well.
				'03_%gconf.xml'		=>	{
					path			=>	'.gconf/apps/virt-manager/connections/%gconf.xml',
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0600",
					body			=>	
'<?xml version="1.0"?>
<gconf>
	<entry name="autoconnect" mtime="'.$time.'" type="list" ltype="string">
	</entry>
	<entry name="uris" mtime="'.$time.'" type="list" ltype="string">
		<li type="string">
			<stringvalue>qemu:///system</stringvalue>
		</li>
	</entry>
</gconf>',
				},
				'04_%gconf.xml'		=>	{
					path			=>	'.gconf/apps/virt-manager/stats/%gconf.xml',
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0600",
					body			=>	
'<?xml version="1.0"?>
<gconf>
	<entry name="enable-net-poll" mtime="'.$time.'" type="bool" value="true"/>
	<entry name="enable-disk-poll" mtime="'.$time.'" type="bool" value="true"/>
</gconf>',
				},
				'05_%gconf.xml'		=>	{
					path			=>	'.gconf/apps/virt-manager/vmlist-fields/%gconf.xml',
					owner			=>	"~",
					group			=>	"~",
					mode			=>	"0600",
					body			=>	
'<?xml version="1.0"?>
<gconf>
	<entry name="host_cpu_usage" mtime="'.$time.'" type="bool" value="true"/>
	<entry name="network_traffic" mtime="'.$time.'" type="bool" value="true"/>
	<entry name="disk_usage" mtime="'.$time.'" type="bool" value="true"/>
</gconf>',
				},
			},
		},
		switches	=>	{},
		sys		=>	{
			language	=>	"en_CA",
			local_users	=>	[],
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	print_usage($an);
	exit(0);
}

# Log our startup
$an->Log->entry({log_level => 3, message_key => "scv_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});

# Exit if virt-manager hasn't been installed.
if (not -e $an->data->{path}{'virt-manager'})
{
	$an->Log->entry({log_level => 2, message_key => "scv_log_0003", file => $THIS_FILE, line => __LINE__});
	print $an->String->get({key => "scv_log_0003"})."\n";
	exit(3);
}

# Is the user asking to enable or disable this feature?
if ($an->data->{switches}{enable})
{
	# Add ourself to GDM's PreSession script, if needed.
	manage_gdm_presession($an, "add");
	update_configuration($an, "enable");
	exit(0);
}
elsif ($an->data->{switches}{disable})
{
	# Remove ourself to GDM's PreSession script, if needed.
	manage_gdm_presession($an, "remove");
	update_configuration($an, "disable");
	exit(0);
}

# Exit if virtual manager manager configuration disabled in striker.conf.
if ($an->data->{tools}{'striker-configure-vmm'}{enabled})
{
	# Add ourself to GDM's PreSession script, if needed.
	manage_gdm_presession($an, "add");
}
else
{
	# Has the run been forced?
	if ($an->data->{switches}{force})
	{
		# Yup
		$an->Log->entry({log_level => 2, message_key => "scv_log_0005", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scv_log_0005"})."\n";
	}
	else
	{
		# Remove ourself to GDM's PreSession script, if needed.
		manage_gdm_presession($an, "remove");
		$an->Log->entry({log_level => 2, message_key => "scv_log_0004", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scv_log_0004"})."\n";
		exit(1);
	}
}

# Now determine what local users exist.
$an->data->{sys}{local_users} = $an->Get->local_users();
my $local_user_count          = @{$an->data->{sys}{local_users}};
if (not $local_user_count)
{
	# No users found, nothing to do.
	$an->Log->entry({log_level => 3, message_key => "scv_log_0002", file => $THIS_FILE, line => __LINE__});
	exit(0);
}

# Create the list of nodes to add to Virtual Machine Manager.
foreach my $id (sort {$a cmp $b} keys %{$an->data->{cluster}})
{
	# Split out the node names.
	my ($node1, $node2) = (split/,/, $an->data->{cluster}{$id}{nodes});
	$node1 =~ s/^\s+//g;
	$node1 =~ s/\s+$//g;
	$node2 =~ s/^\s+//g;
	$node2 =~ s/\s+$//g;
	
	$an->data->{anvil}{id}       = $id;
	$an->data->{anvil}{node1}    = $node1;
	$an->data->{anvil}{node2}    = $node2;
	$an->data->{anvil}{password} = $an->data->{cluster}{$id}{root_pw} ? $an->data->{cluster}{$id}{root_pw} : $an->data->{cluster}{$id}{ricci_pw};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
		name1 => "anvil::id",       value1 => $an->data->{anvil}{id}, 
		name2 => "anvil::node1",    value2 => $an->data->{anvil}{node1}, 
		name3 => "anvil::node2",    value3 => $an->data->{anvil}{node2}, 
		name4 => "anvil::password", value4 => $an->data->{anvil}{password}, 
	}, file => $THIS_FILE, line => __LINE__});
	
	foreach my $node ($node1, $node2)
	{
		my $uri = "qemu+ssh://root\@$node/system";
		$an->data->{node}{$uri}{autoconnect} = 1;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "node",                      value1 => $node, 
			name2 => "node::${uri}::autoconnect", value2 => $an->data->{node}{$uri}{autoconnect},
		}, file => $THIS_FILE, line => __LINE__});
	}
}


# If I am still alive, loop through the list of Anvil! systems and make sure they're in the 
print $an->String->get({key => "scv_message_0009"})."\n";
foreach my $user (sort {$a cmp $b} @{$an->data->{sys}{local_users}})
{
	# Make sure that the base virtual machine manager config is setup.
	my $variables = { user => $user };
	print $an->String->get({key => "scv_message_0010", variables => $variables})."\n";
	$an->Log->entry({log_level => 3, message_key => "scv_message_0010", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
	setup_virtual_machine_manager_config($an, $user);
}
print $an->String->get({key => "scv_message_0011"})."\n";

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This updates the striker.conf file to enable or disable this feature.
sub update_configuration
{
	my ($an, $task) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_configuration" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "task", value1 => $task, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $ok         = 1;
	my $variables  = {this_file => $THIS_FILE};
	my $shell_call = $an->data->{path}{sed}." -i 's/^tools::striker-configure-vmm::enabled\\(\\s*\\)=\\(\\s*\\)1/tools::striker-configure-vmm::enabled\\1=\\20/' ".$an->data->{path}{striker_config};
	if ($task eq "enable")
	{
		$shell_call = $an->data->{path}{sed}." -i 's/^tools::striker-configure-vmm::enabled\\(\\s*\\)=\\(\\s*\\)0/tools::striker-configure-vmm::enabled\\1=\\21/' ".$an->data->{path}{striker_config};
	}
	$shell_call .= "
if \$(".$an->data->{path}{'grep'}." -q '^tools::striker-configure-vmm::enabled\\s*=\\s*1' ".$an->data->{path}{striker_config}.");
then 
    echo enabled; 
else 
    echo disabled;
fi";
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line,
		}, file => $THIS_FILE, line => __LINE__, log_to => $an->data->{path}{log_file}});
		
		if ($line =~ /enabled/)
		{
			# Did I want this?
			if ($task eq "enable")
			{
				# Good!
				print $an->String->get({key => "scv_message_0013", variables => $variables})."\n";
				$an->Log->entry({log_level => 1, message_key => "scv_message_0013", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Woops...
				$an->Alert->warning({message_key => "scv_warning_0001", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
				$ok = 0;
			}
		}
		elsif ($line =~ /disabled/)
		{
			# Did I want this?
			if ($task eq "disable")
			{
				# Good!
				print $an->String->get({key => "scv_message_0014", variables => $variables})."\n";
				$an->Log->entry({log_level => 1, message_key => "scv_message_0014", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Woops...
				$an->Alert->warning({message_key => "scv_warning_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
				$ok = 0;
			}
		}
	}
	close $file_handle;
	
	return($ok);
}

# This reads in the GDM PreSession script and inserts or removes this program, when needed.
sub manage_gdm_presession
{
	my ($an, $task) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "manage_gdm_presession" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "task", value1 => $task, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Read in the existing one.
	my $raw_file     = "";
	my $changed      = 0;
	my $entry_exists = 0;
	my $path         = $an->data->{path}{gdm_presession};
	my $shell_call   = $path;
	open (my $file_handle, "<$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 254, file => "$THIS_FILE", line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "line", value1 => $line, 
			name2 => "0",    value2 => $0,   
		}, file => $THIS_FILE, line => __LINE__});
		if ($line =~ /$0/)
		{
			if ($task eq "remove")
			{
				$changed = 1;
				next;
			}
			$entry_exists = 1;
		}
		$raw_file .= "$line\n";
	}
	close $file_handle;
	
	if ((not $entry_exists) && ($task eq "add"))
	{
		$raw_file .= $0."\n";
		$changed   = 1;
	}
	
	if ($changed)
	{
		# Backup the file before editing it.
		my ($date, $time) = $an->Get->date_and_time();
		my $backup    = "$path.${date}_$time";
		my $variables = {
			source      => $path, 
			destination => $backup, 
		};
		print $an->String->get({key => "scv_message_0001", variables => $variables})."\n";
		$an->Log->entry({log_level => 2, message_key => "scv_message_0001", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
		$an->Storage->rsync({
			source      => $path, 
			destination => $backup, 
		});
		
		# Write the new version out.
		my $shell_call = $path;
		open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
		print $file_handle $raw_file;
		close $file_handle;
	}
	
	return(0);
}

# This makes sure the required directories and files needed by virtual machine manager exist.
sub setup_virtual_machine_manager_config
{
	my ($an, $user) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "setup_virtual_machine_manager_config" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "user", value1 => $user, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# What is the user's home directory?
	my $home_directory = $an->Get->users_home({user => $user});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "home_directory", value1 => $home_directory, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# First, make sure the directories exist and create the ones that don't exist.
	foreach my $directory (sort {$a cmp $b} keys %{$an->data->{permissions}{directories}})
	{
		my $path  = $an->data->{permissions}{directories}{$directory}{path};
		my $owner = $an->data->{permissions}{directories}{$directory}{owner};
		my $group = $an->data->{permissions}{directories}{$directory}{group};
		my $mode  = $an->data->{permissions}{directories}{$directory}{mode};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "path",  value1 => $path, 
			name2 => "owner", value2 => $owner, 
			name3 => "group", value3 => $group, 
			name4 => "mode",  value4 => $mode, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Convert '~' to the user's name
		$path  =  "$home_directory/$path";
		$owner =~ s/~/$user/;
		$group =~ s/~/$user/;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "path",  value1 => $path, 
			name2 => "owner", value2 => $owner, 
			name3 => "group", value3 => $group, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Convert the owner to UID and group to GID.
		my $uid = getpwnam($owner);
		my $gid = getgrnam($group);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "uid", value1 => $uid, 
			name2 => "gid", value2 => $gid, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if (not -d $path)
		{
			# Make it
			my $variables = {
				directory => $path, 
				owner => $owner, 
				uid   => $uid, 
				group => $group, 
				gid   => $gid, 
				mode  => $mode, 
			};
			print $an->String->get({key => "scv_message_0003", variables => $variables})."\n";
			$an->Log->entry({log_level => 2, message_key => "scv_message_0003", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			mkdir $path             or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0017", message_variables => { directory => $path, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
			chown $uid, $gid, $path or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0021", message_variables => { directory => $path, user => $uid, group => $gid, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
			chmod oct($mode), $path or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0022", message_variables => { directory => $path, mode => $mode, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
		}
	}
	
	# Now create the various files, as needed.
	my ($date, $time) = $an->Get->date_and_time();
	$time =~ s/:/-/g;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "date", value1 => $date, 
		name2 => "time", value2 => $time, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $file (sort {$a cmp $b} keys %{$an->data->{permissions}{files}})
	{
		my $path  = $an->data->{permissions}{files}{$file}{path};
		my $owner = $an->data->{permissions}{files}{$file}{owner};
		my $group = $an->data->{permissions}{files}{$file}{group};
		my $mode  = $an->data->{permissions}{files}{$file}{mode};
		my $body  = $an->data->{permissions}{files}{$file}{body};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "file",  value1 => $file, 
			name2 => "path",  value2 => $path, 
			name3 => "owner", value3 => $owner, 
			name4 => "group", value4 => $group, 
			name5 => "mode",  value5 => $mode, 
			name6 => "body",  value6 => $body, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Add the user's home directory, convert '~' to the user's name and add a new line to the body.
		$path  =  "$home_directory/$path";
		$owner =~ s/~/$user/;
		$group =~ s/~/$user/;
		$body  =  "$body\n" if $body;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
			name1 => "path",  value1 => $path, 
			name2 => "owner", value2 => $owner, 
			name3 => "group", value3 => $group, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Convert the owner to UID and group to GID.
		my $uid = getpwnam($owner);
		my $gid = getgrnam($group);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "uid", value1 => $uid, 
			name2 => "gid", value2 => $gid, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# If the file exists, read it in
		my $raw_file = "";
		if (-e $path)
		{
			my $shell_call = $path;
			open (my $file_handle, "<$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 254, file => "$THIS_FILE", line => __LINE__});
			my $in_autoconnect = 0;
			my $in_uris        = 0;
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
				$raw_file .= "$line\n";
			}
			close $file_handle;
		}
		
		# If this is the connections '%gconf.xml' file, we'll analyse it to preserve entries the user
		# may have added. All other files we will simply replace (for now, we'll probably make this 
		# smarter later).
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "path", value1 => $path, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($path =~ /.gconf\/apps\/virt-manager\/connections\/%gconf.xml/)
		{
			### Update the '$body'.
			# Read in the current file.
			my $variables = { file  => $path };
			print $an->String->get({key => "scv_message_0004", variables => $variables})."\n";
			$an->Log->entry({log_level => 2, message_key => "scv_message_0004", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			
			# If it exists, read it in and analyze it.
			if ($raw_file)
			{
				my $in_autoconnect = 0;
				my $in_uris        = 0;
				foreach my $line (split/\n/, $raw_file)
				{
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "line", value1 => $line, 
					}, file => $THIS_FILE, line => __LINE__});
					
					if ($line =~ /<entry name="autoconnect"/)
					{
						$in_autoconnect = 1;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "in_autoconnect", value1 => $in_autoconnect, 
						}, file => $THIS_FILE, line => __LINE__});
						next;
					}
					if ($line =~ /<entry name="uris"/)
					{
						$in_uris = 1;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "in_uris", value1 => $in_uris, 
						}, file => $THIS_FILE, line => __LINE__});
						next;
					}
					if ($line =~ /<\/entry>/)
					{
						$in_autoconnect = 0;
						$in_uris        = 0;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "in_autoconnect", value1 => $in_autoconnect, 
							name2 => "in_uris",        value2 => $in_uris, 
						}, file => $THIS_FILE, line => __LINE__});
						next;
					}
					if ($line =~ /<stringvalue>(.*?)<\/stringvalue>/)
					{
						my $uri = $1;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "in_autoconnect", value1 => $in_autoconnect, 
							name2 => "in_uris",        value2 => $in_uris, 
							name3 => "uri",            value3 => $uri, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($in_autoconnect)
						{
							if ($uri =~ /qemu:\/\/\/system/)
							{
								# We'll need to remove localhost from 
								# autoconnect.
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => ">> raw_file", value1 => $raw_file, 
								}, file => $THIS_FILE, line => __LINE__});
								$raw_file =~ s/^\s+<li type="string">\n\s+<stringvalue>qemu:\/\/\/system<\/stringvalue>\n\s+<\/li>\n//m;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "<< raw_file", value1 => $raw_file, 
								}, file => $THIS_FILE, line => __LINE__});
							}
							$an->data->{uri}{$uri}{autoconnect} = 1;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "in_autoconnect", value1 => $in_autoconnect, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						elsif ($in_uris)
						{
							# If I am in URIs and have NOT seen this URI before, set it 
							# to 'autoconnect = 0' because the user probably turned it 
							# off.
							if (not $an->data->{uri}{$uri}{autoconnect})
							{
								$an->data->{uri}{$uri}{autoconnect} = 0;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "uri::${uri}::autoconnect", value1 => $an->data->{uri}{$uri}{autoconnect}, 
								}, file => $THIS_FILE, line => __LINE__});
							}
						}
					}
				}
			}
			
			# Now construct the new body. If 'raw' is set, merge in our nodes that haven't been
			# seen. If raw doesn't exist, then we'll use the default 'body'.
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "raw_file", value1 => $raw_file, 
			}, file => $THIS_FILE, line => __LINE__});
			if (not $raw_file)
			{
				$raw_file = $body;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "raw_file", value1 => $raw_file, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($raw_file)
			{
				# Inject our nodes.
				$body = "";
				foreach my $line (split/\n/, $raw_file)
				{
					$body .= "$line\n";
					# I will inject new nodes at the start of each 'entry' element.
					if ($line =~ /<entry name="autoconnect"/)
					{
						# Insert unseen entries into autoconnect that are set to be 
						# autoconnect (which is everything, currently).
						foreach my $uri (sort {$a cmp $b} keys %{$an->data->{node}})
						{
							if ((not exists $an->data->{uri}{$uri}) && ($an->data->{node}{$uri}{autoconnect}))
							{
								# It's new, insert it.
								my $node = ($uri =~ /qemu\+ssh:\/\/root\@(.*?)\/system/)[0];
								if ($node)
								{
									my $variables = { node => $node };
									print $an->String->get({key => "scv_message_0005", variables => $variables})."\n";
									$an->Log->entry({log_level => 2, message_key => "scv_message_0005", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
								}
								else
								{
									my $variables = { uri => $uri };
									print $an->String->get({key => "scv_message_0006", variables => $variables})."\n";
									$an->Log->entry({log_level => 2, message_key => "scv_message_0006", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
								}
								$body .= "		<li type=\"string\">\n";
								$body .= "			<stringvalue>$uri</stringvalue>\n";
								$body .= "		</li>\n";
							}
						}
					}
					if ($line =~ /<entry name="uris"/)
					{
						# Insert all new entries here.
						foreach my $uri (sort {$a cmp $b} keys %{$an->data->{node}})
						{
							if (not exists $an->data->{uri}{$uri})
							{
								my $node = ($uri =~ /qemu\+ssh:\/\/root\@(.*?)\/system/)[0];
								if ($node)
								{
									my $variables = { node => $node };
									print $an->String->get({key => "scv_message_0007", variables => $variables})."\n";
									$an->Log->entry({log_level => 2, message_key => "scv_message_0007", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
								}
								else
								{
									my $variables = { uri => $uri };
									print $an->String->get({key => "scv_message_0008", variables => $variables})."\n";
									$an->Log->entry({log_level => 2, message_key => "scv_message_0008", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
								}
								$body .= "		<li type=\"string\">\n";
								$body .= "			<stringvalue>$uri</stringvalue>\n";
								$body .= "		</li>\n";
							}
						}
					}
				}
			}
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "body", value1 => $body, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		my $files_differ = 1;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "body",     value1 => $body, 
			name2 => "raw_file", value1 => $raw_file, 
		}, file => $THIS_FILE, line => __LINE__});
		if (($body) && ($raw_file))
		{
			my $test_body     =  $body;
			my $test_raw_file =  $raw_file;
			   $test_body     =~ s/mtime="\d+?"/mtime="x"/gs;
			   $test_raw_file =~ s/mtime="\d+?"/mtime="x"/gs;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "test_body",     value1 => $test_body, 
				name2 => "test_raw_file", value2 => $test_raw_file, 
			}, file => $THIS_FILE, line => __LINE__});
			if ($test_body eq $test_raw_file)
			{
				$files_differ = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "files_differ", value1 => $files_differ, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				#print "Difference found:\n";
				#print "test_body:\n====\n$test_body\n====\n";
				#print "test_raw_file:\n====\n$test_raw_file\n====\n";
			}
		}
		
		# Backup the existing file, if it exists, has data and is different.
		if ((-e $path) && ($files_differ) && ($raw_file))
		{
			# Create temp copies of the body and raw_file variables, replace their mtime and see if they differ,
			my $backup    = "$path.${date}_$time";
			my $variables = {
				source      => $path, 
				destination => $backup, 
			};
			print $an->String->get({key => "scv_message_0001", variables => $variables})."\n";
			$an->Log->entry({log_level => 2, message_key => "scv_message_0001", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
			$an->Storage->rsync({
				source      => $path, 
				destination => $backup, 
			});
		}
		
		# If the 'body' is empty, it will create an empty file, which is fine.
		if ($body)
		{
			# Write out the file if it has changed.
			if ($body ne $raw_file)
			{
				my $variables = {
					file  => $path, 
					owner => $owner, 
					uid   => $uid, 
					group => $group, 
					gid   => $gid, 
					mode  => $mode, 
				};
				print $an->String->get({key => "scv_message_0002", variables => $variables})."\n";
				$an->Log->entry({log_level => 2, message_key => "scv_message_0002", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
				
				my $shell_call = $path;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "shell_call", value1 => $shell_call, 
				}, file => $THIS_FILE, line => __LINE__});
				open (my $file_handle, ">$shell_call") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
				print $file_handle $body;
				close $file_handle;
			}
		}
		else
		{
			# Empty file, so just touch it if it doesn't exist.
			if (not -e $path)
			{
				my $variables = {
					file  => $path, 
					owner => $owner, 
					uid   => $uid, 
					group => $group, 
					gid   => $gid, 
					mode  => $mode, 
				};
				print $an->String->get({key => "scv_message_0012", variables => $variables})."\n";
				$an->Log->entry({log_level => 2, message_key => "scv_message_0012", message_variables => $variables, file => $THIS_FILE, line => __LINE__});
				
				my $shell_call  = $an->data->{path}{touch}." $path";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "shell_call", value1 => $shell_call, 
				}, file => $THIS_FILE, line => __LINE__});
				open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_message_0070", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__});
				while (<$file_handle>)
				{
					chomp;
					my $line = $_;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "line", value1 => "$line"
					}, file => $THIS_FILE, line => __LINE__});
				}
				close $file_handle;
			}
		}
		
		# Set the owner and mode
		if (-e $path)
		{
			chown $uid, $gid, $path or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0021", message_variables => { directory => $path, user => $uid, group => $gid, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
			chmod oct($mode), $path or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_title_0022", message_variables => { directory => $path, mode => $mode, error => $! }, code => 2, file => "$THIS_FILE", line => __LINE__ });
		}
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $help = $an->String->get({key => "scv_message_0015"})."\n";
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
