#!/usr/bin/perl
# 
# This is basically a wrapper for AN::Tools::Cman->stop_server() allowing Striker dashboards to call it over
# SSH to boot a server as per a user's request.
# 
# Return codes:
# 0 = Normal exit.
# 1 = No server name passed in
# 2 = Failed to connect to any ScanCore database.
# 

use strict; 
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		path		=>	{
			log_file	=>	"/var/log/striker.log",
			striker_config	=>	"/etc/striker/striker.conf",
			striker_strings	=>	"/sbin/striker/Data/strings.xml",
		},
		switches	=>	{},
		sys		=>	{
			language	=>	"en_CA",
			log_language	=>	"en_CA",
			log_level	=>	2,
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Log our startup
$an->Log->entry({log_level => 3, message_key => "assv_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});

# Exit if no Anvil! defined.
if (not $an->data->{switches}{server})
{
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "assv_error_0001", code => 1, file => "$THIS_FILE", line => __LINE__});
	$an->nice_exit({exit_code => 1});
}

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({log_level => 2, message_key => "notice_message_0013", message_variables => {
	connections => $connections,
}, file => $THIS_FILE, line => __LINE__});

# OK, shut down.
if ($connections)
{
	my $stop_reason = $an->data->{switches}{reason} ? $an->data->{switches}{reason} : "clean";
	my $stop_return = $an->Cman->stop_server({
			server => $an->data->{switches}{server},
			reason => $stop_reason,
		});
	foreach my $line (split/\n/, $stop_return)
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line,
		}, file => $THIS_FILE, line => __LINE__});

		print "$line\n";
	}
	
	# Cleanup.
	$an->DB->disconnect_from_databases();
}
else
{
	$an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "abs_error_0002", code => 2, file => "$THIS_FILE", line => __LINE__});
	$an->nice_exit({exit_code => 2});
}

$an->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $an->String->get({key => "assv_message_0001"})."\n";
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
