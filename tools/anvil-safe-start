#!/usr/bin/perl
# 
# This tool tries to safely start an Anvil! when a node boots. It will replace 'safe_anvil_start' once 
# finished.
# 
# Exit Codes;
# 0  = OK
#

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Strip the 'PATH' variable down so that it doesn't cause problems when called
# via a setuid wrapper.
$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";

# Prevent a discrepency between UID/GID and EUID/EGID from throwing an error.
$< = $>;
$( = $);

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	        $running_directory =~ s/^\./$ENV{PWD}/;
}
my $time = time;

my $an = AN::Tools->new({data => {
		path		=>	{
			cluster_conf		=>	"/etc/cluster/cluster.conf", 
			'less'			=>	"/usr/bin/less",
			log_file		=>	"/var/log/striker.log",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
			'anvil-safe-start'	=>	"/sbin/striker/anvil-safe-start",
			'anvil-safe-start_link'	=>	"/etc/rc3.d/S99_anvil-safe-start",
		},
		switches	=>	{
		},
		peer		=>	{
			short_name		=>	"",
			bcn_name		=>	"",
			sn_name			=>	"",
			ifn_name		=>	"",
		},
		sys		=>	{
			i_am_node2		=>	0,
			language		=>	"en_CA",
			local_node		=>	"",
			log_language		=>	"en_CA",
			log_level		=>	2,
			peer_node		=>	"",
		},
	},
});

# Initialize.
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Readable->base2(1);

### Invocations:
# * Called with 'start'; Use 'anvil-delay-run' to fire anvil-safe-start momentarily.
# * --abort   -> kill any running copy of anvil-safe-start and then exit.
# * --enable  -> create an rc3.d link to call 'start' on boot
# * --disable -> delete the rc3.d link.
# * --state   -> Print whether a copy is running and whether it is enabled on boot or not.
# * --force   -> Run even if disabled in striker.conf

if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or 
    ($an->data->{switches}{help}))
{
	print_usage($an);
	exit(0);
}
if ($an->data->{switches}{enable})
{
	# Create the /etc/rc3.d link.
	create_rc3d_symlink($an);
	exit(0);
}
if ($an->data->{switches}{disable})
{
	# Create the /etc/rc3.d link.
	remove_rc3d_symlink($an);
	exit(0);
}
if (($an->data->{switches}{'state'}) or ($an->data->{switches}{status}))
{
	# Reports whether a instance is running at the moment or not and whether it is enabled on boot or 
	# not.
	report_state($an);
	exit(0);
}


# Log our startup
$an->Log->entry({log_level => 2, message_key => "asst_log_0001", message_variables => {
	this_file	=>	$THIS_FILE, 
}, file => $THIS_FILE, line => __LINE__});


### Process
# 1. Check if I am enabled in striker.conf and that no other copies are running.
# 2. Who am I and who is my peer?
#    - Node 2 pauses for 30 seconds
# 3. Can I ping my peer on all three networks? Loop until true.
#    - Wait here indefinately
# 4. Check to see if cman/rgmanager was running.
#    - Start 'cman' on both nodes
#    - Start drbd on both nodes
#      - Verify all resources 'Connect'
#    - Start rgmanager on both nodes.
#      - Watch clvmd; make sure all LVs go ACTIVE (and activate them if not)
#    - Verify that /shared/ mounts and test;
#      - 'touch /shared/status/${node}.test && rm -f /shared/status/${node}.test'
#    - Verify that all resources are Primary on both nodes and promote any that aren't.
#    - Verify that libvirtd is running.
# 5. Watch DRBD; If resync'ing, wait up to ~1 minute for storage to sync. Boost resync speed to 40% of SN 
#    speed. If it looks like resync will take > 5 minutes 10 seconds after boosting, abort the wait.
#    - Reset DRBD config before proceeding.
# 6. Using Start Groups/Delays (and ignoring 'clean' off VMs), boot servers.
# 

# Who am I and what Anvil! do I belong to?
find_myself($an);

# Wait until I can ping the peer on all three networks.


$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
	name1 => "sys::local_node", value1 => $an->data->{sys}{local_node}, 
	name2 => "sys::peer_node",  value2 => $an->data->{sys}{peer_node}, 
	name3 => "sys::i_am_node2", value3 => $an->data->{sys}{i_am_node2}, 
}, file => $THIS_FILE, line => __LINE__});


exit(0);


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This checks to see if an instance of the program is running. It also checks to see if the program is 
# configured to run on boot.
sub report_state
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "create_rc3d_symlink" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is it enabled on boot?
	if (-e $an->data->{path}{'anvil-safe-start_link'})
	{
		# Yup.
		print $an->String->get({key => "asst_message_0005", variables => { this_file => $THIS_FILE }})."\n";
	}
	else
	{
		# Nope.
		print $an->String->get({key => "asst_message_0006", variables => { this_file => $THIS_FILE }})."\n";
	}
	
	# Is it running now?
	my $pids  = $an->Get->pids({program_name => $THIS_FILE});
	my $count = @{$pids};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "count", value1 => $count, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($count)
	{
		# Yup.
		print $an->String->get({key => "asst_message_0007", variables => { this_file => $THIS_FILE }})."\n";
		foreach my $pid (sort {$a cmp $b} @{$pids})
		{
			print $an->String->get({key => "asst_message_0008", variables => { pid => $pid }})."\n";
		}
	}
	else
	{
		print $an->String->get({key => "asst_message_0009", variables => { this_file => $THIS_FILE }})."\n";
	}
	
	return(0);
}

# This creates the /etc/rc3.d/ symlink that runs this program on boot.
sub create_rc3d_symlink
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "create_rc3d_symlink" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# First, does the symlink exist already?
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "path::anvil-safe-start_link", value1 => $an->data->{path}{'anvil-safe-start_link'}, 
	}, file => $THIS_FILE, line => __LINE__});
	if (-e $an->data->{path}{'anvil-safe-start_link'})
	{
		# Already exists, nothing to do.
		$an->Log->entry({log_level => 2, message_key => "asst_log_0003", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "asst_message_0002", variables => { this_file => $THIS_FILE }})."\n";
	}
	else
	{
		# Create it.
		my $target = $an->data->{path}{'anvil-safe-start'};
		my $link   = $an->data->{path}{'anvil-safe-start_link'};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "target", value1 => $target, 
			name2 => "link",   value2 => $link, 
		}, file => $THIS_FILE, line => __LINE__});
		symlink $target, $link or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_message_0052", message_variables => { target => $target, 'link' => $link, error => $! }, code => 52, file => "$THIS_FILE", line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "asst_log_0002", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "asst_message_0001", variables => { this_file => $THIS_FILE }})."\n";
	}
	
	return(0);
}

# This removes the /etc/rc3.d/ symlink that runs this program on boot.
sub remove_rc3d_symlink
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "remove_rc3d_symlink" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# First, does the symlink exist already?
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "path::anvil-safe-start_link", value1 => $an->data->{path}{'anvil-safe-start_link'}, 
	}, file => $THIS_FILE, line => __LINE__});
	if (-e $an->data->{path}{'anvil-safe-start_link'})
	{
		# Already gone, nothing to do.
		$an->Log->entry({log_level => 2, message_key => "asst_log_0005", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "asst_message_0004", variables => { this_file => $THIS_FILE }})."\n";
	}
	else
	{
		# Remove it
		my $file = $an->data->{path}{'anvil-safe-start_file'};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "file", value1 => $file, 
		}, file => $THIS_FILE, line => __LINE__});
		
		unlink $file or $an->Alert->error({fatal => 1, title_key => "an_0003", message_key => "error_message_0053", message_variables => { file => $file, error => $! }, code => 53, file => "$THIS_FILE", line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "asst_log_0004", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "asst_message_0003", variables => { this_file => $THIS_FILE }})."\n";
	}
	
	return(0);
}

# This figures out who I am, what Anvil! I am in and who my peer is.
sub find_myself
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $hostname_full  = $an->hostname();
	my $hostname_short = $an->short_hostname();
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "hostname_full",  value1 => $hostname_full, 
		name2 => "hostname_short", value2 => $hostname_short, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Collect information about this Anvil!
	my $return = $an->Get->local_anvil_details({
		hostname_full	=>	$an->hostname,
		hostname_short	=>	$an->short_hostname,
		config_file	=>	$an->data->{path}{cluster_conf},
	});
	$an->data->{sys}{local_node} = $return->{local_node};
	$an->data->{sys}{peer_node}  = $return->{peer_node};
	$an->data->{sys}{anvil_name} = $return->{anvil_name};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
		name1 => "sys::local_node", value1 => $an->data->{sys}{local_node}, 
		name2 => "sys::peer_node",  value2 => $an->data->{sys}{peer_node}, 
		name3 => "sys::anvil_name", value3 => $an->data->{sys}{anvil_name}, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# If I am node 2, make note so that we can delay and let node 1 run first.
	if (($an->data->{sys}{local_node} =~ /n02/) or ($an->data->{sys}{local_node} =~ /node02/) or ($an->data->{sys}{local_node} =~ /node2/))
	{
		$an->data->{sys}{i_am_node2} = 1;
		$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::i_am_node2", value1 => $an->data->{sys}{i_am_node2}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Figure out what my peer's BCN, SN and IFN names are
	$an->data->{peer}{short_name} =  $an->data->{sys}{peer_node};
	$an->data->{peer}{short_name} =~ s/\..*$//;
	$an->data->{peer}{bcn_name}   = $an->data->{peer}{short_name}.".bcn";
	$an->data->{peer}{sn_name}    = $an->data->{peer}{short_name}.".sn";
	$an->data->{peer}{ifn_name}   = $an->data->{peer}{short_name}.".ifn";
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $help = "";
	open (my $file_handle, ">", "/tmp/${THIS_FILE}.help") or die "Couldn't write help to /tmp/, error was: $!\n";
	print $file_handle $help;
	close $file_handle;
	
	system($an->data->{path}{'less'}." /tmp/${THIS_FILE}.help");

	return(0);
}
