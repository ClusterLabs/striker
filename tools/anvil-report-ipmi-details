#!/usr/bin/perl
# 
# This looks for IPMI information in the cluster configuration (on nodes) and in Striker's cache files (on 
# dashboards). It formats the found data and reports it in a machine-parsable format.
# 
# This software was created by Alteeve's Niche! Inc. and has been released under the terms of the GNU GPL 
# version 2.
#
# https://alteeve.ca
# 
# 0 == OK
# 1 == Error
#

my $THIS_FILE =  $0;
   $THIS_FILE =~ s/^.*\///;

use strict;
use warnings;
use IO::Handle;

$| = 1;

# Don't set defaults for security here. The user *must* set them in their striker.conf file.
my $conf = {
	path	=>	{
		cman_config	=>	"/etc/cluster/cluster.conf",
		node_cache	=>	"/var/www/home/cache", 
	},
	sys	=>	{
		debug		=>	0,
	},
};

read_cman_configuration($conf);

read_striker_cache($conf);

exit(0);


# This reads any cache files on a Striker dashboard that it can find.
sub read_striker_cache
{
	my ($conf) = @_;
	
	if (-d $conf->{path}{node_cache})
	{
		# So we do have a cache directory. What about actual
		# cache files?
		local(*DIRECTORY);
		opendir(DIRECTORY, $conf->{path}{node_cache});
		while(my $file = readdir(DIRECTORY))
		{
			next if $file eq ".";
			next if $file eq "..";
			next if $file !~ /cache_.*?\.striker/;
			my $full_path = $conf->{path}{node_cache}."/$file";
			if (-r $full_path)
			{
				# Woot!
				my $host_name           = "";
				my $power_check_command = "";
				my $shell_call          = $full_path;
				open (my $file_handle, "<$shell_call") or die "$THIS_FILE ".__LINE__." [ Error ] - Failed to read: [$shell_call], error was: $!\n";
				while(<$file_handle>)
				{
					chomp;
					my $line =  $_;
					if ($line =~ /host_name = (.*)$/)
					{
						$host_name = $1;
					}
					if ($line =~ /power_check_command = (.*)$/)
					{
						$power_check_command = $1;
					}
					print "$THIS_FILE ".__LINE__."; [ Debug ] - line: [$line]\n" if $conf->{sys}{debug};
				}
				close $file_handle;
				
				print "!!node!$host_name!!,!!power_check_command!$power_check_command!!\n";
			}
		}
	}
	
	return(0);
}

# This reads in the configuration file.
sub read_cman_configuration
{
	my ($conf) = @_;
	
	return(1) if not -e $conf->{path}{cman_config};

	my $this_node   = 0;
	my $file_handle = IO::Handle->new();
	my $shell_call  = "$conf->{path}{cman_config}";
	open ($file_handle, "<$shell_call") or die "Failed to read: [$shell_call], error was: $!\n";
	while (<$file_handle>)
	{
		chomp;
		my $line = $_;
		
		if ($line =~ /<fencedevice (.*?)\/>/)
		{
			my $attributes =  $1;
			my $name       =  ($attributes =~ /name="(.*?)"/)[0];
			   $attributes =~ s/name=".*?"//;
			$conf->{fencedevice}{$name}{attributes} = $attributes;
			print "$THIS_FILE ".__LINE__."; [ Debug ] - Fence device: [$name] attributes: [$conf->{fencedevice}{$name}{attributes}]\n" if $conf->{sys}{debug}; 
		}
		if ($line =~ /<clusternode /)
		{
			$this_node = ($line =~ /name="(.*?)"/)[0];
			print "$THIS_FILE ".__LINE__."; [ Debug ] - Entering child elements for node: [$this_node]\n" if $conf->{sys}{debug}; 
		}
		if ($line =~ /<\/clusternode>/)
		{
			$this_node = "";
		}
		if (($this_node) && ($line =~ /<device (.*?)\/>/))
		{
			my $attributes = $1;
			my $name       =  ($attributes =~ /name="(.*?)"/)[0];
			   $attributes =~ s/name=".*?"//;
			$conf->{node}{$this_node}{device}{$name}{attributes} = $attributes;
			print "$THIS_FILE ".__LINE__."; [ Debug ] - Node: [$this_node] fence device: [$name] attributes: [$conf->{node}{$this_node}{device}{$name}{attributes}]\n" if $conf->{sys}{debug}; 
		}
	}
	close $file_handle;
	
	foreach my $this_node (sort {$a cmp $b} keys %{$conf->{node}})
	{
		foreach my $name (sort {$a cmp $b} keys %{$conf->{node}{$this_node}{device}})
		{
			my $attributes  = $conf->{node}{$this_node}{device}{$name}{attributes};
			   $attributes .= " ".$conf->{fencedevice}{$name}{attributes} if $conf->{fencedevice}{$name}{attributes};
			
			# I don't care about non-fence_ipmilan agents.
			next if $attributes !~ /fence_ipmilan/;
			$attributes =~ s/^\s+//;
			$attributes =~ s/\s+$//;
			$attributes =~ s/\s+/ /g;
			print "$THIS_FILE ".__LINE__."; [ Debug ] - IPMI variables for node: [$this_node]:\n" if $conf->{sys}{debug}; 
			
			# Convert the attributes into the their switch 
			# equivalents. Note that some are ignored because 
			# they're not important when checking power or
			# turning a machine off or on.
			my $power_check_command = "fence_ipmilan";
			foreach my $pair (split/ /, $attributes)
			{
				my ($variable, $value) = ($pair =~ /^(.*?)="(.*?)"/);
				my $this_switch = "";
				if    ($variable eq "auth")          { $power_check_command .= " -A $value"; }	# IPMI Lan Auth type (md5, password, or none)
				elsif ($variable eq "ipaddr")        { $power_check_command .= " -a $value"; }	# IPMI Lan IP to talk to
				elsif ($variable eq "passwd")        { $power_check_command .= " -p $value"; }	# Password (if required) to control power on IPMI device
				elsif ($variable eq "passwd_script") { $power_check_command .= " -S $value"; }	# Script to retrieve password (if required)
				elsif ($variable eq "lanplus")       { $power_check_command .= " -P $value"; }	# Use Lanplus to improve security of connection
				elsif ($variable eq "login")         { $power_check_command .= " -l $value"; }	# Username/Login (if required) to control power on IPMI device
				elsif ($variable eq "timeout")       { $power_check_command .= " -t $value"; }	# Timeout (sec) for IPMI operation
				elsif ($variable eq "cipher")        { $power_check_command .= " -C $value"; }	# Ciphersuite to use (same as ipmitool -C parameter)
				elsif ($variable eq "power_wait")    { $power_check_command .= " -T $value"; }	# Wait X seconds after on/off operation (Default Value: 2)
				elsif ($variable eq "privlvl")       { $power_check_command .= " -L $value"; }	# Privilege level on IPMI device
			}
			print "!!node!$this_node!!,!!power_check_command!$power_check_command!!\n";
		}
	}
	
	return(0);
}
