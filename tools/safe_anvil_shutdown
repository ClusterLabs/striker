#!/usr/bin/perl
#
# Safe Anvil! Shutdown
# 
# This is called by scan-core (or other apps/people) to shut down the Anvil!.
# Why the system is being shut down is not a concern, only the mechanics are.
# This will check 
# 
# Author:  mkelly@alteeve.ca
# Version: v0.0.1
# 

use strict;
use warnings;
use IO::Handle;
$| = 1;

# Hash
my $conf = {
	drbd		=>	{
		all_resources_uptodate	=>	1,
		connected_resources	=>	0,
		'state'			=>	1,	# 1 == running, 0 == offline
		resource		=>	{
		},
	},
	node		=>	{
		me			=>	{
			name			=>	"",
			rgmanager		=>	0,
			cman			=>	0,
		},
		peer			=>	{
			name			=>	"",
			rgmanager		=>	0,
			cman			=>	0,
		},
	},
	path		=>	{
		clustat			=>	"/usr/sbin/clustat",
		clusvcadm		=>	"/usr/sbin/clusvcadm",
		definitions		=>	"/shared/definitions",
		drbd			=>	"/proc/drbd",
		drbdsetup		=>	"/sbin/drbdsetup",
		health_file		=>	"/shared/status",	# under this directory will be a file called ".<node_name>" for each node.
		lvdisplay		=>	"/sbin/lvdisplay",
		lvs			=>	"/sbin/lvs",
		virsh			=>	"/usr/bin/virsh",
	},
	sys		=>	{
		abort_shutdown		=>	0,
		debug			=>	0,
		to_migrate		=>	[],
		to_shutdown		=>	[],
	},
};

### Process;
# Ensure my "health" flag is set to "critical"
# Check if I am hosting a server, if not, initiate shut down.
# If I am hosting a server;
# - Is the peer in the cluster?
# - Is the peer's health flag OK?
# - Is the peer's storage OK?
#   - For each VM, determine backing DRBD device and verify if the peer is
#     UpToDate
#   - Ensure that the peer has /shared mounted 
#   - Ensure the LVs are 'Active'
# - Now;
#   - If OK, Migrate the server(s)
#   - If not, initiate graceful shut down.
# - Once the last servers of gone, initiate shut down.

# Check health of nodes.
print "Safe Anvil! Shutdown initiating!\n";
health_check($conf);

# Is it time to die?
if ($conf->{sys}{abort_shutdown})
{
	print "[ Warning ] - Shut down aborted!\n";
}
else
{
	# Ok, time to withdraw and power off.
	withdraw_and_poweroff($conf);
}

# Either shut down or migrate VMs.
#handle_vms($conf);

exit(0);

# This withdraws from the cluster and powers off the node.
sub withdraw_and_poweroff
{
	my ($conf) = @_;
	
	### TODO: Break these up into steps and add code to handle faults.
	print "- Withdrawing from the cluster and shutting down:\n";
	my $shell_call = "/etc/init.d/rgmanager stop && /etc/init.d/cman stop && poweroff";
	print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n";# if $conf->{sys}{debug};
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		print "- Output: [$line]\n";
	}
	close $file_handle;
	print "I am dead.\n";
	
	return(0);
}

# This checks the health of the peer
sub health_check
{
	my ($conf) = @_;
	
	# First, check the cluster status and determine which node I am and
	# which is the peer.
	check_clustat($conf);
	print "- I am:    [$conf->{node}{me}{name}]\n";
	print "- Peer is: [$conf->{node}{peer}{name}]\n";
	
	# Check the peer's health file if the cluster is up.
	my $peer_healthy = 1;
	if ($conf->{node}{me}{cman})
	{
		my $my_short_name    = ($conf->{node}{me}{name}   =~ /^(.*?)\./)[0];
		my $my_health_file   = "$conf->{path}{health_file}/.$my_short_name";
		print "[ Debug ] - my_short_name:   [$my_short_name],   my_health_file: [$my_health_file]\n" if $conf->{sys}{debug};
		
		my $peer_short_name  = ($conf->{node}{peer}{name} =~ /^(.*?)\./)[0];
		my $peer_health_file = "$conf->{path}{health_file}/.$peer_short_name";
		print "[ Debug ] - peer_short_name: [$peer_short_name], peer_health_file: [$peer_health_file]\n" if $conf->{sys}{debug};
		if (-e $peer_health_file)
		{
			print "- Checking peer's health status:\n";
			my $shell_call = "$peer_health_file";
			print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n" if $conf->{sys}{debug};
			open (my $file_handle, "<", "$shell_call") || die "Failed to read: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$conf->{node}{peer}{health} = ($line =~ /health=(.*)/)[0];
			}
			close $file_handle;
			if (lc($conf->{node}{peer}{health}) eq "ok")
			{
				print "- Peer was last listed as OK, I will migrate servers if possible.\n";
			}
			elsif (lc($conf->{node}{peer}{health}) eq "warning")
			{
				print "- Peer is in 'Warning' state! If will possibly go Critical soon as well,\n";
				print "  so I will shut down my servers.\n";
				$peer_healthy = 0;
			}
			elsif (lc($conf->{node}{peer}{health}) eq "critical")
			{
				print "- Peer is in 'Critical' state! It will very likely shut down shortly, too.\n";
				print "  I will shut down my servers.\n";
				$peer_healthy = 0;
			}
			else
			{
				print "- Peer's health file: [$peer_health_file] exists, but the health state.\n";
				print "  wasn't read. Assuming it is healthy and will migrate to it.\n";
				$peer_healthy = 0;
			}
		}
		else
		{
			print "- Peer's health file: [$peer_health_file] not found.\n";
			print "  Treating it as healthy.\n";
		}
	}
	else
	{
		print "- This node is not in the cluster, shut down can proceed immediately.\n";
		return(0);
	}
	
	if ($peer_healthy)
	{
		# Check DRBD
		check_drbd($conf);
		
		print "- Storage replication state:\n";
		my $check_servers = 1;
		if ($conf->{drbd}{'state'})
		{
			foreach my $resource (sort {$a cmp $b} keys %{$conf->{drbd}{resource}})
			{
				my $connection_state = $conf->{drbd}{resource}{$resource}{me}{connection_state};
				my $my_role          = $conf->{drbd}{resource}{$resource}{me}{role};
				my $my_disk_state    = $conf->{drbd}{resource}{$resource}{me}{disk_state};
				my $peer_role        = $conf->{drbd}{resource}{$resource}{peer}{role};
				my $peer_disk_state  = $conf->{drbd}{resource}{$resource}{peer}{disk_state};
				print "- Resource: [$resource], Role (me/peer): [$my_role/$peer_role], Disk state (me/peer): [$my_disk_state/$peer_disk_state]\n";
				if (lc($connection_state) eq "connected")
				{
					$conf->{drbd}{connected_resources}++;
				}
				if ((lc($my_disk_state) ne "uptodate") or (lc($peer_disk_state) ne "uptodate"))
				{
					print "- One side is not UpToDate; VM storage analysis required.\n";
					$conf->{drbd}{all_resources_uptodate} = 0;
				}
			}
			if ($conf->{drbd}{all_resources_uptodate})
			{
				print "- Replicated storage is fully UpToDate, deep storage inspection not requires.\n";
			}
			if (not $conf->{drbd}{connected_resources})
			{
				print "- Replicated storage resources are not connected, no checks required.\n";
				$check_servers = 0;
			}
		}
		else
		{
			print "- Replication is offline, no checks required.\n";
			$check_servers = 0;
		}
		
		if ($check_servers)
		{
			# Handle locally hosted servers
			foreach my $server (sort {$a cmp $b} keys %{$conf->{server}{me}})
			{
				# This will read the.
				my $peer_ok        = map_drbd_resource($conf, $server);
				my $state          = $conf->{server}{me}{$server}{'state'};
				my $disks          = $conf->{server}{me}{$server}{disks};	# csv
				my $drbd_resources = $conf->{server}{me}{$server}{drbd_resources};
				my $backing_lvs    = $conf->{server}{me}{$server}{backing_lvs};
				my $can_migrate    = $conf->{server}{me}{$server}{can_migrate};
				if ($peer_ok eq "2")
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage can not be determined, shut down required.\n";
					push @{$conf->{sys}{to_shutdown}}, $server;
				}
				elsif ($peer_ok)
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage is good, migration possible.\n";
					push @{$conf->{sys}{to_migrate}}, $server;
				}
				else
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage can NOT host this server, shut down required.\n";
					push @{$conf->{sys}{to_shutdown}}, $server;
				}
			}
			# Check that the storage for the peer's servers are UpToDate so that
			# they don't lose storage when we disconnect.
			foreach my $server (sort {$a cmp $b} keys %{$conf->{server}{peer}})
			{
				my $peer_ok        = map_drbd_resource($conf, $server);
				my $state          = $conf->{server}{peer}{$server}{'state'};
				my $disks          = $conf->{server}{peer}{$server}{disks};	# csv
				my $drbd_resources = $conf->{server}{peer}{$server}{drbd_resources};
				my $backing_lvs    = $conf->{server}{peer}{$server}{backing_lvs};
				my $can_migrate    = $conf->{server}{peer}{$server}{can_migrate};
				# I'm not going to power off a node hosted on the peer because 
				if ($peer_ok eq "2")
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage can not be determined, leaving it alone.\n";
				}
				elsif ($peer_ok)
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage is good, no action needed.\n";
				}
				else
				{
					print "- Hosted server: [$server] is: [$state]. The peer's storage can NOT host this server, shut down required.\n";
					push @{$conf->{sys}{to_shutdown}}, $server;
				}
			}
		}
		else
		{
			print "- Checking peer is not needed, must shut down all hosted servers.\n";
			foreach my $server (sort {$a cmp $b} keys %{$conf->{server}{me}})
			{
				# This will read the.
				my $state = $conf->{server}{me}{$server}{'state'};
				print "- Hosted server: [$server] in state: [$state]\n";
				push @{$conf->{sys}{to_shutdown}}, $server;
			}
		}
		
		# Ok, migrate!
		foreach my $server (sort {$a cmp $b} @{$conf->{sys}{to_migrate}})
		{
			print "- Migrating: [$server] to: [$conf->{node}{peer}{name}]\n";
			my $success    = 0;
			my $shell_call = "$conf->{path}{clusvcadm} -M vm:$server -m $conf->{node}{peer}{name}";
			print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n";# if $conf->{sys}{debug};
			open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				print "- Output: [$line]\n";
				if ($line =~ /Success$/i)
				{
					print "- Migration successful!\n";
				}
				else
				{
					print "- Migration failed! I will shut the server down.\n";
					push @{$conf->{sys}{to_shutdown}}, $server;
				}
			}
			close $file_handle;
		}
	}
	else
	{
		# Peer isn't healthy, so just queue my servers for shutdown.
		foreach my $server (sort {$a cmp $b} keys %{$conf->{server}{me}})
		{
			# This will read the.
			push @{$conf->{sys}{to_shutdown}}, $server;
		}
	}
	
	# Shut down servers.
	foreach my $server (sort {$a cmp $b} @{$conf->{sys}{to_shutdown}})
	{
		print "- Shutting down: [$server]\n";
		my $shell_call = "$conf->{path}{clusvcadm} -d vm:$server";
		print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n";# if $conf->{sys}{debug};
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			print "- Output: [$line]\n";
			if ($line =~ /Success$/i)
			{
				print "- Shutdown successful!\n";
			}
			else
			{
				print "- Shutdown failed!\n";
				print "[ Warning ] - Shut down will be aborted! Administrator intervention required!\n";
				$conf->{sys}{abort_shutdown} = 1;
			}
		}
		close $file_handle;
	}
	
	# Ok, shut down.
	print "- Done.\n";
	
	return(0);
}

# This reads the server's XML file to determine which LVs it is using, then it
# figures out which DRBD resources the server needs to have UpToDate on the
# peer in order to determine if migration is possible.
sub map_drbd_resource
{
	my ($conf, $server) = @_;
	
	# Simply return if everything is UpToDate on both nodes, no since
	# risking a bug crapping up out.
	if ($conf->{drbd}{all_resources_uptodate})
	{
		return(1);
		#print "[ Notice ] - Performing deep storage inspection of: [$server] anyway.\n";
	}
	
	# First, read in the config file.
	my $definition_file = "$conf->{path}{definitions}/${server}.xml";
	my $lvs             = "";
	my $peer_ok         = 1;
	if (-e $definition_file)
	{
		print "- Reviewing: [$server]'s definition file: [$definition_file]:\n";
		my $shell_call = "$definition_file";
		print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n" if $conf->{sys}{debug};
		open (my $file_handle, "<", "$shell_call") || die "Failed to read: [$shell_call], error was: $!\n";
		my $in_disk        = 0;
		my $current_device = "";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			#print "[ Debug ] ".__LINE__."; - line: [$line]\n" if $conf->{sys}{debug};
			if (($line =~ /<disk/) && ($line =~ /type='block'/) && ($line =~ /device='disk'/))
			{
				$in_disk = 1;
				next;
			}
			elsif ($line =~ /<\/disk/)
			{
				$in_disk = 0;
				next;
			}
			if ($in_disk)
			{
				print "[ Debug ] ".__LINE__."; disk: [$line]\n" if $conf->{sys}{debug};
				if ($line =~ /source dev='(.*?)'/)
				{
					my $lv  =  $1;
					   $lvs .= "$lv,";
					print "[ Debug ] ".__LINE__."; - Adding LV: [$lv]\n" if $conf->{sys}{debug};
				}
			}
		}
		close $file_handle;
		$lvs =~ s/,$//;
	}
	else
	{
		print "[ Warning ] - Unable to find: [$server]'s definition file: [$definition_file]!\n";
		return(2);
	}
	
	# Now loop through the LVs and figure out what DRBD resource(s) they
	# sit on.
	foreach my $lv (split/,/, $lvs)
	{
		print "- Mapping the logical volume: [$lv]\n";
		my $shell_call = "$conf->{path}{lvs} --separator , -o lv_path,devices";
		print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n" if $conf->{sys}{debug};
		open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
		while(<$file_handle>)
		{
			chomp;
			my $line =  lc($_);
			   $line =~ s/^\s+//;
			   $line =~ s/\s+$//;
			   $line =~ s/\s+/ /g;
			print "[ Debug ] ".__LINE__."; - line: [$line]\n" if $conf->{sys}{debug};
			if ($line =~ /^$lv,(\/dev\/.*)/)
			{
				my $devices = $1;
				print "[ Debug ] ".__LINE__."; - devices: [$devices]\n" if $conf->{sys}{debug};
				foreach my $device (split/,/, $devices)
				{
					print "[ Debug ] ".__LINE__."; - device: [$device]\n" if $conf->{sys}{debug};
					# We only care about DRBD device.
					next if $device !~ /drbd/;
					
					# Strip off the PE's starting extent.
					$device =~ s/\(.*\)//;
					
					my $minor_number = ($device =~ /(\d+)$/)[0];
					my $resource     = "r".$minor_number;
					print "- Uses: [$device ($resource)], peer's disk state is: [$conf->{drbd}{resource}{$resource}{peer}{disk_state}]\n";
					
					# See if the peer's DiskState is 'UpToDate'.
					if (lc($conf->{drbd}{resource}{$resource}{peer}{disk_state}) ne "uptodate")
					{
						print "[ Warning ] - Peer is not able to host this server, shutdown required!\n";
						$peer_ok = 0;
					}
				}
			}
		}
		close $file_handle;
	}
	
	if ($peer_ok)
	{
		print "- The peer node's storage is healthy and it can run this server.\n";
	}
	# 0 == No
	# 1 == Yes
	# 2 == Unknown
	return($peer_ok);
}

# This examines DRBD and records the states of each resource
sub check_drbd
{
	my ($conf) = @_;
	
	# Read in /proc/drbd
	if (-e $conf->{path}{drbd})
	{
		my $shell_call = "$conf->{path}{drbd}";
		print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n" if $conf->{sys}{debug};
		open (my $file_handle, "<", "$shell_call") || die "Failed to read: [$shell_call], error was: $!\n";
		my $resource     = "";
		my $minor_number = "";
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			#print "[ Debug ] ".__LINE__."; - >> line: [$line]\n" if $conf->{sys}{debug};
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;
			$line =~ s/\s+/ /g;
			print "[ Debug ] ".__LINE__."; - << line: [$line]\n" if $conf->{sys}{debug};
			
			# This is just for hash key consistency
			#record($conf, "$THIS_FILE ".__LINE__."; >> line: [$line]\n");
			if ($line =~ /^(\d+): cs:(.*?) ro:(.*?)\/(.*?) ds:(.*?)\/(.*?) /)
			{
				   $minor_number     = $1;
				my $connection_state = $2;
				my $my_role          = $3;
				my $peer_role        = $4;
				my $my_disk_state    = $5;
				my $peer_disk_state  = $6;
				   $resource         = "r".$minor_number;	# TODO: Parse the resource config files to confirm minor -> resource naming
				
				$conf->{drbd}{resource}{$resource}{me}{minor_number}     = $minor_number;
				$conf->{drbd}{resource}{$resource}{me}{connection_state} = $connection_state;
				$conf->{drbd}{resource}{$resource}{me}{role}             = $my_role;
				$conf->{drbd}{resource}{$resource}{me}{disk_state}       = $my_disk_state;
				$conf->{drbd}{resource}{$resource}{peer}{role}           = $peer_role;
				$conf->{drbd}{resource}{$resource}{peer}{disk_state}     = $peer_disk_state;
			}
		}
		close $file_handle;
	}
	else
	{
		# DRBD is offline.
		$conf->{drbd}{'state'} = 0;
	}
	
	return(0);
}

# Find out the current state of affairs.
sub check_clustat
{
	my ($conf) = @_;
	
	my $shell_call = "$conf->{path}{clustat}";
	print "[ Debug ] ".__LINE__."; - shell_call: [$shell_call]\n" if $conf->{sys}{debug};
	open (my $file_handle, '-|', "$shell_call") || die "Failed to call: [$shell_call], error was: $!\n";
	my $in_member  = 0;
	my $in_service = 0;
	while(<$file_handle>)
	{
		chomp;
		my $line =  lc($_);
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+/ /g;
		next if not $line;
		next if $line =~ /^-/;
		
		if ($line =~ /^member name/)
		{
			$in_member  = 1;
			$in_service = 0;
			next;
		}
		elsif ($line =~ /^service name/)
		{
			$in_member  = 0;
			$in_service = 1;
			next;
		}
		if ($in_member)
		{
			if ($line =~ /local/)
			{
				($conf->{node}{me}{name}, undef, my $services) = (split/ /, $line, 3);
				$services =~ s/local//;
				$services =~ s/ //g;
				$services =~ s/,,/,/g;
				$conf->{node}{me}{cman}      = 1 if $services =~ /online/;
				$conf->{node}{me}{rgmanager} = 1 if $services =~ /rgmanager/;
				print "[ Debug ] ".__LINE__."; - Me   -> [$conf->{node}{me}{name}]; cman: [$conf->{node}{me}{cman}], rgmanager: [$conf->{node}{me}{rgmanager}]\n" if $conf->{sys}{debug};
			}
			else
			{
				($conf->{node}{peer}{name}, undef, my $services) = split/ /, $line, 3;
				$services =~ s/ //g;
				$services =~ s/,,/,/g;
				$conf->{node}{peer}{cman}      = 1 if $services =~ /online/;
				$conf->{node}{peer}{rgmanager} = 1 if $services =~ /rgmanager/;
				print "[ Debug ] ".__LINE__."; - Peer -> [$conf->{node}{peer}{name}]; cman: [$conf->{node}{peer}{cman}], rgmanager: [$conf->{node}{peer}{rgmanager}]\n" if $conf->{sys}{debug};
			}
		}
		elsif ($in_service)
		{
			next if $line !~ /^vm:/;
			my ($server, $host, $state) = split/ /, $line, 3;
			$server =~ s/^vm://;
			print "[ Debug ] ".__LINE__."; - VM: [$server] host: [$host], state: [$state]\n" if $conf->{sys}{debug};
			# This only matches our name exactly, not when in
			# brackets, so we don't have to check the state for
			# 'stopped'.
			if ($host eq $conf->{node}{me}{name})
			{
				print "[ Debug ] ".__LINE__."; - VM: [$server] has to be migrated or shut down.\n" if $conf->{sys}{debug};
				$conf->{server}{me}{$server}{'state'}        = $state;
				$conf->{server}{me}{$server}{disks}          = "";
				$conf->{server}{me}{$server}{drbd_resources} = "";
				$conf->{server}{me}{$server}{can_migrate}    = "";
			}
			elsif ($host eq $conf->{node}{peer}{name})
			{
				# We're going to have to make sure sure that
				# our peer node's VMs won't lose storage when
				# we shut down.
				print "[ Debug ] ".__LINE__."; - VM: [$server] is on peer, must verify peer's storage.\n" if $conf->{sys}{debug};
				$conf->{server}{peer}{$server}{'state'}        = $state;
				$conf->{server}{peer}{$server}{disks}          = "";
				$conf->{server}{peer}{$server}{drbd_resources} = "";
				$conf->{server}{peer}{$server}{can_migrate}    = "";
			}
			else
			{
				print "[ Debug ] ".__LINE__."; - VM: [$server] is not running, ignoring.\n" if $conf->{sys}{debug};
			}
		}
	}
	close $file_handle;
	
	return (0);
}

sub handle_vms
{
	my ($conf) = @_;
	
	foreach my $server (sort {$a cmp $b} keys %{$conf->{server}})
	{
		my $server_key =  $server;
		$server        =~ s/^vm://;
		my $peer_is_ok=1;
		print " - Verifying storage on peer node is ready for: [$server]\n";
		my $file_handle=IO::Handle->new();
		my $shell_call="$conf->{path}{virsh} dumpxml $server";
		print "[ Debug ] ".__LINE__."; - Calling: [$shell_call]\n" if $conf->{sys}{debug};
		open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]\n";
		my $in_disk=0;
		while(<$file_handle>)
		{
			chomp;
			my $line=lc($_);
			$line=~s/^\s+//;
			$line=~s/\s+$//;
			$line=~s/\s+/ /g;
			next if not $line;
			if (($line =~ /^<disk/) && ($line =~ /type='block'/) && ($line =~ /device='disk'/))
			{
				$in_disk=1;
				next;
			}
			elsif ($line =~ /^<\/disk/)
			{
				$in_disk=0;
				next;
			}
			next if not $in_disk;
			if ($line =~ /source dev='(.*?)'/)
			{
				my $dev=$1;
				$conf->{server}{$server_key}{disks}.="$dev,";
			}
# 			print "line: [$line]\n";
		}
		$file_handle->close();
		$conf->{server}{$server_key}{disks}=~s/,$//;
		foreach my $dev (sort {$a cmp $b} split /,/, $conf->{server}{$server_key}{disks})
		{
			print "   - Backing device: [$dev]\n";
			my $file_handle=IO::Handle->new();
			my $shell_call="$conf->{path}{lvdisplay} -m $dev";
			print "[ Debug ] ".__LINE__."; - Calling: [$shell_call]\n" if $conf->{sys}{debug};
			open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]\n";
			my $in_disk=0;
			while(<$file_handle>)
			{
				chomp;
				my $line=lc($_);
				$line=~s/^\s+//;
				$line=~s/\s+$//;
				$line=~s/\s+/ /g;
				next if not $line;
				#print "line: [$line]\n";
				if ($line =~ /physical volume (.*)/)
				{
					my $pv=$1;
					print "     - On physical volume: [$pv]\n";
					my $file_handle=IO::Handle->new();
					my $shell_call="$conf->{path}{drbdsetup} $pv status";
					print "[ Debug ] ".__LINE__."; - Calling: [$shell_call]\n" if $conf->{sys}{debug};
					open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]\n";
					my $in_disk=0;
					while(<$file_handle>)
					{
						chomp;
						my $line=lc($_);
						$line=~s/^\s+//;
						$line=~s/\s+$//;
						$line=~s/\s+/ /g;
						next if not $line;
						#print "line: [$line]\n";
						if ($line =~ /cs="connected"/)
						{
							my ($peer_disk_state)=($line=~/ds2="(.*?)"/);
							my ($peer_role)=($line=~/ro2="(.*?)"/);
							
							if (($peer_disk_state eq "uptodate") && ($peer_role eq "primary"))
							{
								print "       - Is Connected, UpToDate and Primary. Ready to receive.\n";
							}
							else
							{
								$peer_is_ok=0;
								print "       - Is Connected but is in state: [$peer_disk_state/$peer_role] (need UpToDate/Primary)\n";
								print "       - I am unable to migrate, will shut down this VM.\n";
							}
						}
						else
						{
							print "       - Is disconnected! Unable to migrate, will shut down this VM.\n";
							$peer_is_ok=0;
						}
					}
					$file_handle->close();
				}
			}
			$file_handle->close();
		}
		if ($peer_is_ok)
		{
			# Migrate
			migrate_vm($conf, $server_key, $conf->{node}{peer}{name});
		}
		else
		{
			# Disable
			disable_vm($conf, $server_key, $conf->{node}{peer}{name});
		}
	}
	
	return(0);
}

# Peform migrations
sub migrate_vm
{
	my ($conf, $server, $target)=@_;
	print " - Migrating: [$server] to: [$conf->{node}{peer}{name}]\n";
	print "   - Please be patient, this may take a few minutes.\n";
	
	my $file_handle=IO::Handle->new();
	my $shell_call="$conf->{path}{clusvcadm} -M $server -m $target";
	print "[ Debug ] ".__LINE__."; - Calling: [$shell_call]\n" if $conf->{sys}{debug};
	open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]\n";
	my $success=0;
	while(<$file_handle>)
	{
		chomp;
		my $line=lc($_);
		$line=~s/^\s+//;
		$line=~s/\s+$//;
		$line=~s/\s+/ /g;
		next if not $line;
# 		print "line: [$line]\n";
		$success=1 if $line =~ /success$/;
	}
	$file_handle->close();
	
	if ($success)
	{
		print "   - Migration successful.\n";
	}
	else
	{
		$conf->{sys}{proceed}=0;
		print "[ ERROR ] - Failed to migrate: [$server] to: [$target]\n";
	}
	
	return(0);
}

# Disable VM
sub disable_vm
{
	my ($conf, $server, $target)=@_;
	print " - Peer node unable to host: [$server], shutting it down.\n";
	print "  - Please be patient, this may take a few minutes.\n";
	
	my $file_handle=IO::Handle->new();
	my $shell_call="$conf->{path}{clusvcadm} -d $server";
	print "[ Debug ] ".__LINE__."; - Calling: [$shell_call]\n" if $conf->{sys}{debug};
	open ($file_handle, "$shell_call 2>&1 |") or die "Failed to call: [$shell_call]\n";
	my $success=0;
	while(<$file_handle>)
	{
		chomp;
		my $line=lc($_);
		$line=~s/^\s+//;
		$line=~s/\s+$//;
		$line=~s/\s+/ /g;
		next if not $line;
# 		print "line: [$line]\n";
		$success=1 if $line =~ /success$/;
	}
	$file_handle->close();
	
	if ($success)
	{
		print "  - Shutdown successful.\n";
	}
	else
	{
		$conf->{sys}{proceed}=0;
		print "[ ERROR ] - Failed to shutdown: [$server]\n";
	}
	
	return(0);
}
