#!/usr/bin/perl
#
# This tool simply parses the striker.conf file and reports in plain language who is the recipient of 
# ScanCore alerts.
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# https://alteeve.ca
# 
# BUG:
# - It reports 'metric' when the user requested imperial.
# 
# Exit Codes:
# 0  - Success

# Determine this file name.
my $THIS_FILE = ($0 =~ /^.*\/(.*)$/)[0];

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;

# This allows our XML and SQL files to be found, even if the path the program
# is in changes.
my $running_directory = ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		path		=>	{
			log_file		=>	"/var/log/striker.log",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
			scancore_strings	=>	"$running_directory/ScanCore/ScanCore.xml",
		},
		scancore			=>	{
			language		=>	"en_CA",
			log_level		=>	1,
			log_language		=>	"en_CA",
		},
	},
});

$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set the log level.
$an->Log->level($an->data->{scancore}{log_level});

# Read in strings now.
$an->String->read_words({file => $an->data->{path}{scancore_strings}});
$an->String->read_words({file => $an->data->{path}{striker_strings}});

# We don't use switches yet, but there is no harm in checking.
$an->Get->switches();

# Parse the alert recipients now.
foreach my $integer (sort {$a cmp $b} keys %{$an->data->{alerts}{recipient}})
{
	$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
		name1 => "integer",                              value1 => $integer,
		name2 => "alerts::recipient::${integer}::email", value2 => $an->data->{alerts}{recipient}{$integer}{email},
		name3 => "alerts::recipient::${integer}::file",  value3 => $an->data->{alerts}{recipient}{$integer}{file},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{alerts}{recipient}{$integer}{email})
	{
		# Email recipient
		#print Dumper $an->data->{alerts}{recipient}{$integer}{email};
		my $name     = "";
		my $email    = "";
		my $language = $an->data->{scancore}{language};
		my $level    = "warning";
		my $units    = "metric";
		foreach my $pair (split/,/, $an->data->{alerts}{recipient}{$integer}{email})
		{
			next if not $pair;
			my ($variable, $value) = ($pair =~ /^(.*?)="(.*)"/);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			if    ($variable eq "name")     { $name     = $value; }
			elsif ($variable eq "email")    { $email    = $value; }
			elsif ($variable eq "language") { $language = $value; }
			elsif ($variable eq "level")    { $level    = $value; }
			elsif ($variable eq "units")    { $units    = $value; }
			else
			{
				# Invalid entry.
				$an->Log->entry({log_level => 2, message_key => "scancore_warning_0009", message_variables => {
					variable => $variable, 
					value    => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
			name1 => "name",     value1 => $name, 
			name2 => "email",    value2 => $email, 
			name3 => "language", value3 => $language, 
			name4 => "level",    value4 => $level, 
			name5 => "units",    value5 => $units, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $log_key = get_log_level_key($an, $level);
		print $an->String->get({
			key			=>	"scancore_tools_0002",
			variables		=>	{
				name			=>	$name,
				email			=>	$email,
				level			=>	$an->String->get_language_name({language => $language}),
				language		=>	"#!string!$log_key!#",
				units			=>	$units eq "imperial" ? "#!string!scancore_tools_0003!#" : "#!string!scancore_tools_0004!#",
			},
		})."\n";
	}
	elsif ($an->data->{alerts}{recipient}{$integer}{file})
	{
		# Write to a file
		my $file     = "";
		my $language = $an->data->{scancore}{language};
		my $level    = "warning";
		my $units    = "metric";
		foreach my $pair (split/,/, $an->data->{alerts}{recipient}{$integer}{file})
		{
			next if not $pair;
			my ($variable, $value) = ($pair =~ /^(.*?)="(.*)"/);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			if    ($variable eq "file")     { $file     = $value; }
			elsif ($variable eq "language") { $language = $value; }
			elsif ($variable eq "level")    { $level    = $value; }
			elsif ($variable eq "units")    { $units    = $value; }
			else
			{
				# Invalid entry.
				$an->Log->entry({log_level => 0, message_key => "scancore_warning_0010", message_variables => {
					variable => $variable, 
					value    => $value, 
				}, file => $THIS_FILE, line => __LINE__});
				exit(1);
			}
		}
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "file",     value1 => $file, 
			name2 => "language", value2 => $language, 
			name3 => "level",    value3 => $level, 
			name4 => "units",    value4 => $units, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# If the file name has '#!hostname!#' in it, replace it with this machine's host name.
		if ($file =~ /#!hostname!#/)
		{
			my $hostname =  $an->hostname;
			$file     =~ s/#!hostname!#/$hostname/;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "file", value1 => $file, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		my $log_key = get_log_level_key($an, $level);
		print $an->String->get({
			key			=>	"scancore_tools_0001",
			variables		=>	{
				file			=>	$file,
				level			=>	$an->String->get_language_name({language => $language}),
				language		=>	"#!string!$log_key!#",
				units			=>	$units eq "imperial" ? "#!string!scancore_tools_0003!#" : "#!string!scancore_tools_0004!#",
			},
		})."\n";
	}
	else
	{
		# Bad entry
		print "Malformed alert recipient in: [".$an->data->{path}{log_file}."] at: [alerts::recipient::$integer]\n";
	}
}



exit(0);

# This translates a log level name into a string key
sub get_log_level_key
{
	my ($an, $level) = @_;
	
	my $key = "scancore_tools_0010";
	if    ($level eq "debug")    { $key = "scancore_tools_0005"; }
	elsif ($level eq "info")     { $key = "scancore_tools_0006"; }
	elsif ($level eq "notice")   { $key = "scancore_tools_0007"; }
	elsif ($level eq "warning")  { $key = "scancore_tools_0008"; }
	elsif ($level eq "critical") { $key = "scancore_tools_0009"; }
	
	return($key);
}
