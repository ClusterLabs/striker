=pod

=encoding utf8

=head1 NAME

AN::Tools

Serves only to load all other AN::Tools::* modules in a common object and provide shortcuts to their methods.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an = AN::Tools->new();
  
  # Again, but this time tell the AN::Tools::String module to force the use of
  # UTF-8 mode when reading its built-in XML words file and to set the default
  # language as Japanese.
  my $an = AN::Tools->new({
  	default_language	=>	'jp',
  	String			=>	{
  		force_utf8		=>	1,
  	},
  });

=head1 DESCRIPTION

This module provides access to all the AN::Tools::* modules' methods. For details on what methods each module provides, please see their respective perldocs or visit the AN::Tools webite, http://alteeve.ca.

Some modules can be passed load-time values to alter how the AN::Tools suite starts. Where this is the case, you can pass a hash reference where the key structure is '$hashref->{module_name}{method_name} = arg' or, when a method takes several parameters, '$hashref->{module_name}{method_name}{arg_name} = arg'.

Currently supported load-time arguments:

=over

=item C<default_language>

Tell all AN::Tools modules to use a different default language. The format is: [C<{default_language} = 'code'>].

=item C<Readable::base2>

Tell AN::Tools::Readable to translate between byte sizes and human readable sizes using base2 notation when set to: [C<1>] (default) or base10 notation when set to: [C<0>]. The format is: [C<{Readable}{base2} = [0|1]>].

=item C<String::force_utf8>

Tell AN::Tools to force the use of UTF-8 mode when reading its internal XML words file. The format is: C<{String}{force_utf8} = [0|1]>.

=back

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 new

=head3 Example

  use AN::Tools;

  # Get a handle on the MB::Tools object.
  my $an = AN::Tools->new;

  # With the handle to this module's object, you access the rest of the
  # AN::Tools::* suite of modules by calling them by their method name. For
  # example, to access AN::Tools::Math's 'round' method, call it like this:
  $an->Math->round({number => 30.33754, places => 2});
  
  # The format is always:
  #$an->Module->Method(<parameters>);

=head3 Details

This is the constructor method used to access this object's handle on the various AN::Tools::* objects. It also provides access to the methods provided by these modules as seen in the example above. Access to each module's methods is formatted this way to make the resulting code clearer and somewhat self-documenting. This access method cannot be (safely) circumvented as AN::Tools does not use C<@ISA> to access the child (sibling) module's methods nor do the other methods C<Export> their methods. Attempting to directly access the child modules will fail as they require access to one another and expect to be able to do this via the C<AN::Tools> module.

The current supported modules are:

=over

=item * AN::Tools::Alert

=item * AN::Tools::Check

=item * AN::Tools::Log

=item * AN::Tools::Math

=item * AN::Tools::Readable

=item * AN::Tools::String

=back

=head2 error

=head3 Example

  # See if an error state exists.
  die "AN::Tools failed on the last call. Error was: ".$an->error if $an->error;

=head3 Details

This method takes no arguments. It simply returns the last error if set, otherwise it returns undef. This method only has use if '$an->Alert->no_fatal_errors' has been set to '1'. Otherwise the method call with an error would have died before returning.

=head2 default_language

=head3 Example

  # Set and/or return what the current default language code is.
  my $current_lang = $an->default_language;
  print "Language: [$current_lang].\n"; # Prints "Language: [en_CA]."
  
  # Change the default language to Japanese.
  $current_lang = $an->default_language('jp');
  print "Language: [$current_lang].\n"; # Now prints "Language: [jp]."

=head3 Details

This method sets the default language to use when no explicit language is defined when calling language-aware methods like '$an->Log->entry' or '$an->String->get_string'. Normally, it is recommended to set this to the language you want your logs written in as the user's language should always be passed from their preference settings. However, this is just by convention.

=head1 Child Module Access

In traditional perl parlance, these modules are siblings of this module. However, it makes a bit more sense to think of them as child objects because of how access is structured.

=head2 C<Alert>

=head3 Example

  # Access the example 'foo' method.
  $an->Alert->foo.
  
=head3 Details

The C<AN::Tools::Alert> module handles warnings and errors.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Alert>

=head2 C<Check>

=head3 Example

  # Access the example 'foo' method.
  $an->Check->foo.
  
=head3 Details

The C<AN::Tools::Check> module handles checking system and internal conditions.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Check>

=head2 C<Log>

=head3 Example

  # Access the example 'foo' method.
  $an->Log->foo.
  
=head3 Details

The C<AN::Tools::Log> module handles writing to the log file.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Log>

=head2 C<Math>

=head3 Example

  # Access the example 'foo' method.
  $an->Math->foo.
  
=head3 Details

The C<AN::Tools::Math> method handles mathmatical operations.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Math>

=head2 C<Readable>

=head3 Example

  # Access the example 'foo' method.
  $an->Readable->foo.
  
=head3 Details

The C<AN::Tools::Readable> method handles converting large bits of data, generally numbers, sizes and UNIX timestamps, between more human readable formats and back

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Readable>

=head2 C<data>

=head3 Example

  # Get a handle on AN::Tool's internal data store.
  my $data = $an->data;

=head3 Details

All AN::Tools modules store their data in a common, user-accessible hash reference. This allows easy access to variables read in from configuration files, a given language's word strings and so forth.

For example, say that your configuration file had the variable-value pair:

C<foo::bar = baz>

You could see the value read for C<foo::bar> by:

print "The value of 'foo::bar' is: [$data->{foo}{bar}]\n";  # prints "The value of 'foo::bar' is: [baz]";

Another example, though not realistic, would be to access the word string 'an_0000' in the language 'en_CA':

my $word = $an->data()->{strings}{lang}{en_CA}{key}{an_0000}{content};
print "Word: [$word].\n"; # prints "Word: [AN::Tools rapid development suite.]."

Realistically though, you'll probably want to access strings via 'AN::Tools::String's 'get_word()' method.

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Convert

=item AN::Tools::Get

=item AN::Tools::Log

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 1997-2015 Alteeve's Niche! Inc., All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
