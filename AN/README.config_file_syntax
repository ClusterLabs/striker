              AN!Tools Configuration File Formatting.


-=] Overview

  AN!Tools uses a configuration file format that most people should feel
comfortable with. At it's core, variables are defined using this format:

# Variable comment.
variable = value

  As with all AN!Tools files, this file must be saved with UTF-8 encoding.


-=] Comments:

  In short, any line whose first non-white-space character is a pound sign (#)
is treated as a comment and ignored. Pound-signs in a variable's value are
treated as part of the value and are *not* ignored. No other character is
treated as a comment.


-=] Variable Names

  AN!Tools, like Perl itself, treats double-colons as seperators in variable
names. Variable names become hash keys with the value being what is recorded
in the hash. So then, the following configuration file variable:

foo::bar::baz = kitties

  Will become available in AN!Tools as:

$hash_ref->{foo}{bar}{baz};	# Contains: [kitties]

  There is no limit to how many double-colon seperators can be used.

  There is a restriction to be aware of though. If you try to set a value part
way down the key chain of an existing key pair, you sub keys will be lost
because the value will over-write the hash reference. Inversely, setting a sub
key after defining a variable will write the hash reference over the value.

  So then, this variable would step on the variable used above;

# BAD VARIABLE because of the pair above.
foo:bar = puppies		# Now, 'foo::bar::baz is gone because the
				# pointer stored in 'foo::bar' was overwritten
				# with: [Puppies!].

  The last thing to know is that substitution strings, which will be discussed
in the next section, can not be used in variable names. Whatever you use as the
variable name keys is what is stored, period.


-=] Values

  Values are anything found on the same line as a variable name after the equal
sign. Once the split on the '=' occurs, the entire remainder of the string is
stored. Further '=', '#' and the like will have no special meaning.

  Currently, values can not span multiple lines.

  Variables with substitution strings are valid, but they will not be processed
when the configuration file is loaded. Instead, they will be processed (if at
all) by the methods their values are fed into.


-=] Substitution Strings

  AN!Tools supports a common format of substitution strings. They are always in
the format:

#!type!key!#

  The 'type' tells AN!Tools where to look for the 'key' that has the value to
substitute. So, continuing with the example above, if your variable/value pair
looked like this:

some::var = My favourite animal is #!data!foo::bar::baz!#.

  Then the value stored in '$hash_ref->{some}{var}' would be
"My favourite animal is #!data!foo::bar::baz!#".

  Now, let's pretend we have a words string with it's own variable substitution
'#!variable!0!#':

<key name="test_0000">Testing: [#!variable!x!#]</key>

 Then, you could call the method '$an->String->get()' like this:

my $string = $an->String->get({
	key	 =>	"test_0000",
	variable =>	{x => "foo"},
});

  The returned string stored would now contain the fully parsed line:

Testing: [My favourite animal is kitties.]

  If this seems a little confusing, just remember this; Substitutions are NOT
parsed on read, only when used in a method that does parsing.


-=] Substitution Types

  The supported types of substitution strings are:

#!data!...!#

  These substitution strings will be drawn from the variables contained in the
hash reference passed into the parsing method. By default, this is the hash
reference returned by '$an->data' method. This usually includes the variables
read in by the '$an->Storage->read_conf()' method.

#!string!...!#

  These substitution strings will be drawn from the XML word keys read in by
the "$an->Storage->read_words();" method.

#!variable!..!#

  These are special substitution strings only used in '#!string!...!#' strings.
Be careful using these in configuration file values. If the variable's value is
parsed by anything other than the '$an->String->get()' method, an error will be
raised.

#!replace!..!#

  These are special substitution strings similar to #!variable!...!#. In this case,
these substitution strings are only used by the ... MADI: Templating...
