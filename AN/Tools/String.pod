=pod

=encoding utf8

=head1 NAME

AN::Tools::String

This module handles all of the "string" functions. In other words, all processing of data to be written to log files or show to user's gets fed through here. This also handles loading one or more language's "words" from XML files into the '$an->data' hash reference.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an = AN::Tools->new();
  
  # Access this module's methods using '$an->Storage->read_words()' syntax. For
  # example, this is how you would read in an XML words file.
  $an->Storage->read_words({file => "/path/to/program/words.xml"});

=head1 DESCRIPTION

This module provides access to the various "words" processing methods. These include reading in XML words files, inserting variables into strings, processing template files and so forth.

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 force_utf8

=head3 Example

  # Force 'utf8' mode for an XML words file to be read then turn it back off.
  $an->String->force_utf8(1);
  $an->Storage->read_words({file => "/path/to/program/words.xml"});
  $an->String->force_utf8(0);

=head3 Details

This returns or sets whether the filehandle used to read files is forced into UTF8 mode. In practice, this should never be needed because all files should already be saved as UTF-8 encoded files. However, if this is not the case, setting this to '1' will tell AN::Tools::String methods to call 'binmode FH, encoding(utf8);'.

If you use this and then see "wide-character in print" warnings, try setting this back to 0,

=head2 get

=head3 Example

  # Simply read in a word string with no replacement keys in the default
  # language.
  my $say_string = $an->String->get({key => "t_0000"});
  
  # The same, but in the shorter array-type call:
  $say_string = $an->String->get("t_0000");
  print "$say_string\n"; # Prints: "Test"
  
  # Now read in a string with two replacement variables.
  $say_string = $an->String->get({
  	key		=>	"t_0002",
  	variable	=>	{
  		first		=>	"A",
  		second		=>	"B"
  	});
  
  # The same, but in the shorter array-type call:
  $say_string = $an->String->get("t_0002", {first => "A", second => "B"});
  print "$say_string\n"; # Prints: "Test Out of order: [B] replace: [A]."
  
  # This time specify to read from the Japanese word strings.
  $an->String->get({
  	key		=>	"t_0002",
  	variable	=>	{
  		first		=>	"あ",
  		secind		=>	"い"
  	},
  	language	=>	"jp"
  });
  
  # The same, but in the shorter array-type call:
  $an->String->get("t_0002", {first => "あ", second => "い"}, "jp");
  print "$say_string\n"; # Prints: "テスト、 整理: [い]/[あ]。"
  
  # Finally, get a word string from another hash reference instead of from
  # $an->data.
  my $test = {};
  $an->Storage->read_words("./test.xml", $test)
  $an->String->get({key => "ta_0000", variable => {test => "あ"}, language => "jp", hash => $test});
  
  # The same, but in the shorter array-type call:
  $an->String->get("ta_0000", {test => "あ"}, "jp", $test)
  print "$say_string\n"; # Prints: "テスト、 整理: [い]/[あ]。"

=head3 Details

This is the main method used to build and get word strings for displaying to the user. It takes four parameters in either hash reference (prefered) format or as a normal set of arguments.

=head3 Parameters

=head4 C<key>

This is the only required parameter (first argument in array-type calls). This corresponds to the XML key name that you want to process from the given language.

=head4 C<variable>

This is an optional array reference with values used to replace corresponding '#!variable!x!#' replacement keys in the requested word key. When calling in array format with a specified language and no variables, remember to pass C<[]> here so that the language won't be picked up as a malformed array reference.

=head4 C<language>

This is an optional language to use when reading in the word key. The default is to use C<$an->default_language>. Generally you will always want to pass this using the user's language preference.

=head4 C<hash>

This is an optional alternate hash reference to read the requested words key from. The default is to use C<$an->data>. This hash reference must contain data read in from the C<$an->Storage->read_words> method call.

=head2 read_words

=head3 Example

  # Read in your program's XML words file into the '$an->data' hash reference.
  $an->Storage->read_words({file => "/path/to/program/words.xml"});
  
  # Same, but this time read the XML words file into your own dedicated hash
  # reference.
  my $hash = {};
  $an->Storage->read_words({
	file	=>	"/path/to/program/words.xml",
	hash	=>	$hash
  });

=head3 Details

This reads in an XML words file with your program's words. By default, the data is fed into the '$an->data' hash reference under the 'words' key. This data is meant to be accessed and manipulated by the C<get_word> method, but if you have a need to directly access it, it is in the following format:

# Get the 'an_0000' keyed word under the Canadian English (en_CA) language.
my $word = $an->data()->{strings}{lang}{en_CA}{key}{an_0000}{content};
print "Word: [$word].\n"; # prints "Word: [AN::Tools rapid development suite.]."

If you pass your own hash reference, AN::Tools will not have access to the words you read by default. To let C<get_word> access your words you will need to pass the C<hash> param when calling it (and other) methods in the future. Using the example above, you would access data fed into your hash file this way:

# Get the 'an_0000' keyed word under the Canadian English (en_CA) language.
my $word = $hash->{strings}{lang}{en_CA}{key}{an_0000}{content};
print "Word: [$word].\n"; # prints "Word: [AN::Tools rapid development suite.]."

=head3 Parameters

=head4 C<file>

This is the relative or fully defined path to your XML word file to read.

=head4 C<hash>

Default: $an->data

This is an optional, alternative hash reference to read your word file into.

=head1 XML Words Format Details

This describes the format of the XML word files used by AN::Tools. Please see the build-in C<tools.xml> file in the root of the AN::Tools module directory for a better feel for these file's layout.

The "word" file is structured like this:

 <?xml version="1.0" encoding="UTF-8"?>
 <strings>
 	<!-- Canadian English -->
 	<langs>en_CA,jp</langs>
 	<lang name="en_CA" long_name="Canadian English">
 		<key name="comment">Created by Madison Kelly (mkelly@alteeve.ca) for the AN::Tools suite of perl modules.</key>
 		<key name="an_0000">AN::Tools rapid development suite.</key>
 	</lang>
 	
 	<!-- 日本語 -->
 	<langs>jp</langs>
 	<lang name="jp" long_name="日本語">
 		<key name="comment">Created by Madison Kelly (mkelly@alteeve.ca) for the AN::Tools suite of perl modules.</key>
 		<key name="an_0000">テスト単語</key>
 	</lang>
 </strings>

All languages are within the 'words' block. The first argument, C<langs>, is a comma-seperated list of enabled languages. This allows you to have a work-in-progress language without making it available to users of the program by simply leaving out of this list.

Each actual language is contained in a C<lang> block. The most important entry is the C<name> value. This must be set to the language's ISO language code and must be in the C<langs> CSV value above in order to be used. The C<long_name> is the name of the language. This is generally written in the language itself and this is the value shown to users when they choose which language they wish to use.

Within each C<lang> block is a collection of C<key> blocks; One for each word string available to the program. These C<key> entries have one variable called C<name> which is the key used in your program to call the string. It is critical that each keys in all languages have the same meaning!

=head2 Using the C<key> block.

To embed HTML into a string, simply wrap the contents in a C<<![CDATA[...]]>> block. Anything within a C<CDATA> is uninterpreted by AN::Tools.

Both C<CDATA> blocks and normal word strings can span muliple lines. When this is the case, AN::Tools automatically removes the first and last line wrap. This allows you to make your XML words file a little cleaner by letting you start you multi-line string on a new line and also put your closing C<</key>> key on an indented new line.

By convention only, key names are generally in the format "<prefix>_<4-digit-padded_sequence>". If you expect your project will used more that 10,000 entries you may want to use a five-digit padded sequence number. However, you may just as well wish to use a totally different naming convention, it is up to you. It only matters that no two strings have the same associated key name. 

The only exception is C<error_####>. AN::Tools will try to parse these keys when exiting in an error state to set an exit code. The idea is that this allows a way to easily keep a language-independant, up to date exit code library. This is not strictly required though, and without it AN::Tools will exit with a generic C<65536> (unknown error) code.

You can also embed variables into strings in any order you wish. This allows for different languages to construct sentances in any order irregardless of where the English strings inserts variables and values. Recognized replacement keys are:

 - #!data!...!# - Substitute in any value found in the '$an->data' hash. This
                  uses the format: #!data!foo::bar!# which corresponds to the
                  hash value: $an->data->{foo}{bar}.
                  
 - #!variable!...!#  - Substitute in variables passed in from the program. These can
                  be inserted in any order you wish. This uses the format:
                  #!variable!X!# which corresponds to the replacement variable 
                  reference by the hash key 'X'.
                  
 - #!string!...!# - Substitute in another word key. This uses the format:
                  #!string!an_0000!# which would substitute the same language's
                  value found in the given key (an_0000 in this case).
  		  NOTE: You CAN NOT substitute in a string that has #!variable!x!#
  		        values of it's own. This would cause AN::Tools to now
  		        know where put the values in it's 'var' array
  		        reference. If you need this, pre-process your string
  		        and pass it in as another variable.

When adding word strings specific to your project, and if you wish to make use of future releases of AN::Tools, it is *strongly* advised that you create a new 'X_####' section (or sections) specifically for your program. In this way, it is unlikely future additions or removal or core keys will ever conflict with your program. A list of keys used by the AN::Tools suite is below.

=head2 Translating

To add a new langage, copy a completed language between '<lang ...>' and '</lang>' and change the 'name' to the ISO code for the language you are adding. Once your translation is ready (or to test), add your languages' ISO code to the '<langs>...</langs>' CSV entry. It should then show up in the user's profile right away, assuming 'system::display::enable_user_language' is not set to '0'.

Some words may appear to be duplicates when in fact each is used depending on the user's display mode. For example, 'title_0001' is used when writing out to a console where 'title_0002' is used when writing out to a browser and in turn uses the 'CDATA' pragma to embed a link. Please be very sure before merging or deleting keys!

=head2 Reserved Keys

AN::Tools uses an internal words file that uses the following keys. Please do not use the same name space in your program to avoid conflicts.

=over

=item C<an_####>

These are the word strings used internally by the various AN::Tools modules.

=item C<t_####>

These are word strings used by 't/String.t' to test the AN::Tools::String module's methods.

=item C<ta_####>

These are word strings used in 't/test.xml' by 't/String.t' to test the AN::Tools::String module's methods that offer alternate hash support.

=back

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Log

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 1997-2015 Alteeve's Niche! Inc., All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
