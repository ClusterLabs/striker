=pod

=encoding utf8

=head1 NAME

AN::Tools::Log

This is the logging module for AN::Tools. It handles both writing log entries as well as managing and archiving the log files themselves.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an = AN::Tools->new();
  
  # Access this module's methods using '$an->Log->method()' syntax. For
  # example, here is one way you could write an entry in the log file.
  my $rounded = $an->Log->entry({
  	level		=>	3,
  	string		=>	"This is an entry in the log file",
  	file		=>	$THIS_FILE,
  	line		=>	__LINE__
  });

=head1 DESCRIPTION

The main user-level method provided by this module is 'entry', which records a log message if the message is equal to or less than the active log level.

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 entry

=head3 Example

  ### This is an example using every option available to this method, except 
  ### 'raw':
  # This specifies a couple of optional values. It adds variables that will be
  # inserted into the title key. It also specifies a specific language to use
  # when generating the log string and writes to the 'foo.log' file.
  $an->Log->entry({
  	title_key	=>	"title_0001",
  	title_vars	=>	{
  		topic		=>	"foo"
  	},
  	message_key	=>	"log_0000",
  	message_vars	=>	{
  		one		=>	"一つ",
  		two		=>	"二つ",
  		three		=>	"三つ"
  	},
  	file		=>	$THIS_FILE,
  	line		=>	__LINE__,
  	log_level	=>	3,
  	log_to		=>	"/var/log/foo.log",
  	language	=>	'jp',
  });
  
  ### NOTE: The defined file must be either writable by the user your program
  ###       is running as, or must be in a directory with sufficient rights to
  ###       create the log file if it doesn't exit.
  
  # The same call, as an array-type call (ya, a little long...).
  my $log_level = 3;
  my $raw       = "";
  $an->Log->entry($log_level, $THIS_FILE, __LINE__, "title_0001", { topic => "foo" }, "log_0000", { one => "一つ", two => "二つ", three => "三つ" }, 'jp', "/var/log/foo.log", $raw);
  
  # If you have a formatted string, you can pass it directly and no parsing
  # will be done at all. The string will be recorded as-is.
  $an->Log->entry({
  	level		=>	1,
  	raw		=>	"This is how I died.",
  });

=head3 Details

This takes a log message and writes it to the log file if the C<level> parameter is equal to or higher than the active log level.

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 1997-2015 Alteeve's Niche! Inc., All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
