=pod

=encoding utf8

=head1 NAME

AN::Tools::Storage

This module provides all storage-related methods.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an = AN::Tools->new();
  
  # Access this module's methods using '$an->Storage->method()' syntax.
  # For example, this is how you would read a configuration file's values into
  # a  hash reference.
  $an->Storage->read_conf({hash => $hash_ref, file => "/etc/program/prog.conf"});

=head1 DESCRIPTION

This module provides all storage methods. Specifically, any methods that read from or write to a file system are provided here.

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 read_conf

=head3 Example

  # Read in an AN!Tools formatted configuration file's contents into a hash
  # reference.
  $an->Storage->read_conf({hash => $hash_ref, file => "/etc/program/prog.conf"});

=head3 Details

This reads in an AN!Tools formatted configuration files and stores the read-in variables and values in the passed-in hash reference.

When no hash reference is passed, the hash reference stored in C<$an-E<gt>data> is used. If C<$an-E<gt>data> returns nothing, a new anonymous hash reference is created and returned.

The config file formatting is described at the top of the C<an.conf> file in the root of the AN::Tools directory.

=head2 find

=head3 Example

  # Check if a file under a set of directories can be found.
  $an->Storage->find({
  	file		=>	"AN::Tools::Storage.pm",
  	dirs		=>	\@INC,
  	fatal		=>	1,
  });
  
  # The alternative, short-form of calling this method is:
  $an->Storage->find("AN::Tools::Storage.pm", \@INC, 1);

=head3 Details

This takes a file and searches for it either in the '@INC' directory or in the passed array reference. If you want to search in the '@INC' array, you don't need to specifically pass it as was done in the example above. It was done there to show how an array can be specified. If you want this method to error out should the specified file not be found, then you can pass 'fatal => 1' or '1' as the last argument in array-type calls.

When calling this method using the array-type call, the order of the arguments is: "C<file>[, C<dirs>[, C<fatal>]]". If you want it to be fatal without specifying an array, simply set the second array argument to C<undef> or C<"">.

If the file is found, it will return the full path and file name that was found. This method will return the first matching directory. When the file isn't found, C<undef> is returned.

=head3 Parameters

=head4 C<file>

This is the file to search for. You can prefix the file name with one or more directories which will be appended to each directory path in the array. When you specify one or more directories, use the directory delimiter C<::>. This will be converted to the operating system's directory delimiter in the same way that perl itself converts double-colons to the OS' directory delimiter.

For example, to search for a file called 'foo.txt', simply specify C<foo.txt>. If you want to search for the same file but under a directory called 'bar', specify C<bar::foo.txt>.

If you know that your program will only ever be run on a given OS, then you can use your operating system's directory delimiter directly. In this case, this method will do no transformation of the file argument. So to search for 'foo.txt' under the 'bar' directory on POSIX operating systems, you could instead specify C<bar/foo.txt> directly. Be aware though that this will make your program less portable.

=head4 C<dirs>

This is an array reference of directories to search within. When it is not specified or if C<""> or C<undef> is passed, then C<@INC> is searched.

A trick to search C<@INC> plus a couple directories, you can use: C<[@INC, "some::dir", "some::other::dir"]>.

=head4 C<fatal>

Default: C<0>

When set to C<1>, this will cause the method to error out via a call to C<AN::Alert>'s C<error> method. If C<no_fatal_errors> is set, then this method will return anyway, raising an error and returning C<undef>.


=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Log

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=back

=head1 LICENSE

 Copyright (c) 1997-2015 Alteeve's Niche! Inc., All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
