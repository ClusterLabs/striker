=pod

=encoding utf8

=head1 NAME

AN::Tools::Get

This module gets information.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an = AN::Tools->new();
  
  # Get the current date and time in ISO 8601 format.
  my ($date_now, $time_now) = $an->Get->date_and_time();
  
  # There are five set-able variables you can set in this module;
  # - use_24h			'1' (enabled)
  # - say_am			'am'
  # - say_pm			'pm'
  # - date_seperator		'-'
  # - time_seperator		':'
  
  # You can set these by passing calling their methods and passing the desired
  # value. If you want to check the current value, just call the method with no
  # arguments. Either way, the current value is set.
  $an->Get->use_24h(1);
  $an->Get->say_am("am");
  $an->Get->say_pm("pm");
  $an->Get->date_seperator("-");
  $an->Get->time_seperator(":");

=head1 DESCRIPTION

This module gets information. Currently, it gets the date and time in ISO 8601 format with configurable date and time separators.

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 date_and_time

=head3 Example
  # Get the current date and time.
  my ($date_now, $time_now) = $an->Get->date_and_time();

  # Optionally, you can pass a hash with up to four arguments.
  # - offset		Adjust the time by this number of seconds into the past
  #			or future. Positive integers are set into the future. 
  #			Negative integers adjust the time into the past.
  # - use_time		This is the unix time, as seconds since the epoch 
  #			(Jan. 1, 1970, 00:00:00 on most systems) to base the
  #			returned time on. The default is to use the current 
  #			time.
  # - require_weekday	If you need the returned date to fall on a weekday, you
  #			can use this option. This will automatically adjust the
  #			offset by 24 or 48 hours to push the returned date to
  #			the nearest Friday or Monday. Which specifically depends
  #			on whether the offset was going back in time or forward 
  #			in time. Set this to '1' to enable.
  # - skip_weekends	In a similar vein as 'require_weekday', enabling this 
  #			will adjust the offset (or the raw date, if offset is 
  #			not set) to skip weekends. This is meant to help when 
  #			you need to move X-weekdays in time.
  
  # Get the date and time as it was five minutes ago.
  my ($date_now, $time_now) = $an->Get->date_and_time({
  	offset		=>	-300,
  	use_time	=>	time,
  });
  
  # Get the date two business days in the future
  my ($date_now, $time_now) = $an->Get->date_and_time({
  	offset		=>	(24*60*60*2),
  	use_time	=>	time,
  	skip_weekends	=>	1,
  });
  
  # Get the date 3 days in the future, but push out to the next Monday if 3 
  # days from now happens to be a weekend.
  my ($date_now, $time_now) = $an->Get->date_and_time({
  	offset		=>	(24*60*60*3),
  	use_time	=>	time,
  	require_weekday	=>	1,
  });
  
  # If you wish to shorten these calls, you can pass in the variables as a 
  # simple array. The order must be:
  # - "offset", "use_time", "require_weekday", "skip_weekends".
  # The above examples could then be written as:
  my ($date_now, $time_now) = $an->Get->date_and_time(-300, time);
  my ($date_now, $time_now) = $an->Get->date_and_time((24*60*60*2), time, 0, 1);
  my ($date_now, $time_now) = $an->Get->date_and_time((24*60*60*3), time, 1);

=head3 Details

When called with no arguments, this method returns the current date and time as two seperate variables. The format is currently restricted to always being "YYYY-MM-DD" and "HH:MM:SS" (ISO 8601 format). If there is microseconds, then the format of the time will be "HH:MM:SS.ms".

You can pass a UNIX time to this method and it's date and time will be returned. Alternatively, or in addition, you can pass an "offset" value which is a number of seconds before or after the time passed (again, defaulting to the current time when no time is given). To get a time X number of seconds before the time, pass a positive value. To get a time X number of seconds *after* the time, pass a negative value.

To specify a time, use "time => X". To pass an offset value, use "offset => [X|-X]". Specifically, pass a hash reference or an anonymous hash with either or both of these values.

=head2 say_am

=head3 Example

  # Get or change the default suffix used when the returned time is before
  # lunch. The default is 'am'.
  my $say_am = $an->Get->say_am;

  # Change the default 'am' suffix to another string. Generally you will want
  # to change this to match another language.
  $an->Get->say_am("am");

=head3 Details

This method returns the suffix used when using 12h time and the returned time is before 12-noon. If passed a variable, the suffix is changed to the passed value.

=head2 say_pm

=head3 Example

  # Get or change the default suffix used when the returned time is after
  # lunch. The default is 'pm'.
  my $say_pm = $an->Get->say_pm;

  # Change the default 'am' suffix to another string. Generally you will want
  # to change this to match another language.
  $an->Get->say_pm("pm");

=head3 Details

This method returns the suffix used when using 12h time and the returned time is after 12-noon. If passed a variable, the suffix is changed to the passed value.

=head2 date_seperator

=head3 Example

  # Get or change the character used to separate the year, month and day in the
  # date. The default is a hyphen character.
  my $date_separator = $an->Get->date_seperator;

  # Change the date separator character to another.
  $an->Get->date_seperator("-");

=head3 Details

This method returns the character used to separate the YYYY, MM and DD in dates returned by the date_and_time() metod. If passed a variable, the separator is changed to the passed value.

=head2 time_seperator

=head3 Example

  # Get or change the character used to separate the hours, minutes and seconds
  # in the time. The default is a colon character.
  my $time_separator = $an->Get->time_seperator;

  # Change the time separator character to another.
  $an->Get->time_seperator(":");

=head3 Details

This method returns the character used to separate the HH, MM and SS in times returned by the date_and_time() metod. If passed a variable, the separator is changed to the passed value.

=head2 use_24h

=head3 Example

  # Get or set whether 24h or 12h am/pm time format is used.
  my $use_24h = $an->Get->use_24h;

  # To enable 24h time, pass a '1'.
  $an->Get->use_24h(1);
  
  # To enable 12h time, pass a '0'.
  $an->Get->use_24h(0);

=head3 Details

This method returns the the current state of the 'use_24h' value. With set to '1', time will be returned in 24h time (the default). When set to '0', time will be returned in 12h am/pm format.

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools

=item AN::Tools::Check

=item AN::Tools::Convert

=item AN::Tools::Log

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 1997-2015 Alteeve's Niche! Inc., All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
