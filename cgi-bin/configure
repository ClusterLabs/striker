#!/usr/bin/perl
#
# This is the section that handles configuring, backing up and restoring Striker and managed Anvil! systems.
# 
# This software is released under the GNU GPL v2+ license.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		'log'		=>	{
			file		=>	"/var/log/striker.log", 
			language	=>	"en_CA",
			level		=>	2,
		},
		path		=>	{
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		sys		=>	{
			error_limit		=>	1000,
			language		=>	"en_CA",
			skin			=>	"alteeve",
			version			=>	"2.0b",
		},
		url		=>	{
			skins			=>	"/skins",
			cgi			=>	"/cgi-bin",
		},
	},
});

# Initialize.
print "Content-type: text/html; charset=utf-8\n\n";
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{'log'}{language});
$an->default_log_file    ($an->data->{'log'}{file});
$an->Log->level          ($an->data->{'log'}{level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});

### TODO: Move this list into AN::Tools.pm, same way we preset paths.
### TODO: Add all ScanCore column names as variables to check for automatically?
$an->Web->get_cgi({variables => [
	"anvil", 
	"anvil_description", 
	"anvil_name", 
	"anvil_password", 
	"confirm", 
	"node1_access",
	"node2_access",
	"owner_name", 
	"owner_uuid", 
	"save", 
	"smtp_authentication", 
	"smtp_helo_domain", 
	"smtp_password", 
	"smtp_port", 
	"smtp_security", 
	"smtp_server", 
	"smtp_username",
	"subtask", 
	"task", 
]});

# Connect to the databases.
$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
	file  => $THIS_FILE,
	quiet => 1, 
});
if (not $an->data->{sys}{db_connections})
{
	$an->Web->no_db_access();
	exit(1);
}

$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
	name1 => "cgi::task",    value1 => $an->data->{cgi}{task}, 
	name2 => "cgi::subtask", value2 => $an->data->{cgi}{subtask}, 
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{task})
{
	process_task($an);
}
else
{
	# Show the main menu
	show_main_menu($an);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This figures out what task the user is asking to perform and loads the appropriate page.
sub process_task
{
	my ($an) = @_;
	
	if ($an->data->{cgi}{task} eq "anvil")
	{
		anvil_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "owner")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "smtp")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "email_alerts")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "file_alerts")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "install_manifests")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "backup")
	{
		if ($an->data->{cgi}{subtask} eq "create")
		{
		}
		elsif ($an->data->{cgi}{subtask} eq "load")
		{
		}
	}
	elsif ($an->data->{cgi}{task} eq "install_target")
	{
		if ($an->data->{cgi}{subtask} eq "enable")
		{
		}
		elsif ($an->data->{cgi}{subtask} eq "disable")
		{
		}
	}
	elsif ($an->data->{cgi}{task} eq "scancore_db")
	{
		
	}
	else
	{
		# Catch all/error
	}
	
	return(0);
}

# This saves the changes to an Anvil! using the minimal of user input. As much data as possible will be 
# collected from the nodes directly.
sub save_anvil
{
	my ($an) = @_;
	
	### Some sanity checks before we begin.
	my $error_messages = [];
	my $error_fields   = [];
	my $error_message  = "";
	
	# Sort out the node access
	my $node1_address = $an->data->{cgi}{node1_access};
	my $node1_port    = 22;
	my $node2_address = $an->data->{cgi}{node2_access};
	my $node2_port    = 22;
	if (not $an->data->{cgi}{node1_access})
	{
		my $row = $an->String->get({key => "row_0248", variables => { node => 1 }});
		push @{$error_messages}, $an->String->get({key => "message_0360", variables { field => $row }});
		push @{$error_fields},   "node1_access";
	}
	elsif ($an->data->{cgi}{node1_access} =~ /(.*):(\d+)/)
	{
		$node1_address = $1;
		$node1_port    = $2;
	}
	if (not $an->data->{cgi}{node2_access})
	{
		# Sorry, this is messy... the 'field' variable is 'Node X'.
		my $row = $an->String->get({key => "row_0248", variables => { node => 2 }});
		push @{$error_messages}, $an->String->get({key => "message_0360", variables { field => $row }});
		push @{$error_fields},   "node2_access";
	}
	elsif ($an->data->{cgi}{node2_access} =~ /(.*):(\d+)/)
	{
		$node2_address = $1;
		$node2_port    = $2;
	}
	
	# Do I have an owner?
	if (not $an->data->{cgi}{owner_name})
	{
		push @{$error_messages}, $an->String->get({key => "message_0360", variables { field => "#!string!row_0023!#" }});
		push @{$error_fields},   "owner_name";
	}
	
	# What about a password?
	if (not $an->data->{cgi}{anvil_password})
	{
		push @{$error_messages}, $an->String->get({key => "message_0360", variables { field => "#!string!row_0025!#" }});
		push @{$error_fields},   "anvil_password";
	}
	
	# The SMTP password can only be blank is the password security is 'none'.
	if ((not $an->data->{cgi}{smtp_password}) && ($an->data->{cgi}{smtp_authentication} ne "none"))
	{
		push @{$error_messages}, $an->String->get({key => "message_0361"});
		push @{$error_fields},   "smtp_password";
	}
	
	# If there were errors, display them and return.
	if (@{$error_fields} > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $error_messages (@{$error_fields})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_body	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$error_messages,
				}});
		}
		$error_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	# Try connecting to the nodes, if we're good so far.
	if (@{$error_fields} < 1)
	{
		# Proceed with attempt to log into the nodes.
		my $node1_access = $an->Check->access({
			target		=>	$node1_address,
			port		=>	$node1_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		my $node2_access = $an->Check->access({
			target		=>	$node2_address,
			port		=>	$node2_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		if (not $node1_access)
		{
			push @{$error_messages}, $an->String->get({key => "message_0371", variables => { node => 1 } });
			push @{$error_fields},   "node1_access";
		}
		if (not $node2_access)
		{
			push @{$error_messages}, $an->String->get({key => "message_0371", variables => { node => 2 } });
			push @{$error_fields},   "node2_access";
		}
		
		# Gather data from the nodes, if we're still good.
		if (($node1_access) && ($node2_access))
		{
			my $node1_data = $an->Get->target_info({
					target		=>	$node1_address,
					port		=>	$node1_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
			my $node2_data = $an->Get->target_info({
					target		=>	$node2_address,
					port		=>	$node2_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
		}
	}
	
	# Process errors now, if any.
	if (@{$error_fields} > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $error_messages (@{$error_fields})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_body	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$error_messages,
				}});
		}
		$error_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	return($error_message, $error_fields);
}

# This handles the configuration of Anvil! systems (including the ability to create new owners)
sub anvil_menu
{
	my ($an) = @_;
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $error_message = "";
	my $error_fields  = [];
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($error_message, $error_fields) = save_anvil($an);
	}
	
	### First, we'll show any existing Anvil! systems, owners and smtp servers. If a user selects one of
	### these, it will pre-fill the form below it.
	# Show a select box of existing Anvil! systems (if any).
	my $width         = 300;
	my $menu_items    = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0020!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	my $anvils        = $an->ScanCore->get_anvils();
	my $anvil_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $anvil_explain = "#!string!explain_0174!#";
	if (@{$anvils} > 0)
	{
		### TODO: Build JS to make changes
		my $options = [];
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid  = $hash_ref->{anvil_uuid};
			my $anvil_name  = $hash_ref->{anvil_name};
			my $this_option = $anvil_uuid."#!#".$anvil_name;
			push @{$options}, $this_option;
		}
		$anvil_select = $an->Web->build_select({
			name     => "anvil_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{anvil_uuid},
			width    => $width,
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"",
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Get a list of existing owners, if any.
	my $owners        = $an->ScanCore->get_owners();
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name     => "owner_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{owner_uuid},
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"&nbsp;",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# And now get a list of SMTP mail servers to send alerts through
	my $smtp         = $an->ScanCore->get_smtp();
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid  = $hash_ref->{smtp_uuid};
			my $smtp_name  = $hash_ref->{smtp_name};
			my $this_option = $smtp_uuid."#!#".$smtp_name;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name     => "smtp_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{smtp_uuid},
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"&nbsp;",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"input_url",
			column4		=>	"",
		}});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0021!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	### From here down, we present fields for the user to enter (or that may be filled out by selecting
	### one of the entries from select boxes).
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0176!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### Now information on the Anvil! itself.
	# Description
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0021!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_description\" id=\"anvil_description\" value=\"".$an->data->{cgi}{anvil_description}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0179!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0025!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_password\" id=\"anvil_password\" value=\"".$an->data->{cgi}{anvil_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0181!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0003!#"}),
		}});
	
	### Node access info
	# Node 1
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 1 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node1_access\" id=\"node1_access\" value=\"".$an->data->{cgi}{node1_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0182!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Node 2
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 2 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node2_access\" id=\"node2_access\" value=\"".$an->data->{cgi}{node2_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0183!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### SMTP values
	# Breaker
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0022!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Set defaults, if the user didn't try to save (we don't want to put something into a field they 
	# blanked on purpose).
	if (not $an->data->{cgi}{save})
	{
		if (not $an->data->{cgi}{smtp_server})         { $an->data->{cgi}{smtp_server}         = "mail.".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_username})       { $an->data->{cgi}{smtp_username}       = "admin\@".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_security})       { $an->data->{cgi}{smtp_security}       = "starttls"; }
		if (not $an->data->{cgi}{smtp_authentication}) { $an->data->{cgi}{smtp_authentication} = "encrypted"; }
	}
	
	# SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0250!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_server\" id=\"smtp_server\" value=\"".$an->data->{cgi}{smtp_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0184!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),
		}});
	
	# SMTP user name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0301!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_username\" id=\"smtp_username\" value=\"".$an->data->{cgi}{smtp_username}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0186!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0302!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_password\" id=\"smtp_password\" value=\"".$an->data->{cgi}{smtp_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0187!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	
	# Authentication select box.
	my $authentication_select = $an->Web->build_select({
		name     => "smtp_authentication", 
		options  => [
			"none#!##!string!select_0004!#",
			"plain_text#!##!string!select_0005!#",
			"encrypted#!##!string!select_0006!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_authentication},
		width    => $width,
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0303!#",
			column2_class	=>	"input_select",
			column2		=>	$authentication_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0188!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP Security selection box.
	my $security_select = $an->Web->build_select({
		name     => "smtp_security", 
		options  => [
			"none#!##!string!select_0001!#",
			"tls_ssl#!##!string!select_0002!#",
			"starttls#!##!string!select_0003!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_security},
		width    => $width,
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0304!#",
			column2_class	=>	"input_select",
			column2		=>	$security_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0189!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# The 'Save' button
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"<input type=\"submit\" name=\"save\" value=\"#!string!button_0045!#\" class=\"bold_button\">",
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0193!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back		=>	"<a href=\"?\">$back_image</a>",
			refresh		=>	"<a href=\"".$an->data->{sys}{cgi_string}."\">$refresh_image</a>",
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				errors		=>	$error_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});

	
	return(0);
}

# This shows the main Striker configuration menu
sub show_main_menu
{
	my ($an) = @_;
	
	# Put together the frame of the page.
	my $back_image = "";
# 	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
# 			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
# 			alt_text     => "#!string!button_0001!#",
# 			id           => "back_icon",
# 		}});
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back		=>	$back_image,
			refresh		=>	"<a href=\"".$an->data->{sys}{cgi_string}."\">$refresh_image</a>",
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	### Build the list of menu items.
	my $menu_items = "";
	
	# Anvil! systems
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=anvil\" alt=\"#!string!button_0069!#\" id=\"task_anvil\">#!string!button_0069!#</a>",
			description	=>	"#!string!explain_0005!#",
			url		=>	"",
		}})."\n";
	# Owner 
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=owner\" alt=\"#!string!button_0070!#\" id=\"task_owner\">#!string!button_0070!#</a>",
			description	=>	"#!string!explain_0013!#",
			url		=>	"",
		}})."\n";
	# SMTP 
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=smtp\" alt=\"#!string!button_0071!#\" id=\"task_smtp\">#!string!button_0071!#</a>",
			description	=>	"#!string!explain_0023!#",
			url		=>	"",
		}})."\n";
	# Alert Recipient
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=email_alerts\" alt=\"#!string!button_0072!#\" id=\"task_email_alerts\">#!string!button_0072!#</a>",
			description	=>	"#!string!explain_0105!#",
			url		=>	"",
		}})."\n";
	# Alert Files
	#my $subtle_text =  $an->Web->template({file => "common.html", template => "subtle_text", replace => { string => "#!string!explain_0167!#" }});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=file_alerts\" alt=\"#!string!button_0073!#\" id=\"task_file_alerts\">#!string!button_0073!#</a>",
			description	=>	"#!string!explain_0166!#<br />#!string!explain_0167!#",
			url		=>	"",
		}})."\n";
		
	# Add a divider before the next section
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-spacer"});
	
	# Install Manifests
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=install_manifests\" alt=\"#!string!button_0060!#\" id=\"task_install_manifests\">#!string!button_0060!#</a>",
			description	=>	"#!string!explain_0168!#",
			url		=>	"",
		}})."\n";
	
	# Backup
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=create\" alt=\"#!string!button_0074!#\" id=\"task_backup_create\">#!string!button_0074!#</a>",
			description	=>	"#!string!explain_0171!#",
			url		=>	"",
		}})."\n";
	
	# Load
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=load\" alt=\"#!string!button_0075!#\" id=\"task_backup_load\">#!string!button_0075!#</a>",
			description	=>	"#!string!explain_0172!#",
			url		=>	"",
		}})."\n";
	
	# For the Enable/Disable install target, I need to know the current state.
	# 0 == Running
	# 1 == Not running
	# 2 == Not a boot target
	# 3 == In an unknown state.
	# 4 == No access to /etc/dhcpd
	my $dhcpd_state = $an->Get->dhcpd_state();
	if ($dhcpd_state eq "0")
	{
		# Option to disable
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	"<a href=\"?task=install_target&subtask=disable\" alt=\"#!string!button_0058!#\" id=\"task_install_target\">#!string!button_0058!#</a>",
				description	=>	"#!string!explain_0169!#",
				url		=>	"",
			}})."\n";
	}
	elsif ($dhcpd_state eq "1")
	{
		# Option to enable
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	"<a href=\"?task=install_target&subtask=enable\" alt=\"#!string!button_0057!#\" id=\"task_install_target\">#!string!button_0057!#</a>",
				description	=>	"#!string!explain_0170!#",
				url		=>	"",
			}})."\n";
	}
	
	# Configure ScanCore Databases
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=scancore_db\" alt=\"#!string!button_0076!#\" id=\"task_scancore_db\">#!string!button_0076!#</a>",
			description	=>	"#!string!explain_0173!#",
			url		=>	"",
		}})."\n";
	
	# Build the body of the menu.	
	my $menu = $an->Web->template({file => "configure.html", template => "configure-menu", replace => { options => $menu_items }});
	
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}
