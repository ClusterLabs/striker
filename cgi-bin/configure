#!/usr/bin/perl
#
# This is the section that handles configuring, backing up and restoring Striker and managed Anvil! systems.
# 
# This software is released under the GNU GPL v2+ license.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		'log'		=>	{
			file		=>	"/var/log/striker.log", 
			language	=>	"en_CA",
			level		=>	2,
		},
		path		=>	{
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		sys		=>	{
			error_limit		=>	1000,
			language		=>	"en_CA",
			skin			=>	"alteeve",
			version			=>	"2.0b",
		},
		url		=>	{
			skins			=>	"/skins",
			cgi			=>	"/cgi-bin",
		},
	},
});

# Initialize.
print "Content-type: text/html; charset=utf-8\n\n";
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{'log'}{language});
$an->default_log_file    ($an->data->{'log'}{file});
$an->Log->level          ($an->data->{'log'}{level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});

### TODO: Move this list into AN::Tools.pm, same way we preset paths.
### TODO: Add all ScanCore column names as variables to check for automatically?
$an->Web->get_cgi({variables => [
	"anvil", 
	"anvil_description", 
	"anvil_name", 
	"confirm", 
	"node1_access",
	"node2_access",
	"owner_name", 
	"owner_uuid", 
	"save", 
	"subtask", 
	"task", 
]});

# Connect to the databases.
$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
	file  => $THIS_FILE,
	quiet => 1, 
});
if (not $an->data->{sys}{db_connections})
{
	$an->Web->no_db_access();
	exit(1);
}

$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
	name1 => "cgi::task",    value1 => $an->data->{cgi}{task}, 
	name2 => "cgi::subtask", value2 => $an->data->{cgi}{subtask}, 
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{task})
{
	process_task($an);
}
else
{
	# Show the main menu
	show_main_menu($an);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This figures out what task the user is asking to perform and loads the appropriate page.
sub process_task
{
	my ($an) = @_;
	
	if ($an->data->{cgi}{task} eq "anvil")
	{
		anvil_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "owner")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "smtp")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "email_alerts")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "file_alerts")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "install_manifests")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "backup")
	{
		if ($an->data->{cgi}{subtask} eq "create")
		{
		}
		elsif ($an->data->{cgi}{subtask} eq "load")
		{
		}
	}
	elsif ($an->data->{cgi}{task} eq "install_target")
	{
		if ($an->data->{cgi}{subtask} eq "enable")
		{
		}
		elsif ($an->data->{cgi}{subtask} eq "disable")
		{
		}
	}
	elsif ($an->data->{cgi}{task} eq "scancore_db")
	{
		
	}
	else
	{
		# Catch all/error
	}
	
	return(0);
}

# This handles the configuration of Anvil! systems (including the ability to create new owners)
sub anvil_menu
{
	my ($an) = @_;
	
	# Is the user asking to save changes?
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
	}
	
	### First, we'll show any existing Anvil! systems, owners and smtp servers. If a user selects one of
	### these, it will pre-fill the form below it.
	# Show a select box of existing Anvil! systems (if any).
	my $width         = 300;
	my $menu_items    = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0020!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	my $anvils        = $an->ScanCore->get_anvils();
	my $anvil_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $anvil_explain = "#!string!explain_0174!#";
	if (@{$anvils} > 0)
	{
		### TODO: Build JS to make changes
		my $options = [];
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid  = $hash_ref->{anvil_uuid};
			my $anvil_name  = $hash_ref->{anvil_name};
			my $this_option = $anvil_uuid."#!#".$anvil_name;
			push @{$options}, $this_option;
		}
		$anvil_select = $an->Web->build_select({
			name     => "anvil_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{anvil_uuid},
			width    => $width,
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"",
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Get a list of existing owners, if any.
	my $owners        = $an->ScanCore->get_owners();
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name     => "owner_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{owner_uuid},
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"&nbsp;",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# And now get a list of SMTP mail servers to send alerts through
	my $smtp         = $an->ScanCore->get_smtp();
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid  = $hash_ref->{smtp_uuid};
			my $smtp_name  = $hash_ref->{smtp_name};
			my $this_option = $smtp_uuid."#!#".$smtp_name;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name     => "smtp_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{smtp_uuid},
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"&nbsp;",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),,
		}});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0021!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	### From here down, we present fields for the user to enter (or that may be filled out by selecting
	### one of the entries from select boxes).
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0176!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### Now information on the Anvil! itself.
	# NOTE: We'll get this when we log into the node for the first time.
	# Name
# 	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
# 			column1_class	=>	"highlight_row_bold",
# 			column1		=>	"#!string!row_0005!#",
# 			column2_class	=>	"input_select",
# 			column2		=>	"<input type=\"text\" name=\"anvil_name\" id=\"anvil_name\" value=\"".$an->data->{cgi}{anvil_name}."\" style=\"width: ${width}px;\">",
# 			column3_class	=>	"input_explain",
# 			column3		=>	"#!string!explain_0177!#",
# 			column4_class	=>	"input_url",
# 			column4		=>	$an->Web->more_info_link({url => "#!string!url_0001!#"}),
# 		}});
	
	# Description
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0021!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_description\" id=\"anvil_description\" value=\"".$an->data->{cgi}{anvil_description}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0179!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0025!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_password\" id=\"anvil_password\" value=\"".$an->data->{cgi}{anvil_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0181!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0003!#"}),
		}});
	# NOTE: To keep things simple, we'll not show the anvil_note here.
	
	### Node values
	# TODO: When we get this info, we'll ssh to the node before saving the record. Once ssh'ed in, we'll
	#       get the various IPs and the host_uuid.
	
	### The user can use x:y for ports
	# Node 1
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 1 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node1_access\" id=\"node1_access\" value=\"".$an->data->{cgi}{node1_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0182!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Node 2
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 2 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node2_access\" id=\"node2_access\" value=\"".$an->data->{cgi}{node2_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0183!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### SMTP values
	if (not $an->data->{cgi}{smtp_helo_domain}) { $an->data->{cgi}{smtp_helo_domain} = $an->domain_name(); }
=pod
	smtp_server		text				not null,			-- example; mail.example.com
	smtp_port		integer				not null	default 587,
	smtp_username		text				not null,			-- This is the user name (usually email address) used when authenticating against the mail server.
	smtp_password		text,								-- This is the password used when authenticating against the mail server
	smtp_security		text				not null,			-- This is the security type used when authenticating against the mail server (STARTTLS, TLS/SSL or NONE)
	smtp_authentication	text				not null,			-- 'None', 'Plain Text', 'Encrypted' (will add other types later.
	smtp_helo_domain	text				not null,			-- The domain we identify to the mail server as being from.
=cut	
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0193!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back		=>	"<a href=\"?\">$back_image</a>",
			refresh		=>	"<a href=\"".$an->data->{sys}{cgi_string}."\">$refresh_image</a>",
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});

	
	return(0);
}

# This shows the main Striker configuration menu
sub show_main_menu
{
	my ($an) = @_;
	
	# Put together the frame of the page.
	my $back_image = "";
# 	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
# 			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
# 			alt_text     => "#!string!button_0001!#",
# 			id           => "back_icon",
# 		}});
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back		=>	$back_image,
			refresh		=>	"<a href=\"".$an->data->{sys}{cgi_string}."\">$refresh_image</a>",
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	### Build the list of menu items.
	my $menu_items = "";
	
	# Anvil! systems
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=anvil\" alt=\"#!string!button_0069!#\" id=\"task_anvil\">#!string!button_0069!#</a>",
			description	=>	"#!string!explain_0005!#",
			url		=>	"",
		}})."\n";
	# Owner 
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=owner\" alt=\"#!string!button_0070!#\" id=\"task_owner\">#!string!button_0070!#</a>",
			description	=>	"#!string!explain_0013!#",
			url		=>	"",
		}})."\n";
	# SMTP 
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=smtp\" alt=\"#!string!button_0071!#\" id=\"task_smtp\">#!string!button_0071!#</a>",
			description	=>	"#!string!explain_0023!#",
			url		=>	"",
		}})."\n";
	# Alert Recipient
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=email_alerts\" alt=\"#!string!button_0072!#\" id=\"task_email_alerts\">#!string!button_0072!#</a>",
			description	=>	"#!string!explain_0105!#",
			url		=>	"",
		}})."\n";
	# Alert Files
	#my $subtle_text =  $an->Web->template({file => "common.html", template => "subtle_text", replace => { string => "#!string!explain_0167!#" }});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=file_alerts\" alt=\"#!string!button_0073!#\" id=\"task_file_alerts\">#!string!button_0073!#</a>",
			description	=>	"#!string!explain_0166!#<br />#!string!explain_0167!#",
			url		=>	"",
		}})."\n";
		
	# Add a divider before the next section
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-spacer"});
	
	# Install Manifests
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=install_manifests\" alt=\"#!string!button_0060!#\" id=\"task_install_manifests\">#!string!button_0060!#</a>",
			description	=>	"#!string!explain_0168!#",
			url		=>	"",
		}})."\n";
	
	# Backup
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=create\" alt=\"#!string!button_0074!#\" id=\"task_backup_create\">#!string!button_0074!#</a>",
			description	=>	"#!string!explain_0171!#",
			url		=>	"",
		}})."\n";
	
	# Load
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=load\" alt=\"#!string!button_0075!#\" id=\"task_backup_load\">#!string!button_0075!#</a>",
			description	=>	"#!string!explain_0172!#",
			url		=>	"",
		}})."\n";
	
	# For the Enable/Disable install target, I need to know the current state.
	# 0 == Running
	# 1 == Not running
	# 2 == Not a boot target
	# 3 == In an unknown state.
	# 4 == No access to /etc/dhcpd
	my $dhcpd_state = $an->Get->dhcpd_state();
	if ($dhcpd_state eq "0")
	{
		# Option to disable
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	"<a href=\"?task=install_target&subtask=disable\" alt=\"#!string!button_0058!#\" id=\"task_install_target\">#!string!button_0058!#</a>",
				description	=>	"#!string!explain_0169!#",
				url		=>	"",
			}})."\n";
	}
	elsif ($dhcpd_state eq "1")
	{
		# Option to enable
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	"<a href=\"?task=install_target&subtask=enable\" alt=\"#!string!button_0057!#\" id=\"task_install_target\">#!string!button_0057!#</a>",
				description	=>	"#!string!explain_0170!#",
				url		=>	"",
			}})."\n";
	}
	
	# Configure ScanCore Databases
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=backup&subtask=scancore_db\" alt=\"#!string!button_0076!#\" id=\"task_scancore_db\">#!string!button_0076!#</a>",
			description	=>	"#!string!explain_0173!#",
			url		=>	"",
		}})."\n";
	
	# Build the body of the menu.	
	my $menu = $an->Web->template({file => "configure.html", template => "configure-menu", replace => { options => $menu_items }});
	
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}
