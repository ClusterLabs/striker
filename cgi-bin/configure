#!/usr/bin/perl
#
# This is the section that handles configuring, backing up and restoring Striker and managed Anvil! systems.
# 
# This software is released under the GNU GPL v2+ license.
# 

use strict;
use warnings;
use Data::Dumper;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my ($an) = initialize($THIS_FILE, 1);

### NOTE: This has to come before '$an->Web->check_all_cgi()' because this will auto-set 'anvil_uuid' if only
###       one Anvil! exists, where 'check_all_cgi()' will blank it if an empty 'anvil_uuid' is passed in over
###       CGI.
# Read in our Anvil! systems. If only one anvil is found, it will be auto-set in 'cgi::anvil'.
$an->ScanCore->parse_anvil_data();

# Check for passed-in CGI variables.
$an->Web->check_all_cgi();

$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
	name1 => "cgi::task",    value1 => $an->data->{cgi}{task}, 
	name2 => "cgi::subtask", value2 => $an->data->{cgi}{subtask}, 
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{task})
{
	process_task($an);
}
else
{
	# Show the main menu
	show_main_menu($an);
}

$an->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This figures out what task the user is asking to perform and loads the appropriate page.
sub process_task
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "process_task" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	if ($an->data->{cgi}{task} eq "anvil")
	{
		anvil_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "owner")
	{
		owner_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "smtp")
	{
		smtp_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "notify")
	{
		notify_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "manifests")
	{
		manifests_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "dr_target")
	{
		dr_target_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "dr_job")
	{
		dr_job_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "backup")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "install_target")
	{
		# This task doesn't have a menu, it only uses notices at the top of the page, so it will be 
		# dealt with in the main menu.
		show_main_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "scancore_db")
	{
		
	}
	else
	{
		# Catch all/error
	}
	
	return(0);
}

# This uses a dr_job_uuid to load information about the associated DR job.
sub load_dr_job_form
{
	my ($an, $dr_jobs, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_dr_job_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$dr_jobs})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->dr_job_uuid", value1 => $hash_ref->{dr_job_uuid},
				name2 => "uuid",                     value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{dr_job_uuid} eq $uuid)
			{
				$an->data->{cgi}{dr_job_uuid}           = $hash_ref->{dr_job_uuid};
				$an->data->{cgi}{dr_job_dr_target_uuid} = $hash_ref->{dr_job_dr_target_uuid};
				$an->data->{cgi}{dr_job_anvil_uuid}     = $hash_ref->{dr_job_anvil_uuid};
				$an->data->{cgi}{dr_job_name}           = $hash_ref->{dr_job_name};
				$an->data->{cgi}{dr_job_note}           = $hash_ref->{dr_job_note};
				$an->data->{cgi}{dr_job_servers}        = $hash_ref->{dr_job_servers};
				$an->data->{cgi}{dr_job_auto_prune}     = $hash_ref->{dr_job_auto_prune};
				$an->data->{cgi}{dr_job_schedule}       = $hash_ref->{dr_job_schedule};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0008", message_variables => {
					name1 => "cgi::dr_job_uuid",           value1 => $an->data->{cgi}{dr_job_uuid},
					name2 => "cgi::dr_job_dr_target_uuid", value2 => $an->data->{cgi}{dr_job_dr_target_uuid},
					name3 => "cgi::dr_job_anvil_uuid",     value3 => $an->data->{cgi}{dr_job_anvil_uuid},
					name4 => "cgi::dr_job_name",           value4 => $an->data->{cgi}{dr_job_name},
					name5 => "cgi::dr_job_note",           value5 => $an->data->{cgi}{dr_job_note},
					name6 => "cgi::dr_job_servers",        value6 => $an->data->{cgi}{dr_job_servers},
					name7 => "cgi::dr_job_auto_prune",     value7 => $an->data->{cgi}{dr_job_auto_prune},
					name8 => "cgi::dr_job_schedule",       value8 => $an->data->{cgi}{dr_job_schedule},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{dr_job_uuid}           = "";
		$an->data->{cgi}{dr_job_dr_target_uuid} = "";
		$an->data->{cgi}{dr_job_anvil_uuid}     = "";
		$an->data->{cgi}{dr_job_name}           = "";
		$an->data->{cgi}{dr_job_note}           = "";
		$an->data->{cgi}{dr_job_servers}        = "";
		$an->data->{cgi}{dr_job_auto_prune}     = "";
		$an->data->{cgi}{dr_job_schedule}       = "";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0008", message_variables => {
			name1 => "cgi::dr_job_uuid",           value1 => $an->data->{cgi}{dr_job_uuid},
			name2 => "cgi::dr_job_dr_target_uuid", value2 => $an->data->{cgi}{dr_job_dr_target_uuid},
			name3 => "cgi::dr_job_anvil_uuid",     value3 => $an->data->{cgi}{dr_job_anvil_uuid},
			name4 => "cgi::dr_job_name",           value4 => $an->data->{cgi}{dr_job_name},
			name5 => "cgi::dr_job_note",           value5 => $an->data->{cgi}{dr_job_note},
			name6 => "cgi::dr_job_servers",        value6 => $an->data->{cgi}{dr_job_servers},
			name7 => "cgi::dr_job_auto_prune",     value7 => $an->data->{cgi}{dr_job_auto_prune},
			name8 => "cgi::dr_job_schedule",       value8 => $an->data->{cgi}{dr_job_schedule},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# This uses a dr_target_uuid to load information about the associated DR target.
sub load_dr_target_form
{
	my ($an, $dr_targets, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_dr_target_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$dr_targets})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->dr_target_uuid", value1 => $hash_ref->{dr_target_uuid},
				name2 => "uuid",                     value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{dr_target_uuid} eq $uuid)
			{
				$an->data->{cgi}{dr_target_uuid}            = $hash_ref->{dr_target_uuid};
				$an->data->{cgi}{dr_target_name}            = $hash_ref->{dr_target_name};
				$an->data->{cgi}{dr_target_note}            = $hash_ref->{dr_target_note};
				$an->data->{cgi}{dr_target_address}         = $hash_ref->{dr_target_address};
				$an->data->{cgi}{dr_target_password}        = $hash_ref->{dr_target_password};
				$an->data->{cgi}{dr_target_tcp_port}        = $hash_ref->{dr_target_tcp_port};
				$an->data->{cgi}{dr_target_use_cache}       = $hash_ref->{dr_target_use_cache};
				$an->data->{cgi}{dr_target_store}           = $hash_ref->{dr_target_store};
				$an->data->{cgi}{dr_target_copies}          = $hash_ref->{dr_target_copies};
				$an->data->{cgi}{dr_target_bandwidth_limit} = $hash_ref->{dr_target_bandwidth_limit};
				$an->data->{cgi}{dr_target_store_type}      = "fs";
				$an->data->{cgi}{dr_target_store_location}  = "";
				if ($an->data->{cgi}{dr_target_store} =~ /^(.*?):(.*)$/)
				{
					$an->data->{cgi}{dr_target_store_type}     = $1;
					$an->data->{cgi}{dr_target_store_location} = $2;
				}
				$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
					name1  => "cgi::dr_target_uuid",            value1  => $an->data->{cgi}{dr_target_uuid},
					name2  => "cgi::dr_target_name",            value2  => $an->data->{cgi}{dr_target_name},
					name3  => "cgi::dr_target_note",            value3  => $an->data->{cgi}{dr_target_note},
					name4  => "cgi::dr_target_address",         value4  => $an->data->{cgi}{dr_target_address},
					name5  => "cgi::dr_target_tcp_port",        value5  => $an->data->{cgi}{dr_target_tcp_port},
					name6  => "cgi::dr_target_use_cache",       value6  => $an->data->{cgi}{dr_target_use_cache},
					name7  => "cgi::dr_target_store",           value7  => $an->data->{cgi}{dr_target_store},
					name8  => "cgi::dr_target_store_type",      value8  => $an->data->{cgi}{dr_target_store_type},
					name9  => "cgi::dr_target_store_location",  value9  => $an->data->{cgi}{dr_target_store_location},
					name10 => "cgi::dr_target_copies",          value10 => $an->data->{cgi}{dr_target_copies},
					name11 => "cgi::dr_target_bandwidth_limit", value11 => $an->data->{cgi}{dr_target_bandwidth_limit},
				}, file => $THIS_FILE, line => __LINE__});
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::dr_target_password", value1 => $an->data->{cgi}{dr_target_password},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{dr_target_uuid}            = "";
		$an->data->{cgi}{dr_target_name}            = "";
		$an->data->{cgi}{dr_target_note}            = "";
		$an->data->{cgi}{dr_target_address}         = "";
		$an->data->{cgi}{dr_target_password}        = "";
		$an->data->{cgi}{dr_target_tcp_port}        = "22";
		$an->data->{cgi}{dr_target_use_cache}       = "";
		$an->data->{cgi}{dr_target_store_type}      = "fs";
		$an->data->{cgi}{dr_target_store_location}  = "";
		$an->data->{cgi}{dr_target_copies}          = "2";
		$an->data->{cgi}{dr_target_bandwidth_limit} = "";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
			name1  => "cgi::dr_target_uuid",            value1  => $an->data->{cgi}{dr_target_uuid},
			name2  => "cgi::dr_target_name",            value2  => $an->data->{cgi}{dr_target_name},
			name3  => "cgi::dr_target_note",            value3  => $an->data->{cgi}{dr_target_note},
			name4  => "cgi::dr_target_address",         value4  => $an->data->{cgi}{dr_target_address},
			name5  => "cgi::dr_target_password",        value5  => $an->data->{cgi}{dr_target_password},
			name6  => "cgi::dr_target_tcp_port",        value6  => $an->data->{cgi}{dr_target_tcp_port},
			name7  => "cgi::dr_target_use_cache",       value7  => $an->data->{cgi}{dr_target_use_cache},
			name8  => "cgi::dr_target_store",           value8  => $an->data->{cgi}{dr_target_store},
			name9  => "cgi::dr_target_store_type",      value9  => $an->data->{cgi}{dr_target_store_type},
			name10 => "cgi::dr_target_store_location",  value10 => $an->data->{cgi}{dr_target_store_location},
			name11 => "cgi::dr_target_copies",          value11 => $an->data->{cgi}{dr_target_copies},
			name12 => "cgi::dr_target_bandwidth_limit", value12 => $an->data->{cgi}{dr_target_bandwidth_limit},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# This uses a notify_uuid to load information about the associated notification target.
sub load_notify_form
{
	my ($an, $notifications, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_notify_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$notifications})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->notify_uuid", value1 => $hash_ref->{notify_uuid},
				name2 => "uuid",                  value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{notify_uuid} eq $uuid)
			{
				$an->data->{cgi}{notify_uuid}     = $hash_ref->{notify_uuid};
				$an->data->{cgi}{notify_name}     = $hash_ref->{notify_name};
				$an->data->{cgi}{notify_target}   = $hash_ref->{notify_target};
				$an->data->{cgi}{notify_language} = $hash_ref->{notify_language};
				$an->data->{cgi}{notify_level}    = $hash_ref->{notify_level};
				$an->data->{cgi}{notify_units}    = $hash_ref->{notify_units};
				$an->data->{cgi}{notify_note}     = $hash_ref->{notify_note};
				
				# Load the 'cgi::notify_anvil_<uuid>' values.
				my $recipient_data = $an->Get->recipient_data({notify_uuid => $uuid});
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "recipient_data", value1 => $recipient_data,
				}, file => $THIS_FILE, line => __LINE__});
				next if not $recipient_data;
				foreach my $hash_ref (@{$recipient_data})
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "hash_ref->recipient_notify_uuid", value1 => $hash_ref->{recipient_notify_uuid},
						name2 => "cgi::notify_uuid",                value2 => $an->data->{cgi}{notify_uuid},
					}, file => $THIS_FILE, line => __LINE__});
					if ($hash_ref->{recipient_notify_uuid} eq $an->data->{cgi}{notify_uuid})
					{
						my $notify_anvil_key                   = "notify_anvil_".$hash_ref->{recipient_anvil_uuid};
						   $an->data->{cgi}{$notify_anvil_key} = $hash_ref->{recipient_notify_level};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::${notify_anvil_key}", value1 => $an->data->{cgi}{$notify_anvil_key},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				last;
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{notify_uuid}     = "";
		$an->data->{cgi}{notify_name}     = "";
		$an->data->{cgi}{notify_target}   = "";
		$an->data->{cgi}{notify_language} = "";
		$an->data->{cgi}{notify_level}    = "";
		$an->data->{cgi}{notify_units}    = "";
		$an->data->{cgi}{notify_note}     = "";
		
		# Wipe out the 'notify_anvil_<uuid>' CGI variables
		foreach my $key (sort {$a cmp $b} keys %{$an->data->{cgi}})
		{
			if ($key =~ /^notify_anvil_/)
			{
				$an->data->{cgi}{$key} = "";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::$key", value1 => $an->data->{cgi}{$key},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	return(0);
}

# This uses an owner_uuid to load information about the associated Owner.
sub load_owner_form
{
	my ($an, $owners, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_owner_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$owners})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->owner_uuid",  value1 => $hash_ref->{owner_uuid},
				name2 => "uuid",                  value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{owner_uuid} eq $uuid)
			{
				$an->data->{cgi}{owner_uuid} = $hash_ref->{owner_uuid};
				$an->data->{cgi}{owner_name} = $hash_ref->{owner_name};
				$an->data->{cgi}{owner_note} = $hash_ref->{owner_note};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
					name2 => "cgi::owner_name", value2 => $an->data->{cgi}{owner_name},
					name3 => "cgi::owner_note", value3 => $an->data->{cgi}{owner_note},
				}, file => $THIS_FILE, line => __LINE__});
				last;
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{owner_uuid} = "";
		$an->data->{cgi}{owner_name} = "";
		$an->data->{cgi}{owner_note} = "";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
			name2 => "cgi::owner_name", value2 => $an->data->{cgi}{owner_name},
			name3 => "cgi::owner_note", value3 => $an->data->{cgi}{owner_note},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# This uses an smtp_uuid to load information about the associated SMTP server.
sub load_smtp_form
{
	my ($an, $smtp, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_smtp_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	# Blank the fields.
	$an->data->{cgi}{smtp_uuid}           = "";
	$an->data->{cgi}{smtp_authentication} = "";
	$an->data->{cgi}{smtp_helo_domain}    = "";
	$an->data->{cgi}{smtp_password}       = "";
	$an->data->{cgi}{smtp_port}           = "";
	$an->data->{cgi}{smtp_security}       = "";
	$an->data->{cgi}{smtp_server}         = "";
	$an->data->{cgi}{smtp_username}       = "";
	$an->data->{cgi}{smtp_note}           = "";
	$an->data->{cgi}{smtp_alt_server}     = "";
	$an->data->{cgi}{smtp_alt_port}       = "";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
		name1  => "cgi::smtp_uuid",           value1  => $an->data->{cgi}{smtp_uuid},
		name2  => "cgi::smtp_authentication", value2  => $an->data->{cgi}{smtp_authentication},
		name3  => "cgi::smtp_helo_domain",    value3  => $an->data->{cgi}{smtp_helo_domain},
		name4  => "cgi::smtp_password",       value4  => $an->data->{cgi}{smtp_password},
		name5  => "cgi::smtp_port",           value5  => $an->data->{cgi}{smtp_port},
		name6  => "cgi::smtp_security",       value6  => $an->data->{cgi}{smtp_security},
		name7  => "cgi::smtp_server",         value7  => $an->data->{cgi}{smtp_server},
		name8  => "cgi::smtp_username",       value8  => $an->data->{cgi}{smtp_username},
		name9  => "cgi::smtp_note",           value9  => $an->data->{cgi}{smtp_note},
		name10 => "cgi::smtp_alt_server",     value10 => $an->data->{cgi}{smtp_alt_server},
		name11 => "cgi::smtp_alt_port",       value11 => $an->data->{cgi}{smtp_alt_port},
	}, file => $THIS_FILE, line => __LINE__});
	if ($uuid)
	{
		foreach my $hash_ref (@{$smtp})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->smtp_uuid",  value1 => $hash_ref->{smtp_uuid},
				name2 => "uuid",                 value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{smtp_uuid} eq $uuid)
			{
				$an->data->{cgi}{smtp_uuid}           = $hash_ref->{smtp_uuid};
				$an->data->{cgi}{smtp_authentication} = $hash_ref->{smtp_authentication};
				$an->data->{cgi}{smtp_helo_domain}    = $hash_ref->{smtp_helo_domain};
				$an->data->{cgi}{smtp_port}           = $hash_ref->{smtp_port};
				$an->data->{cgi}{smtp_security}       = $hash_ref->{smtp_security};
				$an->data->{cgi}{smtp_server}         = $hash_ref->{smtp_server};
				$an->data->{cgi}{smtp_username}       = $hash_ref->{smtp_username};
				$an->data->{cgi}{smtp_alt_server}     = $hash_ref->{smtp_alt_server}; 
				$an->data->{cgi}{smtp_alt_port}       = $hash_ref->{smtp_alt_port};
				$an->data->{cgi}{smtp_note}           = $hash_ref->{smtp_note};
				$an->data->{cgi}{smtp_password}       = $hash_ref->{smtp_password};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
					name1  => "cgi::smtp_uuid",           value1  => $an->data->{cgi}{smtp_uuid},
					name2  => "cgi::smtp_authentication", value2  => $an->data->{cgi}{smtp_authentication},
					name3  => "cgi::smtp_helo_domain",    value3  => $an->data->{cgi}{smtp_helo_domain},
					name4  => "cgi::smtp_port",           value4  => $an->data->{cgi}{smtp_port},
					name5  => "cgi::smtp_security",       value5  => $an->data->{cgi}{smtp_security},
					name6  => "cgi::smtp_server",         value6  => $an->data->{cgi}{smtp_server},
					name7  => "cgi::smtp_username",       value7  => $an->data->{cgi}{smtp_username},
					name8  => "cgi::smtp_alt_server",     value8  => $an->data->{cgi}{smtp_alt_server},
					name9  => "cgi::smtp_alt_port",       value9  => $an->data->{cgi}{smtp_alt_port},
					name10 => "cgi::smtp_note",           value10 => $an->data->{cgi}{smtp_note},
				}, file => $THIS_FILE, line => __LINE__});
				$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::smtp_password", value1 => $an->data->{cgi}{smtp_password},
				}, file => $THIS_FILE, line => __LINE__});
				
				# If the port is set to a non-standard port for either the server or alt 
				# server, append it.
				if ($an->data->{cgi}{smtp_port})
				{
					if ((($an->data->{cgi}{smtp_security} eq "starttls") && ($an->data->{cgi}{smtp_port} ne "587")) or 
					    (($an->data->{cgi}{smtp_security} eq "tls_ssl")  && ($an->data->{cgi}{smtp_port} ne "465")) or 
					    (($an->data->{cgi}{smtp_security} eq "none")     && ($an->data->{cgi}{smtp_port} ne "25")))
					{
						$an->data->{cgi}{smtp_server} .= ":".$an->data->{cgi}{smtp_port};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::smtp_server", value1 => $an->data->{cgi}{smtp_server},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				if ($an->data->{cgi}{smtp_alt_port})
				{
					if ((($an->data->{cgi}{smtp_security} eq "starttls") && ($an->data->{cgi}{smtp_alt_port} ne "587")) or 
					    (($an->data->{cgi}{smtp_security} eq "tls_ssl")  && ($an->data->{cgi}{smtp_alt_port} ne "465")) or 
					    (($an->data->{cgi}{smtp_security} eq "none")     && ($an->data->{cgi}{smtp_alt_port} ne "25")))
					{
						$an->data->{cgi}{smtp_alt_server} .= ":".$an->data->{cgi}{smtp_alt_port};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::smtp_alt_server", value1 => $an->data->{cgi}{smtp_alt_server},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				last;
			}
		}
	}
	
	return(0);
}

# This uses the passed-in UUID to find a node and load it into either the node1 or node2 (based on the host 
# name) CGI variables.
sub load_node_form
{
	my ($an, $nodes, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_node_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$nodes})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->node_anvil_uuid", value1 => $hash_ref->{node_anvil_uuid},
				name2 => "uuid",                      value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{node_anvil_uuid} eq $uuid)
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "hash_ref->host_name", value1 => $hash_ref->{host_name},
				}, file => $THIS_FILE, line => __LINE__});
				if (($hash_ref->{host_name} =~ /n01/) or ($hash_ref->{host_name} =~ /n1/))
				{
					$an->data->{cgi}{node1_anvil_uuid}  = $hash_ref->{node_anvil_uuid}; 
					$an->data->{cgi}{node1_host_uuid}   = $hash_ref->{node_host_uuid}; 
					$an->data->{cgi}{node1_note}        = $hash_ref->{node_note}; 
					$an->data->{cgi}{node1_remote_ip}   = $hash_ref->{node_remote_ip}; 
					$an->data->{cgi}{node1_remote_port} = $hash_ref->{node_remote_port}; 
					$an->data->{cgi}{node1_uuid}        = $hash_ref->{node_uuid}; 
					$an->data->{cgi}{node1_bcn}         = $hash_ref->{node_bcn};
					$an->data->{cgi}{node1_sn}          = $hash_ref->{node_sn};
					$an->data->{cgi}{node1_ifn}         = $hash_ref->{node_ifn};
					$an->data->{cgi}{node1_host_name}   = $hash_ref->{node_ifn};
					$an->data->{cgi}{node1_password}    = $hash_ref->{node_password}; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
						name1  => "cgi::node1_anvil_uuid",  value1  => $an->data->{cgi}{node1_anvil_uuid},
						name2  => "cgi::node1_host_uuid",   value2  => $an->data->{cgi}{node1_host_uuid},
						name3  => "cgi::node1_note",        value3  => $an->data->{cgi}{node1_note},
						name4  => "cgi::node1_remote_ip",   value4  => $an->data->{cgi}{node1_remote_ip},
						name5  => "cgi::node1_remote_port", value5  => $an->data->{cgi}{node1_remote_port},
						name6  => "cgi::node1_uuid",        value6  => $an->data->{cgi}{node1_uuid},
						name7  => "cgi::node1_bcn",         value7  => $an->data->{cgi}{node1_bcn},
						name8  => "cgi::node1_sn",          value8  => $an->data->{cgi}{node1_sn},
						name9  => "cgi::node1_ifn",         value9  => $an->data->{cgi}{node1_ifn},
						name10 => "cgi::node1_host_name",   value10 => $an->data->{cgi}{node1_host_name},
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
						name1 => "cgi::node1_password", value1 => $an->data->{cgi}{node1_password},
					}, file => $THIS_FILE, line => __LINE__});
					
					# The access is a little trickier... We'll use the remote IP and port, if 
					# set. Otherwise we'll use the BCN IP. If the port is 22, it will be left 
					# off.
					if ($an->data->{cgi}{node1_remote_ip})
					{
						$an->data->{cgi}{node1_access} = $an->data->{cgi}{node1_remote_ip};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
						}, file => $THIS_FILE, line => __LINE__});
						if (($an->data->{cgi}{node1_remote_port}) && ($an->data->{cgi}{node1_remote_port} ne "22"))
						{
							$an->data->{cgi}{node1_access} .= ":".$an->data->{cgi}{node1_remote_port};
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
					else
					{
						$an->data->{cgi}{node1_access} = $an->data->{cgi}{node1_bcn};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				elsif (($hash_ref->{host_name} =~ /n02/) or ($hash_ref->{host_name} =~ /n2/))
				{
					$an->data->{cgi}{node2_anvil_uuid}  = $hash_ref->{node_anvil_uuid}; 
					$an->data->{cgi}{node2_host_uuid}   = $hash_ref->{node_host_uuid}; 
					$an->data->{cgi}{node2_note}        = $hash_ref->{node_note}; 
					$an->data->{cgi}{node2_password}    = $hash_ref->{node_password}; 
					$an->data->{cgi}{node2_remote_ip}   = $hash_ref->{node_remote_ip}; 
					$an->data->{cgi}{node2_remote_port} = $hash_ref->{node_remote_port}; 
					$an->data->{cgi}{node2_uuid}        = $hash_ref->{node_uuid}; 
					$an->data->{cgi}{node2_bcn}         = $hash_ref->{node_bcn};
					$an->data->{cgi}{node2_sn}          = $hash_ref->{node_sn};
					$an->data->{cgi}{node2_ifn}         = $hash_ref->{node_ifn};
					$an->data->{cgi}{node2_host_name}   = $hash_ref->{node_ifn};
					$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
						name1  => "cgi::node2_anvil_uuid",  value1  => $an->data->{cgi}{node2_anvil_uuid},
						name2  => "cgi::node2_host_uuid",   value2  => $an->data->{cgi}{node2_host_uuid},
						name3  => "cgi::node2_note",        value3  => $an->data->{cgi}{node2_note},
						name4  => "cgi::node2_remote_ip",   value4  => $an->data->{cgi}{node2_remote_ip},
						name5  => "cgi::node2_remote_port", value5  => $an->data->{cgi}{node2_remote_port},
						name6  => "cgi::node2_uuid",        value6  => $an->data->{cgi}{node2_uuid},
						name7  => "cgi::node2_bcn",         value7  => $an->data->{cgi}{node2_bcn},
						name8  => "cgi::node2_sn",          value8  => $an->data->{cgi}{node2_sn},
						name9  => "cgi::node2_ifn",         value9  => $an->data->{cgi}{node2_ifn},
						name10 => "cgi::node2_host_name",   value10 => $an->data->{cgi}{node2_host_name},
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
						name1 => "cgi::node2_password", value1 => $an->data->{cgi}{node2_password},
					}, file => $THIS_FILE, line => __LINE__});
					
					# The access is a little trickier... We'll use the remote IP and port, if 
					# set. Otherwise we'll use the BCN IP. If the port is 22, it will be left 
					# off.
					if ($an->data->{cgi}{node2_remote_ip})
					{
						$an->data->{cgi}{node2_access} = $an->data->{cgi}{node2_remote_ip};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
						}, file => $THIS_FILE, line => __LINE__});
						if (($an->data->{cgi}{node2_remote_port}) && ($an->data->{cgi}{node2_remote_port} ne "22"))
						{
							$an->data->{cgi}{node2_access} .= ":".$an->data->{cgi}{node2_remote_port};
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
					else
					{
						$an->data->{cgi}{node2_access} = $an->data->{cgi}{node2_bcn};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				else
				{
					# Illegally named node
				}
			}
		}
	}
	else
	{
		### No UUID, blank both nodes 
		# Node 1
		$an->data->{cgi}{node1_access}      = ""; 
		$an->data->{cgi}{node1_anvil_uuid}  = ""; 
		$an->data->{cgi}{node1_host_uuid}   = ""; 
		$an->data->{cgi}{node1_note}        = ""; 
		$an->data->{cgi}{node1_remote_ip}   = ""; 
		$an->data->{cgi}{node1_remote_port} = ""; 
		$an->data->{cgi}{node1_uuid}        = ""; 
		$an->data->{cgi}{node1_bcn}         = "";
		$an->data->{cgi}{node1_sn}          = "";
		$an->data->{cgi}{node1_ifn}         = "";
		$an->data->{cgi}{node1_host_name}   = "";
		$an->data->{cgi}{node1_password}    = ""; 
		$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
			name1  => "cgi::node1_access",      value1  => $an->data->{cgi}{node1_access},
			name2  => "cgi::node1_anvil_uuid",  value2  => $an->data->{cgi}{node1_anvil_uuid},
			name3  => "cgi::node1_host_uuid",   value3  => $an->data->{cgi}{node1_host_uuid},
			name4  => "cgi::node1_note",        value4  => $an->data->{cgi}{node1_note},
			name5  => "cgi::node1_remote_ip",   value5  => $an->data->{cgi}{node1_remote_ip},
			name6  => "cgi::node1_remote_port", value6  => $an->data->{cgi}{node1_remote_port},
			name7  => "cgi::node1_uuid",        value7  => $an->data->{cgi}{node1_uuid},
			name8  => "cgi::node1_bcn",         value8  => $an->data->{cgi}{node1_bcn},
			name9  => "cgi::node1_sn",          value9  => $an->data->{cgi}{node1_sn},
			name10 => "cgi::node1_ifn",         value10 => $an->data->{cgi}{node1_ifn},
			name11 => "cgi::node1_host_name",   value11 => $an->data->{cgi}{node1_host_name},
			name12 => "cgi::node1_password",    value12 => $an->data->{cgi}{node1_password},
		}, file => $THIS_FILE, line => __LINE__});
		
		# Node 2
		$an->data->{cgi}{node2_access}      = ""; 
		$an->data->{cgi}{node2_anvil_uuid}  = ""; 
		$an->data->{cgi}{node2_host_uuid}   = ""; 
		$an->data->{cgi}{node2_note}        = ""; 
		$an->data->{cgi}{node2_remote_ip}   = ""; 
		$an->data->{cgi}{node2_remote_port} = ""; 
		$an->data->{cgi}{node2_uuid}        = ""; 
		$an->data->{cgi}{node2_bcn}         = "";
		$an->data->{cgi}{node2_sn}          = "";
		$an->data->{cgi}{node2_ifn}         = "";
		$an->data->{cgi}{node2_host_name}   = "";
		$an->data->{cgi}{node2_password}    = ""; 
		$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
			name1  => "cgi::node2_access",      value1  => $an->data->{cgi}{node2_access},
			name2  => "cgi::node2_anvil_uuid",  value2  => $an->data->{cgi}{node2_anvil_uuid},
			name3  => "cgi::node2_host_uuid",   value3  => $an->data->{cgi}{node2_host_uuid},
			name4  => "cgi::node2_note",        value4  => $an->data->{cgi}{node2_note},
			name5  => "cgi::node2_remote_ip",   value5  => $an->data->{cgi}{node2_remote_ip},
			name6  => "cgi::node2_remote_port", value6  => $an->data->{cgi}{node2_remote_port},
			name7  => "cgi::node2_uuid",        value7  => $an->data->{cgi}{node2_uuid},
			name8  => "cgi::node2_bcn",         value8  => $an->data->{cgi}{node2_bcn},
			name9  => "cgi::node2_sn",          value9  => $an->data->{cgi}{node2_sn},
			name10 => "cgi::node2_ifn",         value10 => $an->data->{cgi}{node2_ifn},
			name11 => "cgi::node2_host_name",   value11 => $an->data->{cgi}{node2_host_name},
			name12 => "cgi::node2_password",    value12 => $an->data->{cgi}{node2_password},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# This uses an anvil_uuid to load information about the associated Anvil! system.
sub load_anvil_form
{
	my ($an, $anvils, $owners, $smtp, $nodes) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_anvil_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# First, find the Anvil!
	foreach my $hash_ref (@{$anvils})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "hash_ref->anvil_uuid", value1 => $hash_ref->{anvil_uuid},
			name2 => "cgi::anvil_uuid",      value2 => $an->data->{cgi}{anvil_uuid},
		}, file => $THIS_FILE, line => __LINE__});
		if ($hash_ref->{anvil_uuid} eq $an->data->{cgi}{anvil_uuid})
		{
			$an->data->{cgi}{anvil_owner_uuid}  = $hash_ref->{anvil_owner_uuid};
			$an->data->{cgi}{anvil_smtp_uuid}   = $hash_ref->{anvil_smtp_uuid};
			$an->data->{cgi}{anvil_name}        = $hash_ref->{anvil_name};
			$an->data->{cgi}{anvil_description} = $hash_ref->{anvil_description};
			$an->data->{cgi}{anvil_note}        = $hash_ref->{anvil_note};
			$an->data->{cgi}{anvil_password}    = $hash_ref->{anvil_password};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
				name1 => "cgi::anvil_owner_uuid",  value1 => $an->data->{cgi}{anvil_owner_uuid},
				name2 => "cgi::anvil_smtp_uuid",   value2 => $an->data->{cgi}{anvil_smtp_uuid},
				name3 => "cgi::anvil_name",        value3 => $an->data->{cgi}{anvil_name},
				name4 => "cgi::anvil_description", value4 => $an->data->{cgi}{anvil_description},
				name5 => "cgi::anvil_note",        value5 => $an->data->{cgi}{anvil_note},
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::anvil_password", value1 => $an->data->{cgi}{anvil_password},
			}, file => $THIS_FILE, line => __LINE__});
			last;
		}
	}
	
	# Tease out the details
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::anvil_owner_uuid", value1 => $an->data->{cgi}{anvil_owner_uuid},
		name1 => "cgi::anvil_smtp_uuid", value1 => $an->data->{cgi}{anvil_smtp_uuid},
			name2 => "cgi::anvil_uuid",           value2 => $an->data->{cgi}{anvil_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	load_owner_form($an, $owners, $an->data->{cgi}{anvil_owner_uuid});
	load_smtp_form($an,  $smtp,   $an->data->{cgi}{anvil_smtp_uuid});
	load_node_form($an,  $nodes,  $an->data->{cgi}{anvil_uuid});
	
	return(0);
}

# This saves the changes to an SMTP server.
sub save_smtp_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an smtp server?
	if (not $an->data->{cgi}{smtp_server})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0250!#" }});
		push @{$error_fields}, "smtp_server";
	}
	
	# Save the form (either INSERT or UPDATE if something has changed.
	$an->data->{cgi}{smtp_uuid} = save_smtp($an);
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::smtp_uuid", value1 => $an->data->{cgi}{smtp_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Process errors now, if any.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! DR target.
sub save_dr_job_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_dr_job_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have a DR target?
	if (not $an->data->{cgi}{dr_job_servers})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0322!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_job_servers";
	}
	# Do I have at a job name?
	if (not $an->data->{cgi}{dr_job_name})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0323!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_job_name";
	}
	# Do I have all of a job schedule? 
	if (not $an->data->{cgi}{dr_job_schedule})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0325!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_job_schedule";
	}
	else
	{
		# We don't support '@reboot', despite it being valid, so check for it manually.
		my $ok = 1;
		if (lc($an->data->{cgi}{dr_job_schedule}) eq '@reboot')
		{
			# We don't support this.
			   $ok     = 0;
			my $notice = $an->String->get({key => "message_0496"});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "notice", value1 => $notice,
			}, file => $THIS_FILE, line => __LINE__});
			
			push @{$notices},      $notice;
			push @{$error_fields}, "dr_job_schedule";
		}
		else
		{
			# Validate it. If it is valid, we'll rewrite the CGI variable to normalize it.
			($ok, my $normalized_schedule) = $an->Validate->is_crontab_schedule({schedule => $an->data->{cgi}{dr_job_schedule}});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "ok",                  value1 => $ok,
				name2 => "normalized_schedule", value2 => $normalized_schedule,
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($ok)
			{
				
				# Rewrite the CGI variable
				$an->data->{cgi}{dr_job_schedule} = $normalized_schedule;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::dr_job_schedule", value1 => $an->data->{cgi}{dr_job_schedule},
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Malformed.
				my $notice = $an->String->get({key => "message_0497"});
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "notice", value1 => $notice,
				}, file => $THIS_FILE, line => __LINE__});
				
				push @{$notices},      $notice;
				push @{$error_fields}, "dr_job_schedule";
			}
		}
	}
	
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Save the form (either INSERT or UPDATE if something has changed.
	if (not $error_count)
	{
		# Merge the 'dr_job_store' CGI variables.
		if ((not $an->data->{cgi}{dr_job_store}) && ($an->data->{cgi}{dr_job_store_type} && $an->data->{cgi}{dr_job_store_location}))
		{
			$an->data->{cgi}{dr_job_store} = $an->data->{cgi}{dr_job_store_type}.":".$an->data->{cgi}{dr_job_store_location};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::dr_job_store", value1 => $an->data->{cgi}{dr_job_store},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		$an->data->{cgi}{dr_job_uuid} = save_dr_job($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::dr_job_uuid", value1 => $an->data->{cgi}{dr_job_uuid},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! DR target.
sub save_dr_target_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_dr_target_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an dr_target_name/IP?
	if (not $an->data->{cgi}{dr_target_address})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0317!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_target_address";
	}
	# Do I have at a target name?
	if (not $an->data->{cgi}{dr_target_name})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0326!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_target_name";
	}
	# NOTE: These to fields are joined to create dr_target_store as 
	#       'dr_target_store_type:dr_target_store_location',
	# Do I have at a target location? 
	if ((not $an->data->{cgi}{dr_target_store_type}) or (not $an->data->{cgi}{dr_target_store_location}))
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0320!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "dr_target_store";
		push @{$error_fields}, "dr_target_store_type"     if not $an->data->{cgi}{dr_target_store_type};
		push @{$error_fields}, "dr_target_store_location" if not $an->data->{cgi}{dr_target_store_location};
	}
	
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Save the form (either INSERT or UPDATE if something has changed.
	if (not $error_count)
	{
		# Merge the 'dr_target_store' CGI variables.
		if ((not $an->data->{cgi}{dr_target_store}) && ($an->data->{cgi}{dr_target_store_type} && $an->data->{cgi}{dr_target_store_location}))
		{
			$an->data->{cgi}{dr_target_store} = $an->data->{cgi}{dr_target_store_type}.":".$an->data->{cgi}{dr_target_store_location};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::dr_target_store", value1 => $an->data->{cgi}{dr_target_store},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		$an->data->{cgi}{dr_target_uuid} = save_dr_target($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::dr_target_uuid", value1 => $an->data->{cgi}{dr_target_uuid},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! notify.
sub save_notify_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_notify_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an notify?
	if (not $an->data->{cgi}{notify_target})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0308!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "notify_target";
	}
	
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Save the form (either INSERT or UPDATE if something has changed.
	if (not $error_count)
	{
		$an->data->{cgi}{notify_uuid} = save_notify($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::notify_uuid", value1 => $an->data->{cgi}{notify_uuid},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! owner.
sub save_owner_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_owner_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an owner?
	if (not $an->data->{cgi}{owner_name})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0023!#" }});
		push @{$error_fields}, "owner_name";
	}
	
	# Save the form (either INSERT or UPDATE if something has changed.
	$an->data->{cgi}{owner_uuid} = save_owner($an);
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Process errors now, if any.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! using the minimal of user input. As much data as possible will be 
# collected from the nodes directly.
sub save_anvil_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_anvil_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Sort out the node access
	my $node1_data    = "";
	my $node2_data    = "";
	my $node1_address = $an->data->{cgi}{node1_access};
	my $node1_port    = 22;
	my $node2_address = $an->data->{cgi}{node2_access};
	my $node2_port    = 22;
	$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
		name1 => "node1_address",     value1 => $node1_address,
		name2 => "node1_port",        value2 => $node1_port,
		name3 => "cgi::node1_access", value3 => $an->data->{cgi}{node1_access},
		name4 => "node2_address",     value4 => $node2_address,
		name5 => "node2_port",        value5 => $node2_port,
		name6 => "cgi::node2_access", value6 => $an->data->{cgi}{node2_access},
	}, file => $THIS_FILE, line => __LINE__});
	if (not $an->data->{cgi}{node1_access})
	{
		my $row = $an->String->get({key => "row_0248", variables => { node => 1 }});
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => $row }});
		push @{$error_fields}, "node1_access";
	}
	elsif ($an->data->{cgi}{node1_access} =~ /(.*):(\d+)/)
	{
		$node1_address = $1;
		$node1_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_address", value1 => $node1_address,
			name2 => "node1_port",    value2 => $node1_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (not $an->data->{cgi}{node2_access})
	{
		# Sorry, this is messy... the 'field' variable is 'Node X'.
		my $row = $an->String->get({key => "row_0248", variables => { node => 2 }});
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => $row }});
		push @{$error_fields}, "node2_access";
	}
	elsif ($an->data->{cgi}{node2_access} =~ /(.*):(\d+)/)
	{
		$node2_address = $1;
		$node2_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node2_address", value1 => $node2_address,
			name2 => "node2_port",    value2 => $node2_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Do I have an owner?
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::owner_name", value1 => $an->data->{cgi}{owner_name},
	}, file => $THIS_FILE, line => __LINE__});
	if (not $an->data->{cgi}{owner_name})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0023!#" }});
		push @{$error_fields}, "owner_name";
	}
	
	# What about a password?
	$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::anvil_password", value1 => $an->data->{cgi}{anvil_password},
	}, file => $THIS_FILE, line => __LINE__});
	if (not $an->data->{cgi}{anvil_password})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0025!#" }});
		push @{$error_fields}, "anvil_password";
	}
	
	# If no 'smtp_server' is set, we'll ignore the rest of the mail setup.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::smtp_server", value1 => $an->data->{cgi}{smtp_server},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{smtp_server})
	{
		# The SMTP password can only be blank is the password security is 'none'.
		$an->Log->entry({log_level => 4, message_key => "an_variables_0002", message_variables => {
			name1 => "cgi::smtp_password",       value1 => $an->data->{cgi}{smtp_password},
			name2 => "cgi::smtp_authentication", value2 => $an->data->{cgi}{smtp_authentication},
		}, file => $THIS_FILE, line => __LINE__});
		if ((not $an->data->{cgi}{smtp_password}) && ($an->data->{cgi}{smtp_authentication} ne "none"))
		{
			push @{$notices},      $an->String->get({key => "message_0486"});
			push @{$error_fields}, "smtp_password";
		}
	}
	
	# If there were errors, display them and return.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "notice", value1 => $notice,
			}, file => $THIS_FILE, line => __LINE__});
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Try connecting to the nodes, if we're good so far.
	if ($error_count < 1)
	{
		# Proceed with attempt to log into the nodes.
		my $node1_access = $an->Check->access({
			target		=>	$node1_address,
			port		=>	$node1_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		my $node2_access = $an->Check->access({
			target		=>	$node2_address,
			port		=>	$node2_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_access", value1 => $node1_access,
			name2 => "node2_access", value2 => $node2_access,
		}, file => $THIS_FILE, line => __LINE__});
		if (not $node1_access)
		{
			push @{$notices},      $an->String->get({key => "message_0371", variables => { node => 1 } });
			push @{$error_fields}, "node1_access";
		}
		if (not $node2_access)
		{
			push @{$notices},      $an->String->get({key => "message_0371", variables => { node => 2 } });
			push @{$error_fields}, "node2_access";
		}
		
		# Gather data from the nodes, if we're still good.
		if (($node1_access) && ($node2_access))
		{
			$node1_data = $an->Get->target_details({
					target		=>	$node1_address,
					port		=>	$node1_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
			$node2_data = $an->Get->target_details({
					target		=>	$node2_address,
					port		=>	$node2_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
			if (not $an->data->{cgi}{anvil_name})
			{
				$an->data->{cgi}{anvil_name} = $node1_data->{anvil_name} ? $node1_data->{anvil_name} : $node1_data->{anvi2_name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::anvil_name", value1 => $an->data->{cgi}{anvil_name},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Update the error count.
	$error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Now save, if we're still good, try and save.
	if ($error_count < 1)
	{
		### Gather up the records
		# SMTP first, if appropriate
		my $smtp_ok = 0;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "smtp_ok",          value1 => $smtp_ok,
			name2 => "cgi::smtp_server", value2 => $an->data->{cgi}{smtp_server},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{smtp_server})
		{
			$an->data->{cgi}{smtp_uuid} = save_smtp($an);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::smtp_uuid", value1 => $an->data->{cgi}{smtp_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($an->data->{cgi}{smtp_uuid})
			{
				$smtp_ok = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "smtp_ok", value1 => $smtp_ok,
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		else
		{
			# No mail requested.
			$smtp_ok = 1;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_ok", value1 => $smtp_ok,
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "smtp_ok", value1 => $smtp_ok,
		}, file => $THIS_FILE, line => __LINE__});
		if ($smtp_ok)
		{
			$an->data->{cgi}{owner_uuid} = save_owner($an);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($an->data->{cgi}{owner_uuid})
			{
				$an->data->{cgi}{anvil_uuid} = save_anvil($an);
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::anvil_uuid", value1 => $an->data->{cgi}{anvil_uuid},
				}, file => $THIS_FILE, line => __LINE__});
				
				if ($an->data->{cgi}{anvil_uuid})
				{
					# Save both nods
					($an->data->{cgi}{node1_uuid}, $an->data->{cgi}{node2_uuid}) = save_nodes($an, $node1_data, $node2_data);
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "cgi::node1_uuid", value1 => $an->data->{cgi}{node1_uuid},
						name2 => "cgi::node2_uuid", value2 => $an->data->{cgi}{node2_uuid},
					}, file => $THIS_FILE, line => __LINE__});
				}
				else
				{
					# no anvil_uuid
				}
			}
			else
			{
				# no owner_uuid
			}
		}
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning_bold",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All was good!
		my $message = $an->String->get({key => "message_0485", variables => {
				anvil            => $an->data->{cgi}{anvil_name},
				manage_url       => "/cgi-bin/striker?anvil_uuid=".$an->data->{cgi}{anvil_uuid},
				notification_url => "/cgi-bin/configure?task=notify",
			}});
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0203!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$message,
			}});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_nodes() for each node.
sub save_nodes
{
	my ($an, $node1_data, $node2_data) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_nodes" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If either UUID is missing, error.
	if (not $node1_data->{uuid})
	{
		# TODO...
		die;
	}
	if (not $node2_data->{uuid})
	{
		# TODO...
		die;
	}
	
	# If the access info matches one of the BCN/IFN/SN IPs, we'll not set remote to the current access. 
	# If there is a CGI variable for either though, we'll use that.
	my $node1_address = $an->data->{cgi}{node1_access};
	my $node1_port    = 22;
	if ($an->data->{cgi}{node1_access} =~ /(.*):(\d+)/)
	{
		$node1_address = $1;
		$node1_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_address", value1 => $node1_address,
			name2 => "node1_port",    value2 => $node1_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (($node1_address eq $node1_data->{network}{bcn_address}) or 
	    ($node1_address eq $node1_data->{network}{ifn_address}) or 
	    ($node1_address eq $node1_data->{network}{sn_address}))
	{
		$node1_address = "";
		$node1_port    = "";
	}
	
	my $node2_address = $an->data->{cgi}{node2_access};
	my $node2_port    = 22;
	if ($an->data->{cgi}{node2_access} =~ /(.*):(\d+)/)
	{
		$node2_address = $1;
		$node2_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node2_address", value1 => $node2_address,
			name2 => "node2_port",    value2 => $node2_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (($node2_address eq $node2_data->{network}{bcn_address}) or 
	    ($node2_address eq $node2_data->{network}{ifn_address}) or 
	    ($node2_address eq $node2_data->{network}{sn_address}))
	{
		$node2_address = "";
		$node2_port    = "";
	}
	
	### NOTE: Don't confuse the 'nodeX_uuid' DB record locator with the node's host UUID. The node's UUID
	###       and the BCN, SN and IFN IPs are never passed from CGI, they're always pulled from the node.
	my $node1_uuid = $an->ScanCore->insert_or_update_nodes({
		node_uuid	=>	$an->data->{cgi}{node1_uuid}, 
		node_anvil_uuid	=>	$an->data->{cgi}{anvil_uuid}, 
		node_host_uuid	=>	$node1_data->{uuid}, 
		node_remote_ip	=>	$an->data->{cgi}{node1_remote_ip}   ? $an->data->{cgi}{node1_remote_ip}   : $node1_address, 
		node_remote_port =>	$an->data->{cgi}{node1_remote_port} ? $an->data->{cgi}{node1_remote_port} : $node1_port, 
		node_note	=>	$an->data->{cgi}{node1_note}, 
		node_bcn	=>	$node1_data->{network}{bcn_address}, 
		node_sn		=>	$node1_data->{network}{sn_address}, 
		node_ifn	=>	$node1_data->{network}{ifn_address}, 
		node_password	=>	$an->data->{cgi}{node1_password} ? $an->data->{cgi}{node1_password} : $an->data->{cgi}{anvil_password},
	});
	my $node2_uuid = $an->ScanCore->insert_or_update_nodes({
		node_uuid	=>	$an->data->{cgi}{node2_uuid}, 
		node_anvil_uuid	=>	$an->data->{cgi}{anvil_uuid}, 
		node_host_uuid	=>	$node2_data->{uuid}, 
		node_remote_ip	=>	$an->data->{cgi}{node2_remote_ip}   ? $an->data->{cgi}{node2_remote_ip}   : $node2_address, 
		node_remote_port =>	$an->data->{cgi}{node2_remote_port} ? $an->data->{cgi}{node2_remote_port} : $node2_port, 
		node_note	=>	$an->data->{cgi}{node2_note}, 
		node_bcn	=>	$node2_data->{network}{bcn_address}, 
		node_sn		=>	$node2_data->{network}{sn_address}, 
		node_ifn	=>	$node2_data->{network}{ifn_address}, 
		node_password	=>	$an->data->{cgi}{node2_password} ? $an->data->{cgi}{node2_password} : $an->data->{cgi}{anvil_password},
	});
	
	return($node1_uuid, $node2_uuid);
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_anvil();
sub save_anvil
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_anvil" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# As of now, I set the owner and smtp UUID from CGI... This might be a bad idea.
	my $anvil_uuid        = $an->data->{cgi}{anvil_uuid};
	my $anvil_owner_uuid  = $an->data->{cgi}{anvil_owner_uuid} ? $an->data->{cgi}{anvil_owner_uuid} : $an->data->{cgi}{owner_uuid};
	my $anvil_smtp_uuid   = $an->data->{cgi}{anvil_smtp_uuid}  ? $an->data->{cgi}{anvil_smtp_uuid}  : $an->data->{cgi}{smtp_uuid};
	my $anvil_name        = $an->data->{cgi}{anvil_name};
	my $anvil_description = $an->data->{cgi}{anvil_description};
	my $anvil_note        = $an->data->{cgi}{anvil_note};
	my $anvil_password    = $an->data->{cgi}{anvil_password};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "anvil_uuid", value1 => $anvil_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	# If the anvil_uuid is NULL or new, wipe it before calling insert_or_update_anvils().
	if (($anvil_uuid eq "NULL") or ($anvil_uuid eq "new"))
	{
		$anvil_uuid = "";
	}
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching Anvil! name, if 
	# one exists. If nothing changed, the database will not be updated.
	$anvil_uuid = $an->ScanCore->insert_or_update_anvils({
		anvil_uuid		=>	$anvil_uuid,
		anvil_owner_uuid	=>	$anvil_owner_uuid,
		anvil_smtp_uuid		=>	$anvil_smtp_uuid,
		anvil_name		=>	$anvil_name,
		anvil_description	=>	$anvil_description,
		anvil_note		=>	$anvil_note,
		anvil_password		=>	$anvil_password,
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "anvil_uuid", value1 => $anvil_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	return($anvil_uuid);
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_dr_jobs();
sub save_dr_job
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_dr_job" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching dr_job name, if
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{dr_job_uuid} = $an->ScanCore->insert_or_update_dr_jobs({
		dr_job_uuid		=>	$an->data->{cgi}{dr_job_uuid},
		dr_job_dr_target_uuid	=>	$an->data->{cgi}{dr_job_dr_target_uuid}, 
		dr_job_anvil_uuid	=>	$an->data->{cgi}{dr_job_anvil_uuid}, 
		dr_job_name		=>	$an->data->{cgi}{dr_job_name},
		dr_job_note		=>	$an->data->{cgi}{dr_job_note}, 
		dr_job_servers		=>	$an->data->{cgi}{dr_job_servers}, 
		dr_job_auto_prune	=>	$an->data->{cgi}{dr_job_auto_prune}, 
		dr_job_schedule		=>	$an->data->{cgi}{dr_job_schedule}, 
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::dr_job_uuid", value1 => $an->data->{cgi}{dr_job_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	return($an->data->{cgi}{dr_job_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_dr_targets();
sub save_dr_target
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_dr_target" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching dr_target name, if
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{dr_target_uuid} = $an->ScanCore->insert_or_update_dr_targets({
		dr_target_uuid		=>	$an->data->{cgi}{dr_target_uuid},
		dr_target_name		=>	$an->data->{cgi}{dr_target_name},
		dr_target_note		=>	$an->data->{cgi}{dr_target_note}, 
		dr_target_address	=>	$an->data->{cgi}{dr_target_address}, 
		dr_target_password	=>	$an->data->{cgi}{dr_target_password}, 
		dr_target_tcp_port	=>	$an->data->{cgi}{dr_target_tcp_port}, 
		dr_target_use_cache	=>	$an->data->{cgi}{dr_target_use_cache}, 
		dr_target_store		=>	$an->data->{cgi}{dr_target_store}, 
		dr_target_copies	=>	$an->data->{cgi}{dr_target_copies}, 
		dr_target_bandwidth_limit =>	$an->data->{cgi}{dr_target_bandwidth_limit}, 
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::dr_target_uuid", value1 => $an->data->{cgi}{dr_target_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	return($an->data->{cgi}{dr_target_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_notifications();
sub save_notify
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_notify" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching notify name, if 
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{notify_uuid} = $an->ScanCore->insert_or_update_notifications({
		notify_uuid	=>	$an->data->{cgi}{notify_uuid},
		notify_name	=>	$an->data->{cgi}{notify_name},
		notify_target	=>	$an->data->{cgi}{notify_target},
		notify_language	=>	$an->data->{cgi}{notify_language},
		notify_level	=>	$an->data->{cgi}{notify_level},
		notify_units	=>	$an->data->{cgi}{notify_units},
		notify_note	=>	$an->data->{cgi}{notify_note},
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::notify_uuid", value1 => $an->data->{cgi}{notify_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Loop through the Anvil! systems now.
	my $anvils = $an->ScanCore->get_anvils();
	foreach my $hash_ref (@{$anvils})
	{
		my $anvil_uuid = $hash_ref->{anvil_uuid};
		my $notify_key = "notify_anvil_".$anvil_uuid;
		if ($an->data->{cgi}{$notify_key})
		{
			# For now, the only reason 'note' is used is to mark a recipient being deleted.
			my $recipient_uuid = $an->ScanCore->insert_or_update_recipients({
				recipient_anvil_uuid	=>	$anvil_uuid,
				recipient_notify_uuid	=>	$an->data->{cgi}{notify_uuid}, 
				recipient_notify_level	=>	$an->data->{cgi}{$notify_key},
			});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "recipient_uuid", value1 => $recipient_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return($an->data->{cgi}{notify_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_owner();
sub save_owner
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching owner name, if 
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{owner_uuid} = $an->ScanCore->insert_or_update_owners({
		owner_uuid	=>	$an->data->{cgi}{owner_uuid},
		owner_name	=>	$an->data->{cgi}{owner_name},
		owner_note	=>	$an->data->{cgi}{owner_note},
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	return($an->data->{cgi}{owner_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_smtp();
sub save_smtp
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $smtp_uuid           = $an->data->{cgi}{smtp_uuid};
	my $smtp_server         = $an->data->{cgi}{smtp_server};
	my $smtp_port           = "";
	my $smtp_alt_server  = $an->data->{cgi}{smtp_alt_server};
	my $smtp_alt_port    = "";
	my $smtp_username       = $an->data->{cgi}{smtp_username};
	my $smtp_password       = $an->data->{cgi}{smtp_password};
	my $smtp_security       = $an->data->{cgi}{smtp_security};
	my $smtp_authentication = $an->data->{cgi}{smtp_authentication};
	my $smtp_helo_domain    = $an->data->{cgi}{smtp_helo_domain};
	my $smtp_note           = $an->data->{cgi}{smtp_note};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
		name1  => "smtp_server",         value1  => $smtp_server,
		name2  => "smtp_port",           value2  => $smtp_port,
		name3  => "smtp_alt_server",     value3  => $smtp_alt_server,
		name4  => "smtp_alt_port",       value4  => $smtp_alt_port,
		name5  => "smtp_username",       value5  => $smtp_username,
		name6  => "smtp_password",       value6  => $smtp_password,
		name7  => "smtp_security",       value7  => $smtp_security,
		name8  => "smtp_authentication", value8  => $smtp_authentication,
		name9  => "smtp_helo_domain",    value9  => $smtp_helo_domain,
		name10 => "smtp_note",           value10 => $smtp_note,
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($smtp_server =~ /(.*):(\d+)/)
	{
		$smtp_server = $1;
		$smtp_port   = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "smtp_server", value1 => $smtp_server,
			name2 => "smtp_port",   value2 => $smtp_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (not $smtp_port)
	{
		if ($smtp_security eq "starttls")
		{
			$smtp_port = 587;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "tls_ssl")
		{
			$smtp_port = 465;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "none")
		{
			$smtp_port = 25;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	if ($smtp_alt_server =~ /(.*):(\d+)/)
	{
		$smtp_alt_server = $1;
		$smtp_alt_port   = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "smtp_alt_server", value1 => $smtp_alt_server,
			name2 => "smtp_alt_port",   value2 => $smtp_alt_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (($smtp_alt_server) && (not $smtp_alt_port))
	{
		if ($smtp_security eq "starttls")
		{
			$smtp_alt_port = 587;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_alt_port", value1 => $smtp_alt_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "tls_ssl")
		{
			$smtp_alt_port = 465;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_alt_port", value1 => $smtp_alt_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "none")
		{
			$smtp_alt_port = 25;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_alt_port", value1 => $smtp_alt_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	if (not $smtp_helo_domain)
	{
		$smtp_helo_domain = $an->domain_name();
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "smtp_helo_domain", value1 => $smtp_helo_domain,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching server name, if 
	# one exists. If nothing changed, the database will not be updated.
	$smtp_uuid = $an->ScanCore->insert_or_update_smtp({
		smtp_uuid		=>	$smtp_uuid,
		smtp_server		=>	$smtp_server,
		smtp_port		=>	$smtp_port,
		smtp_alt_server		=>	$smtp_alt_server,
		smtp_alt_port		=>	$smtp_alt_port,
		smtp_username		=>	$smtp_username,
		smtp_password		=>	$smtp_password,
		smtp_security		=>	$smtp_security,
		smtp_authentication	=>	$smtp_authentication,
		smtp_helo_domain	=>	$smtp_helo_domain,
		smtp_note		=>	$smtp_note,
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "smtp_uuid", value1 => $smtp_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	return($smtp_uuid);
}

# This either enables or disables the Install Target feature.
sub manage_install_target
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the control program exists, call it with '--status'
	my $install_target_state = 2;
	my $task                 = $an->data->{cgi}{subtask} eq "enable" ? "--enable" : "--disable";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "task",                                     value1 => $task,
		name2 => "path::call_striker-manage-install-target", value2 => $an->data->{path}{'call_striker-manage-install-target'},
	}, file => $THIS_FILE, line => __LINE__});
	if (-e $an->data->{path}{'call_striker-manage-install-target'})
	{
		my $shell_call = $an->data->{path}{'call_striker-manage-install-target'}." $task";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call,
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({fatal => 1, title_key => "error_title_0020", message_key => "error_message_0022", message_variables => { shell_call => $shell_call, error => $! }, code => 30, file => "$THIS_FILE", line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line,
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($line =~ /state:(\d+)/)
			{
				my $state = $1;
				# 0 = stopped
				# 1 = running
				# 2 = unknown
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "state", value1 => $state,
				}, file => $THIS_FILE, line => __LINE__});
				if ($state eq "0")
				{
					$install_target_state = 0;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "install_target_state", value1 => $install_target_state,
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($state eq "1")
				{
					$install_target_state = 1;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "install_target_state", value1 => $install_target_state,
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
		}
		close $file_handle;
	}
	else
	{
		# The install target control setuid script wasn't found
		$an->Log->entry({log_level => 2, message_key => "log_0013", message_variables => {
			file => $an->data->{path}{install_target_conf},
		}, file => $THIS_FILE, line => __LINE__});
	}
	# 0 == Stopped
	# 1 == Running
	# 2 == Unknown
	my $notice_message = "";
	if ($install_target_state eq "0")
	{
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0459"}),
			}});
	}
	elsif ($install_target_state eq "1")
	{
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0458"}),
			}});
	}
	else
	{
		my $message_key = "warning_0002";
		if ($an->data->{cgi}{subtask} eq "enable")
		{
			$message_key = "warning_0001";
		}
		$notice_message = $an->Web->template({file => "web.html", template => "failure-message", replace => {
				title		=>	"#!string!title_0197!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0090!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => $message_key}),
			}});
	}
	
	return($notice_message);
}

# This just puts together the "confirm" message for the given action
sub confirm_action
{
	my ($an, $action) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "confirm_action" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "action", value1 => $action,
	}, file => $THIS_FILE, line => __LINE__});
	
	my $notice_message = "";
	if ($action eq "delete_anvil")
	{
		# Get the Anvil!'s name.
		my $anvil_data     = $an->Get->anvil_data({uuid => $an->data->{cgi}{anvil_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=anvil&anvil_uuid=".$an->data->{cgi}{anvil_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "anvil_data->anvil_name", value1 => $anvil_data->{anvil_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0374", variables => { anvil => $anvil_data->{anvil_name} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_owner")
	{
		# Get the owner's name.
		my $owner_data     = $an->Get->owner_data({uuid => $an->data->{cgi}{owner_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=owner&owner_uuid=".$an->data->{cgi}{owner_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "owner_data->owner_name", value1 => $owner_data->{owner_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0392", variables => { owner => $owner_data->{owner_name} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_smtp")
	{
		# Get the smtp server's name.
		my $smtp_data      = $an->Get->smtp_data({uuid => $an->data->{cgi}{smtp_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=smtp&smtp_uuid=".$an->data->{cgi}{smtp_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "smtp_data->smtp_server", value1 => $smtp_data->{smtp_server},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0396", variables => { smtp => $smtp_data->{smtp_server} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_notify")
	{
		# Get the notification target's name.
		my $notify_data     = $an->Get->notify_data({uuid => $an->data->{cgi}{notify_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=notify&notify_uuid=".$an->data->{cgi}{notify_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notify_data->notify_target", value1 => $notify_data->{notify_target},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0454", variables => { target => $notify_data->{notify_target} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_manifest")
	{
		# Get the manifest target's name.
		my $manifest_uuid = $an->data->{cgi}{manifest_uuid};
		$an->Get->parse_install_manifest({uuid => $manifest_uuid});
		my $prefix   = $an->data->{install_manifest}{$manifest_uuid}{common}{anvil}{prefix};
		my $sequence = $an->data->{install_manifest}{$manifest_uuid}{common}{anvil}{sequence};
		my $anvil    = $prefix."-anvil-".$sequence;
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=manifests&manifest_uuid=".$an->data->{cgi}{manifest_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "anvil", value1 => $anvil,
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0470", variables => { anvil => $anvil }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "enable_install_target")
	{
		# Warn the user about DHCP server conflict possibilities.
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=install_target&subtask=enable&confirm=true",
		}, no_comment => 1});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0200!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0312!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0457"}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_dr_target")
	{
		# Get the notification target's name.
		my $dr_target_data = $an->Get->dr_target_data({uuid => $an->data->{cgi}{dr_target_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=dr_target&dr_target_uuid=".$an->data->{cgi}{dr_target_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "dr_target_data->dr_target_name", value1 => $dr_target_data->{dr_target_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0491", variables => { target => $dr_target_data->{dr_target_name} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_dr_job")
	{
		# Get the notification job's name.
		my $dr_job_data    = $an->Get->dr_job_data({uuid => $an->data->{cgi}{dr_job_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=dr_job&dr_job_uuid=".$an->data->{cgi}{dr_job_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "dr_job_data->dr_job_name", value1 => $dr_job_data->{dr_job_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0495", variables => { job => $dr_job_data->{dr_job_name} }}),
				button		=>	$confirm_button,
			}});
	}
	
	return($notice_message);
}

# This deletes the given DR target
sub delete_dr_job
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_dr_job" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Get the DR job name before we delete it.
	my $dr_job_name = $an->data->{cgi}{dr_job_name};
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    dr_jobs 
SET 
    dr_job_note = 'DELETED' 
WHERE 
    dr_job_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_job_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    dr_jobs 
WHERE 
    dr_job_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_job_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    dr_jobs 
WHERE 
    dr_job_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_job_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $dr_job_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "dr_job_count", value1 => $dr_job_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($dr_job_count)
	{
		# What is this!?
		my $error_message = $an->String->get({key => "message_0493", variables => { 
			dr_job => $dr_job_name, 
			count  => $dr_job_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0489", variables => { dr_job => $dr_job_name }}),
			}});
	}
	
	return($notice_message);
}

# This deletes the given DR target
sub delete_dr_target
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_dr_target" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Get the DR target name before we delete it.
	my $dr_target_name = $an->data->{cgi}{dr_target_name};
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    dr_targets 
SET 
    dr_target_note = 'DELETED' 
WHERE 
    dr_target_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_target_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    dr_targets 
WHERE 
    dr_target_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_target_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    dr_targets 
WHERE 
    dr_target_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{dr_target_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $dr_target_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "dr_target_count", value1 => $dr_target_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($dr_target_count)
	{
		# What is this!?
		my $error_message = $an->String->get({key => "message_0492", variables => { 
			dr_target => $dr_target_name, 
			count     => $dr_target_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0489", variables => { dr_target => $dr_target_name }}),
			}});
	}
	
	return($notice_message);
}

# This deletes the given install manifest
sub delete_manifest
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Get the Anvil! name from the manifest before we delete it.
	my $manifest_data = $an->Get->manifest_data({uuid => $an->data->{cgi}{manifest_uuid}});
	$an->ScanCore->parse_install_manifest({uuid => $an->data->{cgi}{manifest_uuid}});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "cgi::anvil_prefix",   value1 => $an->data->{cgi}{anvil_prefix},
		name2 => "cgi::anvil_sequence", value2 => $an->data->{cgi}{anvil_sequence},
	}, file => $THIS_FILE, line => __LINE__});
	
	my $anvil_name     = $an->data->{cgi}{anvil_prefix}."-anvil-".$an->data->{cgi}{anvil_sequence};
	my $notice_message = "";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "anvil_name", value1 => $anvil_name,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    manifests 
SET 
    manifest_note = 'DELETED' 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    manifests 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    manifests 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $manifest_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "manifest_count", value1 => $manifest_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($manifest_count)
	{
		# What is this!?
		my $error_message = $an->String->get({key => "message_0461", variables => { 
			anvil     => $anvil_name,
			manifests => $manifest_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0490", variables => { anvil_name => $anvil_name }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! owner.
sub delete_owner
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $owner_data     = $an->Get->owner_data({uuid => $an->data->{cgi}{owner_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    owners 
SET 
    owner_note = 'DELETED' 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    owners 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    owners 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $owner_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "owner_count", value1 => $owner_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($owner_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0393", variables => { 
			name   => $owner_data->{owner_name},
			owners => $owner_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0395", variables => { owner => $owner_data->{owner_name} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! notify.
sub delete_notify
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_notify" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $notify_data     = $an->Get->notify_data({uuid => $an->data->{cgi}{notify_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    notifications 
SET 
    notify_note = 'DELETED' 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
UPDATE 
    recipients 
SET 
    recipient_note = 'DELETED' 
WHERE 
    recipient_notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    recipients 
WHERE 
    recipient_notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    notifications 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    notifications 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $notify_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "notify_count", value1 => $notify_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($notify_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0393", variables => { 
			target  => $notify_data->{notify_target},
			targets => $notify_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0456", variables => { target => $notify_data->{notify_target} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an smtp server.
sub delete_smtp
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $smtp_data      = $an->Get->smtp_data({uuid => $an->data->{cgi}{smtp_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    smtp 
SET 
    smtp_note = 'DELETED' 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    smtp 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    smtp 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $smtp_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "smtp_count", value1 => $smtp_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($smtp_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0441", variables => { 
			smtp   => $smtp_data->{smtp_server},
			server => $smtp_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0453", variables => { smtp => $smtp_data->{smtp_server} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! and its associated nodes from ScanCore. It does NOT delete the hosts.
sub delete_anvil
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_anvil" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $anvil_data     = $an->Get->anvil_data({uuid => $an->data->{cgi}{anvil_uuid}});
	my $notice_message = "";
	
	### TODO: Delete any cached data for the nodes before deleting the actual node.
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    nodes 
SET 
    node_note = 'DELETED' 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
UPDATE 
    recipients  
SET 
    recipient_note = 'DELETED' 
WHERE 
    recipient_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
UPDATE 
    anvils 
SET 
    anvil_note = 'DELETED' 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    nodes 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    recipients 
WHERE 
    recipient_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    anvils 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    nodes 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $node_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$query = "
SELECT 
    COUNT(*) 
FROM 
    anvils 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $anvil_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "node_count",  value1 => $node_count, 
		name2 => "anvil_count", value2 => $anvil_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if (($node_count) or ($anvil_count))
	{
		# Woops
		my $error_message = $an->String->get({key => "message_0388", variables => { 
			name   => $anvil_data->{anvil_name},
			nodes  => $node_count, 
			anvils => $anvil_count
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# Ba' bye!
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0379", variables => { anvil => $anvil_data->{anvil_name} }}),
			}});
	}
	
	return($notice_message);
}

# This handles the managent of install manifests
sub manifests_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "manifests_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This isn't using the one-page display yet. Before we call this, we want to setup the refresh and 
	# back links.
	$an->Striker->_header({'caller' => "configure"});
	
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
		name1 => "refresh_link",       value1 => $refresh_link,
		name2 => "cgi::delete",        value2 => $an->data->{cgi}{'delete'},
		name3 => "cgi::manifest_uuid", value3 => $an->data->{cgi}{manifest_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{manifest_uuid}))
	{
		# Has the user confirmed?
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::confirm", value1 => $an->data->{cgi}{confirm},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_manifest($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_manifest");
			$refresh_link =~ s/notify_uuid=.*?&/&/;
			$refresh_link =~ s/notify_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	my $show_form = 1;
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::do", value1 => $an->data->{cgi}{'do'},
	}, file => $THIS_FILE, line => __LINE__});
	$an->data->{form}{anvil_prefix_star}                    = "";
	$an->data->{form}{anvil_sequence_star}                  = "";
	$an->data->{form}{anvil_domain_star}                    = "";
	$an->data->{form}{anvil_name_star}                      = "";
	$an->data->{form}{anvil_password_star}                  = "";
	$an->data->{form}{anvil_bcn_ethtool_opts_star}          = "";
	$an->data->{form}{anvil_bcn_network_star}               = "";
	$an->data->{form}{anvil_sn_ethtool_opts_star}           = "";
	$an->data->{form}{anvil_sn_network_star}                = "";
	$an->data->{form}{anvil_ifn_ethtool_opts_star}          = "";
	$an->data->{form}{anvil_ifn_network_star}               = "";
	$an->data->{form}{anvil_ifn_gateway_star}               = "";
	$an->data->{form}{anvil_dns1_star}                      = "";
	$an->data->{form}{anvil_dns2_star}                      = "";
	$an->data->{form}{anvil_ntp1_star}                      = "";
	$an->data->{form}{anvil_ntp2_star}                      = "";
	$an->data->{form}{anvil_switch1_name_star}              = "";
	$an->data->{form}{anvil_switch1_ip_star}                = "";
	$an->data->{form}{anvil_switch2_name_star}              = "";
	$an->data->{form}{anvil_switch2_ip_star}                = "";
	$an->data->{form}{anvil_pdu1_name_star}                 = "";
	$an->data->{form}{anvil_pdu1_ip_star}                   = "";
	$an->data->{form}{anvil_pdu1_agent_star}                = "";
	$an->data->{form}{anvil_pdu2_name_star}                 = "";
	$an->data->{form}{anvil_pdu2_ip_star}                   = "";
	$an->data->{form}{anvil_pdu2_agent_star}                = "";
	$an->data->{form}{anvil_pdu3_name_star}                 = "";
	$an->data->{form}{anvil_pdu3_ip_star}                   = "";
	$an->data->{form}{anvil_pdu3_agent_star}                = "";
	$an->data->{form}{anvil_pdu4_name_star}                 = "";
	$an->data->{form}{anvil_pdu4_ip_star}                   = "";
	$an->data->{form}{anvil_pdu4_agent_star}                = "";
	$an->data->{form}{anvil_ups1_name_star}                 = "";
	$an->data->{form}{anvil_ups1_ip_star}                   = "";
	$an->data->{form}{anvil_ups2_name_star}                 = "";
	$an->data->{form}{anvil_ups2_ip_star}                   = "";
	$an->data->{form}{anvil_pts1_name_star}                 = "";
	$an->data->{form}{anvil_pts1_ip_star}                   = "";
	$an->data->{form}{anvil_pts2_name_star}                 = "";
	$an->data->{form}{anvil_pts2_ip_star}                   = "";
	$an->data->{form}{anvil_striker1_name_star}             = "";
	$an->data->{form}{anvil_striker1_bcn_ip_star}           = "";
	$an->data->{form}{anvil_striker1_ifn_ip_star}           = "";
	$an->data->{form}{anvil_striker2_name_star}             = "";
	$an->data->{form}{anvil_striker2_bcn_ip_star}           = "";
	$an->data->{form}{anvil_striker2_ifn_ip_star}           = "";
	$an->data->{form}{anvil_media_library_star}             = "";
	$an->data->{form}{anvil_storage_pool1_star}             = "";
	$an->data->{form}{anvil_repositories_star}              = "";
	$an->data->{form}{anvil_node1_name_star}                = "";
	$an->data->{form}{anvil_node1_bcn_ip_star}              = "";
	$an->data->{form}{anvil_node1_ipmi_ip_star}             = "";
	$an->data->{form}{anvil_node1_sn_ip_star}               = "";
	$an->data->{form}{anvil_node1_ifn_ip_star}              = "";
	$an->data->{form}{anvil_node1_pdu1_outlet_star}         = "";
	$an->data->{form}{anvil_node1_pdu2_outlet_star}         = "";
	$an->data->{form}{anvil_node1_pdu3_outlet_star}         = "";
	$an->data->{form}{anvil_node1_pdu4_outlet_star}         = "";
	$an->data->{form}{anvil_node2_name_star}                = "";
	$an->data->{form}{anvil_node2_bcn_ip_star}              = "";
	$an->data->{form}{anvil_node2_ipmi_ip_star}             = "";
	$an->data->{form}{anvil_node2_sn_ip_star}               = "";
	$an->data->{form}{anvil_node2_ifn_ip_star}              = "";
	$an->data->{form}{anvil_node2_pdu1_outlet_star}         = "";
	$an->data->{form}{anvil_node2_pdu2_outlet_star}         = "";
	$an->data->{form}{anvil_node2_pdu3_outlet_star}         = "";
	$an->data->{form}{anvil_node2_pdu4_outlet_star}         = "";
	$an->data->{form}{anvil_open_vnc_ports_star}            = "";
	$an->data->{form}{striker_user_star}                    = "";
	$an->data->{form}{striker_database_star}                = "";
	$an->data->{form}{anvil_striker1_user_star}             = "";
	$an->data->{form}{anvil_striker1_password_star}         = "";
	$an->data->{form}{anvil_striker1_database_star}         = "";
	$an->data->{form}{anvil_striker2_user_star}             = "";
	$an->data->{form}{anvil_striker2_password_star}         = "";
	$an->data->{form}{anvil_striker2_database_star}         = "";
	$an->data->{form}{anvil_mtu_size_star}                  = "";
	$an->data->{form}{'anvil_drbd_disk_disk-barrier_star'}  = "";
	$an->data->{form}{'anvil_drbd_disk_disk-flushes_star'}  = "";
	$an->data->{form}{'anvil_drbd_disk_md-flushes_star'}    = "";
	$an->data->{form}{'anvil_drbd_options_cpu-mask_star'}   = "";
	$an->data->{form}{'anvil_drbd_net_max-buffers_star'}    = "";
	$an->data->{form}{'anvil_drbd_net_sndbuf-size_star'}    = "";
	$an->data->{form}{'anvil_drbd_net_rcvbuf-size_star'}    = "";
	$an->data->{form}{'anvil_drbd_disk_c-plan-ahead_star'}  = "";
	$an->data->{form}{'anvil_drbd_disk_c-max-rate_star'}    = "";
	$an->data->{form}{'anvil_drbd_disk_c-min-rate_star'}    = "";
	$an->data->{form}{'anvil_drbd_disk_c-fill-target_star'} = "";
	
	# Delete it, if requested
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::delete", value1 => $an->data->{cgi}{'delete'},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{'delete'})
	{
		my $return     = $an->ScanCore->parse_install_manifest({uuid => $an->data->{cgi}{manifest_uuid}});
		my $anvil_name = $an->data->{cgi}{anvil_name};
		if ($an->data->{cgi}{confirm})
		{
			### TODO: Switch to configure->delete_manifest
			# Make sure that the file exists and that it is in the manifests directory.
			my $queries = [];
			push @{$queries}, "
UPDATE 
    manifests 
SET 
    manifest_note = 'DELETED' 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    manifests 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
			# Log the queries
			foreach my $query (@{$queries})
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1  => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Pass the array in.
			$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
			my $message = $an->String->get({key => "message_0462", variables => { anvil => $anvil_name }});
			print $an->Web->template({file => "config.html", template => "delete-manifest-success", replace => { message => $message }});
		}
		else
		{
			$show_form = 0;
			my $message = $an->String->get({key => "message_0463", variables => { anvil => $anvil_name }});
			print $an->Web->template({file => "config.html", template => "manifest-confirm-delete", replace => { 
				message	=>	$message,
				confirm	=>	"?task=manifests&delete=true&manifest_uuid=".$an->data->{cgi}{manifest_uuid}."&confirm=true",
			}});
		}
	}
	
	# If the 'raw' was passed, present a form with the XML definition shown raw.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::raw", value1 => $an->data->{cgi}{raw},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{raw})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::save", value1 => $an->data->{cgi}{save},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{save})
		{
			my $manifest_uuid = $an->ScanCore->save_install_manifest();
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "manifest_uuid", value1 => $manifest_uuid,
			}, file => $THIS_FILE, line => __LINE__});
			
			#my ($target_url, $xml_file) = generate_install_manifest($an);
			my $message = $an->String->get({key => "explain_0124", variables => { uuid => $manifest_uuid }});
			print $an->Web->template({file => "config.html", template => "manifest-created", replace => { message => $message }});
			$show_form = 1;
		}
		else
		{
			   $show_form = 0;
			my $return    = $an->ScanCore->get_manifests();
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "return", value1 => $return,
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $hash_ref (@{$return})
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "hash_ref->manifest_uuid", value1 => $hash_ref->{manifest_uuid}, 
					name2 => "cgi::manifest_uuid",      value2 => $an->data->{cgi}{manifest_uuid}, 
				}, file => $THIS_FILE, line => __LINE__});
				if ($hash_ref->{manifest_uuid} eq $an->data->{cgi}{manifest_uuid})
				{
					$an->data->{cgi}{manifest_data} = $hash_ref->{manifest_data};
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "cgi::manifest_data", value1 => $an->data->{cgi}{manifest_uuid}, 
					}, file => $THIS_FILE, line => __LINE__});
					last;
				}
			}
			print $an->Web->template({file => "config.html", template => "manifest-raw-edit", replace => { 
				manifest_uuid	=>	$an->data->{cgi}{manifest_uuid},
				manifest_data	=>	$an->data->{cgi}{manifest_data},
			}});
		}
	}
	
	# Generate a new one, if requested.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "cgi::generate", value1 => $an->data->{cgi}{generate},
		name2 => "cgi::run",      value2 => $an->data->{cgi}{run},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{generate})
	{
		# Sanity check the user's answers and, if OK, returns 0. Any problem detected returns 1.
		my $errors = $an->InstallManifest->sanity_check_manifest_answers();
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "errors", value1 => $errors,
		}, file => $THIS_FILE, line => __LINE__});
		if (not $errors)
		{
			# No errors, save the manifest and create the download link.
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::confirm", value1 => $an->data->{cgi}{confirm},
			}, file => $THIS_FILE, line => __LINE__});
			if (not $an->data->{cgi}{confirm})
			{
				$show_form = 0;
				$an->InstallManifest->show_summary_manifest();
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "show_form", value1 => $show_form,
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# The form will redisplay after this.
				my $manifest_uuid = $an->ScanCore->save_install_manifest();
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "manifest_uuid", value1 => $manifest_uuid,
				}, file => $THIS_FILE, line => __LINE__});
				
				#my ($target_url, $xml_file) = generate_install_manifest($an);
				my $message = $an->String->get({key => "explain_0124", variables => { uuid => $manifest_uuid }});
				print $an->Web->template({file => "config.html", template => "manifest-created", replace => { message => $message }});
			}
		}
		else
		{
			# There was a problem with the form. We'll not do anything more, errors will be 
			# printed and shown to the user and the form will reload.
		}
	}
	elsif ($an->data->{cgi}{run})
	{
		# Read in the install manifest.
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "cgi::manifest_uuid", value1 => $an->data->{cgi}{manifest_uuid},
			name2 => "cgi::anvil_name",    value2 => $an->data->{cgi}{anvil_name},
		}, file => $THIS_FILE, line => __LINE__});
		my $return     = $an->ScanCore->parse_install_manifest({uuid => $an->data->{cgi}{manifest_uuid}});
		my $anvil_name = $an->data->{cgi}{anvil_name};
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::confirm", value1 => $an->data->{cgi}{confirm},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{confirm})
		{
			# Do it.
			   $show_form     = 0;
			my ($return_code) = $an->InstallManifest->run_new_install_manifest();
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "show_form",   value1 => $show_form,
				name2 => "return_code", value2 => $return_code,
			}, file => $THIS_FILE, line => __LINE__});
			# 0 == success
			# 1 == failed
			# 2 == failed, but don't show the error footer.
			if ($return_code eq "1")
			{
				# Something went wrong.
				my $button = $an->Web->template({file => "config.html", template => "form-button", replace => { 
						class	=>	"bold_button", 
						name	=>	"confirm",
						id	=>	"confirm",
						value	=>	"#!string!button_0063!#",
					}});
				my $message = $an->String->get({key => "message_0432", variables => { try_again_button => $button }});
				$an->Log->entry({log_level => 3, message_key => "an_variables_0012", message_variables => {
					name1  => "cgi::anvil_node1_bcn_link1_mac", value1  => $an->data->{cgi}{anvil_node1_bcn_link1_mac},
					name2  => "cgi::anvil_node1_bcn_link2_mac", value2  => $an->data->{cgi}{anvil_node1_bcn_link2_mac},
					name3  => "cgi::anvil_node1_sn_link1_mac",  value3  => $an->data->{cgi}{anvil_node1_sn_link1_mac},
					name4  => "cgi::anvil_node1_sn_link2_mac",  value4  => $an->data->{cgi}{anvil_node1_sn_link2_mac},
					name5  => "cgi::anvil_node1_ifn_link1_mac", value5  => $an->data->{cgi}{anvil_node1_ifn_link1_mac},
					name6  => "cgi::anvil_node1_ifn_link2_mac", value6  => $an->data->{cgi}{anvil_node1_ifn_link2_mac},
					name7  => "cgi::anvil_node2_bcn_link1_mac", value7  => $an->data->{cgi}{anvil_node2_bcn_link1_mac},
					name8  => "cgi::anvil_node2_bcn_link2_mac", value8  => $an->data->{cgi}{anvil_node2_bcn_link2_mac},
					name9  => "cgi::anvil_node2_sn_link1_mac",  value9  => $an->data->{cgi}{anvil_node2_sn_link1_mac},
					name10 => "cgi::anvil_node2_sn_link2_mac",  value10 => $an->data->{cgi}{anvil_node2_sn_link2_mac},
					name11 => "cgi::anvil_node2_ifn_link1_mac", value11 => $an->data->{cgi}{anvil_node2_ifn_link1_mac},
					name12 => "cgi::anvil_node2_ifn_link2_mac", value12 => $an->data->{cgi}{anvil_node2_ifn_link2_mac},
				}, file => $THIS_FILE, line => __LINE__});
				my $restart_html = $an->Web->template({file => "install-manifest.html", template => "new-anvil-install-failed-footer", replace => { 
						form_file			=>	"/cgi-bin/configure",
						button_class			=>	"bold_button", 
						button_name			=>	"confirm",
						button_id			=>	"confirm",
						button_value			=>	"#!string!button_0063!#",
						message				=>	$message, 
						anvil_node1_current_ip		=>	$an->data->{cgi}{anvil_node1_current_ip},
						anvil_node1_current_password	=>	$an->data->{cgi}{anvil_node1_current_password},
						anvil_node2_current_ip		=>	$an->data->{cgi}{anvil_node2_current_ip},
						anvil_node2_current_password	=>	$an->data->{cgi}{anvil_node2_current_password},
						anvil_open_vnc_ports		=>	$an->data->{cgi}{anvil_open_vnc_ports},
						run				=>	$an->data->{cgi}{run},
						try_again_button		=>	$button,
						anvil_node1_bcn_link1_mac	=>	$an->data->{cgi}{anvil_node1_bcn_link1_mac},
						anvil_node1_bcn_link2_mac	=>	$an->data->{cgi}{anvil_node1_bcn_link2_mac},
						anvil_node1_ifn_link1_mac	=>	$an->data->{cgi}{anvil_node1_ifn_link1_mac},
						anvil_node1_ifn_link2_mac	=>	$an->data->{cgi}{anvil_node1_ifn_link2_mac},
						anvil_node1_sn_link1_mac	=>	$an->data->{cgi}{anvil_node1_sn_link1_mac},
						anvil_node1_sn_link2_mac	=>	$an->data->{cgi}{anvil_node1_sn_link2_mac},
						anvil_node2_bcn_link1_mac	=>	$an->data->{cgi}{anvil_node2_bcn_link1_mac},
						anvil_node2_bcn_link2_mac	=>	$an->data->{cgi}{anvil_node2_bcn_link2_mac},
						anvil_node2_ifn_link1_mac	=>	$an->data->{cgi}{anvil_node2_ifn_link1_mac},
						anvil_node2_ifn_link2_mac	=>	$an->data->{cgi}{anvil_node2_ifn_link2_mac},
						anvil_node2_sn_link1_mac	=>	$an->data->{cgi}{anvil_node2_sn_link1_mac},
						anvil_node2_sn_link2_mac	=>	$an->data->{cgi}{anvil_node2_sn_link2_mac},
						rhn_user			=>	$an->data->{cgi}{rhn_user},
						rhn_password			=>	$an->data->{cgi}{rhn_password},
						manifest_uuid			=>	$an->data->{cgi}{manifest_uuid},
					}});
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "restart_html", value1 => $restart_html,
				}, file => $THIS_FILE, line => __LINE__});
				print $restart_html;
			}
		}
		else
		{
			# Confirm
			$show_form = 0;
			$an->InstallManifest->confirm_install_manifest_run();
		}
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "show_form", value1 => $show_form,
	}, file => $THIS_FILE, line => __LINE__});
	if ($show_form)
	{
		# Show the existing install manifest files.
		$an->InstallManifest->show_existing_install_manifests();
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::manifest_uuid", value1 => $an->data->{cgi}{manifest_uuid},
		}, file => $THIS_FILE, line => __LINE__});
		
		if ((not $an->data->{cgi}{manifest_uuid}) && (not $an->data->{cgi}{generate}))
		{
			# Blank out all anvil CGI variables that might have been set when we parsed the 
			# existing manifests.
			foreach my $key (sort {$a cmp $b} keys %{$an->data->{cgi}})
			{
				next if $key !~ /^anvil_/;
				$an->data->{cgi}{$key} = "";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::$key", value1 => $an->data->{cgi}{$key},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Set some default values if 'save' isn't set.
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "cgi::load",     value1 => $an->data->{cgi}{load},
			name2 => "cgi::generate", value2 => $an->data->{cgi}{generate},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{load})
		{
			$an->ScanCore->parse_install_manifest({uuid => $an->data->{cgi}{manifest_uuid}});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
				name1  => "cgi::anvil_node1_bcn_link1_mac", value1  => $an->data->{cgi}{anvil_node1_bcn_link1_mac},
				name2  => "cgi::anvil_node1_bcn_link2_mac", value2  => $an->data->{cgi}{anvil_node1_bcn_link2_mac},
				name3  => "cgi::anvil_node1_sn_link1_mac",  value3  => $an->data->{cgi}{anvil_node1_sn_link1_mac},
				name4  => "cgi::anvil_node1_sn_link2_mac",  value4  => $an->data->{cgi}{anvil_node1_sn_link2_mac},
				name5  => "cgi::anvil_node1_ifn_link1_mac", value5  => $an->data->{cgi}{anvil_node1_ifn_link1_mac},
				name6  => "cgi::anvil_node1_ifn_link2_mac", value6  => $an->data->{cgi}{anvil_node1_ifn_link2_mac},
				name7  => "cgi::anvil_node2_bcn_link1_mac", value7  => $an->data->{cgi}{anvil_node2_bcn_link1_mac},
				name8  => "cgi::anvil_node2_bcn_link2_mac", value8  => $an->data->{cgi}{anvil_node2_bcn_link2_mac},
				name9  => "cgi::anvil_node2_sn_link1_mac",  value9  => $an->data->{cgi}{anvil_node2_sn_link1_mac},
				name10 => "cgi::anvil_node2_sn_link2_mac",  value10 => $an->data->{cgi}{anvil_node2_sn_link2_mac},
				name11 => "cgi::anvil_node2_ifn_link1_mac", value11 => $an->data->{cgi}{anvil_node2_ifn_link1_mac},
				name12 => "cgi::anvil_node2_ifn_link2_mac", value12 => $an->data->{cgi}{anvil_node2_ifn_link2_mac},
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif (not $an->data->{cgi}{generate})
		{
			# This function uses sys::install_manifest::default::x if set.
			my ($default_prefix, $default_domain) = $an->Striker->_get_striker_prefix_and_domain();
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "default_prefix", value1 => $default_prefix,
				name2 => "default_domain", value2 => $default_domain,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Primary Config values
			if (not $an->data->{cgi}{anvil_prefix})             { $an->data->{cgi}{anvil_prefix}             = $default_prefix; }
			if (not $an->data->{cgi}{anvil_sequence})           { $an->data->{cgi}{anvil_sequence}           = $an->data->{sys}{install_manifest}{'default'}{sequence}; }
			if (not $an->data->{cgi}{anvil_domain})             { $an->data->{cgi}{anvil_domain}             = $default_domain; }
			if (not $an->data->{cgi}{anvil_password})           { $an->data->{cgi}{anvil_password}           = $an->data->{sys}{install_manifest}{'default'}{password}; }
			if (not $an->data->{cgi}{anvil_bcn_ethtool_opts})   { $an->data->{cgi}{anvil_bcn_ethtool_opts}   = $an->data->{sys}{install_manifest}{'default'}{bcn_ethtool_opts}; }
			if (not $an->data->{cgi}{anvil_bcn_network})        { $an->data->{cgi}{anvil_bcn_network}        = $an->data->{sys}{install_manifest}{'default'}{bcn_network}; }
			if (not $an->data->{cgi}{anvil_bcn_subnet})         { $an->data->{cgi}{anvil_bcn_subnet}         = $an->data->{sys}{install_manifest}{'default'}{bcn_subnet}; }
			if (not $an->data->{cgi}{anvil_sn_ethtool_opts})    { $an->data->{cgi}{anvil_sn_ethtool_opts}    = $an->data->{sys}{install_manifest}{'default'}{sn_ethtool_opts}; }
			if (not $an->data->{cgi}{anvil_sn_network})         { $an->data->{cgi}{anvil_sn_network}         = $an->data->{sys}{install_manifest}{'default'}{sn_network}; }
			if (not $an->data->{cgi}{anvil_sn_subnet})          { $an->data->{cgi}{anvil_sn_subnet}          = $an->data->{sys}{install_manifest}{'default'}{sn_subnet}; }
			if (not $an->data->{cgi}{anvil_ifn_ethtool_opts})   { $an->data->{cgi}{anvil_ifn_ethtool_opts}   = $an->data->{sys}{install_manifest}{'default'}{ifn_ethtool_opts}; }
			if (not $an->data->{cgi}{anvil_ifn_network})        { $an->data->{cgi}{anvil_ifn_network}        = $an->data->{sys}{install_manifest}{'default'}{ifn_network}; }
			if (not $an->data->{cgi}{anvil_ifn_subnet})         { $an->data->{cgi}{anvil_ifn_subnet}         = $an->data->{sys}{install_manifest}{'default'}{ifn_subnet}; }
			if (not $an->data->{cgi}{anvil_media_library_size}) { $an->data->{cgi}{anvil_media_library_size} = $an->data->{sys}{install_manifest}{'default'}{library_size}; }
			if (not $an->data->{cgi}{anvil_media_library_unit}) { $an->data->{cgi}{anvil_media_library_unit} = $an->data->{sys}{install_manifest}{'default'}{library_unit}; }
			if (not $an->data->{cgi}{anvil_storage_pool1_size}) { $an->data->{cgi}{anvil_storage_pool1_size} = $an->data->{sys}{install_manifest}{'default'}{pool1_size}; }
			if (not $an->data->{cgi}{anvil_storage_pool1_unit}) { $an->data->{cgi}{anvil_storage_pool1_unit} = $an->data->{sys}{install_manifest}{'default'}{pool1_unit}; }
			if (not $an->data->{cgi}{anvil_repositories})       { $an->data->{cgi}{anvil_repositories}       = $an->data->{sys}{install_manifest}{'default'}{repositories}; }
			
			# DRBD variables
			if (not $an->data->{cgi}{'anvil_drbd_disk_disk-barrier'})  { $an->data->{cgi}{'anvil_drbd_disk_disk-barrier'}  = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_disk-barrier'};  }
			if (not $an->data->{cgi}{'anvil_drbd_disk_disk-flushes'})  { $an->data->{cgi}{'anvil_drbd_disk_disk-flushes'}  = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_disk-flushes'};  }
			if (not $an->data->{cgi}{'anvil_drbd_disk_md-flushes'})    { $an->data->{cgi}{'anvil_drbd_disk_md-flushes'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_md-flushes'};    }
			if (not $an->data->{cgi}{'anvil_drbd_disk_c-plan-ahead'})  { $an->data->{cgi}{'anvil_drbd_disk_c-plan-ahead'}  = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_c-plan-ahead'};  }
			if (not $an->data->{cgi}{'anvil_drbd_disk_c-max-rate'})    { $an->data->{cgi}{'anvil_drbd_disk_c-max-rate'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_c-max-rate'};    }
			if (not $an->data->{cgi}{'anvil_drbd_disk_c-min-rate'})    { $an->data->{cgi}{'anvil_drbd_disk_c-min-rate'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_c-min-rate'};    }
			if (not $an->data->{cgi}{'anvil_drbd_disk_c-fill-target'}) { $an->data->{cgi}{'anvil_drbd_disk_c-fill-target'} = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_disk_c-fill-target'}; }
			if (not $an->data->{cgi}{'anvil_drbd_options_cpu-mask'})   { $an->data->{cgi}{'anvil_drbd_options_cpu-mask'}   = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_options_cpu-mask'};   }
			if (not $an->data->{cgi}{'anvil_drbd_net_max-buffers'})    { $an->data->{cgi}{'anvil_drbd_net_max-buffers'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_net_max-buffers'};    }
			if (not $an->data->{cgi}{'anvil_drbd_net_sndbuf-size'})    { $an->data->{cgi}{'anvil_drbd_net_sndbuf-size'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_net_sndbuf-size'};    }
			if (not $an->data->{cgi}{'anvil_drbd_net_rcvbuf-size'})    { $an->data->{cgi}{'anvil_drbd_net_rcvbuf-size'}    = $an->data->{sys}{install_manifest}{'default'}{'anvil_drbd_net_rcvbuf-size'};    }
			
			# Hidden fields for now.
			if (not $an->data->{cgi}{anvil_cluster_name})       { $an->data->{cgi}{anvil_cluster_name}       = $an->data->{sys}{install_manifest}{'default'}{cluster_name}; }
			if (not $an->data->{cgi}{anvil_open_vnc_ports})     { $an->data->{cgi}{anvil_open_vnc_ports}     = $an->data->{sys}{install_manifest}{'default'}{open_vnc_ports}; }
			if (not $an->data->{cgi}{anvil_mtu_size})           { $an->data->{cgi}{anvil_mtu_size}           = $an->data->{sys}{install_manifest}{'default'}{mtu_size}; }
			
			# It's possible for the user to set default values in
			# the install manifest.
			if (not $an->data->{cgi}{anvil_name})               { $an->data->{cgi}{anvil_name}               = $an->data->{sys}{install_manifest}{'default'}{name}; }
			if (not $an->data->{cgi}{anvil_ifn_gateway})        { $an->data->{cgi}{anvil_ifn_gateway}        = $an->data->{sys}{install_manifest}{'default'}{ifn_gateway}; }
			if (not $an->data->{cgi}{anvil_dns1})               { $an->data->{cgi}{anvil_dns1}               = $an->data->{sys}{install_manifest}{'default'}{dns1}; }
			if (not $an->data->{cgi}{anvil_dns2})               { $an->data->{cgi}{anvil_dns2}               = $an->data->{sys}{install_manifest}{'default'}{dns2}; }
			if (not $an->data->{cgi}{anvil_ntp1})               { $an->data->{cgi}{anvil_ntp1}               = $an->data->{sys}{install_manifest}{'default'}{ntp1}; }
			if (not $an->data->{cgi}{anvil_ntp2})               { $an->data->{cgi}{anvil_ntp2}               = $an->data->{sys}{install_manifest}{'default'}{ntp2}; }
			
			# Foundation Pack
			if (not $an->data->{cgi}{anvil_switch1_name})       { $an->data->{cgi}{anvil_switch1_name}       = $an->data->{sys}{install_manifest}{'default'}{switch1_name}; }
			if (not $an->data->{cgi}{anvil_switch1_ip})         { $an->data->{cgi}{anvil_switch1_ip}         = $an->data->{sys}{install_manifest}{'default'}{switch1_ip}; }
			if (not $an->data->{cgi}{anvil_switch2_name})       { $an->data->{cgi}{anvil_switch2_name}       = $an->data->{sys}{install_manifest}{'default'}{switch2_name}; }
			if (not $an->data->{cgi}{anvil_switch2_ip})         { $an->data->{cgi}{anvil_switch2_ip}         = $an->data->{sys}{install_manifest}{'default'}{switch2_ip}; }
			if (not $an->data->{cgi}{anvil_ups1_name})          { $an->data->{cgi}{anvil_ups1_name}          = $an->data->{sys}{install_manifest}{'default'}{ups1_name}; }
			if (not $an->data->{cgi}{anvil_ups1_ip})            { $an->data->{cgi}{anvil_ups1_ip}            = $an->data->{sys}{install_manifest}{'default'}{ups1_ip}; }
			if (not $an->data->{cgi}{anvil_ups2_name})          { $an->data->{cgi}{anvil_ups2_name}          = $an->data->{sys}{install_manifest}{'default'}{ups2_name}; }
			if (not $an->data->{cgi}{anvil_ups2_ip})            { $an->data->{cgi}{anvil_ups2_ip}            = $an->data->{sys}{install_manifest}{'default'}{ups2_ip}; }
			if (not $an->data->{cgi}{anvil_pts1_name})          { $an->data->{cgi}{anvil_pts1_name}          = $an->data->{sys}{install_manifest}{'default'}{pts1_name}; }
			if (not $an->data->{cgi}{anvil_pts1_ip})            { $an->data->{cgi}{anvil_pts1_ip}            = $an->data->{sys}{install_manifest}{'default'}{pts1_ip}; }
			if (not $an->data->{cgi}{anvil_pts2_name})          { $an->data->{cgi}{anvil_pts2_name}          = $an->data->{sys}{install_manifest}{'default'}{pts2_name}; }
			if (not $an->data->{cgi}{anvil_pts2_ip})            { $an->data->{cgi}{anvil_pts2_ip}            = $an->data->{sys}{install_manifest}{'default'}{pts2_ip}; }
			if (not $an->data->{cgi}{anvil_pdu1_name})          { $an->data->{cgi}{anvil_pdu1_name}          = $an->data->{sys}{install_manifest}{'default'}{pdu1_name}; }
			if (not $an->data->{cgi}{anvil_pdu1_ip})            { $an->data->{cgi}{anvil_pdu1_ip}            = $an->data->{sys}{install_manifest}{'default'}{pdu1_ip}; }
			if (not $an->data->{cgi}{anvil_pdu2_name})          { $an->data->{cgi}{anvil_pdu2_name}          = $an->data->{sys}{install_manifest}{'default'}{pdu2_name}; }
			if (not $an->data->{cgi}{anvil_pdu2_ip})            { $an->data->{cgi}{anvil_pdu2_ip}            = $an->data->{sys}{install_manifest}{'default'}{pdu2_ip}; }
			if (not $an->data->{cgi}{anvil_pdu3_name})          { $an->data->{cgi}{anvil_pdu3_name}          = $an->data->{sys}{install_manifest}{'default'}{pdu3_name}; }
			if (not $an->data->{cgi}{anvil_pdu3_ip})            { $an->data->{cgi}{anvil_pdu3_ip}            = $an->data->{sys}{install_manifest}{'default'}{pdu3_ip}; }
			if (not $an->data->{cgi}{anvil_pdu4_name})          { $an->data->{cgi}{anvil_pdu4_name}          = $an->data->{sys}{install_manifest}{'default'}{pdu4_name}; }
			if (not $an->data->{cgi}{anvil_pdu4_ip})            { $an->data->{cgi}{anvil_pdu4_ip}            = $an->data->{sys}{install_manifest}{'default'}{pdu4_ip}; }
			if (not $an->data->{cgi}{anvil_striker1_name})      { $an->data->{cgi}{anvil_striker1_name}      = $an->data->{sys}{install_manifest}{'default'}{striker1_name}; }
			if (not $an->data->{cgi}{anvil_striker1_bcn_ip})    { $an->data->{cgi}{anvil_striker1_bcn_ip}    = $an->data->{sys}{install_manifest}{'default'}{striker1_bcn_ip}; }
			if (not $an->data->{cgi}{anvil_striker1_ifn_ip})    { $an->data->{cgi}{anvil_striker1_ifn_ip}    = $an->data->{sys}{install_manifest}{'default'}{striker1_ifn_ip}; }
			if (not $an->data->{cgi}{anvil_striker2_name})      { $an->data->{cgi}{anvil_striker2_name}      = $an->data->{sys}{install_manifest}{'default'}{striker2_name}; }
			if (not $an->data->{cgi}{anvil_striker2_bcn_ip})    { $an->data->{cgi}{anvil_striker2_bcn_ip}    = $an->data->{sys}{install_manifest}{'default'}{striker2_bcn_ip}; }
			if (not $an->data->{cgi}{anvil_striker2_ifn_ip})    { $an->data->{cgi}{anvil_striker2_ifn_ip}    = $an->data->{sys}{install_manifest}{'default'}{striker2_ifn_ip}; }
			
			# Node 1 variables
			if (not $an->data->{cgi}{anvil_node1_name})         { $an->data->{cgi}{anvil_node1_name}         = $an->data->{sys}{install_manifest}{'default'}{node1_name}; }
			if (not $an->data->{cgi}{anvil_node1_bcn_ip})       { $an->data->{cgi}{anvil_node1_bcn_ip}       = $an->data->{sys}{install_manifest}{'default'}{node1_bcn_ip}; }
			if (not $an->data->{cgi}{anvil_node1_ipmi_ip})      { $an->data->{cgi}{anvil_node1_ipmi_ip}      = $an->data->{sys}{install_manifest}{'default'}{node1_ipmi_ip}; }
			if (not $an->data->{cgi}{anvil_node1_sn_ip})        { $an->data->{cgi}{anvil_node1_sn_ip}        = $an->data->{sys}{install_manifest}{'default'}{node1_sn_ip}; }
			if (not $an->data->{cgi}{anvil_node1_ifn_ip})       { $an->data->{cgi}{anvil_node1_ifn_ip}       = $an->data->{sys}{install_manifest}{'default'}{node1_ifn_ip}; }
			if (not $an->data->{cgi}{anvil_node1_pdu1_outlet})  { $an->data->{cgi}{anvil_node1_pdu1_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node1_pdu1_outlet}; }
			if (not $an->data->{cgi}{anvil_node1_pdu2_outlet})  { $an->data->{cgi}{anvil_node1_pdu2_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node1_pdu2_outlet}; }
			if (not $an->data->{cgi}{anvil_node1_pdu3_outlet})  { $an->data->{cgi}{anvil_node1_pdu3_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node1_pdu3_outlet}; }
			if (not $an->data->{cgi}{anvil_node2_pdu4_outlet})  { $an->data->{cgi}{anvil_node2_pdu4_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node2_pdu4_outlet}; }
			
			# Node 2 variables
			if (not $an->data->{cgi}{anvil_node2_name})         { $an->data->{cgi}{anvil_node2_name}         = $an->data->{sys}{install_manifest}{'default'}{node2_name}; }
			if (not $an->data->{cgi}{anvil_node2_bcn_ip})       { $an->data->{cgi}{anvil_node2_bcn_ip}       = $an->data->{sys}{install_manifest}{'default'}{node2_bcn_ip}; }
			if (not $an->data->{cgi}{anvil_node2_ipmi_ip})      { $an->data->{cgi}{anvil_node2_ipmi_ip}      = $an->data->{sys}{install_manifest}{'default'}{node2_ipmi_ip}; }
			if (not $an->data->{cgi}{anvil_node2_sn_ip})        { $an->data->{cgi}{anvil_node2_sn_ip}        = $an->data->{sys}{install_manifest}{'default'}{node2_sn_ip}; }
			if (not $an->data->{cgi}{anvil_node2_ifn_ip})       { $an->data->{cgi}{anvil_node2_ifn_ip}       = $an->data->{sys}{install_manifest}{'default'}{node2_ifn_ip}; }
			if (not $an->data->{cgi}{anvil_node2_pdu1_outlet})  { $an->data->{cgi}{anvil_node2_pdu1_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node2_pdu1_outlet}; }
			if (not $an->data->{cgi}{anvil_node2_pdu2_outlet})  { $an->data->{cgi}{anvil_node2_pdu2_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node2_pdu2_outlet}; }
			if (not $an->data->{cgi}{anvil_node2_pdu3_outlet})  { $an->data->{cgi}{anvil_node2_pdu3_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node2_pdu3_outlet}; }
			if (not $an->data->{cgi}{anvil_node1_pdu4_outlet})  { $an->data->{cgi}{anvil_node1_pdu4_outlet}  = $an->data->{sys}{install_manifest}{'default'}{node1_pdu4_outlet}; }
		}
		
		# Print the header
		print $an->Web->template({file => "config.html", template => "install-manifest-form-header", replace => { form_file => "/cgi-bin/configure" }});
		
		# Record the manifest_uuid, if set.
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::manifest_uuid", value1 => $an->data->{cgi}{manifest_uuid},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{manifest_uuid})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"manifest_uuid",
				id		=>	"manifest_uuid",
				value		=>	$an->data->{cgi}{manifest_uuid},
			}});
		}
		
		# Anvil! prefix
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::prefix_field", value1 => $an->data->{sys}{install_manifest}{show}{prefix_field},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{prefix_field})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_prefix",
				id		=>	"anvil_prefix",
				value		=>	$an->data->{cgi}{anvil_prefix},
			}});
		}
		else
		{
			my $anvil_prefix_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Node_Host_Names" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0159!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0061!#" : "#!string!explain_0061!#",
				name		=>	"anvil_prefix",
				id		=>	"anvil_prefix",
				value		=>	$an->data->{cgi}{anvil_prefix},
				star		=>	$an->data->{form}{anvil_prefix_star},
				more_info	=>	$anvil_prefix_more_info,
			}});
		}
		
		# Anvil! sequence
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::sequence_field", value1 => $an->data->{sys}{install_manifest}{show}{sequence_field},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{sequence_field})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_sequence",
				id		=>	"anvil_sequence",
				value		=>	$an->data->{cgi}{anvil_sequence},
			}});
		}
		else
		{
			my $anvil_sequence_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Node_Host_Names" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0161!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0063!#" : "#!string!explain_0063!#",
				name		=>	"anvil_sequence",
				id		=>	"anvil_sequence",
				value		=>	$an->data->{cgi}{anvil_sequence},
				star		=>	$an->data->{form}{anvil_sequence_star},
				more_info	=>	$anvil_sequence_more_info,
			}});
		}
		
		# Anvil! domain name
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::domain_field", value1 => $an->data->{sys}{install_manifest}{show}{domain_field},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{domain_field})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_domain",
				id		=>	"anvil_domain",
				value		=>	$an->data->{cgi}{anvil_domain},
			}});
		}
		else
		{
			my $anvil_domain_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Node_Host_Names" }});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::anvil_domain", value1 => $an->data->{cgi}{anvil_domain},
			}, file => $THIS_FILE, line => __LINE__});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0160!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0062!#" : "#!string!explain_0062!#",
				name		=>	"anvil_domain",
				id		=>	"anvil_domain",
				value		=>	$an->data->{cgi}{anvil_domain},
				star		=>	$an->data->{form}{anvil_domain_star},
				more_info	=>	$anvil_domain_more_info,
			}});
		}
		
		# Anvil! password - Skip if set and hidden.
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "sys::install_manifest::default::password",    value1 => $an->data->{sys}{install_manifest}{'default'}{password},
			name2 => "sys::install_manifest::show::password_field", value2 => $an->data->{sys}{install_manifest}{show}{password_field},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{password}) && (not $an->data->{sys}{install_manifest}{show}{password_field}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_password",
				id		=>	"anvil_password",
				value		=>	$an->data->{cgi}{anvil_password},
			}});
		}
		else
		{
			my $anvil_password_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0194!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0110!#" : "#!string!explain_0110!#",
				name		=>	"anvil_password",
				id		=>	"anvil_password",
				value		=>	$an->data->{cgi}{anvil_password},
				star		=>	$an->data->{form}{anvil_password_star},
				more_info	=>	$anvil_password_more_info,
			}});
		}
		
		# Anvil! BCN Network definition
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "sys::install_manifest::default::bcn_network",     value1 => $an->data->{sys}{install_manifest}{'default'}{bcn_network},
			name2 => "sys::install_manifest::default::bcn_subnet",      value2 => $an->data->{sys}{install_manifest}{'default'}{bcn_subnet},
			name3 => "sys::install_manifest::show::bcn_network_fields", value3 => $an->data->{sys}{install_manifest}{show}{bcn_network_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{bcn_network}) && 
		    ($an->data->{sys}{install_manifest}{'default'}{bcn_subnet})  && 
		    (not $an->data->{sys}{install_manifest}{show}{bcn_network_fields}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_bcn_network",
				id		=>	"anvil_bcn_network",
				value		=>	$an->data->{cgi}{anvil_bcn_network},
			}});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_bcn_subnet",
				id		=>	"anvil_bcn_subnet",
				value		=>	$an->data->{cgi}{anvil_bcn_subnet},
			}});
		}
		else
		{
			my $anvil_bcn_network_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-subnet-entry", replace => { 
				row		=>	"#!string!row_0162!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0065!#" : "#!string!explain_0065!#",
				network_name	=>	"anvil_bcn_network",
				network_id	=>	"anvil_bcn_network",
				network_value	=>	$an->data->{cgi}{anvil_bcn_network},
				subnet_name	=>	"anvil_bcn_subnet",
				subnet_id	=>	"anvil_bcn_subnet",
				subnet_value	=>	$an->data->{cgi}{anvil_bcn_subnet},
				star		=>	$an->data->{form}{anvil_bcn_network_star},
				more_info	=>	$anvil_bcn_network_more_info,
			}});
		}
		# For now, ethtool_opts is always hidden.
		if (1)
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_bcn_ethtool_opts",
				id		=>	"anvil_bcn_ethtool_opts",
				value		=>	$an->data->{cgi}{anvil_bcn_ethtool_opts},
			}});
		}
		
		# Anvil! SN Network definition
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "sys::install_manifest::default::sn_network",     value1 => $an->data->{sys}{install_manifest}{'default'}{sn_network},
			name2 => "sys::install_manifest::default::sn_subnet",      value2 => $an->data->{sys}{install_manifest}{'default'}{sn_subnet},
			name3 => "sys::install_manifest::show::sn_network_fields", value3 => $an->data->{sys}{install_manifest}{show}{sn_network_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{sn_network}) && 
		    ($an->data->{sys}{install_manifest}{'default'}{sn_subnet}) && 
		    (not $an->data->{sys}{install_manifest}{show}{sn_network_fields}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_sn_network",
				id		=>	"anvil_sn_network",
				value		=>	$an->data->{cgi}{anvil_sn_network},
			}});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_sn_subnet",
				id		=>	"anvil_sn_subnet",
				value		=>	$an->data->{cgi}{anvil_sn_subnet},
			}});
		}
		else
		{
			my $anvil_sn_network_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-subnet-entry", replace => { 
				row		=>	"#!string!row_0163!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0066!#" : "#!string!explain_0066!#",
				network_name	=>	"anvil_sn_network",
				network_id	=>	"anvil_sn_network",
				network_value	=>	$an->data->{cgi}{anvil_sn_network},
				subnet_name	=>	"anvil_sn_subnet",
				subnet_id	=>	"anvil_sn_subnet",
				subnet_value	=>	$an->data->{cgi}{anvil_sn_subnet},
				star		=>	$an->data->{form}{anvil_sn_network_star},
				more_info	=>	$anvil_sn_network_more_info,
			}});
		}
		# For now, ethtool_opts is always hidden.
		if (1)
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_sn_ethtool_opts",
				id		=>	"anvil_sn_ethtool_opts",
				value		=>	$an->data->{cgi}{anvil_sn_ethtool_opts},
			}});
		}
		
		# Anvil! IFN Network definition
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "sys::install_manifest::default::ifn_network",     value1 => $an->data->{sys}{install_manifest}{'default'}{ifn_network},
			name2 => "sys::install_manifest::default::ifn_subnet",      value2 => $an->data->{sys}{install_manifest}{'default'}{ifn_subnet},
			name3 => "sys::install_manifest::show::ifn_network_fields", value3 => $an->data->{sys}{install_manifest}{show}{ifn_network_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{ifn_network}) && 
		    ($an->data->{sys}{install_manifest}{'default'}{ifn_subnet}) && 
		    (not $an->data->{sys}{install_manifest}{show}{ifn_network_fields}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ifn_network",
				id		=>	"anvil_ifn_network",
				value		=>	$an->data->{cgi}{anvil_ifn_network},
			}});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ifn_subnet",
				id		=>	"anvil_ifn_subnet",
				value		=>	$an->data->{cgi}{anvil_ifn_subnet},
			}});
		}
		else
		{
			my $anvil_ifn_network_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-subnet-entry", replace => { 
				row		=>	"#!string!row_0164!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0067!#" : "#!string!explain_0067!#",
				network_name	=>	"anvil_ifn_network",
				network_id	=>	"anvil_ifn_network",
				network_value	=>	$an->data->{cgi}{anvil_ifn_network},
				subnet_name	=>	"anvil_ifn_subnet",
				subnet_id	=>	"anvil_ifn_subnet",
				subnet_value	=>	$an->data->{cgi}{anvil_ifn_subnet},
				star		=>	$an->data->{form}{anvil_ifn_network_star},
				more_info	=>	$anvil_ifn_network_more_info,
			}});
		}
		# For now, ethtool_opts is always hidden.
		if (1)
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ifn_ethtool_opts",
				id		=>	"anvil_ifn_ethtool_opts",
				value		=>	$an->data->{cgi}{anvil_ifn_ethtool_opts},
			}});
		}
		
		# Anvil! Media Library size
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "sys::install_manifest::default::library_size", value1 => $an->data->{sys}{install_manifest}{'default'}{library_size},
			name2 => "sys::install_manifest::default::library_unit", value2 => $an->data->{sys}{install_manifest}{'default'}{library_unit},
			name3 => "sys::install_manifest::show::library_fields",  value3 => $an->data->{sys}{install_manifest}{show}{library_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{library_size}) && 
		    ($an->data->{sys}{install_manifest}{'default'}{library_unit}) && 
		    (not $an->data->{sys}{install_manifest}{show}{library_fields}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_media_library_size",
				id		=>	"anvil_media_library_size",
				value		=>	$an->data->{cgi}{anvil_media_library_size},
			}});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_media_library_unit",
				id		=>	"anvil_media_library_unit",
				value		=>	$an->data->{cgi}{anvil_media_library_unit},
			}});
		}
		else
		{
			my $select = $an->Web->build_select({
					name     => "anvil_media_library_unit", 
					options  => ["GiB", "TiB"], 
					blank    => 0,
					selected => $an->data->{cgi}{anvil_media_library_unit},
					width    => 60,
				});
			my $anvil_media_library_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-and-select-entry", replace => { 
				row		=>	"#!string!row_0191!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0114!#" : "#!string!explain_0114!#",
				name		=>	"anvil_media_library_size",
				id		=>	"anvil_media_library_size",
				value		=>	$an->data->{cgi}{anvil_media_library_size},
				'select'	=>	$select,
				star		=>	$an->data->{form}{anvil_media_library_star},
				more_info	=>	$anvil_media_library_more_info,
			}});
		}
		
		### NOTE: Disabled, now all goes to Pool 1
		# Anvil! Storage Pools
		if (0)
		{
			if (($an->data->{sys}{install_manifest}{'default'}{pool1_size}) && 
			    ($an->data->{sys}{install_manifest}{'default'}{pool1_unit}) && 
			    (not $an->data->{sys}{install_manifest}{show}{pool1_fields}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	"anvil_storage_pool1_size",
					id		=>	"anvil_storage_pool1_size",
					value		=>	$an->data->{cgi}{anvil_storage_pool1_size},
				}});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	"anvil_storage_pool1_unit",
					id		=>	"anvil_storage_pool1_unit",
					value		=>	$an->data->{cgi}{anvil_storage_pool1_unit},
				}});
			}
			else
			{
				my $select = $an->Web->build_select({
						name     => "anvil_storage_pool1_unit", 
						options  => ["%", "GiB", "TiB"], 
						blank    => 0,
						selected => $an->data->{cgi}{anvil_storage_pool1_unit},
						width    => 60,
					});
				my $anvil_storage_pool1_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Node_Host_Names" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-and-select-entry", replace => { 
					row		=>	"#!string!row_0199!#",
					explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0115!#" : "#!string!explain_0115!#",
					name		=>	"anvil_storage_pool1_size",
					id		=>	"anvil_storage_pool1_size",
					value		=>	$an->data->{cgi}{anvil_storage_pool1_size},
					'select'	=>	$select, 
					star		=>	$an->data->{form}{anvil_storage_pool1_star},
					more_info	=>	$anvil_storage_pool1_more_info,
				}});
			}
		}
		else
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_storage_pool1_size",
				id		=>	"anvil_storage_pool1_size",
				value		=>	$an->data->{cgi}{anvil_storage_pool1_size},
			}});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_storage_pool1_unit",
				id		=>	"anvil_storage_pool1_unit",
				value		=>	$an->data->{cgi}{anvil_storage_pool1_unit},
			}});
		}
		
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_repositories",
			id		=>	"anvil_repositories",
			value		=>	$an->data->{cgi}{anvil_repositories},
		}});
		
		# Button to pre-populate the rest of the form.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-spacer"});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-set-values"});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-spacer"});
		
		# The header for the "Secondary" section (all things below
		# *should* populate properly for most users)
		print $an->Web->template({file => "config.html", template => "install-manifest-form-secondary-header"});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-spacer"});
		
		# Now show the header for the Common section.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-common-header"});
		
		### NOTE: For now, DRBD options are hidden.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_disk-barrier",
			id		=>	"anvil_drbd_disk_disk-barrier",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_disk-barrier'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_disk-flushes",
			id		=>	"anvil_drbd_disk_disk-flushes",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_disk-flushes'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_md-flushes",
			id		=>	"anvil_drbd_disk_md-flushes",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_md-flushes'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_c-plan-ahead",
			id		=>	"anvil_drbd_disk_c-plan-ahead",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_c-plan-ahead'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_c-max-rate",
			id		=>	"anvil_drbd_disk_c-max-rate",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_c-max-rate'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_c-min-rate",
			id		=>	"anvil_drbd_disk_c-min-rate",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_c-min-rate'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_disk_c-fill-target",
			id		=>	"anvil_drbd_disk_c-fill-target",
			value		=>	$an->data->{cgi}{'anvil_drbd_disk_c-fill-target'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_options_cpu-mask",
			id		=>	"anvil_drbd_options_cpu-mask",
			value		=>	$an->data->{cgi}{'anvil_drbd_options_cpu-mask'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_net_max-buffers",
			id		=>	"anvil_drbd_net_max-buffers",
			value		=>	$an->data->{cgi}{'anvil_drbd_net_max-buffers'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_net_sndbuf-size",
			id		=>	"anvil_drbd_net_sndbuf-size",
			value		=>	$an->data->{cgi}{'anvil_drbd_net_sndbuf-size'},
		}});
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_drbd_net_rcvbuf-size",
			id		=>	"anvil_drbd_net_rcvbuf-size",
			value		=>	$an->data->{cgi}{'anvil_drbd_net_rcvbuf-size'},
		}});
		
		# Store defined MAC addresses
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_bcn_link1_mac", value1 => $an->data->{cgi}{anvil_node1_bcn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_bcn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_bcn_link1_mac",
				id		=>	"anvil_node1_bcn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node1_bcn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_bcn_link2_mac", value1 => $an->data->{cgi}{anvil_node1_bcn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_bcn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_bcn_link2_mac",
				id		=>	"anvil_node1_bcn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node1_bcn_link2_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_sn_link1_mac", value1 => $an->data->{cgi}{anvil_node1_sn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_sn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_sn_link1_mac",
				id		=>	"anvil_node1_sn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node1_sn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_sn_link2_mac", value1 => $an->data->{cgi}{anvil_node1_sn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_sn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_sn_link2_mac",
				id		=>	"anvil_node1_sn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node1_sn_link2_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_ifn_link1_mac", value1 => $an->data->{cgi}{anvil_node1_ifn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_ifn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_ifn_link1_mac",
				id		=>	"anvil_node1_ifn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node1_ifn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node1_ifn_link2_mac", value1 => $an->data->{cgi}{anvil_node1_ifn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node1_ifn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node1_ifn_link2_mac",
				id		=>	"anvil_node1_ifn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node1_ifn_link2_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_bcn_link1_mac", value1 => $an->data->{cgi}{anvil_node2_bcn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_bcn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_bcn_link1_mac",
				id		=>	"anvil_node2_bcn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node2_bcn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_bcn_link2_mac", value1 => $an->data->{cgi}{anvil_node2_bcn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_bcn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_bcn_link2_mac",
				id		=>	"anvil_node2_bcn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node2_bcn_link2_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_sn_link1_mac", value1 => $an->data->{cgi}{anvil_node2_sn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_sn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_sn_link1_mac",
				id		=>	"anvil_node2_sn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node2_sn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_sn_link2_mac", value1 => $an->data->{cgi}{anvil_node2_sn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_sn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_sn_link2_mac",
				id		=>	"anvil_node2_sn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node2_sn_link2_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_ifn_link1_mac", value1 => $an->data->{cgi}{anvil_node2_ifn_link1_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_ifn_link1_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_ifn_link1_mac",
				id		=>	"anvil_node2_ifn_link1_mac",
				value		=>	$an->data->{cgi}{anvil_node2_ifn_link1_mac},
			}});
		}
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_node2_ifn_link2_mac", value1 => $an->data->{cgi}{anvil_node2_ifn_link2_mac},
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{cgi}{anvil_node2_ifn_link2_mac})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_node2_ifn_link2_mac",
				id		=>	"anvil_node2_ifn_link2_mac",
				value		=>	$an->data->{cgi}{anvil_node2_ifn_link2_mac},
			}});
		}
		
		# Anvil! (cman cluster) Name
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "sys::install_manifest::default::name",    value1 => $an->data->{sys}{install_manifest}{'default'}{name},
			name2 => "sys::install_manifest::show::name_field", value2 => $an->data->{sys}{install_manifest}{show}{name_field},
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{sys}{install_manifest}{'default'}{name}) && 
		    (not $an->data->{sys}{install_manifest}{show}{name_field}))
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_name",
				id		=>	"anvil_name",
				value		=>	$an->data->{cgi}{anvil_name},
			}});
		}
		else
		{
			my $anvil_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#The_First_cluster.conf_Foundation_Configuration" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0005!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0095!#" : "#!string!explain_0095!#",
				name		=>	"anvil_name",
				id		=>	"anvil_name",
				value		=>	$an->data->{cgi}{anvil_name},
				star		=>	$an->data->{form}{anvil_name_star},
				more_info	=>	$anvil_name_more_info,
			}});
		}
		# The "anvil_name" is stored as a hidden field.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
			name		=>	"anvil_cluster_name",
			id		=>	"anvil_cluster_name",
			value		=>	$an->data->{cgi}{anvil_cluster_name},
		}});
		
		# Anvil! IFN Gateway
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::ifn_network_fields", value1 => $an->data->{sys}{install_manifest}{show}{ifn_network_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{ifn_network_fields})
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ifn_gateway",
				id		=>	"anvil_ifn_gateway",
				value		=>	$an->data->{cgi}{anvil_ifn_gateway},
			}});
		}
		else
		{
			my $anvil_ifn_gateway_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0188!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0092!#" : "#!string!explain_0092!#",
				name		=>	"anvil_ifn_gateway",
				id		=>	"anvil_ifn_gateway",
				value		=>	$an->data->{cgi}{anvil_ifn_gateway},
				star		=>	$an->data->{form}{anvil_ifn_gateway_star},
				more_info	=>	$anvil_ifn_gateway_more_info,
			}});
		}
		
		# DNS
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::dns_fields", value1 => $an->data->{sys}{install_manifest}{show}{dns_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{dns_fields})
		{
			# Anvil! Primary DNS
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_dns1",
				id		=>	"anvil_dns1",
				value		=>	$an->data->{cgi}{anvil_dns1},
			}});
			
			# Anvil! Secondary DNS
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_dns2",
				id		=>	"anvil_dns2",
				value		=>	$an->data->{cgi}{anvil_dns2},
			}});
		}
		else
		{
			# Anvil! Primary DNS
			my $anvil_dns1_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "http://en.wikipedia.org/wiki/Domain_Name_System" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0189!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0093!#" : "#!string!explain_0093!#",
				name		=>	"anvil_dns1",
				id		=>	"anvil_dns1",
				value		=>	$an->data->{cgi}{anvil_dns1},
				star		=>	$an->data->{form}{anvil_dns1_star},
				more_info	=>	$anvil_dns1_more_info,
			}});
			
			# Anvil! Secondary DNS
			my $anvil_dns2_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0190!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0094!#" : "#!string!explain_0094!#",
				name		=>	"anvil_dns2",
				id		=>	"anvil_dns2",
				value		=>	$an->data->{cgi}{anvil_dns2},
				star		=>	$an->data->{form}{anvil_dns2_star},
				more_info	=>	$anvil_dns2_more_info,
			}});
		}
		
		# NTP
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "sys::install_manifest::show::ntp_fields", value1 => $an->data->{sys}{install_manifest}{show}{ntp_fields},
		}, file => $THIS_FILE, line => __LINE__});
		if (not $an->data->{sys}{install_manifest}{show}{ntp_fields})
		{
			# Anvil! Primary NTP
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ntp1",
				id		=>	"anvil_ntp1",
				value		=>	$an->data->{cgi}{anvil_ntp1},
			}});
			
			# Anvil! Secondary NTP
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_ntp2",
				id		=>	"anvil_ntp2",
				value		=>	$an->data->{cgi}{anvil_ntp2},
			}});
		}
		else
		{
			# Anvil! Primary NTP
			my $anvil_ntp1_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://en.wikipedia.org/wiki/Network_Time_Protocol" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0192!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0097!#" : "#!string!explain_0097!#",
				name		=>	"anvil_ntp1",
				id		=>	"anvil_ntp1",
				value		=>	$an->data->{cgi}{anvil_ntp1},
				star		=>	$an->data->{form}{anvil_ntp1_star},
				more_info	=>	$anvil_ntp1_more_info,
			}});
			
			# Anvil! Secondary NTP
			my $anvil_ntp2_more_info = "";
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0193!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0098!#" : "#!string!explain_0098!#",
				name		=>	"anvil_ntp2",
				id		=>	"anvil_ntp2",
				value		=>	$an->data->{cgi}{anvil_ntp2},
				star		=>	$an->data->{form}{anvil_ntp2_star},
				more_info	=>	$anvil_ntp2_more_info,
			}});
		}
		
		# Allows the user to set the MTU size manually
		if (1)
		{
			my $anvil_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://en.wikipedia.org/wiki/Maximum_transmission_unit" }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
				row		=>	"#!string!row_0291!#",
				explain		=>	$an->data->{sys}{expert_ui} ? "#!string!terse_0156!#" : "#!string!explain_0156!#",
				name		=>	"anvil_mtu_size",
				id		=>	"anvil_mtu_size",
				value		=>	$an->data->{cgi}{anvil_mtu_size},
				star		=>	$an->data->{form}{anvil_mtu_size_star},
				more_info	=>	$anvil_name_more_info,
			}});
		}
		else
		{
			print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
				name		=>	"anvil_mtu_size",
				id		=>	"anvil_mtu_size",
				value		=>	$an->data->{cgi}{anvil_mtu_size},
			}});
		}
		
		# Now show the header for the Foundation pack section.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-foundation-pack-header"});
		
		# Anvil! network switches
		foreach my $i (1, 2)
		{
			my $name_key         = "anvil_switch${i}_name";
			my $name_star_key    = "anvil_switch${i}_name_star";
			my $ip_key           = "anvil_switch${i}_ip";
			my $ip_star_key      = "anvil_switch${i}_ip_star";
			my $say_name_row     = "";
			my $say_name_explain = "";
			my $say_name_url     = "";
			my $say_ip_row       = "";
			my $say_ip_explain   = "";
			my $say_ip_url       = "";
			if ($i == 1)
			{
				$say_name_row     = "#!string!row_0178!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0082!#" : "#!string!explain_0082!#";
				$say_name_url     = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names";
				$say_ip_row       = "#!string!row_0179!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0083!#" : "#!string!explain_0083!#";
				$say_ip_url       = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Network_Switches";
			}
			elsif ($i == 2)
			{
				$say_name_row     = "#!string!row_0180!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0084!#" : "#!string!explain_0084!#";
				$say_name_url     = "";
				$say_ip_row       = "#!string!row_0181!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0085!#" : "#!string!explain_0085!#";
				$say_ip_url       = "";
			}
			
			# Switches
			if (not $an->data->{sys}{install_manifest}{show}{switch_fields})
			{
				# Switch name
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
				}});
				
				# Switch IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
				}});
			}
			else
			{
				# Switch name
				my $network_switch_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_name_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_name_row,
					explain		=>	$say_name_explain,
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
					star		=>	$an->data->{form}{$name_star_key},
					more_info	=>	$network_switch_name_more_info,
				}});
				
				# Switch IP
				my $network_switch_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_ip_row,
					explain		=>	$say_ip_explain,
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
					star		=>	$an->data->{form}{$ip_star_key},
					more_info	=>	$network_switch_ip_more_info,
				}});
			}
		}
		
		# UPSes
		foreach my $i (1, 2)
		{
			my $name_key         = "anvil_ups${i}_name";
			my $name_star_key    = "anvil_ups${i}_name_star";
			my $ip_key           = "anvil_ups${i}_ip";
			my $ip_star_key      = "anvil_ups${i}_ip_star";
			my $say_name_row     = "";
			my $say_name_explain = "";
			my $say_name_url     = "";
			my $say_ip_row       = "";
			my $say_ip_explain   = "";
			my $say_ip_url       = "";
			if ($i == 1)
			{
				$say_name_row     = "#!string!row_0170!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0074!#" : "#!string!explain_0074!#";
				$say_name_url     = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names";
				$say_ip_row       = "#!string!row_0171!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0075!#" : "#!string!explain_0075!#";
				$say_ip_url       = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Network_Managed_UPSes_Are_Worth_It";
			}
			elsif ($i == 2)
			{
				$say_name_row     = "#!string!row_0172!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0076!#" : "#!string!explain_0076!#";
				$say_name_url     = "";
				$say_ip_row       = "#!string!row_0173!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0077!#" : "#!string!explain_0077!#";
				$say_ip_url       = "";
			}
			
			# UPSes
			if (not $an->data->{sys}{install_manifest}{show}{ups_fields})
			{
				# UPS name
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
				}});
				
				# UPS IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
				}});
			}
			else
			{
				# UPS name
				my $network_ups_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_name_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_name_row,
					explain		=>	$say_name_explain,
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
					star		=>	$an->data->{form}{$name_star_key},
					more_info	=>	$network_ups_name_more_info,
				}});
				
				# UPS IP
				my $network_ups_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_ip_row,
					explain		=>	$say_ip_explain,
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
					star		=>	$an->data->{form}{$ip_star_key},
					more_info	=>	"$network_ups_ip_more_info",
				}});
			}
		}
		
		# PTSes
		foreach my $i (1, 2)
		{
			my $name_key         = "anvil_pts${i}_name";
			my $name_star_key    = "anvil_pts${i}_name_star";
			my $ip_key           = "anvil_pts${i}_ip";
			my $ip_star_key      = "anvil_pts${i}_ip_star";
			my $say_name_row     = "";
			my $say_name_explain = "";
			my $say_name_url     = "";
			my $say_ip_row       = "";
			my $say_ip_explain   = "";
			my $say_ip_url       = "";
			if ($i == 1)
			{
				$say_name_row     = "#!string!row_0296!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0162!#" : "#!string!explain_0162!#";
				$say_name_url     = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names";
				$say_ip_row       = "#!string!row_0297!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0163!#" : "#!string!explain_0163!#";
				$say_ip_url       = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Network_Managed_PTSes_Are_Worth_It";
			}
			elsif ($i == 2)
			{
				$say_name_row     = "#!string!row_0298!#";
				$say_name_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0164!#" : "#!string!explain_0164!#";
				$say_name_url     = "";
				$say_ip_row       = "#!string!row_0299!#";
				$say_ip_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0165!#" : "#!string!explain_0165!#";
				$say_ip_url       = "";
			}
			
			# PTSes
			if (not $an->data->{sys}{install_manifest}{show}{pts_fields})
			{
				# PTS name
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
				}});
				
				# PTS IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
				}});
			}
			else
			{
				# PTS name
				my $network_pts_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_name_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_name_row,
					explain		=>	$say_name_explain,
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
					star		=>	$an->data->{form}{$name_star_key},
					more_info	=>	$network_pts_name_more_info,
				}});
				
				# PTS IP
				my $network_pts_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_ip_row,
					explain		=>	$say_ip_explain,
					name		=>	$ip_key,
					id		=>	$ip_key,
					value		=>	$an->data->{cgi}{$ip_key},
					star		=>	$an->data->{form}{$ip_star_key},
					more_info	=>	$network_pts_ip_more_info,
				}});
			}
		}
		
		# Ask the user which model of PDU they're using.
		my $say_apc     = $an->String->get({key => "brand_0017"});
		my $say_raritan = $an->String->get({key => "brand_0018"});
		
		# Build the two or four PDU form entries.
		foreach my $i (1..$an->data->{sys}{install_manifest}{pdu_count})
		{
			next if ($i > $an->data->{sys}{install_manifest}{pdu_count});
			my $pdu_name_key       = "anvil_pdu${i}_name";
			my $pdu_ip_key         = "anvil_pdu${i}_ip";
			my $pdu_star_name_key  = "anvil_pdu${i}_name_star";
			my $pdu_star_ip_key    = "anvil_pdu${i}_ip_star";
			my $pdu_agent_key      = "anvil_pdu${i}_agent";
			my $pdu_star_agent_key = "anvil_pdu${i}_agent_star";
			my $say_pdu            = "";
			my $say_name_explain   = "";
			my $say_ip_explain     = "";
			my $say_name_url       = "";
			my $say_ip_url         = "";
			my $say_agent_url      = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Defining_Fence_Devices";
			my $say_agent_explain  = "";
			
			# Set the agent to use the global default if not set already.
			$an->data->{cgi}{$pdu_agent_key} = $an->data->{sys}{install_manifest}{pdu_agent} if not $an->data->{cgi}{$pdu_agent_key};
			
			# Build the select.
			my $pdu_model = $an->Web->build_select({
					name     => $pdu_agent_key, 
					options  => ["fence_apc_snmp#!#$say_apc", "fence_raritan_snmp#!#$say_raritan"], 
					blank    => 0,
					selected => $an->data->{cgi}{$pdu_agent_key},
					width    => 220,
				});
			
			if ($i == 1)
			{
				$say_pdu           = $an->data->{sys}{install_manifest}{pdu_count} == 2 ? "#!string!device_0011!#"  : "#!string!device_0007!#";
				$say_name_explain  = $an->data->{sys}{expert_ui} ? "#!string!terse_0078!#" : "#!string!explain_0078!#";
				$say_name_url      = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names";
				$say_ip_explain    = $an->data->{sys}{expert_ui} ? "#!string!terse_0079!#" : "#!string!explain_0079!#";
				$say_ip_url        = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Why_Switched_PDUs.3F";
				$say_agent_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0150!#" : "#!string!explain_0150!#";
			}
			elsif ($i == 2)
			{
				$say_pdu           = $an->data->{sys}{install_manifest}{pdu_count} == 2 ? "#!string!device_0012!#" : "#!string!device_0008!#";
				$say_name_explain  = $an->data->{sys}{expert_ui} ? "#!string!terse_0080!#" : "#!string!explain_0080!#";
				$say_ip_explain    = $an->data->{sys}{expert_ui} ? "#!string!terse_0081!#" : "#!string!explain_0081!#";
				$say_agent_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0151!#" : "#!string!explain_0151!#";
			}
			elsif ($i == 3)
			{
				$say_pdu           = "#!string!device_0009!#";
				$say_name_explain  = $an->data->{sys}{expert_ui} ? "#!string!terse_0146!#" : "#!string!explain_0146!#";
				$say_ip_explain    = $an->data->{sys}{expert_ui} ? "#!string!terse_0147!#" : "#!string!explain_0147!#";
				$say_agent_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0152!#" : "#!string!explain_0152!#";
			}
			elsif ($i == 4)
			{
				$say_pdu           = "#!string!device_0010!#";
				$say_name_explain  = $an->data->{sys}{expert_ui} ? "#!string!terse_0148!#" : "#!string!explain_0148!#";
				$say_ip_explain    = $an->data->{sys}{expert_ui} ? "#!string!terse_0149!#" : "#!string!explain_0149!#";
				$say_agent_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0153!#" : "#!string!explain_0153!#";
			}
			my $say_pdu_name  = $an->String->get({key => "row_0174", variables => { say_pdu => $say_pdu }});
			my $say_pdu_ip    = $an->String->get({key => "row_0175", variables => { say_pdu => $say_pdu }});
			my $say_pdu_agent = $an->String->get({key => "row_0177", variables => { say_pdu => $say_pdu }});
			
			# PDUs
			my $default_pdu_name_key = "pdu${i}_name";
			my $default_pdu_ip_key   = "pdu${i}_ip";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_pdu_name_key}) && 
			    ($an->data->{sys}{install_manifest}{'default'}{$default_pdu_ip_key})   && 
			    (not $an->data->{sys}{install_manifest}{show}{pdu_fields}))
			{
				# PDU name
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$pdu_name_key,
					id		=>	$pdu_name_key,
					value		=>	$an->data->{cgi}{$pdu_name_key},
				}});
				
				# PDU IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$pdu_ip_key,
					id		=>	$pdu_ip_key,
					value		=>	$an->data->{cgi}{$pdu_ip_key},
				}});
				
				# PDU Brand
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$pdu_agent_key,
					id		=>	$pdu_agent_key,
					value		=>	$an->data->{cgi}{$pdu_agent_key},
				}});
			}
			else
			{
				# PDU Name
				my $pdu_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_name_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_pdu_name,
					explain		=>	$say_name_explain,
					name		=>	$pdu_name_key,
					id		=>	$pdu_name_key,
					value		=>	$an->data->{cgi}{$pdu_name_key},
					star		=>	$an->data->{form}{$pdu_star_name_key},
					more_info	=>	$pdu_name_more_info,
				}});
				
				# PDU IP
				my $pdu_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_pdu_ip,
					explain		=>	$say_ip_explain,
					name		=>	$pdu_ip_key,
					id		=>	$pdu_ip_key,
					value		=>	$an->data->{cgi}{$pdu_ip_key},
					star		=>	$an->data->{form}{$pdu_star_ip_key},
					more_info	=>	$pdu_ip_more_info,
				}});
				
				# PDU Brand
				my $pdu_agent_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_agent_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-select-entry", replace => { 
					row		=>	$say_pdu_agent,
					explain		=>	$say_agent_explain,
					'select'	=>	$pdu_model,
					star		=>	$an->data->{form}{$pdu_star_agent_key},
					more_info	=>	$pdu_agent_more_info,
				}});
			}
		}
		
		# Dashboards
		foreach my $i (1, 2)
		{
			my $name_key           = "anvil_striker${i}_name";
			my $name_star_key      = "anvil_striker${i}_name_star";
			my $bcn_ip_key         = "anvil_striker${i}_bcn_ip";
			my $bcn_ip_star_key    = "anvil_striker${i}_bcn_ip_star";
			my $ifn_ip_key         = "anvil_striker${i}_ifn_ip";
			my $ifn_ip_star_key    = "anvil_striker${i}_ifn_ip_star";
			my $say_name_row       = "";
			my $say_name_explain   = "";
			my $say_name_url       = "";
			my $say_bcn_ip_row     = "";
			my $say_bcn_ip_explain = "";
			my $say_bcn_ip_url     = "";
			my $say_ifn_ip_row     = "";
			my $say_ifn_ip_explain = "";
			my $say_ifn_ip_url     = "";
			if ($i == 1)
			{
				$say_name_row       = "#!string!row_0182!#";
				$say_name_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0086!#" : "#!string!explain_0086!#";
				$say_name_url       = "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Foundation_Pack_Host_Names";
				$say_bcn_ip_row     = "#!string!row_0183!#";
				$say_bcn_ip_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0087!#" : "#!string!explain_0087!#";
				$say_bcn_ip_url     = "https://alteeve.ca/w/Striker";
				$say_ifn_ip_row     = "#!string!row_0184!#";
				$say_ifn_ip_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0088!#" : "#!string!explain_0088!#";
				$say_ifn_ip_url     = "https://alteeve.ca/w/Striker";
			}
			elsif ($i == 2)
			{
				$say_name_row       = "#!string!row_0185!#";
				$say_name_explain   = $an->data->{sys}{expert_ui} ? "#!string!terse_0089!#" : "#!string!explain_0089!#";
				$say_name_url       = "";
				$say_bcn_ip_row     = "#!string!row_0186!#";
				$say_bcn_ip_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0090!#" : "#!string!explain_0090!#";
				$say_bcn_ip_url     = "";
				$say_ifn_ip_row     = "#!string!row_0187!#";
				$say_ifn_ip_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0091!#" : "#!string!explain_0091!#";
				$say_ifn_ip_url     = "";
			}
			
			# Dashboards
			if (not $an->data->{sys}{install_manifest}{show}{dashboard_fields})
			{
				# Striker name
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
				}});
				
				# Striker BCN IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$bcn_ip_key,
					id		=>	$bcn_ip_key,
					value		=>	$an->data->{cgi}{$bcn_ip_key},
				}});
				
				# Striker IFN IP
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$ifn_ip_key,
					id		=>	$ifn_ip_key,
					value		=>	$an->data->{cgi}{$ifn_ip_key},
				}});
			}
			else
			{
				# Striker name
				my $striker_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_name_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_name_row,
					explain		=>	$say_name_explain,
					name		=>	$name_key,
					id		=>	$name_key,
					value		=>	$an->data->{cgi}{$name_key},
					star		=>	$an->data->{form}{$name_star_key},
					more_info	=>	$striker_name_more_info,
				}});
				
				# Striker BCN IP
				my $striker_bcn_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_bcn_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_bcn_ip_row,
					explain		=>	$say_bcn_ip_explain,
					name		=>	$bcn_ip_key,
					id		=>	$bcn_ip_key,
					value		=>	$an->data->{cgi}{$bcn_ip_key},
					star		=>	$an->data->{form}{$bcn_ip_star_key},
					more_info	=>	$striker_bcn_ip_more_info,
				}});
				
				# Striker IFN IP
				my $striker_ifn_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => $say_ifn_ip_url }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	$say_ifn_ip_row,
					explain		=>	$say_ifn_ip_explain,
					name		=>	$ifn_ip_key,
					id		=>	$ifn_ip_key,
					value		=>	$an->data->{cgi}{$ifn_ip_key},
					star		=>	$an->data->{form}{$ifn_ip_star_key},
					more_info	=>	$striker_ifn_ip_more_info,
				}});
			}
		}
		
		# Spacer
		print $an->Web->template({file => "config.html", template => "install-manifest-form-spacer"});
		
		### NOTE: Nodes are a little more complicated, too, as we might have two or four PDUs that 
		###       each node might be plugged into.
		foreach my $j (1, 2)
		{
			# Print the node header
			my $title = $an->String->get({key => "title_0152", variables => { node_number => $j }});
			print $an->Web->template({file => "config.html", template => "install-manifest-form-nodes-header", replace => { title => $title }});
			
			my $name_key        = "anvil_node${j}_name";
			my $explain_name    = "";
			my $explain_bcn_ip  = $an->data->{sys}{expert_ui} ? "#!string!terse_0070!#" : "#!string!explain_0070!#";
			my $explain_ipmi_ip = $an->data->{sys}{expert_ui} ? "#!string!terse_0073!#" : "#!string!explain_0073!#";
			my $explain_sn_ip   = $an->data->{sys}{expert_ui} ? "#!string!terse_0071!#" : "#!string!explain_0071!#";
			my $explain_ifn_ip  = $an->data->{sys}{expert_ui} ? "#!string!terse_0072!#" : "#!string!explain_0072!#";
			if ($j == 1)
			{
				$explain_name = $an->data->{sys}{expert_ui} ? "#!string!terse_0068!#" : "#!string!explain_0068!#";
			}
			elsif ($j == 2)
			{
				$explain_name = $an->data->{sys}{expert_ui} ? "#!string!terse_0069!#" : "#!string!explain_0069!#";
			}
			
			# Node's hostname
			my $anvil_node_name_key      = "anvil_node${j}_name";
			my $anvil_node_name_star_key = "anvil_node${j}_name_star";
			my $default_node_name_key    = "node${j}_name";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_node_name_key}) && 
			    (not $an->data->{sys}{install_manifest}{show}{nodes_name_field}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$anvil_node_name_key,
					id		=>	$anvil_node_name_key,
					value		=>	$an->data->{cgi}{$anvil_node_name_key},
				}});
			}
			else
			{
				my $anvil_node_name_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Node_Host_Names" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	"#!string!row_0165!#",
					explain		=>	$explain_name,
					name		=>	$anvil_node_name_key,
					id		=>	$anvil_node_name_key,
					value		=>	$an->data->{cgi}{$anvil_node_name_key},
					star		=>	$an->data->{form}{$anvil_node_name_star_key},
					more_info	=>	$anvil_node_name_more_info,
				}});
			}
			
			# Node's BCN IP address
			my $anvil_node_bcn_ip_key      = "anvil_node${j}_bcn_ip";
			my $anvil_node_bcn_ip_star_key = "anvil_node${j}_bcn_ip_star";
			my $default_node_bcn_ip_key    = "node${j}_bcn_ip";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_node_bcn_ip_key}) && 
			    (not $an->data->{sys}{install_manifest}{show}{nodes_bcn_field}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$anvil_node_bcn_ip_key,
					id		=>	$anvil_node_bcn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_bcn_ip_key},
				}});
			}
			else
			{
				my $anvil_node_bcn_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Subnets" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	"#!string!row_0166!#",
					explain		=>	$explain_bcn_ip,
					name		=>	$anvil_node_bcn_ip_key,
					id		=>	$anvil_node_bcn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_bcn_ip_key},
					star		=>	$an->data->{form}{$anvil_node_bcn_ip_star_key},
					more_info	=>	$anvil_node_bcn_ip_more_info,
				}});
			}
			
			# Node's IPMI IP address
			my $anvil_node_ipmi_ip_key      = "anvil_node${j}_ipmi_ip";
			my $anvil_node_ipmi_ip_star_key = "anvil_node${j}_ipmi_ip_star";
			my $default_node_ipmi_ip_key    = "node${j}_ipmi_ip";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_node_ipmi_ip_key}) && 
			    (not $an->data->{sys}{install_manifest}{show}{nodes_ipmi_field}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$anvil_node_ipmi_ip_key,
					id		=>	$anvil_node_ipmi_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_ipmi_ip_key},
				}});
			}
			else
			{
				my $anvil_node_ipmi_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#What_is_IPMI" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	"#!string!row_0168!#",
					explain		=>	$explain_ipmi_ip,
					name		=>	$anvil_node_ipmi_ip_key,
					id		=>	$anvil_node_ipmi_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_ipmi_ip_key},
					star		=>	$an->data->{form}{$anvil_node_ipmi_ip_star_key},
					more_info	=>	$anvil_node_ipmi_ip_more_info,
				}});
			}
			
			# Node's SN IP address
			my $anvil_node_sn_ip_key      = "anvil_node${j}_sn_ip";
			my $anvil_node_sn_ip_star_key = "anvil_node${j}_sn_ip_star";
			my $default_node_sn_ip_key    = "node${j}_sn_ip";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_node_sn_ip_key}) && 
			   (not $an->data->{sys}{install_manifest}{show}{nodes_sn_field}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$anvil_node_sn_ip_key,
					id		=>	$anvil_node_sn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_sn_ip_key},
				}});
			}
			else
			{
				my $anvil_node_sn_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Subnets" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	"#!string!row_0167!#",
					explain		=>	$explain_sn_ip,
					name		=>	$anvil_node_sn_ip_key,
					id		=>	$anvil_node_sn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_sn_ip_key},
					star		=>	$an->data->{form}{$anvil_node_sn_ip_star_key},
					more_info	=>	$anvil_node_sn_ip_more_info,
				}});
			}
			
			# Node's IFN IP address
			my $anvil_node_ifn_ip_key      = "anvil_node${j}_ifn_ip";
			my $anvil_node_ifn_ip_star_key = "anvil_node${j}_ifn_ip_star";
			my $default_node_ifn_ip_key    = "node${j}_ifn_ip";
			if (($an->data->{sys}{install_manifest}{'default'}{$default_node_ifn_ip_key}) && 
			   (not $an->data->{sys}{install_manifest}{show}{nodes_ifn_field}))
			{
				print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
					name		=>	$anvil_node_ifn_ip_key,
					id		=>	$anvil_node_ifn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_ifn_ip_key},
				}});
			}
			else
			{
				my $anvil_node_ifn_ip_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Subnets" }});
				print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
					row		=>	"#!string!row_0169!#",
					explain		=>	$explain_ifn_ip,
					name		=>	$anvil_node_ifn_ip_key,
					id		=>	$anvil_node_ifn_ip_key,
					value		=>	$an->data->{cgi}{$anvil_node_ifn_ip_key},
					star		=>	$an->data->{form}{$anvil_node_ifn_ip_star_key},
					more_info	=>	$anvil_node_ifn_ip_more_info,
				}});
			}
			
			# Now we create an entry for each possible PDU (2 to 4).
			foreach my $i (1..4)
			{
				next if ($i > $an->data->{sys}{install_manifest}{pdu_count});
				my $say_pdu     = "";
				my $say_explain = "";
				if    ($i == 1)
				{
					$say_pdu     = $an->data->{sys}{install_manifest}{pdu_count} == 2 ? "#!string!device_0011!#"  : "#!string!device_0007!#";
					$say_explain = $an->data->{sys}{expert_ui} ? "#!string!terse_0096!#" : "#!string!explain_0096!#";
				}
				elsif ($i == 2)
				{
					$say_pdu = $an->data->{sys}{install_manifest}{pdu_count} == 2 ? "#!string!device_0012!#" : "#!string!device_0008!#";
				}
				elsif ($i == 3)
				{
					$say_pdu = "#!string!device_0009!#";
				}
				elsif ($i == 4)
				{
					$say_pdu = "#!string!device_0010!#";
				}
				my $say_pdu_name = $an->String->get({key => "row_0176", variables => { say_pdu => $say_pdu }});
				
				# PDU entry.
				my $pdu_outlet_key      = "anvil_node${j}_pdu${i}_outlet";
				my $pdu_outlet_star_key = "anvil_node${j}_pdu${i}_outlet_star";
				if (not $an->data->{sys}{install_manifest}{show}{nodes_ifn_field})
				{
					print $an->Web->template({file => "config.html", template => "install-manifest-form-hidden-entry", replace => { 
						name		=>	$pdu_outlet_key,
						id		=>	$pdu_outlet_key,
						value		=>	$an->data->{cgi}{$pdu_outlet_key},
					}});
				}
				else
				{
					my $pdu_outlet_more_info = $an->data->{sys}{disable_links} ? "" : $an->Web->template({file => "config.html", template => "install-manifest-more-info-url", replace => { url => "https://alteeve.ca/w/AN!Cluster_Tutorial_2#Why_Switched_PDUs.3F" }});
					print $an->Web->template({file => "config.html", template => "install-manifest-form-text-entry", replace => { 
						row		=>	$say_pdu_name,
						explain		=>	$say_explain,
						name		=>	$pdu_outlet_key,
						id		=>	$pdu_outlet_key,
						value		=>	$an->data->{cgi}{$pdu_outlet_key},
						star		=>	$an->data->{form}{$pdu_outlet_star_key},
						more_info	=>	$pdu_outlet_more_info,
					}});
				}
			}
			
			print $an->Web->template({file => "config.html", template => "install-manifest-form-nodes", replace => { 
				anvil_node2_name		=>	$an->data->{cgi}{anvil_node2_name},
				anvil_node2_name_star		=>	$an->data->{form}{anvil_node2_name_star},
				anvil_node2_bcn_ip		=>	$an->data->{cgi}{anvil_node2_bcn_ip},
				anvil_node2_bcn_ip_star		=>	$an->data->{form}{anvil_node2_bcn_ip_star},
				anvil_node2_ipmi_ip		=>	$an->data->{cgi}{anvil_node2_ipmi_ip},
				anvil_node2_ipmi_ip_star	=>	$an->data->{form}{anvil_node2_ipmi_ip_star},
				anvil_node2_sn_ip		=>	$an->data->{cgi}{anvil_node2_sn_ip},
				anvil_node2_sn_ip_star		=>	$an->data->{form}{anvil_node2_sn_ip_star},
				anvil_node2_ifn_ip		=>	$an->data->{cgi}{anvil_node2_ifn_ip},
				anvil_node2_ifn_ip_star		=>	$an->data->{form}{anvil_node2_ifn_ip_star},
				anvil_node2_pdu1_outlet		=>	$an->data->{cgi}{anvil_node2_pdu1_outlet},
				anvil_node2_pdu1_outlet_star	=>	$an->data->{form}{anvil_node2_pdu1_outlet_star},
				anvil_node2_pdu2_outlet		=>	$an->data->{cgi}{anvil_node2_pdu2_outlet},
				anvil_node2_pdu2_outlet_star	=>	$an->data->{form}{anvil_node2_pdu2_outlet_star},
				anvil_node2_pdu3_outlet		=>	$an->data->{cgi}{anvil_node2_pdu3_outlet},
				anvil_node2_pdu3_outlet_star	=>	$an->data->{form}{anvil_node2_pdu3_outlet_star},
				anvil_node2_pdu4_outlet		=>	$an->data->{cgi}{anvil_node2_pdu4_outlet},
				anvil_node2_pdu4_outlet_star	=>	$an->data->{form}{anvil_node2_pdu4_outlet_star},
			}});
		}
		
		# Footer.
		print $an->Web->template({file => "config.html", template => "install-manifest-form-footer"});
	}
	
	$an->Striker->_footer();
	
	return(0);
}

# This handles the management of DR jobs.
sub dr_job_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "dr_job_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{dr_job_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_dr_jobs($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_dr_jobs");
			$refresh_link =~ s/dr_job_uuid=.*?&/&/;
			$refresh_link =~ s/dr_job_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_dr_job_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	else
	{
		# Set defaults if not set already.
		$an->data->{cgi}{dr_job_dr_target_uuid} = $an->data->{cgi}{dr_target_uuid} ? $an->data->{cgi}{dr_target_uuid} : "";
		$an->data->{cgi}{dr_job_anvil_uuid}     = $an->data->{cgi}{anvil_uuid}     ? $an->data->{cgi}{anvil_uuid} : "";
		$an->data->{cgi}{dr_job_auto_prune}     = 1;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::dr_job_dr_target_uuid", value1 => $an->data->{cgi}{dr_job_dr_target_uuid},
			name2 => "cgi::dr_job_anvil_uuid",     value2 => $an->data->{cgi}{dr_job_anvil_uuid},
			name3 => "cgi::dr_job_auto_prune",     value3 => $an->data->{cgi}{dr_job_auto_prune},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils     = $an->ScanCore->get_anvils();
	my $servers    = $an->ScanCore->get_servers();
	my $dr_targets = $an->ScanCore->get_dr_targets();
	my $dr_jobs    = $an->ScanCore->get_dr_jobs();
	
	# Load a specific job, if requested.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::load_dr_job", value1 => $an->data->{cgi}{load_dr_job},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{load_dr_job})
	{
		load_dr_job_form($an, $dr_jobs, $an->data->{cgi}{dr_job_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing DR jobs, if any.
	my $dr_jobs_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $dr_jobs_explain = "#!string!explain_0226!#";
	my $dr_jobs_row     = "&nbsp;";	# Actually the 'Load' button
	my $dr_jobs_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$dr_jobs} > 0)
	{
		# Build an array to pass to 'build_select'
		$dr_jobs_explain = "#!string!explain_0227!#";
		$dr_jobs_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_dr_job",
			id	=>	"load_dr_job",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$dr_jobs_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this DR jobs is being used by any DR jobs.
		foreach my $hash_ref (@{$dr_jobs})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->dr_job_uuid", value1 => $hash_ref->{dr_job_uuid},
				name2 => "cgi::dr_job_uuid",      value2 => $an->data->{cgi}{dr_job_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{dr_job_dr_job_uuid} eq $an->data->{cgi}{dr_job_uuid})
			{
				# Disable it.
				$dr_jobs_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$dr_jobs_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$dr_jobs})
		{
			my $dr_job_uuid  = $hash_ref->{dr_job_uuid};
			my $dr_job_name  = $hash_ref->{dr_job_name};
			my $this_option  = $dr_job_uuid."#!#".$dr_job_name;
			push @{$options}, $this_option;
		}
		$dr_jobs_select = $an->Web->build_select({
			name     => "dr_job_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{dr_job_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$dr_jobs_row",
			column2_class	=>	"input_select",
			column2		=>	$dr_jobs_select,
			column3_class	=>	"input_explain",
			column3		=>	$dr_jobs_explain,
			column4_class	=>	"",
			column4		=>	"$dr_jobs_url",
		}});
	
	# Build a list of Anvil! systems. Selecting one will change the list of servers presented to the user.
	my $anvil_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $anvil_explain = "#!string!explain_0228!#";
	my $anvil_row     = "&nbsp;";	# Actually the 'Load' button
	if (@{$anvils} > 0)
	{
		# Build an array to pass to 'build_select'
		$anvil_explain = "#!string!explain_0229!#";
		$anvil_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_anvil",
			id	=>	"load_anvil",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid  = $hash_ref->{anvil_uuid};
			my $anvil_name  = $hash_ref->{anvil_name};
			my $this_option = $anvil_uuid."#!#".$anvil_name;
			push @{$options}, $this_option;
		}
		$anvil_select = $an->Web->build_select({
			name      => "anvil_uuid", 
			options   => $options, 
			blank     => 0,
			selected  => $an->data->{cgi}{anvil_uuid},
			width     => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$anvil_row",
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Now build a check-box list of servers for the currently active Anvil!. If no servers are found 
	# (either because no Anvil! was selected or no servers exist under the selected Anvil!), this will be
	# disabled.
	my $server_key_list = "";
	if ($an->data->{cgi}{anvil_uuid})
	{
		# We've got an Anvil!. Before we load the servers though, lets see if we've 
		
		
		if (@{$servers} > 0)
		{
			# Yup!
		}
		
		# Did we find any servers?
		if ($server_key_list)
		{
			# Yup! Record the list so that we can dig out what the user (un)selects.
			$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
					name	=>	"dr_job_server_list",
					id	=>	"dr_job_server_list",
					value	=>	$an->data->{cgi}{dr_job_server_list},
				}});
		}
		else
		{
			# Nope. Explain why nothing was presented to the user.
		}
	}
	else
	{
		# No Anvil! selected.
	}
# 	if (not 
			#my $anvil_explain   = "#!string!explain_0230!#";

	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$anvil_row",
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Job name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0326!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_job_name\" id=\"dr_job_name\" value=\"".$an->data->{cgi}{dr_job_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0216!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target IP or host name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0317!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_jobs_address\" id=\"dr_jobs_address\" value=\"".$an->data->{cgi}{dr_jobs_address}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0217!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target ssh TCP port.
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0318!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_jobs_tcp_port\" id=\"dr_jobs_tcp_port\" value=\"".$an->data->{cgi}{dr_jobs_tcp_port}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0218!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target root password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0327!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_jobs_password\" id=\"dr_jobs_password\" value=\"".$an->data->{cgi}{dr_jobs_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0219!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Use cache check box
	my $say_cache_checked = $an->data->{cgi}{dr_jobs_use_cache} ? "checked" : "";
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0316!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"checkbox\" name=\"dr_jobs_use_cache\" id=\"dr_jobs_use_cache\" $say_cache_checked>",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0220!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0012!#"}),
		}});
	
	### NOTE: The DR store is a little more complicated as it is divided into a selection box for the 
	###       type and a string for the location.
	# DR Store
	if ($an->data->{cgi}{dr_jobs_store} =~ /^(.*?):(.*)$/)
	{
		$an->data->{cgi}{dr_jobs_store_type}     = $1;
		$an->data->{cgi}{dr_jobs_store_location} = $2;
	}
	my $select_width = 120;
	my $text_width = ($width - $select_width - 5);
	my $dr_jobs_store_type_select = $an->Web->build_select({
		name     => "dr_jobs_store_type", 
		options  => ["fs#!##!string!select_0013!#", "lvm#!##!string!select_0014!#"], 
		blank    => 0,
		selected => $an->data->{cgi}{dr_jobs_store_type},
		width    => $select_width,
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0320!#",
			column2_class	=>	"input_select",
			column2		=>	$dr_jobs_store_type_select." <input type=\"text\" name=\"dr_jobs_store_location\" id=\"dr_jobs_store_location\" value=\"".$an->data->{cgi}{dr_jobs_store_location}."\" style=\"width: ${text_width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0221!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0013!#"}),
		}});
	
	# Copies to store
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0321!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_jobs_copies\" id=\"dr_jobs_copies\" value=\"".$an->data->{cgi}{dr_jobs_copies}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0222!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### NOTE: Only 'rsync' (that I can tell thus far) uses rate limiting. Unless SSH can be limited, this
	###       won't be useful except when going local cache to jobs cache (or jobs FS, when selected).
	# Rate limiting
# 	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
# 			column1_class	=>	"highlight_row_bold",
# 			column1		=>	"#!string!row_0319!#",
# 			column2_class	=>	"input_select",
# 			column2		=>	"<input type=\"text\" name=\"dr_jobs_bandwidth_limit\" id=\"dr_jobs_bandwidth_limit\" value=\"".$an->data->{cgi}{dr_jobs_bandwidth_limit}."\" style=\"width: ${width}px;\">",
# 			column3_class	=>	"input_explain",
# 			column3		=>	"#!string!explain_0223!#",
# 			column4_class	=>	"input_url",
# 			column4		=>	"&nbsp;",
# 		}});
	
	# Create the text field for the DR jobs's note
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"dr_jobs_note",
		id	=>	"dr_jobs_note",
		value	=>	$an->data->{cgi}{dr_jobs_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0224!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	### Hidden stuff
	# Task
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0204!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the management of DR target machines.
sub dr_target_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "dr_target_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{dr_target_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_dr_target($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_dr_target");
			$refresh_link =~ s/dr_target_uuid=.*?&/&/;
			$refresh_link =~ s/dr_target_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_dr_target_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	else
	{
		# Set defaults if not set already.
		$an->data->{cgi}{dr_target_tcp_port}        = 22 if not $an->data->{cgi}{dr_target_tcp_port};
		$an->data->{cgi}{dr_target_copies}          = 2  if not $an->data->{cgi}{dr_target_copies};
		$an->data->{cgi}{dr_target_bandwidth_limit} = 0  if not $an->data->{cgi}{dr_target_bandwidth_limit};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::dr_target_tcp_port",        value1 => $an->data->{cgi}{dr_target_tcp_port},
			name2 => "cgi::dr_target_copies",          value2 => $an->data->{cgi}{dr_target_copies},
			name3 => "cgi::dr_target_bandwidth_limit", value3 => $an->data->{cgi}{dr_target_bandwidth_limit},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $dr_targets = $an->ScanCore->get_dr_targets();
	my $dr_jobs    = $an->ScanCore->get_dr_jobs();
	
	# Load a specific DR target, if requested.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::load_dr_target", value1 => $an->data->{cgi}{load_dr_target},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{load_dr_target})
	{
		load_dr_target_form($an, $dr_targets, $an->data->{cgi}{dr_target_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing DR targets, if any.
	my $dr_target_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $dr_target_explain = "#!string!explain_0225!#";
	my $dr_target_row     = "&nbsp;";	# Actually the 'Load' button
	my $dr_target_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$dr_targets} > 0)
	{
		# Build an array to pass to 'build_select'
		$dr_target_explain = "#!string!explain_0215!#";
		$dr_target_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_dr_target",
			id	=>	"load_dr_target",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$dr_target_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this DR target is being used by any DR jobs.
		foreach my $hash_ref (@{$dr_jobs})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->dr_job_dr_target_uuid", value1 => $hash_ref->{dr_job_dr_target_uuid},
				name2 => "cgi::dr_target_uuid",             value2 => $an->data->{cgi}{dr_target_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{dr_job_dr_target_uuid} eq $an->data->{cgi}{dr_target_uuid})
			{
				# Disable it.
				$dr_target_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$dr_target_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$dr_targets})
		{
			my $dr_target_uuid = $hash_ref->{dr_target_uuid};
			my $dr_target_name = $hash_ref->{dr_target_name};
			my $this_option    = $dr_target_uuid."#!#".$dr_target_name;
			push @{$options}, $this_option;
		}
		$dr_target_select = $an->Web->build_select({
			name     => "dr_target_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{dr_target_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$dr_target_row",
			column2_class	=>	"input_select",
			column2		=>	$dr_target_select,
			column3_class	=>	"input_explain",
			column3		=>	$dr_target_explain,
			column4_class	=>	"",
			column4		=>	"$dr_target_url",
		}});
	
	# DR Target name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0326!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_target_name\" id=\"dr_target_name\" value=\"".$an->data->{cgi}{dr_target_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0216!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target IP or host name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0317!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_target_address\" id=\"dr_target_address\" value=\"".$an->data->{cgi}{dr_target_address}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0217!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target ssh TCP port.
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0318!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_target_tcp_port\" id=\"dr_target_tcp_port\" value=\"".$an->data->{cgi}{dr_target_tcp_port}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0218!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# DR Target root password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0327!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_target_password\" id=\"dr_target_password\" value=\"".$an->data->{cgi}{dr_target_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0219!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Use cache check box
	my $say_cache_checked = $an->data->{cgi}{dr_target_use_cache} ? "checked" : "";
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0316!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"checkbox\" name=\"dr_target_use_cache\" id=\"dr_target_use_cache\" $say_cache_checked>",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0220!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0012!#"}),
		}});
	
	### NOTE: The DR store is a little more complicated as it is divided into a selection box for the 
	###       type and a string for the location.
	# DR Store
	if ($an->data->{cgi}{dr_target_store} =~ /^(.*?):(.*)$/)
	{
		$an->data->{cgi}{dr_target_store_type}     = $1;
		$an->data->{cgi}{dr_target_store_location} = $2;
	}
	my $select_width = 120;
	my $text_width = ($width - $select_width - 5);
	my $dr_target_store_type_select = $an->Web->build_select({
		name     => "dr_target_store_type", 
		options  => ["fs#!##!string!select_0013!#", "lvm#!##!string!select_0014!#"], 
		blank    => 0,
		selected => $an->data->{cgi}{dr_target_store_type},
		width    => $select_width,
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0320!#",
			column2_class	=>	"input_select",
			column2		=>	$dr_target_store_type_select." <input type=\"text\" name=\"dr_target_store_location\" id=\"dr_target_store_location\" value=\"".$an->data->{cgi}{dr_target_store_location}."\" style=\"width: ${text_width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0221!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0013!#"}),
		}});
	
	# Copies to store
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0321!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"dr_target_copies\" id=\"dr_target_copies\" value=\"".$an->data->{cgi}{dr_target_copies}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0222!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	### NOTE: Only 'rsync' (that I can tell thus far) uses rate limiting. Unless SSH can be limited, this
	###       won't be useful except when going local cache to target cache (or target FS, when selected).
	# Rate limiting
# 	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
# 			column1_class	=>	"highlight_row_bold",
# 			column1		=>	"#!string!row_0319!#",
# 			column2_class	=>	"input_select",
# 			column2		=>	"<input type=\"text\" name=\"dr_target_bandwidth_limit\" id=\"dr_target_bandwidth_limit\" value=\"".$an->data->{cgi}{dr_target_bandwidth_limit}."\" style=\"width: ${width}px;\">",
# 			column3_class	=>	"input_explain",
# 			column3		=>	"#!string!explain_0223!#",
# 			column4_class	=>	"input_url",
# 			column4		=>	"&nbsp;",
# 		}});
	
	# Create the text field for the DR target's note
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"dr_target_note",
		id	=>	"dr_target_note",
		value	=>	$an->data->{cgi}{dr_target_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0224!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	### Hidden stuff
	# Task
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0204!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the management of notification recipients and what Anvil! systems they are listening to.
sub notify_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "notify_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{notify_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_notify($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_notify");
			$refresh_link =~ s/notify_uuid=.*?&/&/;
			$refresh_link =~ s/notify_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_notify_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	else
	{
		# Set defaults if not set already.
		$an->data->{cgi}{notify_language} = "en_CA"   if not $an->data->{cgi}{notify_language};
		$an->data->{cgi}{notify_level}    = "warning" if not $an->data->{cgi}{notify_level};
		$an->data->{cgi}{notify_units}    = "metric"  if not $an->data->{cgi}{notify_units};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::notify_language", value1 => $an->data->{cgi}{notify_language},
			name2 => "cgi::notify_level",    value2 => $an->data->{cgi}{notify_level},
			name3 => "cgi::notify_units",    value3 => $an->data->{cgi}{notify_units},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils        = $an->ScanCore->get_anvils();
	my $notifications = $an->ScanCore->get_notifications();
	my $recipients    = $an->ScanCore->get_recipients();
	
	# Load a specific notification target, if requested.
	if ($an->data->{cgi}{load_notify})
	{
		load_notify_form($an, $notifications, $an->data->{cgi}{notify_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing notification targets, if any.
	my $notify_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $notify_explain = "#!string!explain_0196!#";
	my $notify_row     = "&nbsp;";	# Actually the 'Load' button
	my $notify_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$notifications} > 0)
	{
		# Build an array to pass to 'build_select'
		$notify_explain = "#!string!explain_0197!#";
		$notify_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_notify",
			id	=>	"load_notify",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$notify_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# NOTE: Deleting a notification target is always allowed because nothing depends on it. We'll
		#       delete the associated recipients tables as needed.
		
		my $options = [];
		foreach my $hash_ref (@{$notifications})
		{
			my $notify_uuid   = $hash_ref->{notify_uuid};
			my $notify_target = $hash_ref->{notify_target};
			my $this_option   = $notify_uuid."#!#".$notify_target;
			push @{$options}, $this_option;
		}
		$notify_select = $an->Web->build_select({
			name     => "notify_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{notify_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$notify_row",
			column2_class	=>	"input_select",
			column2		=>	$notify_select,
			column3_class	=>	"input_explain",
			column3		=>	$notify_explain,
			column4_class	=>	"",
			column4		=>	"$notify_url",
		}});
	
	# Alert target (email address or log file)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0308!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"notify_target\" id=\"notify_target\" value=\"".$an->data->{cgi}{notify_target}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0199!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Alert target name (To: field in email alerts)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0283!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"notify_name\" id=\"notify_name\" value=\"".$an->data->{cgi}{notify_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0198!#",
			column4_class	=>	"input_url",
			column4		=>	"",
		}});

	# Build the language selection box.
	my $language_options = [];
	foreach my $iso_code (sort {$a cmp $b} keys %{$an->data->{strings}{lang}})
	{
		my $name = $an->String->get_language_name({language => $iso_code});
		push @{$language_options}, "$iso_code#!#$name";
	}
	my $language_select = $an->Web->build_select({
		name     => "notify_language", 
		options  => $language_options, 
		blank    => 0,
		selected => $an->data->{cgi}{notify_language},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0309!#",
			column2_class	=>	"input_select",
			column2		=>	$language_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0200!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Alert level selection
	my $log_level_select = $an->Web->build_select({
		name     => "notify_level", 
		options  => [
			"ignore#!##!string!alert_level_0006!#",
			"debug#!##!string!alert_level_0001!#",
			"info#!##!string!alert_level_0002!#",
			"notice#!##!string!alert_level_0003!#",
			"warning#!##!string!alert_level_0004!#",
			"critical#!##!string!alert_level_0005!#",
		], 
		blank    => 0,
		'sort'   => 0,
		selected => $an->data->{cgi}{notify_level},
		width    => ($width + 10),
	});
	my $log_level_explanation = $an->Web->template({file => "configure.html", template => "alert-level-explanation"});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0310!#",
			column2_class	=>	"input_select",
			column2		=>	$log_level_select,
			column3_class	=>	"input_explain",
			column3		=>	$log_level_explanation,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Metric or imperial
	my $units_select = $an->Web->build_select({
		name     => "notify_units", 
		options  => [
			"metric#!##!string!select_0007!#",
			"imperial#!##!string!select_0008!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{notify_units},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0311!#",
			column2_class	=>	"input_select",
			column2		=>	$units_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0206!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the notification target's note
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"notify_note",
		id	=>	"notify_note",
		value	=>	$an->data->{cgi}{notify_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0208!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of Anvil! systems, if any. For each, where there is an entry in 
	if (@{$anvils} > 0)
	{
		my $break_printed = 0;
		
		# Loop through each Anvil!
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid        = $hash_ref->{anvil_uuid};
			my $anvil_name        = $hash_ref->{anvil_name};
			my $anvil_description = $hash_ref->{anvil_description};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "anvil_uuid",        value1 => $anvil_uuid,
				name2 => "anvil_name",        value2 => $anvil_name,
				name3 => "anvil_description", value3 => $anvil_description,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (not $break_printed)
			{
				$break_printed = 1;
				$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
						message	=>	"#!string!header_0025!#",
						class	=>	"breaker_header",
						colspan	=>	4,
					}});
			}
			my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
					name	=>	"configure_".$anvil_name,
					id	=>	"configure_".$anvil_name,
					value	=>	"#!string!button_0077!#",
					url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
				}, no_comment => 1});
			
			# Build the select for the notification level (with a "don't notify") option.
			my $notify_anvil_key = "notify_anvil_".$anvil_uuid;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::${notify_anvil_key}", value1 => $an->data->{cgi}{$notify_anvil_key},
			}, file => $THIS_FILE, line => __LINE__});
			
			my $notify_level_select = $an->Web->build_select({
				name     => $notify_anvil_key, 
				options  => [
					"ignore#!##!string!alert_level_0006!#",
					"debug#!##!string!alert_level_0001!#",
					"info#!##!string!alert_level_0002!#",
					"notice#!##!string!alert_level_0003!#",
					"warning#!##!string!alert_level_0004!#",
					"critical#!##!string!alert_level_0005!#",
				], 
				blank    => 0,
				'sort'   => 0,
				selected => $an->data->{cgi}{$notify_anvil_key},
				width    => ($width + 10),
			});
			
			$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
					column1_class	=>	"highlight_row_bold",
					column1		=>	"&nbsp;",
					column2_class	=>	"highlight_detail",
					column2		=>	$notify_level_select,
					column3_class	=>	"input_explain",
					column3		=>	"<span class=\"highlight_detail\">$anvil_name</span> - $anvil_description",
					column4_class	=>	"",
					column4		=>	"$edit_url",
				}});
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0199!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of SMTP servers.
sub smtp_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "smtp_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{smtp_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_smtp($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_smtp");
			$refresh_link =~ s/smtp_uuid=.*?&/&/;
			$refresh_link =~ s/smtp_uuid=.*//;
		}
		
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_smtp_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $smtp   = $an->ScanCore->get_smtp();
	
	# Load a specific SMTP server, if requested.
	if ($an->data->{cgi}{load_smtp})
	{
		load_smtp_form($an, $smtp, $an->data->{cgi}{smtp_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing SMTP servers, if any.
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	my $smtp_row     = "&nbsp;";	# Actually the 'Load' button
	my $smtp_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		$smtp_explain = "#!string!explain_0192!#";
		$smtp_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_smtp",
			id	=>	"load_smtp",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$smtp_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this SMTP server is being used by any Anvil! systems.
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_smtp_uuid", value1 => $hash_ref->{anvil_smtp_uuid},
				name2 => "cgi::smtp_uuid",            value2 => $an->data->{cgi}{smtp_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_smtp_uuid} eq $an->data->{cgi}{smtp_uuid})
			{
				# Disable it.
				$smtp_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$smtp_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid   = $hash_ref->{smtp_uuid};
			my $smtp_server = $hash_ref->{smtp_server};
			my $this_option = $smtp_uuid."#!#".$smtp_server;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name     => "smtp_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{smtp_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$smtp_row",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"",
			column4		=>	"$smtp_url",
		}});
	
	# Set defaults, if the user didn't try to save (we don't want to put something into a field they 
	# blanked on purpose).
	if (not $an->data->{cgi}{save})
	{
		if (not $an->data->{cgi}{smtp_server})           { $an->data->{cgi}{smtp_server}         = "mail.".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_username})         { $an->data->{cgi}{smtp_username}       = "admin\@".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_security})         { $an->data->{cgi}{smtp_security}       = "starttls"; }
		if (not $an->data->{cgi}{smtp_authentication})   { $an->data->{cgi}{smtp_authentication} = "encrypted"; }
		if ($an->data->{cgi}{smtp_alt_server} eq "NULL") { $an->data->{cgi}{smtp_alt_server}     = ""; }
	}
	
	# Primary SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0250!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_server\" id=\"smtp_server\" value=\"".$an->data->{cgi}{smtp_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0184!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),
		}});
	
	# Backup SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0314!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_alt_server\" id=\"smtp_alt_server\" value=\"".$an->data->{cgi}{smtp_alt_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0211!#",
			column4_class	=>	"",
			column4		=>	"",
		}});
	
	# SMTP user name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0301!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_username\" id=\"smtp_username\" value=\"".$an->data->{cgi}{smtp_username}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0186!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0302!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_password\" id=\"smtp_password\" value=\"".$an->data->{cgi}{smtp_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0187!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	
	# Authentication select box.
	my $authentication_select = $an->Web->build_select({
		name     => "smtp_authentication", 
		options  => [
			"none#!##!string!select_0004!#",
			"plain_text#!##!string!select_0005!#",
			"encrypted#!##!string!select_0006!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_authentication},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0303!#",
			column2_class	=>	"input_select",
			column2		=>	$authentication_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0188!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP Security selection box.
	my $security_select = $an->Web->build_select({
		name     => "smtp_security", 
		options  => [
			"none#!##!string!select_0001!#",
			"tls_ssl#!##!string!select_0002!#",
			"starttls#!##!string!select_0003!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_security},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0304!#",
			column2_class	=>	"input_select",
			column2		=>	$security_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0189!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the 'smtp -> smtp_note'
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"smtp_note",
		id	=>	"smtp_note",
		value	=>	$an->data->{cgi}{smtp_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0195!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of Anvil! systems currently using this SMTP server.
	if (($an->data->{cgi}{smtp_uuid}) && (@{$anvils} > 0))
	{
		my $break_printed = 0;
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_smtp_uuid", value1 => $hash_ref->{anvil_smtp_uuid},
				name2 => "cgi::smtp_uuid",            value2 => $an->data->{cgi}{smtp_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_smtp_uuid} eq $an->data->{cgi}{smtp_uuid})
			{
				my $anvil_uuid        = $hash_ref->{anvil_uuid};
				my $anvil_name        = $hash_ref->{anvil_name};
				my $anvil_description = $hash_ref->{anvil_description};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "cgi::anvil_uuid",        value1 => $an->data->{cgi}{anvil_uuid},
					name2 => "cgi::anvil_name",        value2 => $an->data->{cgi}{anvil_name},
					name3 => "cgi::anvil_description", value3 => $an->data->{cgi}{anvil_description},
				}, file => $THIS_FILE, line => __LINE__});
				
				if (not $break_printed)
				{
					$break_printed = 1;
					$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
							message	=>	"#!string!header_0024!#",
							class	=>	"breaker_header",
							colspan	=>	4,
						}});
				}
				my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
						name	=>	"configure_".$anvil_name,
						id	=>	"configure_".$anvil_name,
						value	=>	"#!string!button_0077!#",
						url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
					}, no_comment => 1});
				
				$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
						column1_class	=>	"highlight_row_bold",
						column1		=>	"&nbsp;",
						column2_class	=>	"highlight_detail",
						column2		=>	"$anvil_name",
						column3_class	=>	"input_explain",
						column3		=>	"$anvil_description",
						column4_class	=>	"",
						column4		=>	"$edit_url",
					}});
			}
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0199!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of Anvil! owners.
sub owner_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "owner_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{owner_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_owner($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_owner");
			$refresh_link =~ s/owner_uuid=.*?&/&/;
			$refresh_link =~ s/owner_uuid=.*//;
		}
		
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_owner_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $owners = $an->ScanCore->get_owners();
	
	# Load a specific Owner, if requested.
	if ($an->data->{cgi}{load_owner})
	{
		load_owner_form($an, $owners, $an->data->{cgi}{owner_uuid});
	}
	
	# Create a list of existing owners.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing owners, if any.
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	my $owner_row     = "&nbsp;";	# Actually the 'Load' button
	my $owner_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		$owner_explain = "#!string!explain_0191!#";
		$owner_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_owner",
			id	=>	"load_owner",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$owner_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this Owner already owns any Anvil! systems.
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_owner_uuid", value1 => $hash_ref->{anvil_owner_uuid},
				name2 => "cgi::owner_uuid",            value2 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_owner_uuid} eq $an->data->{cgi}{owner_uuid})
			{
				# Disable it.
				$owner_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$owner_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name     => "owner_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{owner_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$owner_row",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"",
			column4		=>	"$owner_url",
		}});
	
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0194!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the 'owners -> owner_note'
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"owner_note",
		id	=>	"owner_note",
		value	=>	$an->data->{cgi}{owner_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0193!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of currently owned Anvil! systems.
	if (($an->data->{cgi}{owner_uuid}) && (@{$anvils} > 0))
	{
		my $break_printed = 0;
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_owner_uuid", value1 => $hash_ref->{anvil_owner_uuid},
				name2 => "cgi::owner_uuid",            value2 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_owner_uuid} eq $an->data->{cgi}{owner_uuid})
			{
				my $anvil_uuid        = $hash_ref->{anvil_uuid};
				my $anvil_name        = $hash_ref->{anvil_name};
				my $anvil_description = $hash_ref->{anvil_description};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "cgi::anvil_uuid",        value1 => $an->data->{cgi}{anvil_uuid},
					name1 => "cgi::anvil_name",        value1 => $an->data->{cgi}{anvil_name},
					name2 => "cgi::anvil_description", value2 => $an->data->{cgi}{anvil_description},
				}, file => $THIS_FILE, line => __LINE__});
				
				if (not $break_printed)
				{
					$break_printed = 1;
					$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
							message	=>	"#!string!header_0023!#",
							class	=>	"breaker_header",
							colspan	=>	4,
						}});
				}
				my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
						name	=>	"configure_".$anvil_name,
						id	=>	"configure_".$anvil_name,
						value	=>	"#!string!button_0077!#",
						url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
					}, no_comment => 1});
				
				$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
						column1_class	=>	"highlight_row_bold",
						column1		=>	"&nbsp;",
						column2_class	=>	"highlight_detail",
						column2		=>	"$anvil_name",
						column3_class	=>	"input_explain",
						column3		=>	"$anvil_description",
						column4_class	=>	"",
						column4		=>	"$edit_url",
					}});
			}
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0198!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of Anvil! systems (including the ability to create new owners)
sub anvil_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "anvil_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{anvil_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_anvil($an);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "notice_message", value1 => $notice_message,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_anvil");
			$refresh_link =~ s/anvil_uuid=.*?&/&/;
			$refresh_link =~ s/anvil_uuid=.*//;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "notice_message", value1 => $notice_message,
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# If I have a manifest_uuid, then I am here after an install run and want to use the info in that 
	# manifest to populate the fields.
	if ($an->data->{cgi}{manifest_uuid})
	{
		$an->ScanCore->parse_install_manifest({uuid => $an->data->{cgi}{manifest_uuid}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::anvil_prefix",   value1 => $an->data->{cgi}{anvil_prefix},
			name2 => "cgi::anvil_domain",   value2 => $an->data->{cgi}{anvil_domain},
			name3 => "cgi::anvil_sequence", value3 => $an->data->{cgi}{anvil_sequence},
		}, file => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::anvil_password", value1 => $an->data->{cgi}{anvil_password},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_anvil_form($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $owners = $an->ScanCore->get_owners();
	my $smtp   = $an->ScanCore->get_smtp();
	my $nodes  = $an->ScanCore->get_nodes();
	$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
		name1 => "anvils", value1 => $anvils,
		name2 => "owners", value2 => $owners,
		name3 => "smtp",   value3 => $smtp,
		name4 => "nodes",  value4 => $nodes,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Tease out the data for this form if we're loading an anvil_uuid
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::load_anvil", value1 => $an->data->{cgi}{load_anvil},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{load_anvil})
	{
		if ($an->Validate->is_uuid({uuid => $an->data->{cgi}{anvil_uuid}}))
		{
			# Not sure why I checked the output, load_anvil_form() doesn't return anything
			#($notice_message, $error_fields) = load_anvil_form($an, $anvils, $owners, $smtp, $nodes);
			load_anvil_form($an, $anvils, $owners, $smtp, $nodes);
		}
		else
		{
			# I don't pass a UUID to load_anvil_form, so blank things out here.
			$an->data->{cgi}{anvil_owner_uuid}  = "";
			$an->data->{cgi}{anvil_smtp_uuid}   = "";
			$an->data->{cgi}{anvil_name}        = "";
			$an->data->{cgi}{anvil_description} = "";
			$an->data->{cgi}{anvil_note}        = "";
			$an->data->{cgi}{anvil_password}    = "";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "cgi::anvil_owner_uuid",  value1 => $an->data->{cgi}{anvil_owner_uuid},
				name2 => "cgi::anvil_smtp_uuid",   value2 => $an->data->{cgi}{anvil_smtp_uuid},
				name3 => "cgi::anvil_name",        value3 => $an->data->{cgi}{anvil_name},
				name4 => "cgi::anvil_description", value4 => $an->data->{cgi}{anvil_description},
				name5 => "cgi::anvil_note",        value5 => $an->data->{cgi}{anvil_note},
				name6 => "cgi::anvil_password",    value6 => $an->data->{cgi}{anvil_password},
			}, file => $THIS_FILE, line => __LINE__});
			
			# Reload the other forms with no UUID to blank them out.
			load_owner_form($an, $owners, "");
			load_smtp_form($an,  $smtp,   "");
			load_node_form($an,  $nodes,  "");
		}
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::load_owner", value1 => $an->data->{cgi}{load_owner},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{load_owner})
	{
		load_owner_form($an, $owners, $an->data->{cgi}{owner_uuid});
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::load_smtp", value1 => $an->data->{cgi}{load_smtp},
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{load_smtp})
	{
		load_smtp_form($an, $smtp, $an->data->{cgi}{smtp_uuid});
	}
	
	### First, we'll show any existing Anvil! systems, owners and smtp servers. If a user selects one of
	### these, it will pre-fill the form below it.
	# Show a select box of existing Anvil! systems (if any).
	my $width         = 300;
	my $menu_items    = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message => "#!string!header_0020!#",
			class   => "breaker_header",
			colspan => 4,
		}});
	my $anvil_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $anvil_explain = "#!string!explain_0174!#";
	my $anvil_row     = "&nbsp;";	# Actually the 'load' button
	my $anvil_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$anvils} > 0)
	{
		### TODO: Build JS to make changes
		$anvil_explain = "#!string!explain_0190!#";
		$anvil_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_anvil",
			id	=>	"load_anvil",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$anvil_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid  = $hash_ref->{anvil_uuid};
			my $anvil_name  = $hash_ref->{anvil_name};
			my $this_option = $anvil_uuid."#!#".$anvil_name;
			push @{$options}, $this_option;
		}
		$anvil_select = $an->Web->build_select({
			name      => "anvil_uuid", 
			options   => $options, 
			blank     => 1,
			say_blank => "select_0011", 
			selected  => $an->data->{cgi}{anvil_uuid},
			width     => ($width + 10),
		});
		
		# anvil_uuid gets set on load, so I don't see it as blank when 'Load' is pressed with no 
		# selected Anvil!. To work around this, we set the blank entry to have a value of "NULL".
		$anvil_select =~ s/value=""/value="NULL"/g;
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	$anvil_row,
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"",
			column4		=>	"$anvil_url",
		}});
	
	# Get a list of existing owners, if any.
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	my $owner_row     = "&nbsp;";	# Actually the 'Load' button
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		$owner_explain = "#!string!explain_0191!#";
		$owner_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_owner",
			id	=>	"load_owner",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name      => "owner_uuid", 
			options   => $options, 
			blank     => 1,
			say_blank => "select_0011", 
			selected  => $an->data->{cgi}{owner_uuid},
			width     => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$owner_row",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# And now get a list of SMTP mail servers to send email alerts through
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	my $smtp_row     = "&nbsp;";	# Actually the 'Load' button
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		$smtp_explain = "#!string!explain_0192!#";
		$smtp_row      = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_smtp",
			id	=>	"load_smtp",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid  = $hash_ref->{smtp_uuid};
			my $smtp_server  = $hash_ref->{smtp_server};
			my $this_option = $smtp_uuid."#!#".$smtp_server;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name      => "smtp_uuid", 
			options   => $options, 
			blank     => 1,
			say_blank => "select_0012", 
			selected  => $an->data->{cgi}{smtp_uuid},
			width     => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$smtp_row",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"input_url",
			column4		=>	"",
		}});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0021!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	### From here down, we present fields for the user to enter (or that may be filled out by selecting
	### one of the entries from select boxes).
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0176!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"owner_note",
			id	=>	"owner_note",
			value	=>	$an->data->{cgi}{owner_note},
		}});
	
	### Now information on the Anvil! itself.
	# Description
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0021!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_description\" id=\"anvil_description\" value=\"".$an->data->{cgi}{anvil_description}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0179!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0025!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_password\" id=\"anvil_password\" value=\"".$an->data->{cgi}{anvil_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0181!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0003!#"}),
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"anvil_note",
			id	=>	"anvil_note",
			value	=>	$an->data->{cgi}{anvil_note},
		}});
	
	### Node access info
	# Node 1
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 1 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node1_access\" id=\"node1_access\" value=\"".$an->data->{cgi}{node1_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0182!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"node1_note",
			id	=>	"node1_note",
			value	=>	$an->data->{cgi}{node1_note},
		}});
	
	# Node 2
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 2 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node2_access\" id=\"node2_access\" value=\"".$an->data->{cgi}{node2_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0183!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"node2_note",
			id	=>	"node2_note",
			value	=>	$an->data->{cgi}{node2_note},
		}});
	
	### SMTP values
	# Breaker
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0022!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Set defaults, if the user didn't try to save (we don't want to put something into a field they 
	# blanked on purpose).
	if (not $an->data->{cgi}{save})
	{
		if (not $an->data->{cgi}{smtp_server})         { $an->data->{cgi}{smtp_server}         = "mail.".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_username})       { $an->data->{cgi}{smtp_username}       = "admin\@".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_security})       { $an->data->{cgi}{smtp_security}       = "starttls"; }
		if (not $an->data->{cgi}{smtp_authentication}) { $an->data->{cgi}{smtp_authentication} = "encrypted"; }
	}
	
	# SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0250!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_server\" id=\"smtp_server\" value=\"".$an->data->{cgi}{smtp_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0184!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),
		}});
	
	# SMTP user name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0301!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_username\" id=\"smtp_username\" value=\"".$an->data->{cgi}{smtp_username}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0186!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0302!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_password\" id=\"smtp_password\" value=\"".$an->data->{cgi}{smtp_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0187!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	
	# Authentication select box.
	my $authentication_select = $an->Web->build_select({
		name     => "smtp_authentication", 
		options  => [
			"none#!##!string!select_0004!#",
			"plain_text#!##!string!select_0005!#",
			"encrypted#!##!string!select_0006!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_authentication},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0303!#",
			column2_class	=>	"input_select",
			column2		=>	$authentication_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0188!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP Security selection box.
	my $security_select = $an->Web->build_select({
		name     => "smtp_security", 
		options  => [
			"none#!##!string!select_0001!#",
			"tls_ssl#!##!string!select_0002!#",
			"starttls#!##!string!select_0003!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_security},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0304!#",
			column2_class	=>	"input_select",
			column2		=>	$security_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0189!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0193!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This shows the main Striker configuration menu
sub show_main_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "show_main_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# For some tasks, like enabling and disabling install targets, there is no dedicated menu but just a
	# notice header. Deal with those now, if appropriate.
	my $notice_message =  "";
	my $refresh_link   =  $an->data->{sys}{cgi_string};
	   $refresh_link   =~ s/confirm=.*?&/&/;
	   $refresh_link   =~ s/confirm=.*//;
	   $refresh_link   =~ s/subtask=.*?&/&/;
	   $refresh_link   =~ s/subtask=.*//;
	   $refresh_link   =~ s/task=.*?&/&/;
	   $refresh_link   =~ s/task=.*//;
	   $refresh_link   =~ s/\?&/?/;
	if ($an->data->{cgi}{task} eq "install_target")
	{
		if ($an->data->{cgi}{subtask} eq "enable")
		{
			# Confirmed?
			if ($an->data->{cgi}{confirm})
			{
				# Baleted!
				$notice_message = manage_install_target($an);
			}
			else
			{
				# Ask them to confirm
				$notice_message = confirm_action($an, "enable_install_target");
			}
		}
		elsif ($an->data->{cgi}{subtask} eq "disable")
		{
			# No confirmation needed.
			$notice_message = manage_install_target($an);
		}
	}
	
	# Put together the frame of the page.
	my $back_image = "";
	my $back_link  = "?";
	
	# If I have a referer and if it is striker or MediaLirary, set it.
	if (($ENV{HTTP_REFERER}) && (($ENV{HTTP_REFERER} =~ /cgi-bin\/mediaLibrary/) or ($ENV{HTTP_REFERER} =~ /cgi-bin\/striker/)))
	{
		$back_link  = ($ENV{HTTP_REFERER} =~ /(\/cgi-bin\/.*)$/)[0];
		$back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
				image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
				alt_text     => "#!string!button_0001!#",
				id           => "back_icon",
			}});
	}
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	$back_link,
		}, no_comment => 1});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	### Build the list of menu items.
	my $menu_items = "";
	
	# Anvil! systems
	my $task_anvil_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_anvil",
			id	=>	"task_anvil",
			alt	=>	"#!string!button_0069!#",
			value	=>	"#!string!button_0069!#",
			url	=>	"?task=anvil",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_anvil_url,
			description	=>	"#!string!explain_0005!#",
			url		=>	"",
		}})."\n";
		
	# Owner 
	my $task_owner_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_owner",
			id	=>	"task_owner",
			alt	=>	"#!string!button_0070!#",
			value	=>	"#!string!button_0070!#",
			url	=>	"?task=owner",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_owner_anchor,
			description	=>	"#!string!explain_0013!#",
			url		=>	"",
		}})."\n";
		
	# SMTP 
	my $task_smtp_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_smtp",
			id	=>	"task_smtp",
			alt	=>	"#!string!button_0071!#",
			value	=>	"#!string!button_0071!#",
			url	=>	"?task=smtp",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_smtp_anchor,
			description	=>	"#!string!explain_0023!#",
			url		=>	"",
		}})."\n";
	
	# Notification Recipients
	my $task_notify_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_notify",
			id	=>	"task_notify",
			alt	=>	"#!string!button_0072!#",
			value	=>	"#!string!button_0072!#",
			url	=>	"?task=notify",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_notify_anchor,
			description	=>	"#!string!explain_0105!#",
			url		=>	"",
		}})."\n";
	
	### NOTE: Not implemented yet.
	# Advanced Configuration
# 	my $task_advanced_options_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"task_advanced_options",
# 			id	=>	"task_advanced_options",
# 			alt	=>	"#!string!button_0073!#",
# 			value	=>	"#!string!button_0073!#",
# 			url	=>	"?task=advanced_options",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_advanced_options_anchor,
# 			description	=>	"#!string!explain_0172!#",
# 			url		=>	"",
# 		}})."\n";
	
	# For the Enable/Disable install target, I need to know the current state.
	# 0 == Stopped
	# 1 == Running
	# 2 == Unknown (if this is returned, the meny entry simply won't exist)
	my $install_target_state = $an->Get->install_target_state();
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "install_target_state", value1 => $install_target_state,
	}, file => $THIS_FILE, line => __LINE__});
	if ($install_target_state eq "0")
	{
		# Option to enable
		my $task_install_target_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"task_install_target",
				id	=>	"task_install_target",
				alt	=>	"#!string!button_0057!#",
				value	=>	"#!string!button_0057!#",
				url	=>	"?task=install_target&subtask=enable",
			}, no_comment => 1});
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	$task_install_target_anchor,
				description	=>	"#!string!explain_0170!#",
				url		=>	"",
			}})."\n";
	}
	elsif ($install_target_state eq "1")
	{
		# Option to disable
		my $task_install_target_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"task_install_target",
				id	=>	"task_install_target",
				alt	=>	"#!string!button_0058!#",
				value	=>	"#!string!button_0058!#",
				url	=>	"?task=install_target&subtask=disable",
			}, no_comment => 1});
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	$task_install_target_anchor,
				description	=>	"#!string!explain_0169!#",
				url		=>	"",
			}})."\n";
	}
	
	### TODO: Move this over to 'configure'
	# Install Manifests
	my $task_manifest_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_manifest",
			id	=>	"task_manifest",
			alt	=>	"#!string!button_0060!#",
			value	=>	"#!string!button_0060!#",
			url	=>	"?task=manifests",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_manifest_anchor,
			description	=>	"#!string!explain_0168!#",
			url		=>	"",
		}})."\n";
	
	### TODO: Setup these later.
	# Backup and restore
# 	my $task_backup_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"task_backup",
# 			id	=>	"task_backup",
# 			alt	=>	"#!string!button_0074!#",
# 			value	=>	"#!string!button_0074!#",
# 			url	=>	"?task=backup",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_backup_anchor,
# 			description	=>	"#!string!explain_0171!#",
# 			url		=>	"",
# 		}})."\n";
	
	# Configure ScanCore Databases
# 	my $task_scancore_db_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"scancore_db",
# 			id	=>	"scancore_db",
# 			alt	=>	"#!string!button_0076!#",
# 			value	=>	"#!string!button_0076!#",
# 			url	=>	"?task=scancore_db",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_scancore_db_anchor,
# 			description	=>	"#!string!explain_0173!#",
# 			url		=>	"",
# 		}})."\n";
	
	### Disaster recovery options - Disabled until v2.1
	# DR Targets
# 	my $task_dr_target_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"dr_target",
# 			id	=>	"dr_target",
# 			alt	=>	"#!string!button_0078!#",
# 			value	=>	"#!string!button_0078!#",
# 			url	=>	"?task=dr_target",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_dr_target_anchor,
# 			description	=>	"#!string!explain_0213!#",
# 			url		=>	"",
# 		}})."\n";
# 	my $task_dr_job_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"dr_job",
# 			id	=>	"dr_job",
# 			alt	=>	"#!string!button_0079!#",
# 			value	=>	"#!string!button_0079!#",
# 			url	=>	"?task=dr_job",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_dr_job_anchor,
# 			description	=>	"#!string!explain_0214!#",
# 			url		=>	"",
# 		}})."\n";
	
	# Get the list of existing Anvil! systems, if any
	my $anvil_count = 0;
	foreach my $anvil_name (sort {$a cmp $b} keys %{$an->data->{sorted}{anvils}})
	{
		my $anvil_uuid        = $an->data->{sorted}{anvils}{$anvil_name}{uuid};
		my $anvil_owner       = $an->data->{anvils}{$anvil_uuid}{owner}{name};
		my $anvil_description = $an->data->{anvils}{$anvil_uuid}{description};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "anvil_name",        value1 => $anvil_name, 
			name2 => "anvil_uuid",        value2 => $anvil_uuid, 
			name3 => "anvil_owner",       value3 => $anvil_owner, 
			name4 => "anvil_description", value4 => $anvil_description, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if (not $anvil_count)
		{
			# Print a spacer;
			$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-spacer"});
		}
		$anvil_count++;
		
		my $view_anvil_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"view_".$anvil_name,
				id	=>	"view_".$anvil_name,
				alt	=>	$anvil_name,
				value	=>	$anvil_name,
				url	=>	"/cgi-bin/striker?anvil_uuid=".$anvil_uuid,
			}, no_comment => 1});
		my $edit_anvil_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"edit_".$anvil_name,
				id	=>	"edit_".$anvil_name,
				alt	=>	"#!string!button_0077!#",
				value	=>	"#!string!button_0077!#",
				url	=>	"?task=anvil&load_anvil=true&anvil_uuid=".$anvil_uuid,
			}, no_comment => 1});
		my $say_description = $an->String->get({key => "message_0465", variables => { 
			owner		=>	$anvil_owner,
			description	=>	$anvil_description, 
		}});
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-anvil-entry", replace => {
				view		=>	$view_anvil_anchor,
				description	=>	$say_description,
				edit		=>	$edit_anvil_anchor,
			}})."\n";
	}
	
	# Build the body of the menu.	
	my $menu = $an->Web->template({file => "configure.html", template => "configure-menu", replace => { options => $menu_items }});
	
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

### NOTE: These two functions are duplicated in 'striker' and 'mediaLibrary' to allow Common.pm to be 
###       retired and will be phased out.
# This initializes a call; reads variables, etc. In this function, '$an' is not yet defined.
sub initialize
{
	my ($caller, $initialize_http) = @_;
	
	# Set default configuration variable values
	my ($an) = _initialize_an();
	
	# First thing first, initialize the web session.
	$an->Web->initialize_http() if $initialize_http;

	# First up, read in the default strings file.
	$an->Storage->read_words({file => $an->data->{path}{common_strings}});
	$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
	$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

	# Read in the configuration file. If the file doesn't exist, initial setup will be triggered.
	$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

	$an->default_language    ($an->data->{sys}{language});
	$an->default_log_language($an->data->{'log'}{language});
	$an->default_log_file    ($an->data->{'log'}{file});
	$an->Log->level          ($an->data->{'log'}{level});
	$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});

	# Connect to the databases.
	$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
		file  => $THIS_FILE,
		quiet => 1, 
	});
	if (not $an->data->{sys}{db_connections})
	{
		$an->Web->no_db_access();
		$an->nice_exit({exit_code => 1});
	}
	
	return($an);
}

# Set default configuration variable values. In this function, '$an' is not yet defined.
sub _initialize_an
{
	# Setup (sane) defaults
	my $an = AN::Tools->new({data => {
		'log'		=>	{
			file		=>	"/var/log/striker.log", 
			language	=>	"en_CA",
			level		=>	2,
		},
		check_using_node	=>	"",
		handles			=>	{
			'log'			=>	"",
		},
		nodes			=>	"",
		online_nodes		=>	[],
		path			=>	{
			agents_directory	=>	"/var/www/ScanCore/ScanCore/agents",
			apache_manifests_dir	=>	"/var/www/html/manifests",
			apache_manifests_url	=>	"/manifests",
			backup_config		=>	"/var/www/html/striker-backup_#!hostname!#_#!date!#.txt",	# Remember to update the sys::backup_url value below if you change this
			'call_anvil-kick-apc-ups' =>	"/sbin/striker/call_anvil-kick-apc-ups",
			'call_gather-system-info' =>	"/sbin/striker/call_gather-system-info",
			'call_striker-push-ssh'	=>	"/sbin/striker/call_striker-push-ssh",
			'call_striker-configure-vmm' =>	"/sbin/striker/call_striker-configure-vmm",
			'call_striker-delete-anvil' =>	"/sbin/striker/call_striker-delete-anvil",
			'call_striker-merge-dashboards' => "/sbin/striker/call_striker-merge-dashboards",
			'striker-configure-vmm'	=>	"/sbin/striker/striker-configure-vmm",
			'striker-delete-anvil'	=>	"/sbin/striker/striker-delete-anvil",
			'striker-merge-dashboards' =>	"/sbin/striker/striker-merge-dashboards",
			cat			=>	"/bin/cat",
			ccs			=>	"/usr/sbin/ccs",
			check_dvd		=>	"/sbin/striker/check_dvd",
			cluster_conf		=>	"/etc/cluster/cluster.conf",
			clusvcadm		=>	"/usr/sbin/clusvcadm",
			common_strings		=>	"Data/common.xml",
			config_file		=>	"/etc/striker/striker.conf",	# TODO: Phase this out in favour of 'striker_config' below.
			control_dhcpd		=>	"/sbin/striker/control_dhcpd",
			control_iptables	=>	"/sbin/striker/control_iptables",
			control_libvirtd	=>	"/sbin/striker/control_libvirtd",
			control_shorewall	=>	"/sbin/striker/control_shorewall",
			cp			=>	"/bin/cp",
			default_striker_manifest =>	"/var/www/html/manifests/striker-default.xml",
			dhcpd_conf		=>	"/etc/dhcp/dhcpd.conf",
			do_dd			=>	"/sbin/striker/do_dd",
			docroot			=>	"/var/www/html/",
			echo			=>	"/bin/echo",
			expect			=>	"/usr/bin/expect",
			fence_ipmilan		=>	"/sbin/fence_ipmilan",
			gethostip		=>	"/bin/gethostip",
			'grep'			=>	"/bin/grep",
			home			=>	"/var/www/home/",
			# This stores this node's UUID. It is used to track all our sensor data in the 
			# database. If you change this here, change it in the agents, too.
			host_uuid		=>	"/etc/striker/host.uuid",
			hostname		=>	"/bin/hostname",
			hosts			=>	"/etc/hosts",
			ifconfig		=>	"/sbin/ifconfig",
			initd_iptables		=>	"/etc/init.d/iptables",
			initd_libvirtd		=>	"/etc/init.d/libvirtd",
			initd_shorewall		=>	"/etc/init.d/shorewall",
			ip			=>	"/sbin/ip",
			log_file		=>	"/var/log/striker.log",
			lvdisplay		=>	"/sbin/lvdisplay",
			mailx			=>	"/bin/mailx",
			media			=>	"/var/www/home/media/",
			mv			=>	"/bin/mv",
			perl_library		=>	"/usr/share/perl5",
			perl_source		=>	"/sbin/striker/AN",
			ping			=>	"/usr/bin/ping",
			postfix_main		=>	"/etc/postfix/main.cf",
			postfix_relay_file	=>	"/etc/postfix/relay_password",
			postmap			=>	"/usr/sbin/postmap",
			'redhat-release'	=>	"/etc/redhat-release",
			repo_centos		=>	"/var/www/html/centos6/x86_64/img/repodata",
			repo_centos_path	=>	"/centos6/x86_64/img/",
			repo_generic		=>	"/var/www/html/repo/repodata",
			repo_generic_path	=>	"/repo/",
			repo_rhel		=>	"/var/www/html/rhel6/x86_64/img/repodata",
			repo_rhel_path		=>	"/rhel6/x86_64/img/",
			rhn_check		=>	"/usr/sbin/rhn_check",
			rhn_file		=>	"/etc/sysconfig/rhn/systemid",
			rsync			=>	"/usr/bin/rsync",
			scancore_strings	=>	"/sbin/striker/ScanCore/ScanCore.xml",
			scancore_sql		=>	"/sbin/striker/ScanCore/ScanCore.sql",
			screen			=>	"/usr/bin/screen",
			shared			=>	"/shared/files/",	# This is hard-coded in the file delete function.
			shorewall_init		=>	"/etc/init.d/shorewall",
			skins			=>	"../html/skins/",
			ssh_config		=>	"/etc/ssh/ssh_config",
			'ssh-keyscan'		=>	"/usr/bin/ssh-keyscan",
			status			=>	"/var/www/home/status/",
			striker_cache		=>	"/var/www/home/cache",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_files		=>	"/var/www/home",
			'striker-push-ssh'	=>	"/sbin/striker/striker-push-ssh",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
			sync			=>	"/bin/sync",
			tools_directory		=>	"/sbin/striker/",
			'touch_striker.log'	=>	"/sbin/striker/touch_striker.log",
			tput			=>	"/usr/bin/tput",
			uuidgen			=>	"/usr/bin/uuidgen",
			virsh			=>	"/usr/bin/virsh",
			'virt-manager'		=>	"/usr/bin/virt-manager",
			
			# These are the tools that will be copied to 'docroot' if either node doesn't have 
			# an internet connection.
			tools			=>	[
				"anvil-map-network",
				"anvil-self-destruct",
			],
			
			# These are files on nodes, not on the dashboard machin itself.
			nodes			=>	{
				'anvil-adjust-vnet'	=>	"/sbin/striker/anvil-adjust-vnet",
				'anvil-kick-apc-ups'	=>	"/sbin/striker/anvil-kick-apc-ups",
				'anvil-safe-start'	=>	"/sbin/striker/anvil-safe-start",
				# This is the actual DRBD wait script
				'anvil-wait-for-drbd'	=>	"/sbin/striker/anvil-wait-for-drbd",
				backups			=>	"/root/backups",
				bcn_bond1_config	=>	"/etc/sysconfig/network-scripts/ifcfg-bcn_bond1",
				bcn_link1_config	=>	"/etc/sysconfig/network-scripts/ifcfg-bcn_link1",
				bcn_link2_config	=>	"/etc/sysconfig/network-scripts/ifcfg-bcn_link2",
				cat			=>	"/bin/cat",
				cluster_conf		=>	"/etc/cluster/cluster.conf",
				cron_root		=>	"/var/spool/cron/root",
				drbd			=>	"/etc/drbd.d",
				drbd_global_common	=>	"/etc/drbd.d/global_common.conf",
				drbd_r0			=>	"/etc/drbd.d/r0.res",
				drbd_r1			=>	"/etc/drbd.d/r1.res",
				drbdadm			=>	"/sbin/drbdadm",
				fstab			=>	"/etc/fstab",
				getsebool		=>	"/usr/sbin/getsebool",
				'grep'			=>	"/bin/grep",
				# This stores this node's UUID. It is used to track all our sensor data in the 
				# database. If you change this here, change it in the ScanCore, too.
				host_uuid		=>	"/etc/striker/host.uuid",
				hostname		=>	"/etc/sysconfig/network",
				hosts			=>	"/etc/hosts",
				ifcfg_directory		=>	"/etc/sysconfig/network-scripts/",
				ifn_bond1_config	=>	"/etc/sysconfig/network-scripts/ifcfg-ifn_bond1",
				ifn_bridge1_config	=>	"/etc/sysconfig/network-scripts/ifcfg-ifn_bridge1",
				ifn_link1_config	=>	"/etc/sysconfig/network-scripts/ifcfg-ifn_link1",
				ifn_link2_config	=>	"/etc/sysconfig/network-scripts/ifcfg-ifn_link2",
				iptables		=>	"/etc/sysconfig/iptables",
				lvm_conf		=>	"/etc/lvm/lvm.conf",
				MegaCli64		=>	"/opt/MegaRAID/MegaCli/MegaCli64",
				network_scripts		=>	"/etc/sysconfig/network-scripts",
				ntp_conf		=>	"/etc/ntp.conf",
				perl_library		=>	"/usr/share/perl5",
				post_install		=>	"/root/post_install",
				'anvil-safe-start'	=>	"/sbin/striker/anvil-safe-start",
				# Used to verify it was enabled properly.
				'anvil-safe-start_link'	=>	"/etc/rc3.d/S99_anvil-safe-start",
				scancore		=>	"/sbin/striker/ScanCore/ScanCore",
				sed			=>	"/bin/sed",
				setsebool		=>	"/usr/sbin/setsebool",
				shadow			=>	"/etc/shadow",
				shared_subdirectories	=>	["definitions", "provision", "archive", "files", "status"],
				sn_bond1_config		=>	"/etc/sysconfig/network-scripts/ifcfg-sn_bond1",
				sn_link1_config		=>	"/etc/sysconfig/network-scripts/ifcfg-sn_link1",
				sn_link2_config		=>	"/etc/sysconfig/network-scripts/ifcfg-sn_link2",
				storcli64		=>	"/opt/MegaRAID/storcli/storcli64",
				striker_config		=>	"/etc/striker/striker.conf",
				striker_tarball		=>	"/sbin/striker/striker_tools.tar.bz2",
				tar			=>	"/bin/tar",
				udev_net_rules		=>	"/etc/udev/rules.d/70-persistent-net.rules",
				udev_vnet_rules		=>	"/etc/udev/rules.d/99-anvil-adjust-vnet.rules",
				# This is the LSB wrapper.
				'wait-for-drbd'		=>	"/sbin/striker/wait-for-drbd",
				'wait-for-drbd_initd'	=>	"/etc/init.d/wait-for-drbd",
			},
		},
		up_nodes		=>	[],
		args			=>	{
			check_dvd		=>	"--dvd --no-cddb --no-device-info --no-disc-mode --no-vcd",
			rsync			=>	"-av --partial",
		},
		# Things set here are meant to be overwritable by the user in striker.conf.
		scancore			=>	{
			language		=>	"en_CA",
			log_level		=>	2,
			log_language		=>	"en_CA",
		},
		striker			=>	{
			log_db_transactions	=>	0,
		},
		sys			=>	{
			# Some actions, like powering off servers and nodes, have a timeout set so that 
			# later, reloading the page doesn't reload a previous confirmation URL and reinitiate
			# the power off when it wasn't desired. This defines that timeout in seconds.
			actime_timeout		=>	180,
			### NOTE: If you change these, also change in anvil-kick-apc-ups!
			apc			=>	{
				reboot			=>	{
					power_off_delay		=>	60,
					sleep_time		=>	60,
				},
				'shutdown'		=>	{
					power_off_delay		=>	60,
				},
			},
			auto_populate_ssh_users	=>	"",
			backup_url		=>	"/striker-backup_#!hostname!#_#!date!#.txt",
			clustat_timeout		=>	120,
			cluster_conf		=>	"",
			config_read		=>	0,
			daemons			=>	{
				enable			=>	[
					"gpm",		# LSB compliant
					"ipmi",		# NOT LSB compliant! 0 == running, 6 == stopped
					"iptables",	# LSB compliant
					"irqbalance",	# LSB compliant
					#"ksmtuned",	# LSB compliant
					"ktune",	# LSB compliant
					"modclusterd",	# LSB compliant
					"network",	# Does NOT appear to be LSB compliant; returns '0' for 'stopped'
					"ntpd",		# LSB compliant
					"ntpdate", 
					"ricci",	# LSB compliant
					"snmpd",
					"tuned",	# LSB compliant
				],
				disable		=>	[
					"acpid",
					"clvmd",	# Appears to be LSB compliant
					"cman",		# 
					"drbd",		# 
					"gfs2",		# 
					"ip6tables",	# 
					"ipmidetectd",	# Not needed on the Anvil!
					"numad",	# LSB compliant
					"rgmanager",	# 
					"snmptrapd",	# 
					"systemtap",	# 
				],
			},
			date_seperator		=>	"-",			# Should put these in the strings.xml file
			dd_block_size		=>	"1M",
			debug			=>	1,
			# When set to '1', (almost) all external links will be disabled. Useful for sites 
			# without an Internet connection.
			disable_links		=>	0,
			error_limit		=>	10000,
			# This will significantly cut down on the text shown on the screen to make 
			# information more digestable for experts.
			expert_ui		=>	0,
			footer_printed		=>	0,
			html_lang		=>	"en",
			ignore_missing_vm	=>	0,
			# These options control some of the Install Manifest options. They can be overwritten
			# by adding matching  entries is striker.conf.
			install_manifest	=>	{
				'default'		=>	{
					bcn_ethtool_opts		=>	"",
					bcn_network			=>	"10.20.0.0",
					bcn_subnet			=>	"255.255.0.0",
					bcn_defroute			=>	"no",
					cluster_name			=>	"anvil",
					'anvil_drbd_disk_disk-barrier'	=>	"false", 
					'anvil_drbd_disk_disk-flushes'	=>	"false", 
					'anvil_drbd_disk_md-flushes'	=>	"false", 
					'anvil_drbd_disk_c-plan-ahead'	=>	"7",
					'anvil_drbd_disk_c-max-rate'	=>	"110M",
					'anvil_drbd_disk_c-min-rate'	=>	"30M",
					'anvil_drbd_disk_c-fill-target'	=>	"1M",
					'anvil_drbd_options_cpu-mask'	=>	"", 
					'anvil_drbd_net_max-buffers'	=>	"", 
					'anvil_drbd_net_sndbuf-size'	=>	"", 
					'anvil_drbd_net_rcvbuf-size'	=>	"", 
					dns1				=>	"8.8.8.8",
					dns2				=>	"8.8.4.4",
					domain				=>	"",
					ifn_ethtool_opts		=>	"",
					ifn_gateway			=>	"",
					ifn_network			=>	"10.255.0.0",
					ifn_subnet			=>	"255.255.0.0",
					ifn_defroute			=>	"yes",
					'immediate-uptodate'		=>	0,
					library_size			=>	"40",
					library_unit			=>	"GiB",
					mtu_size			=>	1500,
					name				=>	"",
					node1_bcn_ip			=>	"",
					node1_ifn_ip			=>	"",
					node1_ipmi_ip			=>	"",
					node1_name			=>	"",
					node1_sn_ip			=>	"",
					node2_bcn_ip			=>	"",
					node2_ifn_ip			=>	"",
					node2_ipmi_ip			=>	"",
					node2_name			=>	"",
					node2_sn_ip			=>	"",
					node1_pdu1_outlet		=>	"",
					node1_pdu2_outlet		=>	"",
					node1_pdu3_outlet		=>	"",
					node1_pdu4_outlet		=>	"",
					node2_pdu1_outlet		=>	"",
					node2_pdu2_outlet		=>	"",
					node2_pdu3_outlet		=>	"",
					node2_pdu4_outlet		=>	"",
					ntp1				=>	"",
					ntp2				=>	"",
					open_vnc_ports			=>	100,
					password			=>	"Initial1",
					pdu1_name			=>	"",
					pdu1_ip				=>	"",
					pdu1_agent			=>	"",
					pdu2_name			=>	"",
					pdu2_ip				=>	"",
					pdu2_agent			=>	"",
					pdu3_name			=>	"",
					pdu3_ip				=>	"",
					pdu3_agent			=>	"",
					pdu4_name			=>	"",
					pdu4_ip				=>	"",
					pdu4_agent			=>	"",
					pool1_size			=>	"100",
					pool1_unit			=>	"%",
					prefix				=>	"",
					pts1_ip				=>	"",
					pts1_name			=>	"",
					pts2_ip				=>	"",
					pts2_name			=>	"",
					repositories			=>	"",
					sequence			=>	"01",
					ssh_keysize			=>	8191,
					sn_ethtool_opts			=>	"",
					sn_network			=>	"10.10.0.0",
					sn_subnet			=>	"255.255.0.0",
					sn_defroute			=>	"no",
					striker_database		=>	"scancore",
					striker_user			=>	"striker",
					striker1_bcn_ip			=>	"",
					striker1_ifn_ip			=>	"",
					striker1_name			=>	"",
					striker1_user			=>	"",	# Defaults to 'striker_user' if not set
					striker2_bcn_ip			=>	"",
					striker2_ifn_ip			=>	"",
					striker2_name			=>	"",
					striker2_user			=>	"",	# Defaults to 'striker_user' if not set
					switch1_ip			=>	"",
					switch1_name			=>	"",
					switch2_ip			=>	"",
					switch2_name			=>	"",
					ups1_ip				=>	"",
					ups1_name			=>	"",
					ups2_ip				=>	"",
					ups2_name			=>	"",
					'use_anvil-kick-apc-ups'	=>	0,
					'use_anvil-safe-start'		=>	1,
					use_scancore			=>	0,
				},
				# If the user wants to build install manifests for environments with 4 PDUs,
				# this will be set to '4'.
				pdu_count		=>	2,
				# This sets the default fence agent to use for the PDUs.
				pdu_fence_agent		=>	"fence_apc_snmp",
				# These variables control whether certain fields are displayed or not when 
				# generating Install Manifests. If you set any of these to '0', please be 
				# sure to have an appropriate default set above.
				show			=>	{
					### Primary
					prefix_field		=>	1,
					sequence_field		=>	1,
					domain_field		=>	1,
					password_field		=>	1,
					bcn_network_fields	=>	1,
					sn_network_fields	=>	1,
					ifn_network_fields	=>	1,
					library_fields		=>	1,
					pool1_fields		=>	1,
					repository_field	=>	1,
					
					### Shared
					name_field		=>	1,
					dns_fields		=>	1,
					ntp_fields		=>	1,
					
					### Foundation pack
					switch_fields		=>	1,
					ups_fields		=>	1,
					pdu_fields		=>	1,
					pts_fields		=>	1,
					dashboard_fields	=>	1,
					
					### Nodes
					nodes_name_field	=>	1,
					nodes_bcn_field		=>	1,
					nodes_ipmi_field	=>	1,
					nodes_sn_field		=>	1,
					nodes_ifn_field		=>	1,
					nodes_pdu_fields	=>	1,
					
					# Control tests/output shown when the install runs. Mainly useful 
					# when a site will never have Internet access.
					internet_check		=>	1,
					rhn_checks		=>	1,
				},
				# This sets anvil-kick-apc-ups to start on boot
				'use_anvil-kick-apc-ups' =>	0,
				# This controls whether anvil-safe-start is enabled or not.
				'use_anvil-safe-start'	=>	1,
				# This controls whether ScanCore will run on boot or not.
				use_scancore		=>	1,
			},
			language		=>	"en_CA",
			'log'			=>	{
				log_pid			=>	0,
			},
			log_language		=>	"en_CA",
			log_level		=>	2,
			logrotate	=>	{
				'striker.log'	=>	{
					count		=>	5,		# Backups made before deletion.
					frequency	=>	"weekly",	# daily, weekly, monthly, yearly
					maxsize		=>	"100M",		# Rotates if bigger than this, regardless of frequency
				},
				'ScanCore.log'	=>	{
					count		=>	5,		# Backups made before deletion.
					frequency	=>	"weekly",	# daily, weekly, monthly, yearly
					maxsize		=>	"100M",		# Rotates if bigger than this, regardless of frequency
				}
			},
			lvm_conf		=>	"",
			lvm_filter		=>	"filter = [ \"a|/dev/drbd*|\", \"r/.*/\" ]",
			# This allows for custom MTU sizes in an Install Manifest
			mtu_size		=>	1500,
			# This tells the install manifest generator how many ports to open on the IFN for 
			# incoming VNC connections
			node_names		=>	[],
			online_nodes		=>	0,
			os_variant		=>	[
				"win7#!#Microsoft Windows 7",
				"win7#!#Microsoft Windows 8",
				"vista#!#Microsoft Windows Vista",
				"winxp64#!#Microsoft Windows XP (x86_64)",
				"winxp#!#Microsoft Windows XP",
				"win2k#!#Microsoft Windows 2000",
				"win2k8#!#Microsoft Windows Server 2008 (R2)",
				"win2k8#!#Microsoft Windows Server 2012 (R2)",
				"win2k3#!#Microsoft Windows Server 2003",
				"openbsd4#!#OpenBSD 4.x",
				"freebsd8#!#FreeBSD 8.x",
				"freebsd7#!#FreeBSD 7.x",
				"freebsd6#!#FreeBSD 6.x",
				"solaris9#!#Sun Solaris 9",
				"solaris10#!#Sun Solaris 10",
				"opensolaris#!#Sun OpenSolaris",
				"netware6#!#Novell Netware 6",
				"netware5#!#Novell Netware 5",
				"netware4#!#Novell Netware 4",
				"msdos#!#MS-DOS",
				"generic#!#Generic",
				"debianjessie#!#Debian Jessie",
				"debianwheezy#!#Debian Wheezy",
				"debiansqueeze#!#Debian Squeeze",
				"debianlenny#!#Debian Lenny",
				"debianetch#!#Debian Etch",
				"fedora18#!#Fedora 23",
				"fedora18#!#Fedora 22",
				"fedora18#!#Fedora 21",
				"fedora18#!#Fedora 20",
				"fedora18#!#Fedora 19",
				"fedora18#!#Fedora 18",
				"fedora17#!#Fedora 17",
				"fedora16#!#Fedora 16",
				"fedora15#!#Fedora 15",
				"fedora14#!#Fedora 14",
				"fedora13#!#Fedora 13",
				"fedora12#!#Fedora 12",
				"fedora11#!#Fedora 11",
				"fedora10#!#Fedora 10",
				"fedora9#!#Fedora 9",
				"fedora8#!#Fedora 8",
				"fedora7#!#Fedora 7",
				"fedora6#!#Fedora Core 6",
				"fedora5#!#Fedora Core 5",
				"mageia1#!#Mageia 1 and later",
				"mes5.1#!#Mandriva Enterprise Server 5.1 and later",
				"mes5#!#Mandriva Enterprise Server 5.0",
				"mandriva2010#!#Mandriva Linux 2010 and later",
				"mandriva2009#!#Mandriva Linux 2009 and earlier",
				"rhel7#!#Red Hat Enterprise Linux 7",
				"rhel6#!#Red Hat Enterprise Linux 6",
				"rhel5.4#!#Red Hat Enterprise Linux 5.4 or later",
				"rhel5#!#Red Hat Enterprise Linux 5",
				"rhel4#!#Red Hat Enterprise Linux 4",
				"rhel3#!#Red Hat Enterprise Linux 3",
				"rhel2.1#!#Red Hat Enterprise Linux 2.1",
				"sles11#!#Suse Linux Enterprise Server 11",
				"sles10#!#Suse Linux Enterprise Server",
				"opensuse12#!#openSuse 12",
				"opensuse11#!#openSuse 11",
				"ubuntuquantal#!#Ubuntu 12.10 (Quantal Quetzal)",
				"ubuntuprecise#!#Ubuntu 12.04 LTS (Precise Pangolin)",
				"ubuntuoneiric#!#Ubuntu 11.10 (Oneiric Ocelot)",
				"ubuntunatty#!#Ubuntu 11.04 (Natty Narwhal)",
				"ubuntumaverick#!#Ubuntu 10.10 (Maverick Meerkat)",
				"ubuntulucid#!#Ubuntu 10.04 LTS (Lucid Lynx)",
				"ubuntukarmic#!#Ubuntu 9.10 (Karmic Koala)",
				"ubuntujaunty#!#Ubuntu 9.04 (Jaunty Jackalope)",
				"ubuntuintrepid#!#Ubuntu 8.10 (Intrepid Ibex)",
				"ubuntuhardy#!#Ubuntu 8.04 LTS (Hardy Heron)",
				"virtio26#!#Generic 2.6.25 or later kernel with virtio",
				"generic26#!#Generic 2.6.x kernel",
				"generic24#!#Generic 2.4.x kernel",
			],
			output			=>	"web",
			pool1_shrunk		=>	0,
			# When shutting down the nodes prior to power-cycling or powering off the entire
			# rack, instead of the nodes being marked 'clean' off (which would leave them off
			# until a human turned them on), the 'host_stop_reason' is set to unix-time + this
			# number of seconds. When the dashboard sees this time set, it will not boot the
			# nodes until time > host_stop_reason. This way, the nodes will not be powered on
			# before the UPS shuts off.
			# NOTE: Be sure that this time is greater than the UPS shutdown delay!
			power_off_delay		=>	300,
			reboot_timeout		=>	600,
			root_password		=>	"",
			# Set this to an integer to have the main Striker page and the hardware status pages 
			# automatically reload.
			reload_page_timer	=>	0,
			# These options allow customization of newly provisioned servers.
			### If you change these, change the matching values in striker-installer so that it 
			### stays in sync.
			scancore_database	=>	"scancore",
			striker_user		=>	"admin",
			server			=>	{
				nic_count		=>	1,
				alternate_nic_model	=>	"e1000",
				minimum_ram		=>	67108864,
				bcn_nic_driver		=>	"",
				sn_nic_driver		=>	"",
				ifn_nic_driver		=>	"",
			},
			shared_fs_uuid		=>	"",
			show_nodes		=>	0,
			show_refresh		=>	1,
			skin			=>	"alteeve",
			striker_uid		=>	$<,
			system_timezone		=>	"America/Toronto",
			time_seperator		=>	":",
			# ~3 GiB, but in practice more because it will round down the available RAM before 
			# subtracting this to leave the user with an even number of GiB of RAM to allocate to
			# servers.
			unusable_ram		=>	(3 * (1024 ** 3)),
			up_nodes		=>	0,
			update_os		=>	1,
			use_24h			=>	1,			# Set to 0 for am/pm time, 1 for 24h time
			username		=>	getpwuid( $< ),
			# If a user wants to use spice + qxl for video in VMs, set this to '1'. NOTE: This 
			# disables web-based VNC!
# 			use_spice_graphics	=>	1,
			version			=>	"2.0.0a",
			# Adds: [--disablerepo='*' --enablerepo='striker*'] if
			# no internet connection found.
			yum_switches		=>	"-y",		
		},
		# Tools default valies
		tools				=>	{
			'anvil-kick-apc-ups'	=>	{
				enabled			=>	0,
			},
			'anvil-safe-start'	=>	{
				enabled			=>	0,
			},
			'striker-push-ssh'	=>	{
				enabled			=>	0,
			},
			disaster_recovery	=>	{
				cache_signature		=>	".dr_cache",
			},
		},
		# Config values needed to managing strings
		strings				=>	{
			encoding			=>	"",
			force_utf8			=>	1,
			xml_version			=>	"",
		},
		# The actual strings
		string				=>	{},
		url				=>	{
			skins				=>	"/skins",
			cgi				=>	"/cgi-bin",
		},
	}});
	
	return($an);
}
