#!/usr/bin/perl
#
# This is the section that handles configuring, backing up and restoring Striker and managed Anvil! systems.
# 
# This software is released under the GNU GPL v2+ license.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		'log'		=>	{
			file		=>	"/var/log/striker.log", 
			language	=>	"en_CA",
			level		=>	2,
		},
		path		=>	{
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		sys		=>	{
			error_limit		=>	1000,
			language		=>	"en_CA",
			skin			=>	"alteeve",
			version			=>	"2.0b",
		},
		url		=>	{
			skins			=>	"/skins",
			cgi			=>	"/cgi-bin",
		},
	},
});

# Initialize.
print "Content-type: text/html; charset=utf-8\n\n";
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{'log'}{language});
$an->default_log_file    ($an->data->{'log'}{file});
$an->Log->level          ($an->data->{'log'}{level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->String->read_words  ({file => $an->data->{path}{striker_strings}});
$an->Get->switches();
$an->Get->cgi({variables => [
	"anvil", 
	"task", 
]});

# Connect to the databases.
$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
	file  => $THIS_FILE,
	quiet => 1, 
});

if (not $an->data->{cgi}{task})
{
	# Show the main menu
	show_main_menu($an);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This shows the main Striker configuration menu
sub show_main_menu
{
	my ($an) = @_;
	
	# Put together the frame of the page.
	my $back_image = $an->Get->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	my $refresh_image = $an->Get->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $header = $an->Get->template({file => "configure.html", template => "configure-header", replace => {
			back		=>	$back_image,
			refresh		=>	$refresh_image,
		}});
	my $footer = $an->Get->template({file => "configure.html", template => "configure-footer"});
	
	### Build the list of menu items.
	my $menu_items = "";
	
	# Anvil! systems
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=anvil\" alt=\"#!string!button_0069!#\" id=\"task_anvil\">#!string!button_0069!#</a>",
			description	=>	"#!string!explain_0005!#",
			url		=>	"",
		}})."\n";
	# Owner 
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=owner\" alt=\"#!string!button_0070!#\" id=\"task_owner\">#!string!button_0070!#</a>",
			description	=>	"#!string!explain_0013!#",
			url		=>	"",
		}})."\n";
	# SMTP 
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=smtp\" alt=\"#!string!button_0071!#\" id=\"task_smtp\">#!string!button_0071!#</a>",
			description	=>	"#!string!explain_0023!#",
			url		=>	"",
		}})."\n";
	# Alert Recipient
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=email_alerts\" alt=\"#!string!button_0072!#\" id=\"task_email_alerts\">#!string!button_0072!#</a>",
			description	=>	"#!string!explain_0105!#",
			url		=>	"",
		}})."\n";
	# Alert Files
	#my $subtle_text =  $an->Get->template({file => "common.html", template => "subtle_text", replace => { string => "#!string!explain_0167!#" }});
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=file_alerts\" alt=\"#!string!button_0073!#\" id=\"task_file_alerts\">#!string!button_0073!#</a>",
			description	=>	"#!string!explain_0166!#<br />#!string!explain_0167!#",
			url		=>	"",
		}})."\n";
		
	# Add a divider before the next section
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-spacer"});
	
	# Install Manifests
	$menu_items .= $an->Get->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	"<a href=\"?task=manifests\" alt=\"#!string!button_0060!#\" id=\"task_manifests\">#!string!button_0060!#</a>",
			description	=>	"#!string!explain_0168!#",
			url		=>	"",
		}})."\n";
	
	# For the Enable/Disable install target, I need to know the current state.
	
	
	# Build the body of the menu.	
	my $menu = $an->Get->template({file => "configure.html", template => "configure-menu", replace => { options => $menu_items }});
	
	print $an->Get->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}
