#!/usr/bin/perl
#
# This is the section that handles configuring, backing up and restoring Striker and managed Anvil! systems.
# 
# This software is released under the GNU GPL v2+ license.
# 

use strict;
use warnings;
use IO::Handle;
use AN::Tools;

# Turn off buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => {
		'log'		=>	{
			file		=>	"/var/log/striker.log", 
			language	=>	"en_CA",
			level		=>	2,
		},
		path		=>	{
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		sys		=>	{
			error_limit		=>	1000,
			language		=>	"en_CA",
			skin			=>	"alteeve",
			version			=>	"2.0b",
		},
		url		=>	{
			skins			=>	"/skins",
			cgi			=>	"/cgi-bin",
		},
	},
});

# Initialize.
print "Content-type: text/html; charset=utf-8\n\n";
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{'log'}{language});
$an->default_log_file    ($an->data->{'log'}{file});
$an->Log->level          ($an->data->{'log'}{level});
$an->Storage->read_conf  ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words ({file => $an->data->{path}{striker_strings}});

### TODO: Move this list into AN::Tools.pm, same way we preset paths.
### TODO: Add all ScanCore column names as variables to check for automatically?
$an->Web->get_cgi({variables => [
	"notify_address",
	"notify_language",
	"notify_level",
	"notify_name",
	"notify_note",
	"notify_target",  
	"notify_units", 
	"notify_uuid",
	"anvil", 
	"anvil_description", 
	"anvil_name", 
	"anvil_note", 
	"anvil_owner_uuid", 
	"anvil_password", 
	"anvil_smtp_uuid", 
	"anvil_uuid", 
	"confirm", 
	"delete", 
	"load_anvil", 
	"load_notify", 
	"load_owner", 
	"load_smtp", 
	"node1_access", 
	"node1_bcn", 
	"node1_host_name", 
	"node1_host_uuid", 
	"node1_ifn", 
	"node1_note", 
	"node1_password", 
	"node1_sn", 
	"node1_remote_ip", 
	"node1_remote_port", 
	"node1_uuid", 
	"node2_access", 
	"node2_bcn", 
	"node2_host_name", 
	"node2_host_uuid", 
	"node2_ifn", 
	"node2_note", 
	"node2_password", 
	"node2_sn", 
	"node2_remote_ip", 
	"node2_remote_port", 
	"node2_uuid", 
	"recipient_uuid",
	"recipient_anvil_uuid", 
	"recipient_notify_uuid", 
	"recipient_log_level", 
	"recipient_note", 
	"owner_name", 
	"owner_note", 
	"owner_uuid", 
	"save", 
	"smtp_authentication", 
	"smtp_helo_domain", 
	"smtp_note", 
	"smtp_password", 
	"smtp_port", 
	"smtp_security", 
	"smtp_server", 
	"smtp_username",
	"smtp_uuid", 
	"subtask", 
	"task", 
]});

# Connect to the databases.
$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
	file  => $THIS_FILE,
	quiet => 1, 
});
if (not $an->data->{sys}{db_connections})
{
	$an->Web->no_db_access();
	exit(1);
}

$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
	name1 => "cgi::task",    value1 => $an->data->{cgi}{task}, 
	name2 => "cgi::subtask", value2 => $an->data->{cgi}{subtask}, 
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{task})
{
	process_task($an);
}
else
{
	# Show the main menu
	show_main_menu($an);
}

exit(0);

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This figures out what task the user is asking to perform and loads the appropriate page.
sub process_task
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "process_task" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	if ($an->data->{cgi}{task} eq "anvil")
	{
		anvil_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "owner")
	{
		owner_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "smtp")
	{
		smtp_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "notify")
	{
		notify_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "manifests")
	{
		
	}
	elsif ($an->data->{cgi}{task} eq "backup")
	{
	}
	elsif ($an->data->{cgi}{task} eq "install_target")
	{
		# This task doesn't have a menu, it only uses notices at the top of the page, so it will be 
		# dealt with in the main menu.
		show_main_menu($an);
	}
	elsif ($an->data->{cgi}{task} eq "scancore_db")
	{
		
	}
	else
	{
		# Catch all/error
	}
	
	return(0);
}

# This uses a notify_uuid to load information about the associated notification target.
sub load_notify_form
{
	my ($an, $notifications, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_notify_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$notifications})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->notify_uuid", value1 => $hash_ref->{notify_uuid},
				name2 => "uuid",                  value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{notify_uuid} eq $uuid)
			{
				$an->data->{cgi}{notify_uuid}     = $hash_ref->{notify_uuid};
				$an->data->{cgi}{notify_name}     = $hash_ref->{notify_name};
				$an->data->{cgi}{notify_target}   = $hash_ref->{notify_target};
				$an->data->{cgi}{notify_language} = $hash_ref->{notify_language};
				$an->data->{cgi}{notify_level}    = $hash_ref->{notify_level};
				$an->data->{cgi}{notify_units}    = $hash_ref->{notify_units};
				$an->data->{cgi}{notify_note}     = $hash_ref->{notify_note};
				last;
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{notify_uuid}     = "";
		$an->data->{cgi}{notify_name}     = "";
		$an->data->{cgi}{notify_target}   = "";
		$an->data->{cgi}{notify_language} = "";
		$an->data->{cgi}{notify_level}    = "";
		$an->data->{cgi}{notify_units}    = "";
		$an->data->{cgi}{notify_note}     = "";
	}
	
	return(0);
}

# This uses an owner_uuid to load information about the associated Owner.
sub load_owner_form
{
	my ($an, $owners, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_owner_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$owners})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->owner_uuid",  value1 => $hash_ref->{owner_uuid},
				name2 => "uuid",                  value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{owner_uuid} eq $uuid)
			{
				$an->data->{cgi}{owner_uuid} = $hash_ref->{owner_uuid};
				$an->data->{cgi}{owner_name} = $hash_ref->{owner_name};
				$an->data->{cgi}{owner_note} = $hash_ref->{owner_note};
				last;
			}
		}
	}
	else
	{
		# Blank the values
		$an->data->{cgi}{owner_uuid} = "";
		$an->data->{cgi}{owner_name} = "";
		$an->data->{cgi}{owner_note} = "";
	}
	
	return(0);
}

# This uses an smtp_uuid to load information about the associated SMTP server.
sub load_smtp_form
{
	my ($an, $smtp, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_smtp_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid,  
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$smtp})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->smtp_uuid",  value1 => $hash_ref->{smtp_uuid},
				name2 => "uuid",                 value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{smtp_uuid} eq $uuid)
			{
				$an->data->{cgi}{smtp_uuid}           = $hash_ref->{smtp_uuid};
				$an->data->{cgi}{smtp_authentication} = $hash_ref->{smtp_authentication};
				$an->data->{cgi}{smtp_helo_domain}    = $hash_ref->{smtp_helo_domain};
				$an->data->{cgi}{smtp_password}       = $hash_ref->{smtp_password};
				$an->data->{cgi}{smtp_port}           = $hash_ref->{smtp_port};
				$an->data->{cgi}{smtp_security}       = $hash_ref->{smtp_security};
				$an->data->{cgi}{smtp_server}         = $hash_ref->{smtp_server};
				$an->data->{cgi}{smtp_username}       = $hash_ref->{smtp_username};
				$an->data->{cgi}{smtp_note}           = $hash_ref->{smtp_note};
				last;
			}
		}
	}
	else
	{
		# Blank the fields.
		$an->data->{cgi}{smtp_uuid}           = "";
		$an->data->{cgi}{smtp_authentication} = "";
		$an->data->{cgi}{smtp_helo_domain}    = "";
		$an->data->{cgi}{smtp_password}       = "";
		$an->data->{cgi}{smtp_port}           = "";
		$an->data->{cgi}{smtp_security}       = "";
		$an->data->{cgi}{smtp_server}         = "";
		$an->data->{cgi}{smtp_username}       = "";
		$an->data->{cgi}{smtp_note}           = "";
	}
	
	return(0);
}

# This uses the passed-in UUID to find a node and load it into either the node1 or node2 (based on the host 
# name) CGI variables.
sub load_node_form
{
	my ($an, $nodes, $uuid) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_node_form" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "uuid", value1 => $uuid, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($uuid)
	{
		foreach my $hash_ref (@{$nodes})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->node_anvil_uuid", value1 => $hash_ref->{node_anvil_uuid},
				name2 => "uuid",                      value2 => $uuid,
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{node_anvil_uuid} eq $uuid)
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "hash_ref->host_name", value1 => $hash_ref->{host_name},
				}, file => $THIS_FILE, line => __LINE__});
				if (($hash_ref->{host_name} =~ /n01/) or ($hash_ref->{host_name} =~ /n1/))
				{
					$an->data->{cgi}{node1_anvil_uuid}  = $hash_ref->{node_anvil_uuid}; 
					$an->data->{cgi}{node1_host_uuid}   = $hash_ref->{node_host_uuid}; 
					$an->data->{cgi}{node1_note}        = $hash_ref->{node_note}; 
					$an->data->{cgi}{node1_remote_ip}   = $hash_ref->{node_remote_ip}; 
					$an->data->{cgi}{node1_remote_port} = $hash_ref->{node_remote_port}; 
					$an->data->{cgi}{node1_uuid}        = $hash_ref->{node_uuid}; 
					$an->data->{cgi}{node1_bcn}         = $hash_ref->{node_bcn};
					$an->data->{cgi}{node1_sn}          = $hash_ref->{node_sn};
					$an->data->{cgi}{node1_ifn}         = $hash_ref->{node_ifn};
					$an->data->{cgi}{node1_host_name}   = $hash_ref->{node_ifn};
					$an->data->{cgi}{node1_password}    = $hash_ref->{node_password}; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
						name1  => "cgi::node1_anvil_uuid",  value1  => $an->data->{cgi}{node1_anvil_uuid},
						name2  => "cgi::node1_host_uuid",   value2  => $an->data->{cgi}{node1_host_uuid},
						name3  => "cgi::node1_note",        value3  => $an->data->{cgi}{node1_note},
						name4  => "cgi::node1_remote_ip",   value4  => $an->data->{cgi}{node1_remote_ip},
						name5  => "cgi::node1_remote_port", value5  => $an->data->{cgi}{node1_remote_port},
						name6  => "cgi::node1_uuid",        value6  => $an->data->{cgi}{node1_uuid},
						name7  => "cgi::node1_bcn",         value7  => $an->data->{cgi}{node1_bcn},
						name8  => "cgi::node1_sn",          value8  => $an->data->{cgi}{node1_sn},
						name9  => "cgi::node1_ifn",         value9  => $an->data->{cgi}{node1_ifn},
						name10 => "cgi::node1_host_name",   value10 => $an->data->{cgi}{node1_host_name},
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
						name1 => "cgi::node1_password", value1 => $an->data->{cgi}{node1_password},
					}, file => $THIS_FILE, line => __LINE__});
					
					# The access is a little trickier... We'll use the remote IP and port, if 
					# set. Otherwise we'll use the BCN IP. If the port is 22, it will be left 
					# off.
					if ($an->data->{cgi}{node1_remote_ip})
					{
						$an->data->{cgi}{node1_access} = $an->data->{cgi}{node1_remote_ip};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
						}, file => $THIS_FILE, line => __LINE__});
						if (($an->data->{cgi}{node1_remote_port}) && ($an->data->{cgi}{node1_remote_port} ne "22"))
						{
							$an->data->{cgi}{node1_access} .= ":".$an->data->{cgi}{node1_remote_port};
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
					else
					{
						$an->data->{cgi}{node1_access} = $an->data->{cgi}{node1_bcn};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node1_access", value1 => $an->data->{cgi}{node1_access},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				elsif (($hash_ref->{host_name} =~ /n02/) or ($hash_ref->{host_name} =~ /n2/))
				{
					$an->data->{cgi}{node2_anvil_uuid}  = $hash_ref->{node_anvil_uuid}; 
					$an->data->{cgi}{node2_host_uuid}   = $hash_ref->{node_host_uuid}; 
					$an->data->{cgi}{node2_note}        = $hash_ref->{node_note}; 
					$an->data->{cgi}{node2_password}    = $hash_ref->{node_password}; 
					$an->data->{cgi}{node2_remote_ip}   = $hash_ref->{node_remote_ip}; 
					$an->data->{cgi}{node2_remote_port} = $hash_ref->{node_remote_port}; 
					$an->data->{cgi}{node2_uuid}        = $hash_ref->{node_uuid}; 
					$an->data->{cgi}{node2_bcn}         = $hash_ref->{node_bcn};
					$an->data->{cgi}{node2_sn}          = $hash_ref->{node_sn};
					$an->data->{cgi}{node2_ifn}         = $hash_ref->{node_ifn};
					$an->data->{cgi}{node2_host_name}   = $hash_ref->{node_ifn};
					$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
						name1  => "cgi::node2_anvil_uuid",  value1  => $an->data->{cgi}{node2_anvil_uuid},
						name2  => "cgi::node2_host_uuid",   value2  => $an->data->{cgi}{node2_host_uuid},
						name3  => "cgi::node2_note",        value3  => $an->data->{cgi}{node2_note},
						name4  => "cgi::node2_remote_ip",   value4  => $an->data->{cgi}{node2_remote_ip},
						name5  => "cgi::node2_remote_port", value5  => $an->data->{cgi}{node2_remote_port},
						name6  => "cgi::node2_uuid",        value6  => $an->data->{cgi}{node2_uuid},
						name7  => "cgi::node2_bcn",         value7  => $an->data->{cgi}{node2_bcn},
						name8  => "cgi::node2_sn",          value8  => $an->data->{cgi}{node2_sn},
						name9  => "cgi::node2_ifn",         value9  => $an->data->{cgi}{node2_ifn},
						name10 => "cgi::node2_host_name",   value10 => $an->data->{cgi}{node2_host_name},
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
						name1 => "cgi::node2_password", value1 => $an->data->{cgi}{node2_password},
					}, file => $THIS_FILE, line => __LINE__});
					
					# The access is a little trickier... We'll use the remote IP and port, if 
					# set. Otherwise we'll use the BCN IP. If the port is 22, it will be left 
					# off.
					if ($an->data->{cgi}{node2_remote_ip})
					{
						$an->data->{cgi}{node2_access} = $an->data->{cgi}{node2_remote_ip};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
						}, file => $THIS_FILE, line => __LINE__});
						if (($an->data->{cgi}{node2_remote_port}) && ($an->data->{cgi}{node2_remote_port} ne "22"))
						{
							$an->data->{cgi}{node2_access} .= ":".$an->data->{cgi}{node2_remote_port};
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
					else
					{
						$an->data->{cgi}{node2_access} = $an->data->{cgi}{node2_bcn};
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "cgi::node2_access", value1 => $an->data->{cgi}{node2_access},
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
				else
				{
					# Illegally named node
				}
			}
		}
	}
	else
	{
		### No UUID, blank both nodes 
		# Node 1
		$an->data->{cgi}{node1_access}      = ""; 
		$an->data->{cgi}{node1_anvil_uuid}  = ""; 
		$an->data->{cgi}{node1_host_uuid}   = ""; 
		$an->data->{cgi}{node1_note}        = ""; 
		$an->data->{cgi}{node1_remote_ip}   = ""; 
		$an->data->{cgi}{node1_remote_port} = ""; 
		$an->data->{cgi}{node1_uuid}        = ""; 
		$an->data->{cgi}{node1_bcn}         = "";
		$an->data->{cgi}{node1_sn}          = "";
		$an->data->{cgi}{node1_ifn}         = "";
		$an->data->{cgi}{node1_host_name}   = "";
		$an->data->{cgi}{node1_password}    = ""; 
		# Node 2
		$an->data->{cgi}{node2_access}      = ""; 
		$an->data->{cgi}{node2_anvil_uuid}  = ""; 
		$an->data->{cgi}{node2_host_uuid}   = ""; 
		$an->data->{cgi}{node2_note}        = ""; 
		$an->data->{cgi}{node2_remote_ip}   = ""; 
		$an->data->{cgi}{node2_remote_port} = ""; 
		$an->data->{cgi}{node2_uuid}        = ""; 
		$an->data->{cgi}{node2_bcn}         = "";
		$an->data->{cgi}{node2_sn}          = "";
		$an->data->{cgi}{node2_ifn}         = "";
		$an->data->{cgi}{node2_host_name}   = "";
		$an->data->{cgi}{node2_password}    = ""; 
	}
	
	return(0);
}

# This uses an anvil_uuid to load information about the associated Anvil! system.
sub load_anvil_form
{
	my ($an, $anvils, $owners, $smtp, $nodes) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "load_anvil_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# First, find the Anvil!
	foreach my $hash_ref (@{$anvils})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "hash_ref->anvil_uuid", value1 => $hash_ref->{anvil_uuid},
			name2 => "cgi::anvil_uuid",      value2 => $an->data->{cgi}{anvil_uuid},
		}, file => $THIS_FILE, line => __LINE__});
		if ($hash_ref->{anvil_uuid} eq $an->data->{cgi}{anvil_uuid})
		{
			$an->data->{cgi}{anvil_owner_uuid}  = $hash_ref->{anvil_owner_uuid};
			$an->data->{cgi}{anvil_smtp_uuid}   = $hash_ref->{anvil_smtp_uuid};
			$an->data->{cgi}{anvil_name}        = $hash_ref->{anvil_name};
			$an->data->{cgi}{anvil_description} = $hash_ref->{anvil_description};
			$an->data->{cgi}{anvil_note}        = $hash_ref->{anvil_note};
			$an->data->{cgi}{anvil_password}    = $hash_ref->{anvil_password};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
				name1 => "cgi::anvil_owner_uuid",  value1 => $an->data->{cgi}{anvil_owner_uuid},
				name2 => "cgi::anvil_smtp_uuid",   value2 => $an->data->{cgi}{anvil_smtp_uuid},
				name3 => "cgi::anvil_name",        value3 => $an->data->{cgi}{anvil_name},
				name4 => "cgi::anvil_description", value4 => $an->data->{cgi}{anvil_description},
				name5 => "cgi::anvil_note",        value5 => $an->data->{cgi}{anvil_note},
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 4, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::anvil_password", value1 => $an->data->{cgi}{anvil_password},
			}, file => $THIS_FILE, line => __LINE__});
			last;
		}
	}
	
	# Tease out the details
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::anvil_owner_uuid", value1 => $an->data->{cgi}{anvil_owner_uuid},
		name1 => "cgi::anvil_smtp_uuid", value1 => $an->data->{cgi}{anvil_smtp_uuid},
			name2 => "cgi::anvil_uuid",           value2 => $an->data->{cgi}{anvil_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	load_owner_form($an, $owners, $an->data->{cgi}{anvil_owner_uuid});
	load_smtp_form($an,  $smtp,   $an->data->{cgi}{anvil_smtp_uuid});
	load_node_form($an,  $nodes,  $an->data->{cgi}{anvil_uuid});
	
	return(0);
}

# This saves the changes to an SMTP server.
sub save_smtp_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an smtp server?
	if (not $an->data->{cgi}{smtp_server})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0250!#" }});
		push @{$error_fields}, "smtp_server";
	}
	
	# Save the form (either INSERT or UPDATE if something has changed.
	$an->data->{cgi}{smtp_uuid} = save_smtp($an);
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::smtp_uuid", value1 => $an->data->{cgi}{smtp_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Process errors now, if any.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! notify.
sub save_notify_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_notify_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an notify?
	if (not $an->data->{cgi}{notify_target})
	{
		my $notice = $an->String->get({key => "message_0360", variables => { field => "#!string!row_0308!#" }});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice", value1 => $notice,
		}, file => $THIS_FILE, line => __LINE__});
		
		push @{$notices},      $notice;
		push @{$error_fields}, "notify_target";
	}
	
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Save the form (either INSERT or UPDATE if something has changed.
	if (not $error_count)
	{
		$an->data->{cgi}{notify_uuid} = save_notify($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::notify_uuid", value1 => $an->data->{cgi}{notify_uuid},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! owner.
sub save_owner_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_owner_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Do I have an owner?
	if (not $an->data->{cgi}{owner_name})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0023!#" }});
		push @{$error_fields}, "owner_name";
	}
	
	# Save the form (either INSERT or UPDATE if something has changed.
	$an->data->{cgi}{owner_uuid} = save_owner($an);
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Process errors now, if any.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This saves the changes to an Anvil! using the minimal of user input. As much data as possible will be 
# collected from the nodes directly.
sub save_anvil_form
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_anvil_form" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### Some sanity checks before we begin.
	my $notices        = [];
	my $error_fields   = [];
	my $notice_message = "";
	
	# Sort out the node access
	my $node1_data    = "";
	my $node2_data    = "";
	my $node1_address = $an->data->{cgi}{node1_access};
	my $node1_port    = 22;
	my $node2_address = $an->data->{cgi}{node2_access};
	my $node2_port    = 22;
	$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
		name1 => "node1_address", value1 => $node1_address,
		name2 => "node1_port",    value2 => $node1_port,
		name3 => "node2_address", value3 => $node2_address,
		name4 => "node2_port",    value4 => $node2_port,
	}, file => $THIS_FILE, line => __LINE__});
	if (not $an->data->{cgi}{node1_access})
	{
		my $row = $an->String->get({key => "row_0248", variables => { node => 1 }});
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => $row }});
		push @{$error_fields}, "node1_access";
	}
	elsif ($an->data->{cgi}{node1_access} =~ /(.*):(\d+)/)
	{
		$node1_address = $1;
		$node1_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_address", value1 => $node1_address,
			name2 => "node1_port",    value2 => $node1_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (not $an->data->{cgi}{node2_access})
	{
		# Sorry, this is messy... the 'field' variable is 'Node X'.
		my $row = $an->String->get({key => "row_0248", variables => { node => 2 }});
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => $row }});
		push @{$error_fields}, "node2_access";
	}
	elsif ($an->data->{cgi}{node2_access} =~ /(.*):(\d+)/)
	{
		$node2_address = $1;
		$node2_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node2_address", value1 => $node2_address,
			name2 => "node2_port",    value2 => $node2_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Do I have an owner?
	if (not $an->data->{cgi}{owner_name})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0023!#" }});
		push @{$error_fields}, "owner_name";
	}
	
	# What about a password?
	if (not $an->data->{cgi}{anvil_password})
	{
		push @{$notices},      $an->String->get({key => "message_0360", variables => { field => "#!string!row_0025!#" }});
		push @{$error_fields}, "anvil_password";
	}
	
	# The SMTP password can only be blank is the password security is 'none'.
	if ((not $an->data->{cgi}{smtp_password}) && ($an->data->{cgi}{smtp_authentication} ne "none"))
	{
		push @{$notices},      $an->String->get({key => "message_0361"});
		push @{$error_fields}, "smtp_password";
	}
	
	# If there were errors, display them and return.
	my $error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notice,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Try connecting to the nodes, if we're good so far.
	if ($error_count < 1)
	{
		# Proceed with attempt to log into the nodes.
		my $node1_access = $an->Check->access({
			target		=>	$node1_address,
			port		=>	$node1_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		my $node2_access = $an->Check->access({
			target		=>	$node2_address,
			port		=>	$node2_port,
			password	=>	$an->data->{cgi}{anvil_password},
		});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_access", value1 => $node1_access,
			name2 => "node2_access", value2 => $node2_access,
		}, file => $THIS_FILE, line => __LINE__});
		if (not $node1_access)
		{
			push @{$notices},      $an->String->get({key => "message_0371", variables => { node => 1 } });
			push @{$error_fields}, "node1_access";
		}
		if (not $node2_access)
		{
			push @{$notices},      $an->String->get({key => "message_0371", variables => { node => 2 } });
			push @{$error_fields}, "node2_access";
		}
		
		# Gather data from the nodes, if we're still good.
		if (($node1_access) && ($node2_access))
		{
			$node1_data = $an->Get->target_details({
					target		=>	$node1_address,
					port		=>	$node1_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
			$node2_data = $an->Get->target_details({
					target		=>	$node2_address,
					port		=>	$node2_port,
					password	=>	$an->data->{cgi}{anvil_password},
				});
			if (not $an->data->{cgi}{anvil_name})
			{
				$an->data->{cgi}{anvil_name} = $node1_data->{anvil_name} ? $node1_data->{anvil_name} : $node1_data->{anvi2_name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::anvil_name", value1 => $an->data->{cgi}{anvil_name},
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Update the error count.
	$error_count = @{$error_fields};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "error_count", value1 => $error_count,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Now save, if we're still good, try and save.
	if ($error_count < 1)
	{
		### Gather up the records
		# SMTP first
		$an->data->{cgi}{smtp_uuid} = save_smtp($an);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "cgi::smtp_uuid", value1 => $an->data->{cgi}{smtp_uuid},
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($an->data->{cgi}{smtp_uuid})
		{
			$an->data->{cgi}{owner_uuid} = save_owner($an);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($an->data->{cgi}{owner_uuid})
			{
				$an->data->{cgi}{anvil_uuid} = save_anvil($an);
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "cgi::anvil_uuid", value1 => $an->data->{cgi}{anvil_uuid},
				}, file => $THIS_FILE, line => __LINE__});
				
				if ($an->data->{cgi}{anvil_uuid})
				{
					# Save both nods
					($an->data->{cgi}{node1_uuid}, $an->data->{cgi}{node2_uuid}) = save_nodes($an, $node1_data, $node2_data);
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "cgi::node1_uuid", value1 => $an->data->{cgi}{node1_uuid},
						name2 => "cgi::node2_uuid", value2 => $an->data->{cgi}{node2_uuid},
					}, file => $THIS_FILE, line => __LINE__});
				}
				else
				{
					# no anvil_uuid
				}
			}
			else
			{
				# no owner_uuid
			}
		}
		else
		{
			# no smtp_uuid
		}
	}
	
	# Process errors now, if any.
	if ($error_count > 0)
	{
		# Print the error header.
		my $error_body = "";
		foreach my $notice (@{$notices})
		{
			$error_body .= $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0305!#",
					body_class	=>	"",
					body_message	=>	$notices,
				}});
		}
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0194!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "notice_message", value1 => $notice_message,
	}, file => $THIS_FILE, line => __LINE__});
	return($notice_message, $error_fields);
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_nodes() for each node.
sub save_nodes
{
	my ($an, $node1_data, $node2_data) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_nodes" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If either UUID is missing, error.
	if (not $node1_data->{uuid})
	{
		# TODO...
		die;
	}
	if (not $node2_data->{uuid})
	{
		# TODO...
		die;
	}
	
	# If the access info matches one of the BCN/IFN/SN IPs, we'll not set remote to the current access. 
	# If there is a CGI variable for either though, we'll use that.
	my $node1_address = $an->data->{cgi}{node1_access};
	my $node1_port    = 22;
	if ($an->data->{cgi}{node1_access} =~ /(.*):(\d+)/)
	{
		$node1_address = $1;
		$node1_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node1_address", value1 => $node1_address,
			name2 => "node1_port",    value2 => $node1_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (($node1_address eq $node1_data->{network}{bcn_address}) or 
	    ($node1_address eq $node1_data->{network}{ifn_address}) or 
	    ($node1_address eq $node1_data->{network}{sn_address}))
	{
		$node1_address = "";
		$node1_port    = "";
	}
	
	my $node2_address = $an->data->{cgi}{node2_access};
	my $node2_port    = 22;
	if ($an->data->{cgi}{node2_access} =~ /(.*):(\d+)/)
	{
		$node2_address = $1;
		$node2_port    = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "node2_address", value1 => $node2_address,
			name2 => "node2_port",    value2 => $node2_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (($node2_address eq $node2_data->{network}{bcn_address}) or 
	    ($node2_address eq $node2_data->{network}{ifn_address}) or 
	    ($node2_address eq $node2_data->{network}{sn_address}))
	{
		$node2_address = "";
		$node2_port    = "";
	}
	
	### NOTE: Don't confuse the 'nodeX_uuid' DB record locator with the node's host UUID. The node's UUID
	###       and the BCN, SN and IFN IPs are never passed from CGI, they're always pulled from the node.
	my $node1_uuid = $an->ScanCore->insert_or_update_nodes({
		node_uuid	=>	$an->data->{cgi}{node1_uuid}, 
		node_anvil_uuid	=>	$an->data->{cgi}{anvil_uuid}, 
		node_host_uuid	=>	$node1_data->{uuid}, 
		node_remote_ip	=>	$an->data->{cgi}{node1_remote_ip}   ? $an->data->{cgi}{node1_remote_ip}   : $node1_address, 
		node_remote_port =>	$an->data->{cgi}{node1_remote_port} ? $an->data->{cgi}{node1_remote_port} : $node1_port, 
		node_note	=>	$an->data->{cgi}{node1_note}, 
		node_bcn	=>	$node1_data->{network}{bcn_address}, 
		node_sn		=>	$node1_data->{network}{sn_address}, 
		node_ifn	=>	$node1_data->{network}{ifn_address}, 
		node_password	=>	$an->data->{cgi}{node1_password} ? $an->data->{cgi}{node1_password} : $an->data->{cgi}{anvil_password},
	});
	my $node2_uuid = $an->ScanCore->insert_or_update_nodes({
		node_uuid	=>	$an->data->{cgi}{node2_uuid}, 
		node_anvil_uuid	=>	$an->data->{cgi}{anvil_uuid}, 
		node_host_uuid	=>	$node2_data->{uuid}, 
		node_remote_ip	=>	$an->data->{cgi}{node2_remote_ip}   ? $an->data->{cgi}{node2_remote_ip}   : $node2_address, 
		node_remote_port =>	$an->data->{cgi}{node2_remote_port} ? $an->data->{cgi}{node2_remote_port} : $node2_port, 
		node_note	=>	$an->data->{cgi}{node2_note}, 
		node_bcn	=>	$node2_data->{network}{bcn_address}, 
		node_sn		=>	$node2_data->{network}{sn_address}, 
		node_ifn	=>	$node2_data->{network}{ifn_address}, 
		node_password	=>	$an->data->{cgi}{node2_password} ? $an->data->{cgi}{node2_password} : $an->data->{cgi}{anvil_password},
	});
	
	return($node1_uuid, $node2_uuid);
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_anvil();
sub save_anvil
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_anvil" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# As of now, I set the owner and smtp UUID from CGI... This might be a bad idea.
	my $anvil_uuid        = $an->data->{cgi}{anvil_uuid};
	my $anvil_owner_uuid  = $an->data->{cgi}{anvil_owner_uuid} ? $an->data->{cgi}{anvil_owner_uuid} : $an->data->{cgi}{owner_uuid};
	my $anvil_smtp_uuid   = $an->data->{cgi}{anvil_smtp_uuid}  ? $an->data->{cgi}{anvil_smtp_uuid}  : $an->data->{cgi}{smtp_uuid};
	my $anvil_name        = $an->data->{cgi}{anvil_name};
	my $anvil_description = $an->data->{cgi}{anvil_description};
	my $anvil_note        = $an->data->{cgi}{anvil_note};
	my $anvil_password    = $an->data->{cgi}{anvil_password};
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching Anvil! name, if 
	# one exists. If nothing changed, the database will not be updated.
	$anvil_uuid = $an->ScanCore->insert_or_update_anvils({
		anvil_uuid		=>	$anvil_uuid,
		anvil_owner_uuid	=>	$anvil_owner_uuid,
		anvil_smtp_uuid		=>	$anvil_smtp_uuid,
		anvil_name		=>	$anvil_name,
		anvil_description	=>	$anvil_description,
		anvil_note		=>	$anvil_note,
		anvil_password		=>	$anvil_password,
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "anvil_uuid", value1 => $anvil_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	return($anvil_uuid);
}


# This parses the CGI data and calls $an->ScanCore->insert_or_update_notifications();
sub save_notify
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_notify" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching notify name, if 
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{notify_uuid} = $an->ScanCore->insert_or_update_notifications({
		notify_uuid	=>	$an->data->{cgi}{notify_uuid},
		notify_name	=>	$an->data->{cgi}{notify_name},
		notify_target	=>	$an->data->{cgi}{notify_target},
		notify_language	=>	$an->data->{cgi}{notify_language},
		notify_level	=>	$an->data->{cgi}{notify_level},
		notify_units	=>	$an->data->{cgi}{notify_units},
		notify_note	=>	$an->data->{cgi}{notify_note},
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::notify_uuid", value1 => $an->data->{cgi}{notify_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Loop through the Anvil! systems now.
	my $anvils = $an->ScanCore->get_anvils();
	foreach my $hash_ref (@{$anvils})
	{
		my $anvil_uuid = $hash_ref->{anvil_uuid};
		my $notify_key = "notify_anvil_".$anvil_uuid;
		$an->Web->get_cgi({variables => [$notify_key] });
		if ($an->data->{cgi}{$notify_key})
		{
			# For now, the only reason 'note' is used is to mark a recipient being deleted.
			my $recipient_uuid = $an->ScanCore->insert_or_update_recipients({
				recipient_anvil_uuid	=>	$anvil_uuid,
				recipient_notify_uuid	=>	$an->data->{cgi}{notify_uuid}, 
				recipient_notify_level	=>	$an->data->{cgi}{$notify_key},
			});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "recipient_uuid", value1 => $recipient_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return($an->data->{cgi}{notify_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_owner();
sub save_owner
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching owner name, if 
	# one exists. If nothing changed, the database will not be updated.
	$an->data->{cgi}{owner_uuid} = $an->ScanCore->insert_or_update_owners({
		owner_uuid	=>	$an->data->{cgi}{owner_uuid},
		owner_name	=>	$an->data->{cgi}{owner_name},
		owner_note	=>	$an->data->{cgi}{owner_note},
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "cgi::owner_uuid", value1 => $an->data->{cgi}{owner_uuid},
	}, file => $THIS_FILE, line => __LINE__});
	
	return($an->data->{cgi}{owner_uuid});
}

# This parses the CGI data and calls $an->ScanCore->insert_or_update_smtp();
sub save_smtp
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $smtp_uuid           = $an->data->{cgi}{smtp_uuid};
	my $smtp_server         = $an->data->{cgi}{smtp_server};
	my $smtp_port           = "";
	my $smtp_username       = $an->data->{cgi}{smtp_username};
	my $smtp_password       = $an->data->{cgi}{smtp_password};
	my $smtp_security       = $an->data->{cgi}{smtp_security};
	my $smtp_authentication = $an->data->{cgi}{smtp_authentication};
	my $smtp_helo_domain    = $an->data->{cgi}{smtp_helo_domain};
	my $smtp_note           = $an->data->{cgi}{smtp_note};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0008", message_variables => {
		name1 => "smtp_server",         value1 => $smtp_server,
		name2 => "smtp_port",           value2 => $smtp_port,
		name3 => "smtp_username",       value3 => $smtp_username,
		name4 => "smtp_password",       value4 => $smtp_password,
		name5 => "smtp_security",       value5 => $smtp_security,
		name6 => "smtp_authentication", value6 => $smtp_authentication,
		name7 => "smtp_helo_domain",    value7 => $smtp_helo_domain,
		name8 => "smtp_note",           value8 => $smtp_note,
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{cgi}{smtp_server} =~ /(.*):(\d+)/)
	{
		$smtp_server = $1;
		$smtp_port   = $2;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "smtp_server", value1 => $smtp_server,
			name2 => "smtp_port",   value2 => $smtp_port,
		}, file => $THIS_FILE, line => __LINE__});
	}
	if (not $smtp_port)
	{
		if ($smtp_security eq "starttls")
		{
			$smtp_port = 587;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "tls_ssl")
		{
			$smtp_port = 465;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($smtp_security eq "none")
		{
			$smtp_port = 25;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "smtp_port", value1 => $smtp_port,
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	if (not $smtp_helo_domain)
	{
		$smtp_helo_domain = $an->domain_name();
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "smtp_helo_domain", value1 => $smtp_helo_domain,
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# This will return the new UUID if INSERTed and the existing UUID for the matching server name, if 
	# one exists. If nothing changed, the database will not be updated.
	$smtp_uuid = $an->ScanCore->insert_or_update_smtp({
		smtp_uuid		=>	$smtp_uuid,
		smtp_server		=>	$smtp_server,
		smtp_port		=>	$smtp_port,
		smtp_username		=>	$smtp_username,
		smtp_password		=>	$smtp_password,
		smtp_security		=>	$smtp_security,
		smtp_authentication	=>	$smtp_authentication,
		smtp_helo_domain	=>	$smtp_helo_domain,
		smtp_note		=>	$smtp_note,
	});
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "smtp_uuid", value1 => $smtp_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	return($smtp_uuid);
}

# This either enables or disables the Install Target feature.
sub manage_install_target
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "save_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the control program exists, call it with '--status'
	my $install_target_state = 2;
	my $task                 = $an->data->{cgi}{subtask} eq "enable" ? "--enable" : "--disable";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "task",                                     value1 => $task,
		name2 => "path::call_striker-manage-install-target", value2 => $an->data->{path}{'call_striker-manage-install-target'},
	}, file => $THIS_FILE, line => __LINE__});
	if (-e $an->data->{path}{'call_striker-manage-install-target'})
	{
		my $shell_call = $an->data->{path}{'call_striker-manage-install-target'}." $task";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call,
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({fatal => 1, title_key => "error_title_0020", message_key => "error_message_0022", message_variables => { shell_call => $shell_call, error => $! }, code => 30, file => "$THIS_FILE", line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line,
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($line =~ /state:(\d+)/)
			{
				my $state = $1;
				# 0 = stopped
				# 1 = running
				# 2 = unknown
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "state", value1 => $state,
				}, file => $THIS_FILE, line => __LINE__});
				if ($state eq "0")
				{
					$install_target_state = 0;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "install_target_state", value1 => $install_target_state,
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($state eq "1")
				{
					$install_target_state = 1;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "install_target_state", value1 => $install_target_state,
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
		}
		close $file_handle;
	}
	else
	{
		# The install target control setuid script wasn't found
		$an->Log->entry({log_level => 2, message_key => "log_0013", message_variables => {
			file => $an->data->{path}{install_target_conf},
		}, file => $THIS_FILE, line => __LINE__});
	}
	# 0 == Stopped
	# 1 == Running
	# 2 == Unknown
	my $notice_message = "";
	if ($install_target_state eq "0")
	{
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0459"}),
			}});
	}
	elsif ($install_target_state eq "1")
	{
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0458"}),
			}});
	}
	else
	{
		my $message_key = "warning_0002";
		if ($an->data->{cgi}{subtask} eq "enable")
		{
			$message_key = "warning_0001";
		}
		$notice_message = $an->Web->template({file => "web.html", template => "failure-message", replace => {
				title		=>	"#!string!title_0197!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0090!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => $message_key}),
			}});
	}
	
	return($notice_message);
}

# This just puts together the "confirm" message for the given action
sub confirm_action
{
	my ($an, $action) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "confirm_action" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "action", value1 => $action,
	}, file => $THIS_FILE, line => __LINE__});
	
	my $notice_message = "";
	if ($action eq "delete_anvil")
	{
		# Get the Anvil!'s name.
		my $anvil_data     = $an->Get->anvil_data({uuid => $an->data->{cgi}{anvil_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=anvil&anvil_uuid=".$an->data->{cgi}{anvil_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "anvil_data->anvil_name", value1 => $anvil_data->{anvil_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0374", variables => { anvil => $anvil_data->{anvil_name} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_owner")
	{
		# Get the owner's name.
		my $owner_data     = $an->Get->owner_data({uuid => $an->data->{cgi}{owner_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=owner&owner_uuid=".$an->data->{cgi}{owner_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "owner_data->owner_name", value1 => $owner_data->{owner_name},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0392", variables => { owner => $owner_data->{owner_name} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_smtp")
	{
		# Get the smtp server's name.
		my $smtp_data      = $an->Get->smtp_data({uuid => $an->data->{cgi}{smtp_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=smtp&smtp_uuid=".$an->data->{cgi}{smtp_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "smtp_data->smtp_server", value1 => $smtp_data->{smtp_server},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0396", variables => { smtp => $smtp_data->{smtp_server} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "delete_notify")
	{
		# Get the notification target's name.
		my $notify_data     = $an->Get->notify_data({uuid => $an->data->{cgi}{notify_uuid}});
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=notify&notify_uuid=".$an->data->{cgi}{notify_uuid}."&delete=true&confirm=true",
		}, no_comment => 1});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notify_data->notify_target", value1 => $notify_data->{notify_target},
		}, file => $THIS_FILE, line => __LINE__});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0195!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0306!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0454", variables => { target => $notify_data->{notify_target} }}),
				button		=>	$confirm_button,
			}});
	}
	elsif ($action eq "enable_install_target")
	{
		# Warn the user about DHCP server conflict possibilities.
		my $confirm_button = $an->Web->template({file => "web.html", template => "bold-link-button", replace => { 
			name	=>	"confirm",
			id	=>	"confirm",
			value	=>	"#!string!button_0004!#",
			url	=>	"?task=install_target&subtask=enable&confirm=true",
		}, no_comment => 1});
		$notice_message = $an->Web->template({file => "web.html", template => "confirm-message", replace => {
				title		=>	"#!string!title_0200!#",
				row_class	=>	"highlight_warning_bold",
				row_body	=>	"#!string!row_0312!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0457"}),
				button		=>	$confirm_button,
			}});
	}
	
	return($notice_message);
}

# This deletes the given install manifest
sub delete_manifest
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Get the Anvil! name from the manifest before we delete it.
	my $return     = $an->Get->manifest_data({uuid => $an->data->{cgi}{manifest_uuid}});
	my $anvil_name = $an->data->{cgi}{anvil_name};
	
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    manifests 
SET 
    manifest_note = 'DELETED' 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    manifests 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    manifests 
WHERE 
    manifest_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{manifest_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $manifest_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "manifest_count", value1 => $manifest_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($manifest_count)
	{
		# What is this!?
		my $error_message = $an->String->get({key => "message_0461", variables => { 
			anvil     => $anvil_name,
			manifests => $manifest_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0395", variables => { manifest => $manifest_data->{manifest_name} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! owner.
sub delete_owner
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_owner" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $owner_data     = $an->Get->owner_data({uuid => $an->data->{cgi}{owner_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    owners 
SET 
    owner_note = 'DELETED' 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    owners 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    owners 
WHERE 
    owner_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{owner_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $owner_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "owner_count", value1 => $owner_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($owner_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0393", variables => { 
			name   => $owner_data->{owner_name},
			owners => $owner_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0395", variables => { owner => $owner_data->{owner_name} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! notify.
sub delete_notify
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_notify" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $notify_data     = $an->Get->notify_data({uuid => $an->data->{cgi}{notify_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    notifications 
SET 
    notify_note = 'DELETED' 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
UPDATE 
    recipients 
SET 
    recipient_note = 'DELETED' 
WHERE 
    recipient_notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    notifications 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    recipients 
WHERE 
    recipient_notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    notifications 
WHERE 
    notify_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{notify_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $notify_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "notify_count", value1 => $notify_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($notify_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0393", variables => { 
			target  => $notify_data->{notify_target},
			targets => $notify_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0456", variables => { target => $notify_data->{notify_target} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an smtp server.
sub delete_smtp
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_smtp" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $smtp_data      = $an->Get->smtp_data({uuid => $an->data->{cgi}{smtp_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    smtp 
SET 
    smtp_note = 'DELETED' 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    smtp 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    smtp 
WHERE 
    smtp_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{smtp_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $smtp_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "smtp_count", value1 => $smtp_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($smtp_count)
	{
		# Zoot alore!
		my $error_message = $an->String->get({key => "message_0441", variables => { 
			smtp   => $smtp_data->{smtp_server},
			server => $smtp_count, 
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# All gone
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0453", variables => { smtp => $smtp_data->{smtp_server} }}),
			}});
	}
	
	return($notice_message);
}

# This deletes an Anvil! and its associated nodes from ScanCore. It does NOT delete the hosts.
sub delete_anvil
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "delete_anvil" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	my $anvil_data     = $an->Get->anvil_data({uuid => $an->data->{cgi}{anvil_uuid}});
	my $notice_message = "";
	
	# Send the queries as an array
	my $queries = [];
	push @{$queries}, "
UPDATE 
    nodes 
SET 
    node_note = 'DELETED' 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
UPDATE 
    recipients  
SET 
    recipient_note = 'DELETED' 
WHERE 
    recipient_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
UPDATE 
    anvils 
SET 
    anvil_note = 'DELETED' 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    nodes 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    recipients 
WHERE 
    recipient_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	push @{$queries}, "
DELETE FROM  
    anvils 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	# Log the queries
	foreach my $query (@{$queries})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pass the array in.
	$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
	
	# Make sure they're gone.
	my $query = "
SELECT 
    COUNT(*) 
FROM 
    nodes 
WHERE 
    node_anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $node_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$query = "
SELECT 
    COUNT(*) 
FROM 
    anvils 
WHERE 
    anvil_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{cgi}{anvil_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $anvil_count = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# (->[row]->[column])
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "node_count",  value1 => $node_count, 
		name2 => "anvil_count", value2 => $anvil_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if (($node_count) or ($anvil_count))
	{
		# Woops
		my $error_message = $an->String->get({key => "message_0388", variables => { 
			name   => $anvil_data->{anvil_name},
			nodes  => $node_count, 
			anvils => $anvil_count
		}});
		my $error_body = $an->Web->template({file => "web.html", template => "error-entry", replace => {
					row_class	=>	"highlight_warning",
					row_message	=>	"#!string!row_0133!#",
					body_class	=>	"",
					body_message	=>	$error_message,
				}});
		
		$notice_message = $an->Web->template({file => "web.html", template => "error-messages", replace => {
				title	=>	"#!string!title_0197!#",
				errors	=>	$error_body,
			}});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# Ba' bye!
		$notice_message = $an->Web->template({file => "web.html", template => "success-message", replace => {
				title		=>	"#!string!title_0196!#",
				row_class	=>	"highlight_good_bold",
				row_body	=>	"#!string!row_0083!#",
				message_class	=>	"",
				message_body	=>	$an->String->get({key => "message_0379", variables => { anvil => $anvil_data->{anvil_name} }}),
			}});
	}
	
	return($notice_message);
}

# This handles the management of notification recipients and what Anvil! systems they are listening to.
sub notify_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "notify_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{notify_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_notify($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_notify");
			$refresh_link =~ s/notify_uuid=.*?&/&/;
			$refresh_link =~ s/notify_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_notify_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	else
	{
		# Set defaults if not set already.
		$an->data->{cgi}{notify_language} = "en_CA"   if not $an->data->{cgi}{notify_language};
		$an->data->{cgi}{notify_level}    = "warning" if not $an->data->{cgi}{notify_level};
		$an->data->{cgi}{notify_units}    = "metric"  if not $an->data->{cgi}{notify_units};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "cgi::notify_language", value1 => $an->data->{cgi}{notify_language},
			name2 => "cgi::notify_level",    value2 => $an->data->{cgi}{notify_level},
			name3 => "cgi::notify_units",    value3 => $an->data->{cgi}{notify_units},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils        = $an->ScanCore->get_anvils();
	my $notifications = $an->ScanCore->get_notifications();
	my $recipients    = $an->ScanCore->get_recipients();
	
	# Load a specific notification target, if requested.
	if ($an->data->{cgi}{load_notify})
	{
		load_notify_form($an, $notifications, $an->data->{cgi}{notify_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing notification targets, if any.
	my $notify_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $notify_explain = "#!string!explain_0196!#";
	my $notify_row     = "&nbsp;";	# Actually the 'Load' button
	my $notify_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$notifications} > 0)
	{
		# Build an array to pass to 'build_select'
		$notify_explain = "#!string!explain_0197!#";
		$notify_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_notify",
			id	=>	"load_notify",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$notify_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# NOTE: Deleting a notification target is always allowed because nothing depends on it. We'll
		#       delete the associated recipients tables as needed.
		
		my $options = [];
		foreach my $hash_ref (@{$notifications})
		{
			my $notify_uuid   = $hash_ref->{notify_uuid};
			my $notify_target = $hash_ref->{notify_target};
			my $this_option   = $notify_uuid."#!#".$notify_target;
			push @{$options}, $this_option;
		}
		$notify_select = $an->Web->build_select({
			name     => "notify_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{notify_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$notify_row",
			column2_class	=>	"input_select",
			column2		=>	$notify_select,
			column3_class	=>	"input_explain",
			column3		=>	$notify_explain,
			column4_class	=>	"",
			column4		=>	"$notify_url",
		}});
	
	# Alert target (email address or log file)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0308!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"notify_target\" id=\"notify_target\" value=\"".$an->data->{cgi}{notify_target}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0199!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Alert target name (To: field in email alerts)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0283!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"notify_name\" id=\"notify_name\" value=\"".$an->data->{cgi}{notify_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0198!#",
			column4_class	=>	"input_url",
			column4		=>	"",
		}});

	# Build the language selection box.
	my $language_options = [];
	foreach my $iso_code (sort {$a cmp $b} keys %{$an->data->{strings}{lang}})
	{
		my $name = $an->String->get_language_name({language => $iso_code});
		push @{$language_options}, "$iso_code#!#$name";
	}
	my $language_select = $an->Web->build_select({
		name     => "notify_language", 
		options  => $language_options, 
		blank    => 0,
		selected => $an->data->{cgi}{notify_language},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0309!#",
			column2_class	=>	"input_select",
			column2		=>	$language_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0200!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Alert level selection
	my $log_level_select = $an->Web->build_select({
		name     => "notify_level", 
		options  => [
			"ignore#!##!string!alert_level_0006!#",
			"debug#!##!string!alert_level_0001!#",
			"info#!##!string!alert_level_0002!#",
			"notice#!##!string!alert_level_0003!#",
			"warning#!##!string!alert_level_0004!#",
			"critical#!##!string!alert_level_0005!#",
		], 
		blank    => 0,
		'sort'   => 0,
		selected => $an->data->{cgi}{notify_level},
		width    => ($width + 10),
	});
	my $log_level_explanation = $an->Web->template({file => "configure.html", template => "alert-level-explanation"});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0310!#",
			column2_class	=>	"input_select",
			column2		=>	$log_level_select,
			column3_class	=>	"input_explain",
			column3		=>	$log_level_explanation,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Metric or imperial
	my $units_select = $an->Web->build_select({
		name     => "notify_units", 
		options  => [
			"metric#!##!string!select_0007!#",
			"imperial#!##!string!select_0008!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{notify_units},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0311!#",
			column2_class	=>	"input_select",
			column2		=>	$units_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0206!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the notification target's note
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"notify_note",
		id	=>	"notify_note",
		value	=>	$an->data->{cgi}{notify_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0208!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of Anvil! systems, if any. For each, where there is an entry in 
	if (@{$anvils} > 0)
	{
		my $break_printed = 0;
		# Loop through each Anvil!
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid        = $hash_ref->{anvil_uuid};
			my $anvil_name        = $hash_ref->{anvil_name};
			my $anvil_description = $hash_ref->{anvil_description};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "cgi::anvil_uuid",        value1 => $an->data->{cgi}{anvil_uuid},
				name1 => "cgi::anvil_name",        value1 => $an->data->{cgi}{anvil_name},
				name2 => "cgi::anvil_description", value2 => $an->data->{cgi}{anvil_description},
			}, file => $THIS_FILE, line => __LINE__});
			
			if (not $break_printed)
			{
				$break_printed = 1;
				$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
						message	=>	"#!string!header_0025!#",
						class	=>	"breaker_header",
						colspan	=>	4,
					}});
			}
			my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
					name	=>	"configure_".$anvil_name,
					id	=>	"configure_".$anvil_name,
					value	=>	"#!string!button_0077!#",
					url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
				}, no_comment => 1});
			
			# Build the select for the notification level (with a "don't notify") option.
			my $notify_level_select = $an->Web->build_select({
				name     => "notify_anvil_".$anvil_uuid, 
				options  => [
					"ignore#!##!string!alert_level_0006!#",
					"debug#!##!string!alert_level_0001!#",
					"info#!##!string!alert_level_0002!#",
					"notice#!##!string!alert_level_0003!#",
					"warning#!##!string!alert_level_0004!#",
					"critical#!##!string!alert_level_0005!#",
				], 
				blank    => 0,
				'sort'   => 0,
				selected => $an->data->{cgi}{notify_level},
				width    => ($width + 10),
			});
			
			$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
					column1_class	=>	"highlight_row_bold",
					column1		=>	"&nbsp;",
					column2_class	=>	"highlight_detail",
					column2		=>	$notify_level_select,
					column3_class	=>	"input_explain",
					column3		=>	"<span class=\"highlight_detail\">$anvil_name</span> - $anvil_description",
					column4_class	=>	"",
					column4		=>	"$edit_url",
				}});
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0199!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of SMTP servers.
sub smtp_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "smtp_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{smtp_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_smtp($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_smtp");
			$refresh_link =~ s/smtp_uuid=.*?&/&/;
			$refresh_link =~ s/smtp_uuid=.*//;
		}
		
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_smtp_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $smtp   = $an->ScanCore->get_smtp();
	
	# Load a specific SMTP server, if requested.
	if ($an->data->{cgi}{load_smtp})
	{
		load_smtp_form($an, $smtp, $an->data->{cgi}{smtp_uuid});
	}
	
	# Create a list of existing smtp.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing SMTP servers, if any.
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	my $smtp_row     = "&nbsp;";	# Actually the 'Load' button
	my $smtp_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		$smtp_explain = "#!string!explain_0192!#";
		$smtp_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_smtp",
			id	=>	"load_smtp",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$smtp_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this SMTP server is being used by any Anvil! systems.
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_smtp_uuid", value1 => $hash_ref->{anvil_smtp_uuid},
				name2 => "cgi::smtp_uuid",            value2 => $an->data->{cgi}{smtp_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_smtp_uuid} eq $an->data->{cgi}{smtp_uuid})
			{
				# Disable it.
				$smtp_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$smtp_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid   = $hash_ref->{smtp_uuid};
			my $smtp_server = $hash_ref->{smtp_server};
			my $this_option = $smtp_uuid."#!#".$smtp_server;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name     => "smtp_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{smtp_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$smtp_row",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"",
			column4		=>	"$smtp_url",
		}});
	
	# Set defaults, if the user didn't try to save (we don't want to put something into a field they 
	# blanked on purpose).
	if (not $an->data->{cgi}{save})
	{
		if (not $an->data->{cgi}{smtp_server})         { $an->data->{cgi}{smtp_server}         = "mail.".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_username})       { $an->data->{cgi}{smtp_username}       = "admin\@".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_security})       { $an->data->{cgi}{smtp_security}       = "starttls"; }
		if (not $an->data->{cgi}{smtp_authentication}) { $an->data->{cgi}{smtp_authentication} = "encrypted"; }
	}
	
	# SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0250!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_server\" id=\"smtp_server\" value=\"".$an->data->{cgi}{smtp_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0184!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),
		}});
	
	# SMTP user name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0301!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_username\" id=\"smtp_username\" value=\"".$an->data->{cgi}{smtp_username}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0186!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0302!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_password\" id=\"smtp_password\" value=\"".$an->data->{cgi}{smtp_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0187!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	
	# Authentication select box.
	my $authentication_select = $an->Web->build_select({
		name     => "smtp_authentication", 
		options  => [
			"none#!##!string!select_0004!#",
			"plain_text#!##!string!select_0005!#",
			"encrypted#!##!string!select_0006!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_authentication},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0303!#",
			column2_class	=>	"input_select",
			column2		=>	$authentication_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0188!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP Security selection box.
	my $security_select = $an->Web->build_select({
		name     => "smtp_security", 
		options  => [
			"none#!##!string!select_0001!#",
			"tls_ssl#!##!string!select_0002!#",
			"starttls#!##!string!select_0003!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_security},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0304!#",
			column2_class	=>	"input_select",
			column2		=>	$security_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0189!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the 'smtp -> smtp_note'
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"smtp_note",
		id	=>	"smtp_note",
		value	=>	$an->data->{cgi}{smtp_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0195!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of Anvil! systems currently using this SMTP server.
	if (($an->data->{cgi}{smtp_uuid}) && (@{$anvils} > 0))
	{
		my $break_printed = 0;
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_smtp_uuid", value1 => $hash_ref->{anvil_smtp_uuid},
				name2 => "cgi::smtp_uuid",            value2 => $an->data->{cgi}{smtp_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_smtp_uuid} eq $an->data->{cgi}{smtp_uuid})
			{
				my $anvil_uuid        = $hash_ref->{anvil_uuid};
				my $anvil_name        = $hash_ref->{anvil_name};
				my $anvil_description = $hash_ref->{anvil_description};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "cgi::anvil_uuid",        value1 => $an->data->{cgi}{anvil_uuid},
					name1 => "cgi::anvil_name",        value1 => $an->data->{cgi}{anvil_name},
					name2 => "cgi::anvil_description", value2 => $an->data->{cgi}{anvil_description},
				}, file => $THIS_FILE, line => __LINE__});
				
				if (not $break_printed)
				{
					$break_printed = 1;
					$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
							message	=>	"#!string!header_0024!#",
							class	=>	"breaker_header",
							colspan	=>	4,
						}});
				}
				my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
						name	=>	"configure_".$anvil_name,
						id	=>	"configure_".$anvil_name,
						value	=>	"#!string!button_0077!#",
						url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
					}, no_comment => 1});
				
				$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
						column1_class	=>	"highlight_row_bold",
						column1		=>	"&nbsp;",
						column2_class	=>	"highlight_detail",
						column2		=>	"$anvil_name",
						column3_class	=>	"input_explain",
						column3		=>	"$anvil_description",
						column4_class	=>	"",
						column4		=>	"$edit_url",
					}});
			}
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0199!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of Anvil! owners.
sub owner_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "owner_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{owner_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_owner($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_owner");
			$refresh_link =~ s/owner_uuid=.*?&/&/;
			$refresh_link =~ s/owner_uuid=.*//;
		}
		
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_owner_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $owners = $an->ScanCore->get_owners();
	
	# Load a specific Owner, if requested.
	if ($an->data->{cgi}{load_owner})
	{
		load_owner_form($an, $owners, $an->data->{cgi}{owner_uuid});
	}
	
	# Create a list of existing owners.
	my $width      = 300;
	my $menu_items = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"&nbsp;",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Get a list of existing owners, if any.
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	my $owner_row     = "&nbsp;";	# Actually the 'Load' button
	my $owner_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		$owner_explain = "#!string!explain_0191!#";
		$owner_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_owner",
			id	=>	"load_owner",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$owner_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		# Disable the 'Delete' button if this Owner already owns any Anvil! systems.
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_owner_uuid", value1 => $hash_ref->{anvil_owner_uuid},
				name2 => "cgi::owner_uuid",            value2 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_owner_uuid} eq $an->data->{cgi}{owner_uuid})
			{
				# Disable it.
				$owner_url =~ s/<input (.*?)>/<input $1 disabled>/;
				$owner_url =~ s/class="(.*?)"/class="bold_button_disabled"/;
			}
		}
		
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name     => "owner_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{owner_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$owner_row",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"",
			column4		=>	"$owner_url",
		}});
	
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0194!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Create the text field for the 'owners -> owner_note'
	my $textarea = $an->Web->template({file => "web.html", template => "textarea_input", replace => { 
		name	=>	"owner_note",
		id	=>	"owner_note",
		value	=>	$an->data->{cgi}{owner_note},
	}, no_comment => 1});; 
	$menu_items .= $an->Web->template({file => "web.html", template => "textarea-4column-menu-entry", replace => {
			row_class	=>	"highlight_row_bold",
			row_body	=>	"#!string!row_0032!#",
			message_class	=>	"input_select",
			message_body	=>	"#!string!explain_0193!#",
			textarea	=>	$textarea,
			url_class	=>	"",
			url_body	=>	"",
		}});
	
	# Print the list of currently owned Anvil! systems.
	if (($an->data->{cgi}{owner_uuid}) && (@{$anvils} > 0))
	{
		my $break_printed = 0;
		foreach my $hash_ref (@{$anvils})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "hash_ref->anvil_owner_uuid", value1 => $hash_ref->{anvil_owner_uuid},
				name2 => "cgi::owner_uuid",            value2 => $an->data->{cgi}{owner_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			if ($hash_ref->{anvil_owner_uuid} eq $an->data->{cgi}{owner_uuid})
			{
				my $anvil_uuid        = $hash_ref->{anvil_uuid};
				my $anvil_name        = $hash_ref->{anvil_name};
				my $anvil_description = $hash_ref->{anvil_description};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "cgi::anvil_uuid",        value1 => $an->data->{cgi}{anvil_uuid},
					name1 => "cgi::anvil_name",        value1 => $an->data->{cgi}{anvil_name},
					name2 => "cgi::anvil_description", value2 => $an->data->{cgi}{anvil_description},
				}, file => $THIS_FILE, line => __LINE__});
				
				if (not $break_printed)
				{
					$break_printed = 1;
					$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
							message	=>	"#!string!header_0023!#",
							class	=>	"breaker_header",
							colspan	=>	4,
						}});
				}
				my $edit_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
						name	=>	"configure_".$anvil_name,
						id	=>	"configure_".$anvil_name,
						value	=>	"#!string!button_0077!#",
						url	=>	"?task=anvil&anvil_uuid=".$anvil_uuid."&load_anvil=true",
					}, no_comment => 1});
				
				$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
						column1_class	=>	"highlight_row_bold",
						column1		=>	"&nbsp;",
						column2_class	=>	"highlight_detail",
						column2		=>	"$anvil_name",
						column3_class	=>	"input_explain",
						column3		=>	"$anvil_description",
						column4_class	=>	"",
						column4		=>	"$edit_url",
					}});
			}
		}
	}
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0198!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This handles the configuration of Anvil! systems (including the ability to create new owners)
sub anvil_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "anvil_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: Add an "Advanced" button to expose all the remaining form fields
	# Is the user asking to save changes?
	my $notice_message = "";
	my $error_fields   = [];
	my $refresh_link   = $an->data->{sys}{cgi_string};
	if (($an->data->{cgi}{'delete'}) && ($an->data->{cgi}{anvil_uuid}))
	{
		# Has the user confirmed?
		if ($an->data->{cgi}{confirm})
		{
			# Baleted!
			$notice_message = delete_anvil($an);
		}
		else
		{
			# Ask them to confirm
			$notice_message = confirm_action($an, "delete_anvil");
			$refresh_link =~ s/anvil_uuid=.*?&/&/;
			$refresh_link =~ s/anvil_uuid=.*//;
		}
		
		# Clear the commands from the refresh link.
		$refresh_link =~ s/confirm=.*?&/&/;
		$refresh_link =~ s/confirm=.*//;
		$refresh_link =~ s/delete=.*?&/&/;
		$refresh_link =~ s/delete=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	if ($an->data->{cgi}{save})
	{
		# Save, if something changed.
		($notice_message, $error_fields) = save_anvil_form($an);
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "notice_message", value1 => $notice_message,
		}, file => $THIS_FILE, line => __LINE__});
		$refresh_link =~ s/save=.*?&/&/;
		$refresh_link =~ s/save=.*//;
		$refresh_link =~ s/&&+/&/;
	}
	
	# Load information from the databases, then we'll tease out data if 'load' was set.
	my $anvils = $an->ScanCore->get_anvils();
	my $owners = $an->ScanCore->get_owners();
	my $smtp   = $an->ScanCore->get_smtp();
	my $nodes  = $an->ScanCore->get_nodes();
	
	# Tease out the data for this form if we're loading an anvil_uuid
	if ($an->data->{cgi}{load_anvil})
	{
		if ($an->data->{cgi}{anvil_uuid})
		{
			($notice_message, $error_fields) = load_anvil_form($an, $anvils, $owners, $smtp, $nodes);
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "notice_message", value1 => $notice_message,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# I don't pass a UUID to load_anvil_form, so blank things out here.
			$an->data->{cgi}{anvil_owner_uuid}  = "";
			$an->data->{cgi}{anvil_smtp_uuid}   = "";
			$an->data->{cgi}{anvil_name}        = "";
			$an->data->{cgi}{anvil_description} = "";
			$an->data->{cgi}{anvil_note}        = "";
			$an->data->{cgi}{anvil_password}    = "";
			
			# Reload the other forms with no UUID to blank them out.
			load_owner_form($an, $owners, "");
			load_smtp_form($an,  $smtp,   "");
			load_node_form($an,  $nodes,  "");
		}
	}
	
	if ($an->data->{cgi}{load_owner})
	{
		load_owner_form($an, $owners, $an->data->{cgi}{owner_uuid});
	}
	if ($an->data->{cgi}{load_smtp})
	{
		load_smtp_form($an, $smtp, $an->data->{cgi}{smtp_uuid});
	}
	
	### First, we'll show any existing Anvil! systems, owners and smtp servers. If a user selects one of
	### these, it will pre-fill the form below it.
	# Show a select box of existing Anvil! systems (if any).
	my $width         = 300;
	my $menu_items    = $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0020!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	my $anvil_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $anvil_explain = "#!string!explain_0174!#";
	my $anvil_row     = "&nbsp;";	# Actually the 'load' button
	my $anvil_url     = "&nbsp;";	# Actually the 'delete' button
	if (@{$anvils} > 0)
	{
		### TODO: Build JS to make changes
		$anvil_explain = "#!string!explain_0190!#";
		$anvil_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_anvil",
			id	=>	"load_anvil",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		$anvil_url = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"delete",
			id	=>	"delete",
			value	=>	"#!string!row_0068!#",
		}, no_comment => 1});
		
		my $options       = [];
		foreach my $hash_ref (@{$anvils})
		{
			my $anvil_uuid  = $hash_ref->{anvil_uuid};
			my $anvil_name  = $hash_ref->{anvil_name};
			my $this_option = $anvil_uuid."#!#".$anvil_name;
			push @{$options}, $this_option;
		}
		$anvil_select = $an->Web->build_select({
			name     => "anvil_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{anvil_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	$anvil_row,
			column2_class	=>	"input_select",
			column2		=>	$anvil_select,
			column3_class	=>	"input_explain",
			column3		=>	$anvil_explain,
			column4_class	=>	"",
			column4		=>	"$anvil_url",
		}});
	
	# Get a list of existing owners, if any.
	my $owner_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $owner_explain = "#!string!explain_0175!#";
	my $owner_row     = "&nbsp;";	# Actually the 'Load' button
	if (@{$owners} > 0)
	{
		# Build an array to pass to 'build_select'
		$owner_explain = "#!string!explain_0191!#";
		$owner_row     = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_owner",
			id	=>	"load_owner",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$owners})
		{
			my $owner_uuid  = $hash_ref->{owner_uuid};
			my $owner_name  = $hash_ref->{owner_name};
			my $this_option = $owner_uuid."#!#".$owner_name;
			push @{$options}, $this_option;
		}
		$owner_select = $an->Web->build_select({
			name     => "owner_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{owner_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$owner_row",
			column2_class	=>	"input_select",
			column2		=>	$owner_select,
			column3_class	=>	"input_explain",
			column3		=>	$owner_explain,
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# And now get a list of SMTP mail servers to send email alerts through
	my $smtp_select  = $an->Web->template({file => "web.html", template => "disabled_input"});
	my $smtp_explain = "#!string!explain_0178!#";
	my $smtp_row     = "&nbsp;";	# Actually the 'Load' button
	if (@{$smtp} > 0)
	{
		# Build an array to pass to 'build_select'
		$smtp_explain = "#!string!explain_0192!#";
		$smtp_row      = $an->Web->template({file => "web.html", template => "button_input", replace => { 
			name	=>	"load_smtp",
			id	=>	"load_smtp",
			value	=>	"#!string!button_0048!#",
		}, no_comment => 1});
		
		my $options = [];
		foreach my $hash_ref (@{$smtp})
		{
			my $smtp_uuid  = $hash_ref->{smtp_uuid};
			my $smtp_server  = $hash_ref->{smtp_server};
			my $this_option = $smtp_uuid."#!#".$smtp_server;
			push @{$options}, $this_option;
		}
		$smtp_select = $an->Web->build_select({
			name     => "smtp_uuid", 
			options  => $options, 
			blank    => 1,
			selected => $an->data->{cgi}{smtp_uuid},
			width    => ($width + 10),
		});
	}
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"",
			column1		=>	"$smtp_row",
			column2_class	=>	"input_select",
			column2		=>	$smtp_select,
			column3_class	=>	"input_explain",
			column3		=>	$smtp_explain,
			column4_class	=>	"input_url",
			column4		=>	"",
		}});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0021!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	### From here down, we present fields for the user to enter (or that may be filled out by selecting
	### one of the entries from select boxes).
	# Create the text field for the 'owners -> owner_name' (if set, it will create a new Owner entry)
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0023!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"owner_name\" id=\"owner_name\" value=\"".$an->data->{cgi}{owner_name}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0176!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"owner_note",
			id	=>	"owner_note",
			value	=>	$an->data->{cgi}{owner_note},
		}});
	
	### Now information on the Anvil! itself.
	# Description
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0021!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_description\" id=\"anvil_description\" value=\"".$an->data->{cgi}{anvil_description}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0179!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0025!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"anvil_password\" id=\"anvil_password\" value=\"".$an->data->{cgi}{anvil_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0181!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0003!#"}),
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"anvil_note",
			id	=>	"anvil_note",
			value	=>	$an->data->{cgi}{anvil_note},
		}});
	
	### Node access info
	# Node 1
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 1 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node1_access\" id=\"node1_access\" value=\"".$an->data->{cgi}{node1_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0182!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"node1_note",
			id	=>	"node1_note",
			value	=>	$an->data->{cgi}{node1_note},
		}});
	
	# Node 2
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	$an->String->get({key => "row_0248", variables => { node => 2 }}),
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"node2_access\" id=\"node2_access\" value=\"".$an->data->{cgi}{node2_access}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0183!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Store the owners -> owner_note (if any) as a hidden form field.
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"node2_note",
			id	=>	"node2_note",
			value	=>	$an->data->{cgi}{node2_note},
		}});
	
	### SMTP values
	# Breaker
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	"#!string!header_0022!#",
			class	=>	"breaker_header",
			colspan	=>	4,
		}});
	
	# Set defaults, if the user didn't try to save (we don't want to put something into a field they 
	# blanked on purpose).
	if (not $an->data->{cgi}{save})
	{
		if (not $an->data->{cgi}{smtp_server})         { $an->data->{cgi}{smtp_server}         = "mail.".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_username})       { $an->data->{cgi}{smtp_username}       = "admin\@".$an->domain_name(); }
		if (not $an->data->{cgi}{smtp_security})       { $an->data->{cgi}{smtp_security}       = "starttls"; }
		if (not $an->data->{cgi}{smtp_authentication}) { $an->data->{cgi}{smtp_authentication} = "encrypted"; }
	}
	
	# SMTP Server
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0250!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_server\" id=\"smtp_server\" value=\"".$an->data->{cgi}{smtp_server}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0184!#",
			column4_class	=>	"input_url",
			column4		=>	$an->Web->more_info_link({url => "#!string!url_0002!#"}),
		}});
	
	# SMTP user name
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0301!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_username\" id=\"smtp_username\" value=\"".$an->data->{cgi}{smtp_username}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0186!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP password
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0302!#",
			column2_class	=>	"input_select",
			column2		=>	"<input type=\"text\" name=\"smtp_password\" id=\"smtp_password\" value=\"".$an->data->{cgi}{smtp_password}."\" style=\"width: ${width}px;\">",
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0187!#<br />#!string!explain_0180!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	
	# Authentication select box.
	my $authentication_select = $an->Web->build_select({
		name     => "smtp_authentication", 
		options  => [
			"none#!##!string!select_0004!#",
			"plain_text#!##!string!select_0005!#",
			"encrypted#!##!string!select_0006!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_authentication},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0303!#",
			column2_class	=>	"input_select",
			column2		=>	$authentication_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0188!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# SMTP Security selection box.
	my $security_select = $an->Web->build_select({
		name     => "smtp_security", 
		options  => [
			"none#!##!string!select_0001!#",
			"tls_ssl#!##!string!select_0002!#",
			"starttls#!##!string!select_0003!#",
		], 
		blank    => 0,
		selected => $an->data->{cgi}{smtp_security},
		width    => ($width + 10),
	});
	$menu_items .= $an->Web->template({file => "web.html", template => "generic-4column-menu-entry", replace => {
			column1_class	=>	"highlight_row_bold",
			column1		=>	"#!string!row_0304!#",
			column2_class	=>	"input_select",
			column2		=>	$security_select,
			column3_class	=>	"input_explain",
			column3		=>	"#!string!explain_0189!#",
			column4_class	=>	"input_url",
			column4		=>	"&nbsp;",
		}});
	
	# Hidden fields now  
	$menu_items .= $an->Web->template({file => "web.html", template => "hidden_input", replace => { 
			name	=>	"task",
			id	=>	"task",
			value	=>	$an->data->{cgi}{task},
		}});
	
	# The 'Save' button
	my $save_button = $an->Web->template({file => "web.html", template => "button_input", replace => { 
		name	=>	"save",
		id	=>	"save",
		value	=>	"#!string!button_0045!#",
	}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "web.html", template => "break-bar", replace => { 
			message	=>	$save_button,
			class	=>	"",
			colspan	=>	4,
		}});
	
	# Put the menu template together
	my $menu = $an->Web->template({file => "web.html", template => "generic-4column-menu", replace => {
			title		=>	"#!string!title_0193!#",
			menu_items	=>	$menu_items,
		}});
	# Wrap it in a <form>
	$menu = $an->Web->template({file => "web.html", template => "form-wrapper", replace => { body => $menu }});
	
	# Put together the page's frame...
	my $back_image = $an->Web->template({file => "common.html", template => "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/back.png",
			alt_text     => "#!string!button_0001!#",
			id           => "back_icon",
		}});
	
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	# Print it!
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}

# This shows the main Striker configuration menu
sub show_main_menu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "show_main_menu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# For some tasks, like enabling and disabling install targets, there is no dedicated menu but just a
	# notice header. Deal with those now, if appropriate.
	my $notice_message =  "";
	my $refresh_link   =  $an->data->{sys}{cgi_string};
	   $refresh_link   =~ s/confirm=.*?&/&/;
	   $refresh_link   =~ s/confirm=.*//;
	   $refresh_link   =~ s/subtask=.*?&/&/;
	   $refresh_link   =~ s/subtask=.*//;
	   $refresh_link   =~ s/task=.*?&/&/;
	   $refresh_link   =~ s/task=.*//;
	   $refresh_link   =~ s/\?&/?/;
	if ($an->data->{cgi}{task} eq "install_target")
	{
		if ($an->data->{cgi}{subtask} eq "enable")
		{
			# Confirmed?
			if ($an->data->{cgi}{confirm})
			{
				# Baleted!
				$notice_message = manage_install_target($an);
			}
			else
			{
				# Ask them to confirm
				$notice_message = confirm_action($an, "enable_install_target");
			}
		}
		elsif ($an->data->{cgi}{subtask} eq "disable")
		{
			# No confirmation needed.
			$notice_message = manage_install_target($an);
		}
	}
	
	# Put together the frame of the page.
	my $back_image    = "";
	my $refresh_image = $an->Web->template({file => "common.html", template	=> "image", no_comment => 1, replace => {
			image_source => $an->data->{url}{skins}."/".$an->data->{sys}{skin}."/images/refresh.png",
			alt_text     => "#!string!button_0002!#",
			id           => "refresh_icon",
		}});
	my $back_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"back",
			id	=>	"back",
			alt	=>	"#!string!button_0001!#",
			value	=>	$back_image,
			url	=>	"?",
		}, no_comment => 1});
	my $refresh_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"refresh",
			id	=>	"refresh",
			alt	=>	"#!string!button_0002!#",
			value	=>	$refresh_image,
			url	=>	$refresh_link,
		}, no_comment => 1});
	my $header = $an->Web->template({file => "configure.html", template => "configure-header", replace => {
			back	=>	$back_anchor,
			refresh	=>	$refresh_anchor,
		}});
	my $footer = $an->Web->template({file => "configure.html", template => "configure-footer"});
	
	### Build the list of menu items.
	my $menu_items = "";
	
	# Anvil! systems
	my $task_anvil_url = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_anvil",
			id	=>	"task_anvil",
			alt	=>	"#!string!button_0069!#",
			value	=>	"#!string!button_0069!#",
			url	=>	"?task=anvil",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_anvil_url,
			description	=>	"#!string!explain_0005!#",
			url		=>	"",
		}})."\n";
		
	# Owner 
	my $task_owner_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_owner",
			id	=>	"task_owner",
			alt	=>	"#!string!button_0070!#",
			value	=>	"#!string!button_0070!#",
			url	=>	"?task=owner",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_owner_anchor,
			description	=>	"#!string!explain_0013!#",
			url		=>	"",
		}})."\n";
		
	# SMTP 
	my $task_smtp_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_smtp",
			id	=>	"task_smtp",
			alt	=>	"#!string!button_0071!#",
			value	=>	"#!string!button_0071!#",
			url	=>	"?task=smtp",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_smtp_anchor,
			description	=>	"#!string!explain_0023!#",
			url		=>	"",
		}})."\n";
	
	# Notification Recipients
	my $task_notify_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_notify",
			id	=>	"task_notify",
			alt	=>	"#!string!button_0072!#",
			value	=>	"#!string!button_0072!#",
			url	=>	"?task=notify",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_notify_anchor,
			description	=>	"#!string!explain_0105!#",
			url		=>	"",
		}})."\n";
	
	# Advanced Configuration
	my $task_advanced_options_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_advanced_options",
			id	=>	"task_advanced_options",
			alt	=>	"#!string!button_0073!#",
			value	=>	"#!string!button_0073!#",
			url	=>	"?task=advanced_options",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "optionsure-menu-entry", replace => {
			button		=>	$task_advanced_options_anchor,
			description	=>	"#!string!explain_0172!#",
			url		=>	"",
		}})."\n";
		
	# Add a divider before the next section
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-spacer"});
	
	# For the Enable/Disable install target, I need to know the current state.
	# 0 == Stopped
	# 1 == Running
	# 2 == Unknown (if this is returned, the meny entry simply won't exist)
	my $install_target_state = $an->Get->install_target_state();
	if ($install_target_state eq "0")
	{
		# Option to enable
		my $task_install_target_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"task_install_target",
				id	=>	"task_install_target",
				alt	=>	"#!string!button_0057!#",
				value	=>	"#!string!button_0057!#",
				url	=>	"?task=install_target&subtask=enable",
			}, no_comment => 1});
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	$task_install_target_anchor,
				description	=>	"#!string!explain_0170!#",
				url		=>	"",
			}})."\n";
	}
	elsif ($install_target_state eq "1")
	{
		# Option to disable
		my $task_install_target_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
				name	=>	"task_install_target",
				id	=>	"task_install_target",
				alt	=>	"#!string!button_0058!#",
				value	=>	"#!string!button_0058!#",
				url	=>	"?task=install_target&subtask=disable",
			}, no_comment => 1});
		$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
				button		=>	$task_install_target_anchor,
				description	=>	"#!string!explain_0169!#",
				url		=>	"",
			}})."\n";
	}
	
	### TODO: Move this over to 'configure'
	# Install Manifests
	my $task_manifest_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
			name	=>	"task_manifest",
			id	=>	"task_manifest",
			alt	=>	"#!string!button_0060!#",
			value	=>	"#!string!button_0060!#",
			#url	=>	"?task=manifest",
			url	=>	"/cgi-bin/striker?config=true&task=create-install-manifest",
		}, no_comment => 1});
	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
			button		=>	$task_manifest_anchor,
			description	=>	"#!string!explain_0168!#",
			url		=>	"",
		}})."\n";
	
	### TODO: Setup these later.
	# Backup and restore
# 	my $task_backup_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"task_backup",
# 			id	=>	"task_backup",
# 			alt	=>	"#!string!button_0074!#",
# 			value	=>	"#!string!button_0074!#",
# 			url	=>	"?task=backup",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_backup_anchor,
# 			description	=>	"#!string!explain_0171!#",
# 			url		=>	"",
# 		}})."\n";
	
	# Configure ScanCore Databases
# 	my $task_scancore_db_anchor = $an->Web->template({file => "web.html", template => "link-button", replace => { 
# 			name	=>	"scancore_db",
# 			id	=>	"scancore_db",
# 			alt	=>	"#!string!button_0076!#",
# 			value	=>	"#!string!button_0076!#",
# 			url	=>	"?task=scancore_db",
# 		}, no_comment => 1});
# 	$menu_items .= $an->Web->template({file => "configure.html", template => "configure-menu-entry", replace => {
# 			button		=>	$task_scancore_db_anchor,
# 			description	=>	"#!string!explain_0173!#",
# 			url		=>	"",
# 		}})."\n";
	
	# Build the body of the menu.	
	my $menu = $an->Web->template({file => "configure.html", template => "configure-menu", replace => { options => $menu_items }});
	
	print $an->Web->template({
			file		=>	"configure.html",
			template	=>	"configure-main-page",
			replace		=>	{
				header		=>	$header, 
				notices		=>	$notice_message,
				body		=>	$menu, 
				footer		=>	$footer, 
			},
		});
	
	return(0);
}
