#!/usr/bin/perl
# 
# AN!MediaConnector
# 
# This allows a mechanism for taking a CD or DVD, turning it into an ISO and pushing it to a cluster's 
# /shared/files/ directory. It also allows for connecting and disconnecting these ISOs to and from VMs.
# 
# This also manages pre and post migration scripts that the user can run before/after a server is migrated.
# 
# TODO: 
# - Add a check-box on upload called 'This is a script' and chmod the file to 755 if selected.
#       

use strict;
use warnings;

use lib 'lib';
use AN::Common;
use AN::Cluster;
use AN::MediaLibrary;
use AN::Tools;

my $THIS_FILE = "mediaLibrary";
# Turn off buffering so that the pinwheel will display while waiting
# for the SSH call(s) to complete.
$| = 1;

my ($conf) = AN::Common::initialize($THIS_FILE, 1);
my $an     = $conf->{handle}{an};
$an->default_log_file    ($an->data->{path}{log_file});
$an->default_log_language($an->data->{sys}{log_language});
$an->Log->level          ($an->data->{sys}{log_level});
$an->data->{handle}{an} = $an;

# Set some defaults
$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Log our startup
my ($date, $time) = $an->Get->date_and_time();
$an->Log->entry({log_level => 1, message_key => "log_0001", message_variables => {
	date	=>	$date, 
	'time'	=>	$time,
}, file => $THIS_FILE, line => __LINE__});

# Get (create if needed) my UUID.
$an->Storage->prep_local_uuid($an);

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({
	file	=>	$THIS_FILE,
	quiet	=>	1
});

# Read in some configuration information
$an->Storage->read_hosts();
$an->Storage->read_ssh_config();

# Read in our Anvil! systems.
$an->ScanCore->parse_anvil_data();

# I need to convert the global configuration of the clusters to the format I use here.
#AN::Cluster::convert_cluster_config($conf);

# If there is only one cluster defined, use it. Note that I need a special exception in $an->Web->get_cgi() 
# for this to work properly.
if (not $an->data->{cgi}{cluster})
{
	my @cluster_name;
	foreach my $cluster (keys %{$an->data->{clusters}})
	{
		push @cluster_name, $cluster;
	}
	if (@cluster_name == 1)
	{
		$an->data->{cgi}{cluster} = $cluster_name[0];
	}
}

# Check for passed-in CGI variables.
$an->Web->check_all_cgi();

# Print the header.
AN::Cluster::header($conf, "mediaLibrary");

# Do I have a cluster name?
$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
	name1 => "cgi::cluster", value1 => $an->data->{cgi}{cluster},
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{cluster})
{
	my $cluster                 = $an->data->{cgi}{cluster};
	$an->data->{sys}{root_password} = $an->data->{clusters}{$cluster}{root_pw};
	$an->data->{nodes}              = $an->data->{clusters}{$cluster}{nodes};
	$an->Log->entry({log_level => 4, message_key => "an_variables_0003", message_variables => {
		name1 => "nodes",              value1 => $an->data->{nodes},
		name2 => "task",               value2 => $an->data->{cgi}{task},
		name3 => "sys::root_password", value3 => $an->data->{sys}{root_password},
	}, file => $THIS_FILE, line => __LINE__});
	
	$an->data->{sys}{use_node} = "";
	foreach my $node (sort {$a cmp $b} @{$an->data->{clusters}{$cluster}{nodes}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "node", value1 => $node,
		}, file => $THIS_FILE, line => __LINE__});
		my $access = $an->Check->access({
			target		=>	$node,
			password	=>	$an->data->{sys}{root_password},
			port		=>	$an->data->{node}{$node}{port},
		});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "access", value1 => $access,
		}, file => $THIS_FILE, line => __LINE__});
		if ($access)
		{
			$an->data->{sys}{use_node} = $node;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "sys::use_node", value1 => $an->data->{sys}{use_node},
			}, file => $THIS_FILE, line => __LINE__});
			last;
		}
	}
	
	if ($an->data->{cgi}{task})
	{
		$an->data->{sys}{show_refresh} = 0;
		AN::MediaLibrary::process_task($conf);
	}
	else
	{
		# Show the files.
		AN::MediaLibrary::read_shared($conf);
	}
}
else
{
	# Ask the user which cluster they want to look at.
	AN::Cluster::ask_which_cluster($conf);
}
AN::Cluster::footer($conf);


exit 0;
