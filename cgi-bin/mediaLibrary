#!/usr/bin/perl
# 
# AN!MediaConnector
# 
# This allows a mechanism for taking a CD or DVD, turning it into an ISO and pushing it to a cluster's 
# /shared/files/ directory. It also allows for connecting and disconnecting these ISOs to and from VMs.
# 
# This also manages pre and post migration scripts that the user can run before/after a server is migrated.
# 

use strict;
use warnings;
use AN::Tools;

my $THIS_FILE = "mediaLibrary";

# Turn off buffering so that the pinwheel will display while waiting
# for the SSH call(s) to complete.
$| = 1;

my ($an) = initialize($THIS_FILE, 1);
$an->default_log_file    ($an->data->{path}{log_file});
$an->default_log_language($an->data->{sys}{log_language});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Log->db_transactions(1) if $an->data->{striker}{log_db_transactions};

# Set some defaults
$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Log our startup
my ($date, $time) = $an->Get->date_and_time();
$an->Log->entry({log_level => 3, message_key => "log_0001", message_variables => {
	date   => $date, 
	'time' => $time,
}, file => $THIS_FILE, line => __LINE__});

# Get (create if needed) my UUID.
$an->Storage->prep_uuid();

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({
	file	=>	$THIS_FILE,
	quiet	=>	1
});

# Read in some configuration information
$an->Storage->read_hosts();
$an->Storage->read_ssh_config();

# Read in our Anvil! systems.
$an->ScanCore->parse_anvil_data();

# I need to convert the global configuration of the clusters to the format I use here.
#AN::Cluster::convert_cluster_config($an);

# If there is only one cluster defined, use it. Note that I need a special exception in $an->Web->get_cgi() 
# for this to work properly.
if (not $an->data->{cgi}{cluster})
{
	my @cluster_name;
	foreach my $cluster (keys %{$an->data->{clusters}})
	{
		push @cluster_name, $cluster;
	}
	if (@cluster_name == 1)
	{
		$an->data->{cgi}{cluster} = $cluster_name[0];
	}
}

# Check for passed-in CGI variables.
$an->Web->check_all_cgi();

# Do I have a cluster name?
$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
	name1 => "cgi::anvil_uuid", value1 => $an->data->{cgi}{anvil_uuid},
}, file => $THIS_FILE, line => __LINE__});
if ($an->data->{cgi}{anvil_uuid})
{
	# Print the header.
	$an->Striker->_header({'caller' => "mediaLibrary"});
	
	if ($an->data->{cgi}{task})
	{
		$an->data->{sys}{show_refresh} = 0;
		$an->MediaLibrary->_process_task();
	}
	else
	{
		# Show the files.
		$an->MediaLibrary->_read_shared();
	}
	
	$an->Striker->_footer();
}
else
{
	# Ask the user which cluster they want to look at.
	print $an->Web->template({file => "configure.html", template => "redirect-to-configure"});

}

exit (0);


### NOTE: These two functions are duplicated in 'striker' and 'configure' to allow Common.pm to be 
###       retired and will be phased out.
# This initializes a call; reads variables, etc. In this function, '$an' is not yet defined.
sub initialize
{
	my ($caller, $initialize_http) = @_;
	
	# Set default configuration variable values
	my $an = AN::Tools->new();
	#my ($an) = _initialize_an();
	
	# First thing first, initialize the web session.
	$an->Web->initialize_http() if $initialize_http;

	# First up, read in the default strings file.
	$an->Storage->read_words({file => $an->data->{path}{common_strings}});
	$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
	$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

	# Read in the configuration file. If the file doesn't exist, initial setup will be triggered.
	$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
	
	return($an);
}
