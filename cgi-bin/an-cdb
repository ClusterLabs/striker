#!/usr/bin/perl
#
# AN!CDB - Alteeve's Niche! Cluster Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and
# able to take full liability for it's use. The authors take care to prevent
# unexpected side effects when using this program. However, no software is
# perfect and bugs may exist which could lead to hangs or crashes in the
# program, in your cluster and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.com/w/2-Node_Red_Hat_KVM_Cluster_Tutorial
#
# This program's source code and updates are available on Github:
# - https://github.com/digimer/an-cdb
#
# Author;
# Alteeve's Niche!  -  https://alteeve.com
# Madison Kelly     -  mkelly@alteeve.ca
# 
# TODO:
# - Read and cache each cluster's /etc/hosts file.
# - 

use strict;
use warnings;
require "./an-cluster.lib";
require "./an-cdb.lib";
our $THIS_FILE = "an-cdb";

my $conf={
	clusters		=>	{
		'cc-cluster-01'		=>	{
			description		=>	"CC Systems \"Cluster 01\" (in Peer 1)",
			nodes			=>	["cc-c01n01.remote", "cc-c01n02.remote"],
		},
		'cc-cluster-02'		=>	{
			description		=>	"CC Systems \"Cluster 02\" (At YYZ HQ)",
			nodes			=>	["cc-c02n01", "cc-c02n02"],
		},
		'pp-cluster-01'		=>	{
			description		=>	"Plastic Plus \"Cluster 01\"",
			nodes			=>	["pp-c01n01", "pp-c01n02"],
		},
	},
	nodes			=>	"",
	check_using_node	=>	"",
	up_nodes		=>	[],
	online_nodes		=>	[],
	path			=>	{
		cat			=>	"/bin/cat",
		cluster_conf		=>	"/etc/cluster/cluster.conf",
		clusvcadm		=>	"/usr/sbin/clusvcadm",
		'log'			=>	"/var/log/an-cdb.log",
		lvdisplay		=>	"/sbin/lvdisplay",
		ping			=>	"/usr/bin/ping",
		ssh			=>	"/usr/bin/ssh",
		fence_ipmilan		=>	"/sbin/fence_ipmilan",
		'an-cdb_files'		=>	"/var/www/home",
		gethostip		=>	"/bin/gethostip",
		ifconfig		=>	"/sbin/ifconfig",
	},
	handles			=>	{
		'log'			=>	"",
	},
	'system'		=>	{
		debug			=>	1,
		username		=>	getpwuid( $< ),
		config_read		=>	0,
		up_nodes		=>	0,
		online_nodes		=>	0,
		show_nodes		=>	0,
		footer_printed		=>	0,
		show_refresh		=>	1,
	},
};

# If there is only one cluster defined, use it. Note that I need a special
# exception in get_cgi_vars() for this to work properly.
if (not $conf->{cgi}{cluster})
{
	my @cluster_name;
	foreach my $cluster (keys %{$conf->{clusters}})
	{
		push @cluster_name, $cluster;
	}
	if (@cluster_name == 1)
	{
		$conf->{cgi}{cluster} = $cluster_name[0];
	}
}

get_cgi_vars($conf);
header($conf);

if ($conf->{cgi}{cluster})
{
	if ($conf->{cgi}{task})
	{
		$conf->{'system'}{show_refresh} = 0;
		process_task($conf);
	}
	else
	{
		# Set the node list.
		my $cluster    = $conf->{cgi}{cluster};
		$conf->{nodes} = $conf->{clusters}{$cluster}{nodes};
		scan_cluster($conf);
		display_details($conf);
	}
}
else
{
	# Ask the user which cluster they want to look at.
	ask_which_cluster($conf);
}
footer($conf);

exit (0);
