#!/usr/bin/perl
#
# Striker - The Anvil! Cluster Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and able to take full liability 
# for it's use. The authors take care to prevent unexpected side effects when using this program. However, no
# software is perfect and bugs may exist which could lead to hangs or crashes in the program, in your cluster
# and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.ca/w/AN!Cluster_Tutorial_2
#
# This program's source code and updates are available on Github:
# - https://github.com/digimer/striker
#
# Author;
# Alteeve's Niche!  -  https://alteeve.ca
# Madison Kelly     -  mkelly@alteeve.ca
# 
# TODO:
# - Make it so that the backup from one Striker can be loaded into another without changing it's host 
#   name/IPs/etc. A "Don't alter system" checkbox?
# - Adding a VM that is running on the "wrong" node gets it added to the wrong failover domain.
# - Check to see if a VM is running outside of clustat and, if so, auto-enable it on the appropriate node.
# - Add a "Cancel" button to each "Confirm" box.
# - Add an ability to trigger a status email. SIGUSR1 via script -> email Allow users to rename VMs.
# - Add 'virsh undefine' when deleting VMs if 'virsh list --all' shows it still defined on one of the VMs.
# - Build a VM outside of the cluster and sort out a way to have the dashboard insert it into the cluster.
# - Make "Node -> Offline" be a "Warning!"
# - Make "Bond -> Down" be a warning
# - Enable an administrative LOCK OUT switch to prevent reboots during things like firmware updates.
# - Add ability to "unplug" a server's network cable.
#   
# - Pass a timestamp with all CGI commands for five minutes in the future and abort any actions that are 
#   older than that.
# - Pass $THIS_FILE and __LINE__ on all 'error()' calls.
# 
# BUG:
# - [root@rm-a01n01 ~]# virsh destroy vm07-newmas
#   error: Failed to destroy domain vm07-newmas
#   error: operation failed: failed to kill qemu process with SIGTERM
#   ^- qemu fails to respond to virsh, possibly because of high load on host. No current known fix except to
#      migrate other servers to peer and fence the node.


use strict;
use warnings;
use lib 'lib';

my $THIS_FILE = "striker";
use AN::Common;
use AN::Cluster;
use AN::Striker;
use AN::InstallManifest;
use AN::Tools;

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my ($conf) = AN::Common::initialize($THIS_FILE);

# Open my handle to AN::Tools, use the $conf hash ref for $an->data and set '$an's default log file.
my $an = AN::Tools->new({data => $conf});
$an->default_log_file    ($conf->{path}{log_file});
$an->default_log_language($conf->{sys}{log_language});
$an->Log->level          ($conf->{sys}{log_level});
$conf->{handle}{an} = $an;
AN::Cluster::record($conf, "$THIS_FILE ".__LINE__."; an: [".$an."], handle::an: [$conf->{handle}{an}], log file: [".$an->default_log_file."], log language: [".$an->default_log_language."]\n");

# Set some defaults
$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
$an->String->read_words({file => $an->data->{path}{scancore_strings}});
$an->String->read_words({file => $an->data->{path}{striker_strings}});

# Get (create if needed) my UUID.
$an->Storage->prep_local_uuid($an);

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({
	file	=>	$THIS_FILE,
	quiet	=>	1
});
AN::Cluster::record($conf, "$THIS_FILE ".__LINE__."; DB connections: [$connections]\n");

AN::Cluster::find_executables($conf);
AN::Cluster::read_hosts($conf);
AN::Cluster::read_ssh_config($conf);

# If the configuration file isn't found, we'll switch over to 'Configure'.
if (AN::Common::read_configuration_file($conf))
{
	# Configuration needed, striker.conf doesn't exist.
	print AN::Common::template($conf, "main-page.html", "redirect-to-configure"); 
	exit(1);
}

# I need to convert the global configuration of the clusters to the format I use here.
AN::Cluster::convert_cluster_config($conf);

# If there is only one cluster defined, use it. Note that I need a special
# exception in get_cgi_vars() for this to work properly.
if ((not $conf->{cgi}{cluster}) && (not $conf->{cgi}{config}))
{
	my @cluster_name;
	foreach my $cluster (keys %{$conf->{clusters}})
	{
		push @cluster_name, $cluster;
	}
	if (@cluster_name == 1)
	{
		$conf->{cgi}{cluster} = $cluster_name[0];
	}
}

# Get the CGI variables I might be passed.
AN::Cluster::get_cgi_vars($conf, [
	"adapter",
	"anvil",
	"anvil_bcn_network",
	"anvil_bcn_subnet",
	"anvil_dns1",
	"anvil_dns2",
	"anvil_domain",
	"anvil_fence_order",
	"anvil_id",
	"anvil_ifn_gateway",
	"anvil_ifn_network",
	"anvil_ifn_subnet",
	"anvil_media_library_size",
	"anvil_media_library_unit",
	"anvil_mtu_size",
	"anvil_name",
	"anvil_node1_bcn_ip",
	"anvil_node1_bcn_link1_mac",
	"anvil_node1_bcn_link2_mac",
	"anvil_node1_current_ip",
	"anvil_node1_current_password",
	"anvil_node1_ifn_ip",
	"anvil_node1_ifn_link1_mac",
	"anvil_node1_ifn_link2_mac",
	"anvil_node1_ipmi_ip",
	"anvil_node1_ipmi_gateway",
	"anvil_node1_ipmi_netmask",
	"anvil_node1_ipmi_password",
	"anvil_node1_ipmi_user",
	"anvil_node1_name",
	"anvil_node1_pdu1_outlet",
	"anvil_node1_pdu2_outlet",
	"anvil_node1_pdu3_outlet",
	"anvil_node1_pdu4_outlet",
	"anvil_node1_sn_ip",
	"anvil_node1_sn_link1_mac",
	"anvil_node1_sn_link2_mac",
	"anvil_node1_uuid",
	"anvil_node2_bcn_ip",
	"anvil_node2_bcn_link1_mac",
	"anvil_node2_bcn_link2_mac",
	"anvil_node2_current_ip",
	"anvil_node2_current_password",
	"anvil_node2_ifn_ip",
	"anvil_node2_ifn_link1_mac",
	"anvil_node2_ifn_link2_mac",
	"anvil_node2_ipmi_ip",
	"anvil_node1_ipmi_gateway",
	"anvil_node2_ipmi_netmask",
	"anvil_node2_ipmi_password",
	"anvil_node2_ipmi_user",
	"anvil_node2_name",
	"anvil_node2_pdu1_outlet",
	"anvil_node2_pdu2_outlet",
	"anvil_node2_pdu3_outlet",
	"anvil_node2_pdu4_outlet",
	"anvil_node2_sn_ip",
	"anvil_node2_sn_link1_mac",
	"anvil_node2_sn_link2_mac",
	"anvil_node2_uuid",
	"anvil_ntp1", 
	"anvil_ntp2", 
	"anvil_open_vnc_ports",
	"anvil_password",
	"anvil_pdu1_ip",
	"anvil_pdu1_name",
	"anvil_pdu1_agent",
	"anvil_pdu2_ip",
	"anvil_pdu2_name",
	"anvil_pdu2_agent",
	"anvil_pdu3_ip",
	"anvil_pdu3_name",
	"anvil_pdu3_agent",
	"anvil_pdu4_ip",
	"anvil_pdu4_name",
	"anvil_pdu4_agent",
	"anvil_prefix",
	"anvil_repositories",
	"anvil_ricci_password",
	"anvil_root_password",
	"anvil_sequence",
	"anvil_ssh_keysize",
	"anvil_sn_network",
	"anvil_sn_subnet",
	"anvil_storage_partition_1_byte_size",
	"anvil_storage_partition_2_byte_size",
	"anvil_storage_pool1_size",
	"anvil_storage_pool1_unit",
	"anvil_striker1_bcn_ip",
	"anvil_striker1_database",
	"anvil_striker1_ifn_ip",
	"anvil_striker1_name",
	"anvil_striker1_user",
	"anvil_striker1_uuid",
	"anvil_striker1_password",
	"anvil_striker2_bcn_ip",
	"anvil_striker2_database",
	"anvil_striker2_ifn_ip",
	"anvil_striker2_name",
	"anvil_striker2_user",
	"anvil_striker2_uuid",
	"anvil_striker2_password",
	"anvil_switch1_ip",
	"anvil_switch1_name",
	"anvil_switch2_ip",
	"anvil_switch2_name",
	"anvil_ups1_ip",
	"anvil_ups1_name",
	"anvil_ups2_ip",
	"anvil_ups2_name",
	"boot_device",
	"change",
	"cluster",
	"config",	# This is used by various things
	"configure",	# This controls the WebUI based Striker Configurator
	"confirm",
	"cpu_cores",
	"delete",
	"device",
	"device_keys",
	"disk_address",
	"do",
	"driver_iso",
	"expire",
	"file",
	"generate",
	"host",
	"insert",
	"install_iso",
	"install_target",
	"load",
	"logical_disk",
	"logo",
	"mail_data__to",
	"mail_data__sending_domain",
	"make_disk_good",
	"max_cores",
	"max_ram",
	"max_storage",
	"name",
	"node",
	"node_cluster_name",
	"os_variant",
	"perform_install", 
	"ram",
	"ram_suffix",
	"remap_network",
	"rhn_user",
	"rhn_password",
	"row",
	"run",
	"save",
	"section",
	"smtp__server",
	"smtp__port",
	"smtp__username",
	"smtp__password",
	"smtp__helo_domain",
	"smtp__encrypt_pass",
	"smtp__security",
	"save",
	"storage",
	"striker_database",
	"striker_user",
	"system",
	"target",
	"task",
	"subtask",
	"update_manifest",
	"vg_list",
	"vm",
	"vm_ram",
]);

# If 'anvil' was passed, get it's ID and then check for CGI variables.
#if (($conf->{cgi}{save}) && ($conf->{cgi}{anvil_id}))
if ($conf->{cgi}{anvil_id})
{
	my $this_id = $conf->{cgi}{anvil_id};
	AN::Cluster::record($conf, "$THIS_FILE ".__LINE__."; this_id: [$this_id]\n");
	AN::Cluster::get_cgi_vars($conf, [
		"cluster__${this_id}__name",
		"cluster__${this_id}__description",
		"cluster__${this_id}__url",
		"cluster__${this_id}__company",
		"cluster__${this_id}__ricci_pw",
		"cluster__${this_id}__root_pw",
		"cluster__${this_id}__nodes_1_name",
		"cluster__${this_id}__nodes_1_ip",
		"cluster__${this_id}__nodes_1_port",
		"cluster__${this_id}__nodes_2_name",
		"cluster__${this_id}__nodes_2_ip",
		"cluster__${this_id}__nodes_2_port",
		"cluster__${this_id}__smtp__server",
		"cluster__${this_id}__smtp__port",
		"cluster__${this_id}__smtp__username",
		"cluster__${this_id}__smtp__password",
		"cluster__${this_id}__smtp__security",
		"cluster__${this_id}__smtp__encrypt_pass",
		"cluster__${this_id}__smtp__helo_domain",
		"cluster__${this_id}__mail_data__to",
		"cluster__${this_id}__mail_data__sending_domain",
	]);
}

# Pick up the list of volume groups.
if ($conf->{cgi}{vg_list})
{
	my @more_vars;
	foreach my $vg (split/,/, $conf->{cgi}{vg_list})
	{
		next if not $vg;
		push @more_vars, "vg_$vg";
		push @more_vars, "vg_suffix_$vg";
	}
	AN::Cluster::get_cgi_vars($conf, \@more_vars);
}
# Pick up the list of optical devices.
if ($conf->{cgi}{device_keys})
{
	my @more_vars;
	foreach my $device (split/,/, $conf->{cgi}{device_keys})
	{
		next if not $device;
		push @more_vars, "$device";
		my $drive = ($device =~ /media_(.*)/)[0];
		push @more_vars, "insert_$drive";
	}
	AN::Cluster::get_cgi_vars($conf, \@more_vars);
}

# Print the header.
AN::Cluster::header($conf);

# Do I have a cluster name?
if ($conf->{cgi}{logo})
{
	if ($conf->{cgi}{config})
	{
		AN::Cluster::configure_dashboard($conf);
	}
	else
	{
		# This is also where we provide options for backup/restore, 
		# install manifests, etc.
		AN::Cluster::show_anvil_selection_and_striker_options($conf);
	}
}
elsif ($conf->{cgi}{config})
{
	AN::Cluster::configure_dashboard($conf);
}
elsif ($conf->{cgi}{'system'})
{
	AN::Cluster::configure_local_system($conf);
}
elsif ($conf->{cgi}{cluster})
{
	my $cluster = $conf->{cgi}{cluster};
	$conf->{sys}{root_password}           = $conf->{clusters}{$cluster}{root_pw};
	$conf->{clusters}{$cluster}{ricci_pw} = $conf->{clusters}{$cluster}{root_pw} if not $conf->{clusters}{$cluster}{ricci_pw};
	AN::Cluster::record($conf, "$THIS_FILE ".__LINE__."; cluster: [$cluster], clusters::${cluster}::root_pw: [$conf->{clusters}{$cluster}{root_pw}], clusters::${cluster}::ricci_pw: [$conf->{clusters}{$cluster}{ricci_pw}], sys::root_password: [$conf->{sys}{root_password}]\n");
	
	# If the requested cluster isn't found in the config file, error out.
	if (not $conf->{clusters}{$cluster}{nodes})
	{
		# You can pass in 'anvil => $cluster' as the first hash
		# reference in the 'template' call and then use the string
		# directly in the template, but I think that's too indirect
		# for future devs to follow initially.
		my $say_message = AN::Common::get_string($conf, {key => "message_0003", variables => {
			anvil	=>	$cluster,
		}});
		print AN::Common::template($conf, "main-page.html", "no-anvil-found", {
			message	=>	$say_message,
		}); 
	}
	else
	{
		if ($conf->{cgi}{task})
		{
			$conf->{sys}{show_refresh} = 0;
			AN::Striker::process_task($conf);
		}
		else
		{
			# Set the node list.
			#AN::Cluster::record($conf, "cluster: [$cluster], ricci_pw: [$conf->{clusters}{$cluster}{ricci_pw}]\n");
			$conf->{nodes} = $conf->{clusters}{$cluster}{nodes};
			AN::Cluster::scan_cluster($conf);
			AN::Striker::display_details($conf);
		}
	}
}
else
{
	# Ask the user which cluster they want to look at.
	AN::Cluster::show_anvil_selection_and_striker_options($conf);
}
AN::Cluster::footer($conf);

exit (0);
