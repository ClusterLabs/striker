#!/usr/bin/perl
#
# Striker - The Anvil! Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and able to take full liability 
# for its use. The authors take care to prevent unexpected side effects when using this program. However, no
# software is perfect and bugs may exist which could lead to hangs or crashes in the program, in your cluster
# and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.ca/w/AN!Cluster_Tutorial_2
#
# This program's source code and updates are available on Github:
# - https://github.com/ClusterLabs/striker
#
# Author;
# Alteeve's Niche!  -  https://alteeve.ca
# Madison Kelly     -  mkelly@alteeve.ca
# 
# TODO:
# - Enable an administrative LOCK OUT switch to prevent reboots during things like firmware updates.
# - Add ability to "unplug" a server's network cable.
# 

use strict;
use warnings;
use AN::Tools;

my $THIS_FILE = "striker";

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my ($an) = initialize($THIS_FILE, 1);
$an->default_log_file    ($an->data->{path}{log_file});
$an->default_log_language($an->data->{sys}{log_language});
$an->Log->level          ($an->data->{sys}{log_level});
$an->Log->db_transactions(1) if $an->data->{striker}{log_db_transactions};

# Set some defaults
$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf ({file => $an->data->{path}{striker_config}});
$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Log our startup
my ($date, $time) = $an->Get->date_and_time();
$an->Log->entry({log_level => 2, message_key => "log_0001", message_variables => {
	date	=>	$date, 
	'time'	=>	$time,
}, file => $THIS_FILE, line => __LINE__});

# Get (create if needed) my UUID.
$an->Storage->prep_uuid();

# Connect to the databases.
$an->data->{sys}{db_connections} = $an->DB->connect_to_databases({
	file	=>	$THIS_FILE,
	quiet	=>	1
});

# Read in some configuration information
$an->Storage->read_hosts();
$an->Storage->read_ssh_config();

# Check for passed-in CGI variables.
$an->Web->check_all_cgi();

# Pick up the list of volume groups.
if ($an->data->{cgi}{vg_list})
{
	my @more_vars;
	foreach my $vg (split/,/, $an->data->{cgi}{vg_list})
	{
		next if not $vg;
		push @more_vars, "vg_$vg";
		push @more_vars, "vg_suffix_$vg";
	}
	$an->Web->get_cgi({variables => \@more_vars});
}

# Pick up the list of optical devices.
if ($an->data->{cgi}{device_keys})
{
	my @more_vars;
	foreach my $device (split/,/, $an->data->{cgi}{device_keys})
	{
		next if not $device;
		push @more_vars, "$device";
		my $drive = ($device =~ /media_(.*)/)[0];
		push @more_vars, "insert_$drive";
	}
	$an->Web->get_cgi({variables => \@more_vars});
}

# Do I have an Anvil! system UUID? If not, and if only one Anvil! exists in the database, set it.
$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
	name1 => "cgi::anvil_uuid", value1 => $an->data->{cgi}{anvil_uuid},
}, file => $THIS_FILE, line => __LINE__});
if (not $an->data->{cgi}{anvil_uuid})
{
	my $anvil_data  = $an->ScanCore->get_anvils();
	my $anvil_count = @{$anvil_data};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "anvil_count", value1 => $anvil_count, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($anvil_count == 1)
	{
		$an->data->{cgi}{anvil_uuid}     = $anvil_data->[0]->{anvil_uuid};
		$an->data->{sys}{anvil_uuid_set} = 1;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "cgi::anvil_uuid",     value1 => $an->data->{cgi}{anvil_uuid}, 
			name2 => "sys::anvil_uuid_set", value2 => $an->data->{sys}{anvil_uuid_set}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
}

# Now, if I have an Anvil! UUID, load its data. If I still don't, show the selection menu.
if ($an->data->{cgi}{anvil_uuid})
{
	# Print the header.
	$an->Striker->_header({'caller' => "striker"});
	
	$an->Striker->load_anvil();
	if ($an->data->{cgi}{task})
	{
		$an->data->{sys}{show_refresh} = 0;
		$an->Striker->_process_task();
	}
	else
	{
		$an->Striker->scan_anvil();
		$an->Striker->_display_details();
	}
	
	$an->Striker->_footer();
}
else
{
	# Ask the user which cluster they want to look at.
	print $an->Web->template({file => "configure.html", template => "redirect-to-configure"});
	$an->data->{sys}{footer_printed} = 1;
}

$an->nice_exit({exit_code => 0});


### NOTE: These two functions are duplicated in 'mediaLibrary' and 'configure' to allow Common.pm to be 
###       retired and will be phased out.
# This initializes a call; reads variables, etc. In this function, '$an' is not yet defined.
sub initialize
{
	my ($caller, $initialize_http) = @_;
	
	# Set default configuration variable values
	my $an = AN::Tools->new();
	#my ($an) = _initialize_an();
	
	# First thing first, initialize the web session.
	$an->Web->initialize_http() if $initialize_http;

	# First up, read in the default strings file.
	$an->Storage->read_words({file => $an->data->{path}{common_strings}});
	$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
	$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

	# Read in the configuration file. If the file doesn't exist, initial setup will be triggered.
	$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
	
	if ((exists $an->data->{sys}{log_level}) && ($an->data->{sys}{log_level} =~ /^\d+$/))
	{
		$an->data->{'log'}{level} = $an->data->{sys}{log_level};
		$an->Log->level($an->data->{sys}{log_level});
	}
	
	return($an);
}
