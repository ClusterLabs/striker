#!/usr/bin/perl
#
# Striker - The Anvil! Cluster Dashboard
# 
# This software is released under the GNU GPL v2+ license.
# 
# No warranty is provided. Do not use this software unless you are willing and able to take full liability 
# for it's use. The authors take care to prevent unexpected side effects when using this program. However, no
# software is perfect and bugs may exist which could lead to hangs or crashes in the program, in your cluster
# and possibly even data loss.
# 
# If you are concerned about these risks, please stick to command line tools.
# 
# This program is designed to extend clusters built according to this tutorial:
# - https://alteeve.ca/w/AN!Cluster_Tutorial_2
#
# This program's source code and updates are available on Github:
# - https://github.com/ClusterLabs/striker
#
# Author;
# Alteeve's Niche!  -  https://alteeve.ca
# Madison Kelly     -  mkelly@alteeve.ca
# 
# TODO:
# - Make it so that the backup from one Striker can be loaded into another without changing it's host 
#   name/IPs/etc. A "Don't alter system" checkbox?
# - Adding a VM that is running on the "wrong" node gets it added to the wrong failover domain.
# - Check to see if a VM is running outside of clustat and, if so, auto-enable it on the appropriate node.
# - Add a "Cancel" button to each "Confirm" box.
# - Add an ability to trigger a status email. SIGUSR1 via script -> email Allow users to rename VMs.
# - Add 'virsh undefine' when deleting VMs if 'virsh list --all' shows it still defined on one of the VMs.
# - Build a VM outside of the cluster and sort out a way to have the dashboard insert it into the cluster.
# - Make "Node -> Offline" be a "Warning!"
# - Make "Bond -> Down" be a warning
# - Enable an administrative LOCK OUT switch to prevent reboots during things like firmware updates.
# - Add ability to "unplug" a server's network cable.
#   
# - Pass a timestamp with all CGI commands for five minutes in the future and abort any actions that are 
#   older than that.
# - Pass $THIS_FILE and __LINE__ on all 'error()' calls.
# 
# BUG:
# - [root@rm-a01n01 ~]# virsh destroy vm07-newmas
#   error: Failed to destroy domain vm07-newmas
#   error: operation failed: failed to kill qemu process with SIGTERM
#   ^- qemu fails to respond to virsh, possibly because of high load on host. No current known fix except to
#      migrate other servers to peer and fence the node.

use strict;
use warnings;
use lib 'lib';

my $THIS_FILE = "striker";
use AN::Common;
use AN::Cluster;
use AN::Striker;
use AN::InstallManifest;
use AN::Tools;

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my ($conf) = AN::Common::initialize($THIS_FILE, 1);

# Open my handle to AN::Tools, use the $conf hash ref for $an->data and set '$an's default log file.
my $an = AN::Tools->new({data => $conf});
$an->default_log_file    ($conf->{path}{log_file});
$an->default_log_language($conf->{sys}{log_language});
$an->Log->level          ($conf->{sys}{log_level});
$conf->{handle}{an} = $an;

# Set some defaults
$an->default_language    ($an->data->{scancore}{language});
$an->default_log_language($an->data->{scancore}{log_language});
$an->default_log_file    ($an->data->{path}{log_file});

# Read my stuff
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
$an->String->read_words({file => $an->data->{path}{scancore_strings}});
$an->String->read_words({file => $an->data->{path}{striker_strings}});

# Log our startup
my ($date, $time) = $an->Get->date_and_time();
$an->Log->entry({log_level => 1, message_key => "log_0001", message_variables => {
	date	=>	$date, 
	'time'	=>	$time,
}, file => $THIS_FILE, line => __LINE__});

# Get (create if needed) my UUID.
$an->Storage->prep_local_uuid($an);

# Connect to the databases.
my $connections = $an->DB->connect_to_databases({
	file	=>	$THIS_FILE,
	quiet	=>	1
});

AN::Cluster::find_executables($conf);
AN::Cluster::read_hosts($conf);
AN::Cluster::read_ssh_config($conf);

# If the configuration file isn't found, we'll switch over to 'Configure'.
if (AN::Common::read_configuration_file($conf))
{
	# Configuration needed, striker.conf doesn't exist.
	print AN::Common::template($conf, "main-page.html", "redirect-to-configure"); 
	exit(1);
}

# I need to convert the global configuration of the clusters to the format I use here.
AN::Cluster::convert_cluster_config($conf);

# If there is only one cluster defined, use it. Note that I need a special
# exception in get_cgi_vars() for this to work properly.
if ((not $conf->{cgi}{cluster}) && (not $conf->{cgi}{config}))
{
	my @cluster_name;
	foreach my $cluster (keys %{$conf->{clusters}})
	{
		push @cluster_name, $cluster;
	}
	if (@cluster_name == 1)
	{
		$conf->{cgi}{cluster} = $cluster_name[0];
	}
}

# Get the CGI variables I might be passed.
AN::Common::read_in_cgi_variables($conf);

# If 'anvil' was passed, get it's ID and then check for CGI variables.
#if (($conf->{cgi}{save}) && ($conf->{cgi}{anvil_id}))
if ($conf->{cgi}{anvil_id})
{
	my $this_id = $conf->{cgi}{anvil_id};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "this_id", value1 => $this_id,
	}, file => $THIS_FILE, line => __LINE__});
	AN::Cluster::get_cgi_vars($conf, [
		"cluster__${this_id}__name",
		"cluster__${this_id}__description",
		"cluster__${this_id}__url",
		"cluster__${this_id}__company",
		"cluster__${this_id}__ricci_pw",
		"cluster__${this_id}__root_pw",
		"cluster__${this_id}__nodes_1_name",
		"cluster__${this_id}__nodes_1_ip",
		"cluster__${this_id}__nodes_1_port",
		"cluster__${this_id}__nodes_2_name",
		"cluster__${this_id}__nodes_2_ip",
		"cluster__${this_id}__nodes_2_port",
		"cluster__${this_id}__smtp__server",
		"cluster__${this_id}__smtp__port",
		"cluster__${this_id}__smtp__username",
		"cluster__${this_id}__smtp__password",
		"cluster__${this_id}__smtp__security",
		"cluster__${this_id}__smtp__encrypt_pass",
		"cluster__${this_id}__smtp__helo_domain",
		"cluster__${this_id}__mail_data__to",
		"cluster__${this_id}__mail_data__sending_domain",
	]);
}

# Pick up the list of volume groups.
if ($conf->{cgi}{vg_list})
{
	my @more_vars;
	foreach my $vg (split/,/, $conf->{cgi}{vg_list})
	{
		next if not $vg;
		push @more_vars, "vg_$vg";
		push @more_vars, "vg_suffix_$vg";
	}
	AN::Cluster::get_cgi_vars($conf, \@more_vars);
}
# Pick up the list of optical devices.
if ($conf->{cgi}{device_keys})
{
	my @more_vars;
	foreach my $device (split/,/, $conf->{cgi}{device_keys})
	{
		next if not $device;
		push @more_vars, "$device";
		my $drive = ($device =~ /media_(.*)/)[0];
		push @more_vars, "insert_$drive";
	}
	AN::Cluster::get_cgi_vars($conf, \@more_vars);
}

# Print the header.
AN::Cluster::header($conf);

# Do I have a cluster name?
if ($conf->{cgi}{logo})
{
	if ($conf->{cgi}{config})
	{
		AN::Cluster::configure_dashboard($conf);
	}
	else
	{
		# This is also where we provide options for backup/restore, install manifests, etc.
		AN::Cluster::show_anvil_selection_and_striker_options($conf);
	}
}
elsif ($conf->{cgi}{config})
{
	AN::Cluster::configure_dashboard($conf);
}
elsif ($conf->{cgi}{'system'})
{
	AN::Cluster::configure_local_system($conf);
}
elsif ($conf->{cgi}{cluster})
{
	my $cluster = $conf->{cgi}{cluster};
	$conf->{sys}{root_password}           = $conf->{clusters}{$cluster}{root_pw};
	$conf->{clusters}{$cluster}{ricci_pw} = $conf->{clusters}{$cluster}{root_pw} if not $conf->{clusters}{$cluster}{ricci_pw};
	$an->Log->entry({log_level => 4, message_key => "an_variables_0004", message_variables => {
		name1 => "cluster",                        value1 => $cluster,
		name2 => "clusters::${cluster}::root_pw",  value2 => $conf->{clusters}{$cluster}{root_pw},
		name3 => "clusters::${cluster}::ricci_pw", value3 => $conf->{clusters}{$cluster}{ricci_pw},
		name4 => "sys::root_password",             value4 => $conf->{sys}{root_password},
	}, file => $THIS_FILE, line => __LINE__});
	
	# If the requested cluster isn't found in the config file, error out.
	if (not $conf->{clusters}{$cluster}{nodes})
	{
		# You can pass in 'anvil => $cluster' as the first hash reference in the 'template' call and 
		# then use the string directly in the template, but I think that's too indirect for future
		# devs to follow initially.
		my $say_message = AN::Common::get_string($conf, {key => "message_0003", variables => {
			anvil	=>	$cluster,
		}});
		print AN::Common::template($conf, "main-page.html", "no-anvil-found", {
			message	=>	$say_message,
		}); 
	}
	else
	{
		if ($conf->{cgi}{task})
		{
			$conf->{sys}{show_refresh} = 0;
			AN::Striker::process_task($conf);
		}
		else
		{
			# Set the node list.
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "cluster", value1 => $cluster,
				name2 => "ricci_pw", value2 => $conf->{clusters}{$cluster}{ricci_pw},
			}, file => $THIS_FILE, line => __LINE__});
			$conf->{nodes} = $conf->{clusters}{$cluster}{nodes};
			AN::Cluster::scan_cluster($conf);
			AN::Striker::display_details($conf);
		}
	}
}
else
{
	# Ask the user which cluster they want to look at.
	AN::Cluster::show_anvil_selection_and_striker_options($conf);
}
AN::Cluster::footer($conf);

exit (0);
