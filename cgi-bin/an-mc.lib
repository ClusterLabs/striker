#!/usr/bin/perl
# 
# AN!MediaConnector
# 
# This allows a mechanism for taking a CD or DVD, turning it into an ISO and
# pushing it to a cluster's /shared/files/ directory. It also allows for 
# connecting and disconnecting these ISOs to and from VMs.
# 

use strict;
use warnings;

use strict;
use warnings;
use CGI;
use Encode;
use IO::Handle;
use CGI::Carp "fatalsToBrowser";

# Setup for UTF-8 mode.
binmode STDOUT, ":utf8:";
$ENV{'PERL_UNICODE'}=1;
my $THIS_FILE = "an-mc.lib";


# Do whatever the user has asked.
sub process_task
{
	my ($conf) = @_;
	
	record($conf, "$THIS_FILE ".__LINE__."; Task: [$conf->{cgi}{task}]\n");
	if ($conf->{cgi}{task} eq "image_and_upload")
	{
		if ($conf->{cgi}{confirm})
		{
			# Proceed.
			image_and_upload($conf);
		}
		else
		{
			# Get the user to confirm.
			confirm_image_and_upload($conf);
		}
	}
	elsif ($conf->{cgi}{task} eq "delete")
	{
		if ($conf->{cgi}{confirm})
		{
			# Proceed.
			delete_file($conf);
		}
		else
		{
			# Get the user to confirm.
			confirm_delete_file($conf);
		}
	}
	elsif ($conf->{cgi}{task} eq "upload_file")
	{
		save_file_to_disk($conf);
	}
	elsif ($conf->{cgi}{task} eq "download_url")
	{
		if ($conf->{cgi}{confirm})
		{
			# Proceed.
			download_url($conf);
		}
		else
		{
			# Get the user to confirm.
			confirm_download_url($conf);
		}
	}
	
	return (0);
}

# This downloads a given URL directly to the cluster using 'wget'.
sub download_url
{
	my ($conf) = @_;
	
	my $cluster       = $conf->{cgi}{cluster};
	my $url           = $conf->{cgi}{url};
	my ($base, $file) = ($url =~ /^(.*)\/(.*?)$/);
	
	my ($node) = read_files_on_shared($conf);
	print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_ready_bold\">
			Downloading from a website.
		</td>
	</tr>
	<tr>
		<td>
			<br />
			<span class=\"highlight_warning\"><b>Please be patient!</b></span><br />
			<br />
			I will now download:<br />
			<br />
			<span class=\"fixed_width\">$file</span><br />
			<br />
			From the website:<br />
			<br />
			<span class=\"fixed_width\">$url</span><br />
			<br />
";
	my $progress_points = 5;
	my $next_percent    = $progress_points;
	my $sc = "$conf->{path}{ssh} root\@$node \"wget -c $url -O /shared/files/$file\"";
	#record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc]\n");
	my $fh  = IO::Handle->new();
	open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error was: $!\n";
	while(<$fh>)
	{
		chomp;
		my $line = $_;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$line =~ s/“/"/g;
		$line =~ s/”/"/g;
		#record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
		if ($line =~ /^(\d+)K .*? (\d+)% (.*?)(\w) (.*?)$/)
		{
			my $received = $1;
			my $percent  = $2;
			my $rate     = $3;
			my $rate_suf = $4;
			my $time     = $5;
			#record($conf, "$THIS_FILE ".__LINE__."; percent: [$percent], next percent: [$next_percent].\n");
			if ($percent eq "100")
			{
				print "<span class=\"highlight_good\">Download Completed.<br />\n";
			}
			elsif ($percent >= $next_percent)
			{
				#record($conf, "$THIS_FILE ".__LINE__."; percent: [$percent], next percent: [$next_percent], received: [$received], rate: [$rate], time: [$time].\n");
				# This prevents multiple prints when the file
				# is partially downloaded.
				while ($percent >= $next_percent)
				{
					$next_percent += $progress_points;
				}
				$received        *= 1024;
				my $say_received =  bytes_to_hr($conf, $received);
				#record($conf, "$THIS_FILE ".__LINE__."; received: [$received] -> [$say_received]\n");
				if (uc($rate_suf) eq "M")
				{
					$rate            =  int(($rate * (1024 * 1024)));
				}
				elsif (uc($rate_suf) eq "K")
				{
					$rate            =  int(($rate * 1024));
				}
				my $say_rate     =  bytes_to_hr($conf, $rate);
				#record($conf, "$THIS_FILE ".__LINE__."; rate: [$rate] -> [$say_rate]\n");
				my $hours   = 0;
				my $minutes = 0;
				my $seconds = 0;
				if ($time =~ /(\d+)h/)
				{
					$hours  = $1;
				}
				if ($time =~ /(\d+)m/)
				{
					$minutes = $1;
				}
				if ($time =~ /(\d+)s/)
				{
					$seconds = $1;
				}
				#record($conf, "$THIS_FILE ".__LINE__."; time: [$time] -> h[$hours], m[$minutes], s[$seconds]\n");
				my $say_hour   = $hours   == 1 ? "hour"   : "hours";
				my $say_minute = $minutes == 1 ? "minute" : "minutes";
				my $say_second = $seconds == 1 ? "second" : "seconds";
				my $say_time_remaining;
				if ($hours)
				{
					$say_time_remaining = "<b>$hours</b> $say_hour, <b>$minutes</b> $say_minute and <b>$seconds</b> $say_second"; 
				}
				elsif ($minutes)
				{
					$say_time_remaining = "<b>$minutes</b> $say_minute and <b>$seconds</b> $say_second"; 
				}
				else
				{
					$say_time_remaining = "<b>$seconds</b> $say_second"; 
				}
				#record($conf, "$THIS_FILE ".__LINE__."; time: [$time] -> [$say_time_remaining]\n");
				print "Progress: <span class=\"fixed_width\">$percent%</span> finished, <span class=\"fixed_width\">$say_received</span> downloaded at ~ <span class=\"fixed_width\">$say_rate MiB/sec</span>.<br />\n";
				print "Approximately $say_time_remaining remaining.<br />\n";
			}
		}
		else
		{
			#record($conf, "$THIS_FILE ".__LINE__."; line: [$line]\n");
			print "<span class=\"fixed_width\">$line</span><br />\n";
		}
	}
	$fh->close;
	print "
		</td>
	</tr>
	<tr>
		<td class=\"highlight_good\">
			Done!
		</td>
	</tr>
</table>
<br />
";
	
	return (0);
}

# This prompts the user to confirm the download of a file from the web.
sub confirm_download_url
{
	my ($conf) = @_;
	
	my $cluster = $conf->{cgi}{cluster};
	my $url     = $conf->{cgi}{url};
	my ($base, $file) = ($url =~ /^(.*)\/(.*?)$/);
	print "
<table align=\"center\">
	<tr>
		<td colspan=\"3\">
			<span class=\"highlight_ready_bold\">About to download from the web directly to the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i>.</span>
		</td>
	</tr>
	<tr>
		<td class=\"highlight_ready_bold\">
			Download
		</td>
		<td colspan=\"2\">
			<br />
			The file:<br />
			<span class=\"fixed_width\">$file</span><br />
			Found at the web address:<br />
			<span class=\"fixed_width\">$base</span><br />
			Will be downloaded directly to the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i>.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td class=\"highlight_warning\">
			<b>Caution!</b>
		</td>
		<td colspan=\"2\" align=\"left\">
			<br />
			<i>Downloading a file from the internet can take a long time!</i><br />
			<br />
			Please be sure that the web address above is a direct link to the file you want to download.<br />
			<br />
			Some webistes use referal links which may not work here.<br />
			If the file you download doesn't work, please delete it from the <i>Anvil!</i> and then download the file yourself.<br />
			Once you have the file, you can upload it to the <i>Anvil!</i> from your computer.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"3\">
			<!-- <div class=\"align_left\"><a href=\"?cluster=$conf->{cgi}{cluster}\"><b>Back</b></a></div> -->
			<div class=\"align_right\"><a href=\"$conf->{'system'}{cgi_string}&confirm=true\"><b>Confirm</b></a></div>
		</td>
	</tr>
	</form>
</table>
<br />
";

	return (0);
}

# This saves a file to disk from a user's upload.
sub save_file_to_disk
{
	my ($conf) = @_;
	
	my ($node) = read_files_on_shared($conf);
	print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_ready_bold\">
			Saving the file to the <i>Anvil!</i>'s storage.
		</td>
	</tr>
	<tr>
		<td>
			Please be patient!<br />
			<br />
			If the file is big and if your network is slow,<br />
			This could take a while.<br />
			<br />
";
	my $in_fh    = $conf->{cgi_fh}{file};
	my $out_file = $conf->{path}{media}.$conf->{cgi}{file};
	my $sc = "$out_file";
	record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc] with cgi fh: [$in_fh].\n");
	my $fh = IO::Handle->new();
	open ($fh, ">$sc") or die "Failed to call: [$sc], error was: $!\n";
	binmode $fh;
	while(<$in_fh>)
	{
		print $fh $_;
	}
	$fh->close;
	print "
		</td>
	</tr>
	<tr>
		<td class=\"highlight_good\">
			Upload to the server is starting.<br />
		</td>
	</tr>
	<tr>
		<td>
			<br />
			Now uploading to the <i>Anvil!</i>.<br />
			<br />
			If the connection between the Dashboard server and the <i>Anvil!</i> is slow<br />
			and if the file is big, this might also take a while to finish.<br />
			<br />
			<pre>";
	upload_to_shared($conf, $node, $out_file);
	unlink $out_file;
	print "
			</pre>
		</td>
	</tr>
	<tr>
		<td class=\"highlight_good\">
			Upload to the <i>Anvil!</i> is finished.<br />
		</td>
	</tr>
</table>
<br />
";
	
	return (0);
}

# This images and uploads a DVD or CD disc
sub image_and_upload
{
	my ($conf) = @_;
	
	# Let the user know that this might take a bit.
	print "
<div id=\"hide_when_loaded\">
<table align=\"center\">
	<tr>
		<td>
			<b>Please be patient.</b><br />
			Gathering information from $conf->{cgi}{cluster}.<br />
			This could take a minute to complete.
		</td>
		<td>
			<img src=\"/img/gather_info.gif\" border=\"0\">
		</td>
	</tr>
</table>
<br />
</div>
	";
	
	my $dev  = $conf->{cgi}{dev};
	my $name = $conf->{cgi}{name};
	
	my ($node) = read_files_on_shared($conf);
	if (exists $conf->{files}{shared}{$name})
	{
		print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_bad\">
			Name Conflict
		</td>
		<td>
			<br />
			There is a file on the <i>Anvil!</i> called <span class=\"fixed_width\">$name</span> on the <i>Anvil!</i>.<br />
			Please go back and give the file a different name.<br />
			<br />
		</td>
	</tr>
</table>
<br />
";
	}
	else
	{
		# Now make sure the disc is still in the drive.
		check_local_dvd($conf);
		
		if (not exists $conf->{drive}{$dev})
		{
			print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_warning\">
			Drive not found
		</td>
		<td>
			<br />
			The drive in <span class=\"fixed_width\">$dev</span> appears to no longer exist!<br />
			If this is a USB drive, it may have been unplugged.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"2\">
			<div class=\"align_right\"><a href=\"$conf->{'system'}{cgi_string}\"><b>Try Again</b></a></div>
		</td>
	</tr>
</table>
<br />
";
		}
		elsif ($conf->{drive}{$dev}{reload})
		{
			# Need to reload to catch the disc.
			print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_warning\">
			Reload needed
		</td>
		<td>
			<br />
			The drive in <span class=\"fixed_width\">$dev</span> appears to not be ready.<br />
			Please reload to try and read the disc again.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"2\">
			<div class=\"align_right\"><a href=\"$conf->{'system'}{cgi_string}\"><b>Try Again</b></a></div>
		</td>
	</tr>
</table>
<br />
";
		}
		elsif ($conf->{drive}{$dev}{no_disc})
		{
			print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_warning\">
			No Disc
		</td>
		<td>
			<br />
			The disc in <span class=\"fixed_width\">$dev</span> appears to have been removed.<br />
			Please reinsert the disc and then reload this page.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"2\">
			<div class=\"align_right\"><a href=\"$conf->{'system'}{cgi_string}\"><b>Try Again</b></a></div>
		</td>
	</tr>
</table>
<br />
";
		}
		else
		{
			# Finally...
			my $out_file = $conf->{path}{media}.$name;
			my $in_dev   = $dev;
			print "
<table align=\"center\">
	<tr>
		<td class=\"highlight_ready_bold\">
			Beginning image copy.
		</td>
	</tr>
	<tr>
		<td>
			Please be patient! This could take up to <i>ten minutes</i>.<br />
			<pre>
";
			my $sc = "$conf->{path}{do_dd} if=$in_dev of=$out_file bs=$conf->{'system'}{dd_block_size}";
			record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc]\n");
			my $fh = IO::Handle->new();
			open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error was: $!\n";
			while(<$fh>)
			{
				print $_;
			}
			$fh->close;
			print "
			</pre>
		</td>
	</tr>
	<tr>
		<td class=\"highlight_ready_bold\">
			Beginning upload. 
		</td>
	</tr>
	<tr>
		<td>
			Uploading image file: <span class=\"fixed_width\">$name</span> to the <span class=\"fixed_width\">$conf->{cgi}{cluster}</span> <i>Anvil!</i>.<br />
			This could take a long time, depending on the speed of the connection between the dashboard appliance and <i>Anvil!</i>.<br />
			<pre>
";
			upload_to_shared($conf, $node, $out_file);
			unlink $out_file;
			print "
			</pre>
		</td>
	</tr>
	<tr>
		<td class=\"highlight_ready_bold\">
			Done!<br />
		</td>
	</tr>
</table>
<br />
";
		}
	}
	
	return (0);
}

# This takes a path to a file on the dashboard and uploads it to the cluster's
# /shared/files/ folder.
sub upload_to_shared
{
	my ($conf, $node, $source_file) = @_;
	
	my $sc = "$conf->{path}{rsync} $conf->{args}{rsync} $source_file root\@$node:$conf->{path}{shared}";
	record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc]\n");
	my $fh = IO::Handle->new();
	open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error was: $!\n";
	while(<$fh>)
	{
		print $_;
	}
	$fh->close;
	
	return (0);
}

# This asks the user to confirm the image and upload task. It also gives a
# chance for the user to name the image before upload.
sub confirm_image_and_upload
{
	my ($conf) = @_;
	
	my $dev  = $conf->{cgi}{dev};
	my $name = $conf->{cgi}{name};
	print "
<table align=\"center\">
	<tr>
		<td colspan=\"3\">
			<span class=\"highlight_ready_bold\">About to create a disc image and upload it to the <i>Anvil!</i>: [$conf->{cgi}{cluster}].</span>
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"highlight_warning\"><b>Caution!</b></span>
		</td>
		<td colspan=\"2\" align=\"left\">
			<br />
			This process could take quite some time to complete!<br />
			<br />
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"highlight_ready_bold\"><b>Step 1</b></span>
		</td>
		<td colspan=\"2\">
			</br />
			The disc will be converted into an image file.<br >
			<i>For a DVD, this could take around 10 minutes to complete.</i><br />
			</br />
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"highlight_ready_bold\"><b>Step 2</b></span>
		</td>
		<td colspan=\"2\">
			</br />
			The image will be uploaded to the <i>Anvil!</i>'s <span class=\"fixed_width\">/shared/files/</span> directory.<br />
			<i>If the <i>Anvil!</i> is remote and your internet connection is slow, this could take a very long time.</i><br />
			<br />
		</td>
	</tr>
	<form method=\"post\">
	<tr>
		<td>
			Image Name:
		</td>
		<td>
			<input type=\"text\" name=\"name\" value=\"$name\" style=\"width: 250px;\">
		</td>
		<td class=\"subtle_text\" style=\"text-align: left;\">
			This is the name that will be given to the DVD or CD image.
		</td>
	</tr>
	<tr>
		<td colspan=\"3\">
			<input type=\"hidden\" name=\"dev\" value=\"$dev\">
			<input type=\"hidden\" name=\"cluster\" value=\"$conf->{cgi}{cluster}\">
			<input type=\"hidden\" name=\"task\" value=\"image_and_upload\">
			<input type=\"hidden\" name=\"confirm\" value=\"true\">
			<div class=\"align_right\"><input type=\"submit\" name=\"null\" value=\"Confirm\" class=\"button\"></div>
		</td>
	</tr>
	</form>
</table>
<br />
";
	
	return (0);
}

# This asks the user to confirm that s/he wants to delete the image.
sub confirm_delete_file
{
	my ($conf) = @_;
	
	my $cluster = $conf->{cgi}{cluster};
	my $name    = $conf->{cgi}{name};
	print "
<table align=\"center\">
	<tr>
		<td colspan=\"3\">
			<span class=\"highlight_ready_bold\">About to delete <span class=\"fixed_width\">$name</span> from the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i>.</span>
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"highlight_warning\"><b>Caution!</b></span>
		</td>
		<td colspan=\"2\" align=\"left\">
			<br />
			This will delete <span class=\"fixed_width\">$name</span> from the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i>.<br />
			<br />
			<i>This action can not be undone!</i><br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"3\">
			<!-- <div class=\"align_left\"><a href=\"?cluster=$conf->{cgi}{cluster}\"><b>Back</b></a></div> -->
			<div class=\"align_right\"><a href=\"$conf->{'system'}{cgi_string}&confirm=true\"><b>Confirm</b></a></div>
		</td>
	</tr>
	</form>
</table>
<br />
";
	
	return (0);
}

# This deletes a file from the cluster.
sub delete_file
{
	my ($conf) = @_;
	
	### TODO: Make sure to unmount from (and rewrite definition files of)
	###       VMs currently using the file being deleted.
	my $cluster = $conf->{cgi}{cluster};
	my $name    = $conf->{cgi}{name};
	my ($node) = read_files_on_shared($conf);
	if (exists $conf->{files}{shared}{$name})
	{
		# Do the delete.
		print "
<table align=\"center\">
	<tr>
		<td colspan=\"3\">
			<span class=\"highlight_ready_bold\">Deleting <span class=\"fixed_width\">$name</span>...</span>
		</td>
	</tr>
	<tr>
		<td colspan=\"3\">
			<br />
			Any output from the shell will be below (none expected):<br />
			<br />
";
		my $sc = "$conf->{path}{ssh} root\@$node \"rm -f /shared/files/$name\"";
		record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc]\n");
		my $fh  = IO::Handle->new();
		open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error was: $!\n";
		while(<$fh>)
		{
			chomp;
			my $line = $_;
			print "<span class=\"fixed_width\">$line</span><br />\n";
		}
		$fh->close;
		print "
		</td>
	</tr>
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Done!
		</td>
	</tr>
</table>
<br />
";
	}
	else
	{
		print "
<table align=\"center\">
	<tr>
		<td colspan=\"3\">
			<span class=\"highlight_warning\">Deletion of <span class=\"fixed_width\">$name</span> from the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i> failed!</span>
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"highlight_warning\"><b>Failed!</b></span>
		</td>
		<td colspan=\"2\" align=\"left\">
			<br />
			The file <span class=\"fixed_width\">$name</span> on the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i> is already gone.<br />
			It is possible that another user deleted this file already.<br />
			<br />
		</td>
	</tr>
	<tr>
		<td colspan=\"3\">
			<!-- <div class=\"align_left\"><a href=\"?cluster=$conf->{cgi}{cluster}\"><b>Back</b></a></div> -->
			&nbsp;
		</td>
	</tr>
	</form>
</table>
<br />
";
	}
	
	return (0);
}

# This tries to see of there is a DVD or CD in the local drive (if there is a
# local drive at all).
sub check_local_dvd
{
	my ($conf) = @_;
	
	my $dev = "";
	my $sc  = "$conf->{path}{check_dvd} $conf->{args}{check_dvd}";
	#record($conf, "$THIS_FILE ".__LINE__."; Calling: [$sc]\n");
	my $fh  = IO::Handle->new();
	open ($fh, "$sc 2>&1 |") or die "Failed to call: [$sc], error was: $!\n";
	while(<$fh>)
	{
		chomp;
		my $line = $_;
		if ($line =~ /CD location\s+:\s+(.*)/i)
		{
			$dev = $1;
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:device:$dev\n");
		}
		elsif ($line =~ /Volume\s+:\s+(.*)/i)
		{
			my $volume = $1;
			$conf->{drive}{$dev}{volume} = $volume;
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:volume:$volume\n");
		}
		elsif ($line =~ /Volume Set\s+:\s+(.*)/i)
		{
			my $volume_set = $1;
			$conf->{drive}{$dev}{volume_set} = $volume_set;
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:volume set:$volume_set\n");
		}
		elsif ($line =~ /No medium found/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:no-disc:true\n");
			$conf->{drive}{$dev}{no_disc} = 1;
			last;
		}
		elsif ($line =~ /unknown filesystem/i)
		{
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:reload needed:true\n");
			$conf->{drive}{$dev}{reload} = 1;
			last;
		}
		else
		{
			#record($conf, "$THIS_FILE ".__LINE__."; cd-info:$line\n");
		}
	}
	$fh->close;

	return(0);
}

# This prints a small header with the current status of any background running
# jobs
sub check_status
{
	my ($conf) = @_;
	
	if (not -e $conf->{path}{status})
	{
		print "
<table align=\"center\">
	<tr>
		<td>
			<span class=\"highlight_bad\">Configuration Error</span>
		</td>
		<td>
			The directory: <span class=\"fixed_fidth\">$conf->{path}{status}</span> does not exist.
		</td>
	</tr>
</table>
<br />
";
	}
	elsif (not -r $conf->{path}{status})
	{
		my $user = getpwuid($<);
		print "
<table align=\"center\">
	<tr>
		<td>
			<span class=\"highlight_bad\">Configuration Error</span>
		</td>
		<td>
			The directory: <span class=\"fixed_fidth\">$conf->{path}{status}</span> is not readible by the <span class=\"fixed_fidth\">$user</span> user.
		</td>
	</tr>
</table>
<br />
";
	}
	
	return (0);
}

# This tries to log into each node in the Anvil!. The first one it connects to
# which has /shared/files mounted is the one it will use to up upload the ISO
# and generate the list of available media. It also compiles a list of which 
# VMs are on each node.
sub read_shared
{
	my ($conf) = @_;
	#record($conf, "$THIS_FILE ".__LINE__."; In read_shared().\n");
	
	check_status($conf);
	
	# Let the user know that this might take a bit.
	print "
<div id=\"hide_when_loaded\">
<table align=\"center\">
	<tr>
		<td>
			<b>Please be patient.</b><br />
			Gathering information from $conf->{cgi}{cluster}.<br />
			This could take a minute to complete.
		</td>
		<td>
			<img src=\"/img/gather_info.gif\" border=\"0\">
		</td>
	</tr>
</table>
<br />
</div>
	";
	
	my $cluster      = $conf->{cgi}{cluster};
	my $connected    = 0;
	
	# This returns the name of the node used to read /shared/files/. If no
	# node was available, it returns an empty string.
	my ($node) = read_files_on_shared($conf);
	
	#record($conf, "$THIS_FILE ".__LINE__."; cluster: [$cluster].\n");
	
	print "
<table class=\"hidden_table\" align=\"center\" border=\"0\">
	<tr>
		<td class=\"td_hidden\">
";
	if ($node)
	{
		my $block_size       = $conf->{partition}{shared}{block_size};
		my $total_space      = ($conf->{partition}{shared}{total_space} * $block_size);
		my $say_total_space  = bytes_to_hr($conf, $total_space);
		my $used_space       = ($conf->{partition}{shared}{used_space} * $block_size);
		my $say_used_space   = bytes_to_hr($conf, $used_space);
		my $free_space       = ($conf->{partition}{shared}{free_space} * $block_size);
		my $say_free_space   = bytes_to_hr($conf, $free_space);
		my $say_used_percent = $conf->{partition}{shared}{used_percent}."%";
		print "
<table width=\"100%\">
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Shared space on <i>${cluster}</i>:
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"table_header\">Total Space</span>
		</td>
		<td>
			<span class=\"table_header\">Used Space</span>
		</td>
		<td>
			<span class=\"table_header\">Free Space</span>
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"fixed_width\">$say_total_space</span>
		</td>
		<td>
			<span class=\"fixed_width\">$say_used_space</span>
		</td>
		<td>
			<span class=\"fixed_width\">$say_free_space</span>
		</td>
	</tr>
</table>
<br />
<table width=\"100%\">
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Files already on the shared space:
		</td>
	</tr>
	<tr>
		<td>
			&nbsp;
		</td>
		<td>
			<span class=\"table_header\">File Name</span>
		</td>
		<td>
			<span class=\"table_header\">Size</span>
		</td>
	</tr>
";
		
		# Show existing files.
		foreach my $file (sort {$a cmp $b} keys %{$conf->{files}{shared}})
		{
			next if $conf->{files}{shared}{$file}{type} ne "-";
			my $say_size = bytes_to_hr($conf, $conf->{files}{shared}{$file}{size});
			print "
	<tr>
		<td>
			<span class=\"fixed_width\">$say_size</span>
		</td>
		<td>
			<span class=\"fixed_width\">$file</span>
		</td>
		<td>
			<a href=\"?cluster=$cluster&task=delete&name=$file\"><span class=\"highlight_bad\"><i>Delete</i></span></a>
		</td>
	</tr>
";
		}
		
		# Read from the DVD drive(s), if found.
		print "
	<tr>
</table>
<br />
<table width=\"100%\">
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Create an image of your disc and upload it to the <i>Anvil!</i>
		</td>
	</tr>
	<tr>
		<td>
			<span class=\"table_header\">Device</span>
		</td>
		<td>
			<span class=\"table_header\">Disc Name</span>
		</td>
		<td>
			&nbsp;
		</td>
	</tr>
";

		check_local_dvd($conf);
		foreach my $dev (sort {$a cmp $b} keys %{$conf->{drive}})
		{
			my $cluster   = $conf->{cgi}{cluster};
			my $disc_name = "";
			my $upload    = "--";
			if ($conf->{drive}{$dev}{reload})
			{
				$disc_name = "Disc read failed, please reload to try again.";
			}
			elsif ($conf->{drive}{$dev}{no_disc})
			{
				$disc_name = "No disc found.";
			}
			elsif ($conf->{drive}{$dev}{volume})
			{
				$disc_name = "<span class=\"fixed_width\">$conf->{drive}{$dev}{volume}</span>";
				$upload    = "<a href=\"?cluster=$cluster&task=image_and_upload&dev=$dev&name=$conf->{drive}{$dev}{volume}.iso\"><b>Upload</b></a>";
			}
			elsif ($conf->{drive}{$dev}{volume_set})
			{
				$disc_name = "<span class=\"fixed_width\">$conf->{drive}{$dev}{volume_set}</span>";
				$upload    = "<a href=\"?cluster=$cluster&task=image_and_upload&dev=$dev&name=$conf->{drive}{$dev}{volume_set}.iso\"><b>Upload</b></a>";
			}
			else
			{
				$disc_name = "Unknown problem reading drive: [$dev]";
			}
			print "
	<tr>
		<td>
			<span class=\"fixed_width\">$dev</span>
		</td>
		<td>
			$disc_name
		</td>
		<td>
			$upload
		</td>
	</tr>
";
		}
		print "
</table>
</br />
";

		# Show the option to download an ISO directly from a URL.
		print "
<table width=\"100%\">
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Download directly from a website address to the <i>Anvil!</i>.
		</td>
	</tr>
	<form method=\"post\" enctype=\"multipart/form-data\">
	<input type=\"hidden\" name=\"cluster\" value=\"$conf->{cgi}{cluster}\">
	<input type=\"hidden\" name=\"task\" value=\"download_url\">
	<tr>
		<td>
			<span class=\"fixed_width\">Address</a>:
		</td>
		<td>
			<input type=\"text\" name=\"url\" value=\"\" style=\"width: 250px;\">
		</td>
		<td>
			<input type=\"submit\" name=\"null\" value=\"Download\" class=\"button\">
		</td>
	</tr>
	<tr>
		<td class=\"highlight_warning\">
			Note!
		</td>
		<td colspan=\"3\">
			<br />
			If the server hosting this file is slow or if the file is big,<br />
			the download might take a long time to complete.<br />
			<br />
		</td>
	</tr>
	</form>
</table>
<br />
";

		# Show the option to upload from the user's local machine.
		print "
<table width=\"100%\">
	<tr>
		<td colspan=\"3\" class=\"highlight_ready_bold\">
			Upload a file from your computer.
		</td>
	</tr>
	<form method=\"post\" enctype=\"multipart/form-data\">
	<input type=\"hidden\" name=\"cluster\" value=\"$conf->{cgi}{cluster}\">
	<input type=\"hidden\" name=\"task\" value=\"upload_file\">
	<tr>
		<td>
			<span class=\"fixed_width\">File</span>:
		</td>
		<td>
			<input type=\"file\" name=\"file\" value=\"\">
		</td>
		<td>
			<input type=\"submit\" name=\"null\" value=\"Upload\" class=\"button\">
		</td>
	</tr>
	<tr>
		<td class=\"highlight_warning\">
			Note!
		</td>
		<td colspan=\"3\">
			<br />
			<i>There is no confirmation for this action.</i></br />
			Uploading a big file over a slow link might take a long time.<br />
			<br />
		</td>
	</tr>
	</form>
</table>
<br />
";
	}
	else
	{
		print "
<table>
	<tr>
		<td>
			<span class=\"highlight_warning\">Inaccessible</span>
		</td>
		<td>
			I am sorry, but I can not connect to either node in the <span class=\"fixed_width\">$cluster</span> <i>Anvil!</i>.
		</td>
	<tr>
</table>
<br />
";
	}
	print "
		</td>
	</tr>
</table>
";
	return($connected);
}

1;
