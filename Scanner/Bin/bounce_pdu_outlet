#!/bin/bash

#set -x

GET=/usr/bin/snmpget
SET=/usr/bin/snmpset

PASSWD=public
DELAY=30
STATE=bounce
STATE_CODE=3
OUTLET=6

OUTLET_CONTROL=.1.3.6.1.4.1.318.1.1.12.3.3.1.1.4
REBOOT_DURATION=.1.3.6.1.4.1.318.1.1.12.3.4.1.1.6
# ---------------------------------------------------------------------- 

function usage() {

if [[ -n $1 ]]; then
    echo "
You passed an unfamiliar argument, '$1'
"
fi

echo "
USAGE: $0 [-h ip] [-d delay] [-n state] [-o outlet] [-p passwd]

Where
        -d delay  : How long the outlet is to remain off, in 'bounce'.
        -h ip     : IP address of host with which to communicate.
        -n state  : one of 'on', 'off', 'bounce'.
        -o outlet : Outlet # (1..8) to modify.
        -p passwd : The password to use, default value is 'public'.

"
exit 1
}
# ---------------------------------------------------------------------- 

function errorcheck() {
    ERROR=0

    if [[ $DELAY = 5 || $DELAY = 10 || $DELAY = 15
       || $DELAY = 20 || $DELAY = 25 || $DELAY = 30
       || $DELAY = 35 || $DELAY = 40 || $DELAY = 45
       || $DELAY = 50 || $DELAY = 55 || $DELAY = 60 ]]; then
        :
    else
        ERROR=1
        echo "DELAY is '$DELAY'; should be one of 5, 10, 15, ... 60."
    fi

    if [[ $OUTLET < 1 || $OUTLET > 8 ]]; then
        ERROR=1
        echo "OUTLET is '$OUTLET', should be one of 1..8."
    fi

    if [[ $STATE = 'on' ||  $STATE = 'off' ||  $STATE = 'bounce' ]];  then
         :
    else 
         ERROR=1
         echo "STATE is '$STATE', should be 'on', 'off', or 'bounce'."
    fi

    if [[ $ERROR  != 0 ]] ; then
       exit $ERROR
    fi
}
# ---------------------------------------------------------------------- 

while getopts ":d:h:n:o:p:v" opt; do
    case $opt in
      d) DELAY=$OPTARG
         ;;
      h) IP=$OPTARG
         ;;
      n) STATE=$OPTARG
         ;;
      o) OUTLET=$OPTARG
         ;;
      p) PASSWD=$OPTARG
         ;;
      v) VERBOSE=1
         ;;
      *) usage $OPTARG
         ;;
    esac
done

errorcheck

case $STATE in
    on)     STATE_CODE=1
            ;;
    off)    STATE_CODE=2
            ;;
    bounce) STATE_CODE=3
            ;;
    *)      echo "Impossible STATE value '$STATE'."
            exit 1;
            ;;
esac

# get current delay value
CMD="$GET -Ov -v 2c -c $PASSWD $IP $REBOOT_DURATION.$OUTLET"
echo "Running command: $CMD"
RESPONSE=`$CMD`
INITIAL_DELAY=`echo $RESPONSE | sed -e's/INTEGER: //'`
echo "Initial delay is $INITIAL_DELAY seconds."

if [[ $INITIAL_DELAY == $DELAY ]]; then
    echo "No need to set delay, current value is correct."
else
    CMD="$SET -Ov -v 2c -c $PASSWD $IP $REBOOT_DURATION.$OUTLET i $DELAY"
    echo "Running command: $CMD"
    RESPONSE=`$CMD`
    echo "$RESPONSE"
fi

# ----------------------------------------------------------------------

# get current status
CMD="$GET -Ov -v 2c -c $PASSWD $IP $OUTLET_CONTROL.$OUTLET"
echo "Running command: $CMD"
RESPONSE=`$CMD`
INITIAL_CODE=`echo $RESPONSE | sed -e's/INTEGER: //'`

if [[ $INITIAL_CODE == 1 ]]; then
    INITIAL_STATE='on'
elif [[ $INITIAL_CODE == 2 ]]; then
    INITIAL_STATE='off'
else
    INITIAL_STATE="unknown value '$INITIAL_CODE'"
fi

echo "Initial state of outlet $OUTLET is $INITIAL_STATE."

if [[ $INITIAL_STATE == $STATE ]]; then
    echo "No need to set outlet state, current state is correct."
else
    CMD="$SET -Ov -v 2c -c $PASSWD $IP $OUTLET_CONTROL.$OUTLET i $STATE_CODE"
    echo "Running command: $CMD"
    RESPONSE=`$CMD`
    CODE=`echo $RESPONSE | sed -e's/INTEGER: //'`

    case $CODE in 
        1) CURRENT_STATE='on'
           ;;
        2) CURRENT_STATE='off'
           ;;
    esac

    GOAL=$STATE
    if [[ $STATE == 'bounce' ]]; then
        GOAL='on'
    fi

    while [[ $CURRENT_STATE != $GOAL ]]; do
        TIME=`date`
        echo "At time $TIME, state of outlet $OUTLET is $CURRENT_STATE."
        sleep 5
        CMD="$GET -Ov -v 2c -c $PASSWD $IP $OUTLET_CONTROL.$OUTLET"
        RESPONSE=`$CMD`
        CODE=`echo $RESPONSE | sed -e's/INTEGER: //'`
    
        case $CODE in 
            1) CURRENT_STATE='on'
               ;;
            2) CURRENT_STATE='off'
               ;;
        esac
    done
    echo "At time $TIME, state of outlet $OUTLET is $CURRENT_STATE."
fi

