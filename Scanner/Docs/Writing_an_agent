                           Writing an Agent
                           ----------------


In quick and simple terms, an agent is a program which is launched by
the scanner main program, 'scanner', refered to as the scanCore. The
agent queries some subsystem and extracts a nunmber of values, such as
cpu temperature or remaining battery life. The raw records are stored
in a database associated with that agent. Any extreme values are
stored in an 'alerts' table shared with other agents. Records in this
table are read by the scanCore twice a minute, and actions taken based
on their values. Actions can including sending email or SMS to
administrators or shutting down a miss-behaving system.

Besides one record for each 'errant' variable, the agent should send a
summary record once each loop, presenting a weighted sum of the number
of abnormal variables it has seen. As well, when the agent starts up,
it creates a record in the 'nodes' table to indicate it is
running. This nodes table entry is references by the other records as
a foreign key, to indicate whhich instance of an agent generated a
record.

# ======================================================================
Note, in the following, 'pud' is a trivial script I use to provide
'psql -U postgres -d scanner'. It saves repetitive typing.

$ pud -x -c "select * from node limit 1"
-[ RECORD 1 ]-+------------------------------
node_id       | 1
agent_name    | nodemonitor
agent_host    | an-a07n02
pid           | 9773
target_name   | 
target_type   | 
target_ip     | 
status        | running
modified_user | 0
modified_date | 2015-01-29 21:38:16.889098-05

# ======================================================================
The RAID subsystem has two tables for raw data, one for controllers,
one for drives. You may have more, or just one.

$ pud -x -c "select * from raid_controllers limit 1"
-[ RECORD 1 ]-----+------------------------------
id                | 1
node_id           | 10
target            | an-c07n01.alteeve.ca
field             | ROC temperature
value             | 79
units             | degrees C
status            | CRISIS
message_tag       | Value crisis
message_arguments | value=79;controller=0
timestamp         | 2015-01-30 09:28:20.209896-05

# 

$ pud -x -c "select * from raid_drives limit 1"
-[ RECORD 1 ]-----+------------------------------
id                | 1
node_id           | 10
target            | an-c07n01.alteeve.ca
field             | Drive Temperature
value             | 27
units             | degrees C
status            | OK
message_tag       | 
message_arguments | controller=0;drive=0
timestamp         | 2015-01-30 09:28:20.621607-05

# ======================================================================
An 'ordinary alert record'.

$ pud -x -c "select * from alerts  where id = 3"
-[ RECORD 1 ]-----+------------------------------
id                | 3
node_id           | 10
target_name       | an-c07n01.alteeve.ca
target_type       | RAID subsystem
target_extra      | 10.255.4.251
field             | ROC temperature
value             | 79
units             | degrees C
status            | CRISIS
message_tag       | Value crisis
message_arguments | value=79
timestamp         | 2015-01-30 09:28:20.588365-05

# 
A 'summary' alert.

$ pud -x -c "select * from alerts  where id = 10"
-[ RECORD 1 ]-----+------------------------------
id                | 10
node_id           | 10
target_name       | an-c07n01.alteeve.ca
target_type       | RAID subsystem
target_extra      | 10.255.4.251
field             | summary
value             | 1
units             | 
status            | WARNING
message_tag       | Value warning
message_arguments | value=1
timestamp         | 2015-01-30 09:29:50.878015-05

# ======================================================================
The /etc/striker/Config directory

[tom@an-a07n01 Config]$ ls -l
total 32
-rw-r--r--. 1 root root  379 Jan 26 12:32 db.conf
-rw-r--r--. 1 root root 5187 Jan 26 12:32 ipmi.conf
-rw-r--r--. 1 root root 1184 Jan 26 12:32 raid.conf
-rw-r--r--. 1 root root  900 Jan 26 12:32 scanner.conf
-rw-r--r--. 1 root root 9111 Jan 26 12:32 snmp_apc_ups.conf

# ======================================================================
The db configuration file passed by in to the agent.

[tom@an-a07n01 Config]$ cat db.conf 
db::1::name      = scanner
db::1::db_type   = Pg
db::1::host      = 10.255.4.251
#db::1::host      = localhost
db::1::port      = 5432
db::1::user      = alteeve
db::1::password  = alteeve

db::2::name      = scanner
db::2::db_type   = Pg
db::2::host      = 10.255.4.252
#db::2::host      = localhost
db::2::port      = 5432
db::2::user      = alteeve
db::2::password  = alteeve

# ======================================================================
The raid config file. The 'name' tag references the prefix used for
the remaining records. In the existing implementation this is used so
all agents wind up with their custom data available as a 'confdata'
attribute. You don't have to do this, it's your private data not used
by anyone else, but it might be useful.

[tom@an-a07n01 Config]$ cat raid.conf 
# RAID config file
#

# Each config file uses a unique prefix for data. Specify what that
# prefix is, so a single reading routine can handle all the different
# files.
#
name = raid

# Agent metadata
#
raid::db::table::ROC temperature   = raid_controllers
raid::db::table::Drive Temperature = raid_drives
raid::db::table::summary           = raid_controllers
raid::db::table::other 		   = raid_controllers
raid::db::table::alerts            = alerts

raid::host  = an-c07n01.alteeve.ca
raid::ip    = 10.255.4.251
raid::type  = RAID subsystem
raid::query = wstorcli

# specifications for the summary data & various attributes
#
raid::summary::max        = 100
raid::summary::ok         = 0
raid::summary::warn       = 4
raid::summary::hysteresis = 0


raid::Drive Temperature::ok         =  40
raid::Drive Temperature::warn       =  50
raid::Drive Temperature::hysteresis =   1
raid::Drive Temperature::units      = degrees C

raid::ROC temperature::ok         =  50
raid::ROC temperature::warn       =  60
raid::ROC temperature::hysteresis =   1
raid::ROC temperature::units      = degrees C


# ----------------------------------------------------------------------
# End of file.

# ======================================================================
The Messages directory
.
[tom@an-a07n01 Messages]$ ls -l
total 20
-rw-r--r--. 1 root root 1728 Jan 26 12:32 ipmi.xml
-rw-r--r--. 1 root root 1728 Jan 26 12:32 raid.xml
-rw-r--r--. 1 root root 1570 Jan 26 12:32 random-agent.xml
-rw-r--r--. 1 root root 1523 Jan 26 12:32 scanner.xml
-rw-r--r--. 1 root root 2002 Jan 26 12:32 snmp_apc_ups.xml

# ======================================================================
The raid xml file. The 'message_tag' from the alerts record is looked
up in this file. Each person registering to receive messages can
specify the language in which they wish to receive
notifications. Variable replacement is indicated by
"#!variable!value!#"; the replacement values are obtained from the
alert record's 'message_arguments'. The field contains a semi-colon
separated list of the form 'key=value'. Looking at the 'ROC
Temperature' crisis alert, above, the message_tag 'value crisis' leads
us to the string, "value '#!variable!value!#' in Crisis range". The
message_arguments, "value=79" generates the message, "value '79' in
Crisis range.

[tom@an-a07n01 Messages]$ cat raid.xml 
<?xml version="1.0" encoding="UTF-8"?>
<string>
	<!-- Canadian English -->
	<lang name="en_CA" long_name="English (Canadian)">
		<key name="comment">Maintained by Tom Legrady (tom@alteeve.ca) for the Striker.</key>
		
		<!-- Branding strings - Most likely to be changed by a reseller. -->
		<key name="brand_0001">Alteeve's Niche!</key>
		
		<!-- Text messages used in config files and such. -->
		<key name="Value changed">value changed from '#!variable!prevvalue!#' => '#!variable!value!#'</key>
		<key name="Value warning">value '#!variable!value!#' in Warning range</key>
		<key name="Value crisis">value '#!variable!value!#' in Crisis range</key>
		<key name="Unexpected value">value '#!variable!value!#' outside expected range</key>
		<key name="AN-RAID-Temp connect failed">Could not connect to Net::SNMP session</key>
		<key name="AN-RAID-Temp get_request() failed">Net::SNMP->get_request() failed</key>
		
		<!-- Legal strings - Please do not change these without speaking to Alteeve's Niche! first. -->
		<key name="legal_0001"><![CDATA[&copy; <a href="https://alteeve.ca" target="_new">Alteeve's Niche! Inc.</a> 1997 - 2015]]></key>
		<key name="legal_0002"><![CDATA[This program is released under the <a href="http://www.gnu.org/licenses/gpl-2.0.html" target="_new">GNU GPL v2</a>]]></key>
		<key name="legal_0003">Release version #!conf!sys::version!#</key>
	</lang>

	<!-- Japanese -->
	<lang name="ja" long_name="日本語">
		<lang_comment>Tom legrady、(tom@alteeve.ca)はStrikerのメッセージを維持しています。</lang_comment>
	</lang>

	<!-- French -->
	<lang name="fr" long_name="Français">
		<lang_comment>Géré par Tom Legrady (tom@alteeve.ca) pour Striker.</lang_comment>
	</lang>
</string>

# ======================================================================
/var/log/striker/ contains a nhumber of files.

'pid files' are generated by the scanCore, on the node server that is
' scanner' and on the dashboard, 'dashboard'.

'metadata' files are generated by the agents  to share information back to the scanCore.

'log' file names indicate when the agent instance began its' run; the
file mtime indicates when it halted.

'db' files deal with a time when a database became unavailable. The
data is stored in a file witht he name prefixed with 'db' followed by
the agent name and the suffix 'alternate' followed by the hostname or
IP of the unavailable database. When the database becomes available,
the agent loads the file data into the DB, and re-names the file by
appending '_@_' and the current date-time. When an agent launches, it
checks to see if there is an 'left-over' db alternate file, and loads
it into the DB, if possible, or adds to it, if necessary. Since the
data is created and consumed by the agent, the format is up to the
agent writer, but should be documented, since the preserved files may
need to be read at a later time.

[tom@an-a07n01 ~]$ ls -l /var/log/striker/
total 9452
-rw-rw-r--. 1 tom tom 3223135 Jan 28 12:38 db.ipmi.alternate.10.255.4.252_@_2015-01-30_09:30:15
-rw-rw-r--. 1 tom tom 1533553 Jan 28 12:38 db.raid.alternate.10.255.4.252_@_2015-01-30_09:28:19
-rw-rw-r--. 1 tom tom 4052468 Jan 28 12:38 db.snmp_apc_ups.alternate.10.255.4.252_@_2015-01-30_09:30:41
-rw-rw-r--. 1 tom tom   38376 Jan 26 19:24 log.ipmi.2015-01-26_17:13:07
-rw-rw-r--. 1 tom tom   38333 Jan 28 12:38 log.ipmi.2015-01-28_10:27:26
-rw-rw-r--. 1 tom tom   38376 Jan 26 19:24 log.raid.2015-01-26_17:13:08
-rw-rw-r--. 1 tom tom   38333 Jan 28 12:38 log.raid.2015-01-28_10:27:26
-rw-rw-r--. 1 tom tom  473591 Jan 26 19:24 log.scanner.2015-01-26_17:13:07
-rw-rw-r--. 1 tom tom   77564 Jan 28 12:38 log.scanner.2015-01-28_10:27:25
-rw-rw-r--. 1 tom tom   40496 Jan 26 19:24 log.snmp_apc_ups.2015-01-26_17:13:07
-rw-rw-r--. 1 tom tom   40445 Jan 28 12:38 log.snmp_apc_ups.2015-01-28_10:27:26
-rw-rw-r--. 1 tom tom     124 Jan 30 09:39 metadata.an-a07n01-ipmi
-rw-rw-r--. 1 tom tom     126 Jan 31 14:53 metadata.an-a07n01-raid
-rw-rw-r--. 1 tom tom     133 Jan 30 09:39 metadata.an-a07n01-snmp_apc_ups
-rw-rw-r--. 1 tom tom      31 Jan 30 09:14 pidfile.an-a07n01-dashboard
-rw-rw-r--. 1 tom tom      31 Jan 30 09:34 pidfile.an-a07n01-scanner

# ======================================================================
The pid file is generated by the scanCore, whether 'scanner' or
'dashboard'.  It stores the process ID of the current scanCore
process, and the Unix epoch of the time it sarted.  The file is
'touch'-ed once each loop, to indicate the process is still running
and active.

[tom@an-a07n01 striker]$ cat pidfile.an-a07n01-scanner 
pid:18276
starttime:1422628498

# ======================================================================
The metadata file generated by a raid process running on node server
'an-a07n01', stored in file 'metadata.an-a07n01-raid'.  The name uses
a 'metadata' prefix followed by the name of the hose on which the
agent is running, and the name of the agent.

It references the two databases mentioned in the db.conf file,
reporting what node_id it's records have in each table. This
information allows the scanCore to look up the alert records the agent
has created, by accessing recent records with the specified node_id
foreign key.

Like the pid file, the metadata file is 'touch'ed once each loop.

[tom@an-a07n01 striker]$ cat metadata.an-a07n01-raid
db::name=raid
db::pid=22649
db::hostname=an-a07n01
db::datatable_name=alerts
db::1::node_table_id=123
db::2::node_table_id=83

# ======================================================================
The log file for an agent is optional, and may be quite minimal or
more verbose.  Clearly this instance was writing to only one database,
so we expect a db.X.alternate file to go with it.


[tom@an-a07n01 striker]$ head  log.snmp_apc_ups.2015-01-28_10:27:26
Program snmp_apc_ups writing to DB '10.255.4.251'.
snmp_apc_ups loop 1 at 10:27:30 -> 3993.045 ms elapsed;  26006.955 ms pending.

----------------------------------------------------------------------

snmp_apc_ups loop 2 at 10:27:58 -> 2218.066 ms elapsed;  27781.934 ms pending.

----------------------------------------------------------------------

snmp_apc_ups loop 3 at 10:28:28 -> 1996.194 ms elapsed;  28003.806 ms pending.

# ======================================================================
FYI the scanner log file is somewhat more verbose.

scanner loop 1 at 17:13:08 -> 1037.835 ms elapsed;  28962.165 ms pending.
[tom@an-a07n01 striker]$ head -60 log.scanner.2015-01-26_17:13:07
Starting ./scanner at Mon Jan 26 17:13:07 2015.
Program scanner reading from DB '10.255.4.251'.
scan 1422310387.58518 [ipmi,raid,snmp_apc_ups], [].
launching: /home/tom/SW/striker/Scanner/Agents/ipmi -o meta-data -f /var/log/striker --dbconf /home/tom/SW/striker/Scanner/Config/db.conf -log --verbose.
launching: /home/tom/SW/striker/Scanner/Agents/raid -o meta-data -f /var/log/striker --dbconf /home/tom/SW/striker/Scanner/Config/db.conf -log --verbose.
launching: /home/tom/SW/striker/Scanner/Agents/snmp_apc_ups -o meta-data -f /var/log/striker --dbconf /home/tom/SW/striker/Scanner/Config/db.conf -log --verbose.

SELECT node_id, agent_name, agent_host, pid, 
       round( extract( epoch from age( now(), modified_date ))) as age
FROM   node
WHERE  pid = any ( ? )
AND    agent_host = ?
ORDER BY modified_date desc


Scanner::process_agent_data().
DBS::fetch_alert_data reading from 10.255.4.251.
DBS::fetch_alert_data reading from 10.255.4.251.
DBS::fetch_alert_data reading from 10.255.4.251.
scanner loop 1 at 17:13:08 -> 1037.835 ms elapsed;  28962.165 ms pending.

----------------------------------------------------------------------
scan 1422310417.59045 [], [].
Scanner::process_agent_data().
DBS::fetch_alert_data reading from 10.255.4.251.
Got a db_record with status CRISIS.
Setting alert 'Value crisis' in 'RAID Controller' from 3186.from record 11765 time stamp 2015-01-26 17:13:10.682962-05
Mon Jan 26 17:13:38 2015 Received 2 alerts for process ipmi, 2 of them new.
DBS::fetch_alert_data reading from 10.255.4.251.
Got a db_record with status CRISIS.
Setting alert 'Value crisis' in 'ROC temperature' from 3187.from record 11760 time stamp 2015-01-26 17:13:09.13878-05
Mon Jan 26 17:13:38 2015 Received 2 alerts for process raid, 2 of them new.
DBS::fetch_alert_data reading from 10.255.4.251.
Got a db_record with status CRISIS.
Setting alert 'Value crisis' in 'battery temperature' from 3188.from record 11763 time stamp 2015-01-26 17:13:09.982069-05
Got a db_record with status CRISIS.
Setting alert 'Value crisis' in 'battery runtime remaining' from 3188.from record 11761 time stamp 2015-01-26 17:13:09.1816-05
Got a db_record with status CRISIS.
Setting alert 'Value crisis' in 'battery temperature' from 3188.from record 11759 time stamp 2015-01-26 17:13:09.036922-05
Mon Jan 26 17:13:38 2015 Received 4 alerts for process snmp_apc_ups, 4 of them new.
Total crisis weight is 3.
id 11765 | 2015-01-26 17:13:10.682962-05: an-a07n01->ipmi (3186); ( server node an-c07n01.alteeve.ca 10.255.4.251 ) CRISIS: value '79' in Crisis range; (RAID Controller : 79 : degrees C)
id 11760 | 2015-01-26 17:13:09.13878-05: an-a07n01->raid (3187); ( RAID subsystem an-c07n01.alteeve.ca 10.255.4.251 ) CRISIS: value '79' in Crisis range; (ROC temperature : 79 : degrees C)
id 11761 | 2015-01-26 17:13:09.1816-05: an-a07n01->snmp_apc_ups (3188); ( APC UPS an-u01 10.20.3.251 ) CRISIS: value '42' in Crisis range; (battery runtime remaining : 42 : minutes?)
id 11763 | 2015-01-26 17:13:09.982069-05: an-a07n01->snmp_apc_ups (3188); ( APC UPS an-u02 10.20.3.252 ) CRISIS: value '30' in Crisis range; (battery temperature : 30 : degrees C)
Mon Jan 26 17:13:38 2015 HealthMonitor: weight '3'; old_health: ok; health: warning
Changing health file status from ok to warning
scanner loop 2 at 17:13:38 -> 1092.064 ms elapsed;  28907.936 ms pending.

----------------------------------------------------------------------

# ======================================================================
The db alertnate files I generate are YAML files. Each record begins with 
a line of three dashes, '---', followed by three sections, 'args', 'fields' and 'sql'.

The SQL has placeholders used to pass in the values to be stored.

The 'args' section is a hash or association list of keys and values to
assign into the placeholders.

'fields' is an arrof the field names that specifies the order in which
the args are the be used.

[tom@an-a07n01 striker]$ grep -n -- --- db.ipmi.alternate.10.255.4.252_@_2015-01-30_09:30:15 | head -3
1:---
27:---
53:---
[tom@an-a07n01 striker]$ head -28 db.ipmi.alternate.10.255.4.252_@_2015-01-30_09:30:15
---
args:
  field: Ambient
  message_arguments: ''
  message_tag: ''
  node_id: ~
  status: OK
  target: an-c07n01.alteeve.ca
  units: degrees C
  value: 24.50
epoch: 1422458847
fields:
  - field
  - message_arguments
  - message_tag
  - status
  - target
  - units
  - value
  - node_id
sql: |
  INSERT INTO ipmi_temperatures
  (field, message_arguments, message_tag, status, target, units, value, node_id)
  VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)

---

# ======================================================================
The scanCore creates a hidden 'health' file in /shared/status named
after the the node on which it is running.  This file is 'touch'ed
each pass, if it does not need modification, so the 'mtime' of the
file can be used to verify the healthy running of the scanCore.

[tom@an-a07n02 status]$ ls -la /shared/status/
total 16
drwxrwxrwx. 2 root root 4096 Feb  1 12:46 .
drwxr-xr-x. 3 root root 4096 Jan 17 11:26 ..
-rw-rw-r--. 1 tom  tom    17 Jan 31 13:33 .an-a07n02
-rw-rw-r--. 1 tom  tom    17 Jan 27 10:29 .an-c07n01

[tom@an-a07n02 status]$ cat /shared/status/.an-a07n02 
health = warning

# ======================================================================
# End of File