package AN::Unix;

# _Perl_
use warnings;
use strict;
use 5.010;

use version;
our $VERSION = '0.0.1';

use English '-no_match_vars';
use Carp;

use File::Basename;
use Sys::Hostname ();

use FindBin qw($Bin);
use Proc::Background;
use Const::Fast;

# ======================================================================
# CONSTANTS
#
const my $COMMA => q{,};
const my $ESCAPED_DOT   => q{\.};
const my $PROG  => ( fileparse($PROGRAM_NAME) )[0];

const my $SHORT_FLAG     => '-short';
const my $PID2PROC_NAME  => '/bin/ps -p %s -o comm=';
const my $TERMINATE_FLAG => { die_upon_destroy => 1 };

# ======================================================================
# Subroutines
#
# ......................................................................
# look up the system hostname. Give short name if the arg '-short' is
# provided, otherwise return the FQDN.
#
sub hostname {

    state $hn = Sys::Hostname::hostname();
    state $hn_short = ( split $ESCAPED_DOT, $hn )[0];

    return ( @_ && $_[0] eq $SHORT_FLAG ? $hn_short : $hn );
}

# ......................................................................
# Look up the name of the process with a specified PID.
#
sub pid2process {
    my ($pid) = @_;

    my $cmd = sprintf $PID2PROC_NAME, $pid;

    my $name = `$cmd`;
    chomp $name;
    return $name;
}

# ......................................................................
# Launch a background process. When the $bg_obj aquired from
# Proc::Background goes away, the bg job is killed.
#
sub new_bg_process {
    my ($process, @args) = @_;
    
    my $bg_obj = ( @args 
		   ? Proc::Background->new( $TERMINATE_FLAG, $process )
		   :  Proc::Background->new( $TERMINATE_FLAG, $process, @args )
		   );
    my $bg_pid = $bg_obj->pid;
    return { process => $bg_obj, pid => $bg_pid };
}

# ----------------------------------------------------------------------
# end of code
1;
__END__

# ======================================================================
# POD

=head1 NAME

     Unix.pm - Access to Unix system commands.

=head1 VERSION

This document describes Unix.pm version 0.0.1

=head1 SYNOPSIS

    use AN::Unix;

    my $hostname     = AN::Unix::hostname( );
    say $hostname;		# prints 'mymachine.mycompany.com'

    my $short        = AN::Unix::hostname( 'short' );
    say $short;			# prints 'mymachine'

    my $process_name = AN::Unix::pid2process( 1 );
    say $process_name;		# prints 'systemd'

    {
        my $bd_obj   = AN::Unix::new_bg_process( '/bin/ping', 'google.com' )
        sleep 15;
    }
    # prints several lines something like
    # 64 bytes from yyz08s09-in-f5.1e100.net (173.194.43.69): icmp_seq=1 ttl=56 time=25.8 ms

=head1 DESCRIPTION

This module implements AN::Unix utilities, an interface to Unix
utilities.

=head1 Subroutines

This module provides assorted unrelated subroutines.

=over 4

=item B<hostname>

Return the FQDN of the system on which we are running. If the arg
'-short' is provided, return just the most local component of the
hostname.

=item B<pid2process N>

Return the process name which corresponds to the specified PID. If the
PID does not exist, some error message will be generated by the
underlying Unix 'ps' utility.

=item B<new_bg_process /path/to/program [arg [arg ...]]>

Run the program as a background task, with optional
arguments. Proc::Background is invoked with a terminate flag, which
means that when the object returned from Proc::Background is
destroyed, the background task will go away.

=back

=head1 DEPENDENCIES

=over 4

=item B<Carp> I<core>

Report errors as if they occur at call site.

=item B<Const::Fast>

Provides fast constants.

=item B<English> I<core>

Provides meaningful names for Perl 'punctuation' variables.

=item B<File::Basename> I<core>

Parses paths and file suffixes.

=item B<FindBin> I<core>

Determine which directory contains the current program.

=item B<Proc::Background> 

Run processes in the background.

=item B<version> I<core since 5.9.0>

Parses version strings.

=back

=head1 LICENSE AND COPYRIGHT

This program is part of Aleeve's Anvil! system, and is released under
the GNU GPL v2+ license.

=head1 BUGS AND LIMITATIONS

We don't yet know of any bugs or limitations. Report problems to 

    Alteeve's Niche!  -  https://alteeve.ca

No warranty is provided. Do not use this software unless you are
willing and able to take full liability for its use. The authors take
care to prevent unexpected side effects when using this
program. However, no software is perfect and bugs may exist which
could lead to hangs or crashes in the program, in your cluster and
possibly even data loss.

=begin unused

=head1  INCOMPATIBILITIES

There are no current incompatabilities.


=head1 CONFIGURATION

=head1 EXIT STATUS

=head1 DIAGNOSTICS

=head1 REQUIRED ARGUMENTS

=head1 USAGE

=end unused

=head1 AUTHOR

    Alteeve's Niche!  -  https://alteeve.ca

    Tom Legrady          December 2014
    -  tom@alteeve.ca
    -  tom@tomlegrady.com
=cut

# End of File
# ======================================================================
## Please see file perltidy.ERR
