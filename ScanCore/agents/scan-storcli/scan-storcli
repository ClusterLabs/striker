#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# ScanCore Scan Agent for LSI-based RAID controllers using the 'storcli64' command line tool.
#
# https://alteeve.com
# 
# Exit Codes:
# 0  - Success
# 1  - storcli64 not installed
# 2  - storcli64 is installed but it is not executable.
# 3  - No LSI-based controllers found.
# 4  - Got data from the wrong controller.
# 5  - Unexpecte status when querying adapter
# 6  - Failed to parse out the controller's serial number.
# 7  - Failed to match a BBU to a host controller's serial number.
# 8  - Failed to match a controller's serial number to a controller UUID.
# 9  - Failed to match a Cachevault to a host controller's serial number.
# 10 - Failed to match a virtual drive ID string to a host controller's serial number.
# 11 - Failed to match a drive group ID string to a host controller's serial number.
# 12 - Failed to get the controller serial number that a physical drive is connected to.
# 13 - Failed to get the serial number of a physical drive.
# 14 - Drive group UUID doesn't exist when it should have.
# 15 - Controller serial number for an existing drive group wasn't found.
# 16 - Non-numeric value in numeric virtual drive variable.
# 
# 255 - The host's UUID isn't in the hosts table yet, ScanCore itself hasn't been run.
# 
# TODO:
# - DELETE a remaining_reserve_space variable from a history.storcli_variables on one dashboard and then 
#   trigger a resync. Appears to be causing a duplicate insert error.
#  
# - Check the cache policy and reset it to 'writeback' if the BBU/FBU is healthy and the cache changes to 
#   write-through.
# - When two or more drives have errors, 'drive:other_error_count' is only set to '1'. It should be the 
#   number of drives with errors. Also, if the error on one drive got above 100, its weight should be '2' and
#   above 1000, set to '3'.
# 
# NOTE:
# - LSI seems to flip between "Virtual Drive" and "Virtual Disk". We're standardizing on "Virtual Drive".
# 
# NOTE: 
# - Health values
#   - Controller  - Correctable errors   = 1
#   - Controller  - Uncorrectable errors = 5
#   - Controller  - Status changes       = 5
#   - Drive group - partially degraded   = 5
#   - Drive group - degraded             = 10
#   - Cachevault  - Replacement needed   = 5
#   - BBU         - Replacement needed   = 5
#   - Temperature - Critical             = 2
#   - Temperature - Warning              = 1

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;
use Math::BigInt;
no warnings 'recursion';

# Disable buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $scancore_directory = ($running_directory =~ /^(.*?)\/agents\/$THIS_FILE$/)[0];

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		health			=>	{
			old			=>	{},
			new			=>	{},
		},
		path			=>	{
			core_strings		=>	"$scancore_directory/ScanCore.xml",
			sql			=>	"$running_directory/$THIS_FILE.sql",
			strings			=>	"$running_directory/$THIS_FILE.xml",
		},
		scancore		=>	{
			archive			=>	{
				directory		=>	"/var/ScanCore/archives/",
				division		=>	25000,
				trigger			=>	20000,
				count			=>	10000,
				dump_file_header	=>	"
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = history, pg_catalog;
",
			},
		},
		# This is used so that the user can set the language in on striker.conf variable.
		'scan-storcli'		=>	{
			# This will keep track of devices with serial numbers so that it is easy to look up
			# the UUID from the serial numbers and vice versa.
			controllers		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			cachevaults		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			bbus			=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			physical_drives		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			disable			=>	0,
			language		=>	"en_CA",
			log_level		=>	1,
			log_language		=>	"en_CA",
			log_file		=>	"/var/log/ScanCore.log",
			log_db_transactions	=>	0,
			thresholds			=>	{
				# 45646-00B_Cache_Backup_Products_SAS_SATA_RAID_Controller_UserGd.pdf ->  Specifications for the BBU Models
				bbu				=>	{
					normal				=>	{
						high_warning			=>	35,
						high_critical			=>	40,
						low_warning			=>	15,
						low_critical			=>	10,
						jump				=>	3,
						buffer				=>	2,
					},
					discharging			=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	15,
						low_critical			=>	10,
						jump				=>	3,
						buffer				=>	2,
					},
				},
				# 45646-00B_Cache_Backup_Products_SAS_SATA_RAID_Controller_UserGd.pdf ->  Specifications for the Cachevaul Models
				cachevault			=>	{
					high_warning			=>	50,
					high_critical			=>	55,
					low_warning			=>	5,
					low_critical			=>	0,
					jump				=>	5,
					buffer				=>	3,
				},
				# This is used for unknown sensors and really shouldn't be used at all.
				'default'			=>	{
					high_warning			=>	50,
					high_critical			=>	55,
					low_warning			=>	15,
					low_critical			=>	10,
					jump				=>	5,
					buffer				=>	3,
				},
				drives				=>	{
					# http://storage.toshiba.com/docs/product-datasheets/mk01grrb-r.pdf
					hdd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	10,
						low_critical			=>	5,
						jump				=>	3,
						buffer				=>	2,
					},
					# http://toshiba.semicon-storage.com/us/product/storage-products/enterprise-ssd/px02smb-px02smfxxx.html
					ssd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	5,
						low_critical			=>	0,
						jump				=>	3,
						buffer				=>	2,
					},
				},
				# See email from M. Labrosse on 2014/04/14 @ 12:20; Specs not publicly available
				raid_on_chip			=>	{
					high_warning			=>	108,
					high_critical			=>	115,
					low_warning			=>	15,
					low_critical			=>	10,
					jump				=>	10,
					buffer				=>	5,
				},
			},
		},
		sys			=>	{
			adapter			=>	{},
			adapter_count		=>	0,
			alert_sort		=>	1,
			arguments		=>	{
				adapter_count		=>	"show ctrlcount",
				alarm_state		=>	"show alarm",
				# BBU battery or FBU capacitor bank info.
				bgi_rate		=>	"show bgirate",
				bbu_data		=>	"/bbu show all",
				cc_rate			=>	"show ccrate",
				cachevault_data		=>	"/cv show all",
				controller_info		=>	"show all", 
				physical_disk_data	=>	"/eall /sall show all",
				performance_mode	=>	"show perfmode",
				pr_rate			=>	"show prrate",
				rebuild_rate		=>	"show rebuildrate",
				virtual_drive_data	=>	"/vall show all",
			},
			# When a lock is requested, this is set to the time the lock was set. 
			# DB->do_db_write() and DB->do_db_read() will check this and if its age is >50% of
			# scancore::locking::reap_age, it will renew the lock.
			lock_active		=>	0,
			sql			=>	[],
		},
	},
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{'scan-storcli'}{language});
$an->default_log_language($an->data->{'scan-storcli'}{log_language});
$an->default_log_file    ($an->data->{'scan-storcli'}{log_file});

# Set the log level.
$an->Log->level($an->data->{'scan-storcli'}{log_level});
$an->Log->db_transactions(1) if $an->data->{'scan-storcli'}{log_db_transactions};

# Read in the language strings.
$an->Storage->read_words({file => $an->data->{path}{strings}});
$an->Storage->read_words({file => $an->data->{path}{core_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for help.
$an->Get->switches();
$an->Log->adjust_log_level({key => $THIS_FILE});

# Help?
if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	# Help!
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Exit if we're disabled.
if ($an->data->{'scan-storcli'}{disable})
{
	$an->nice_exit({exit_code => 1});
}

# I'll need to loop through the DBs and ensure our schema is loaded for each one.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({ log_level => 3, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});

# Make sure this host's UUID is in the 'hosts' table. If the user is running this directly without first
# running ScanCore, it won't be.
if (not $an->DB->verify_host_uuid())
{
	# ScanCore hasn't run, this host isn't in the 'hosts' table.
	$an->Alert->error({title_key => "an_0003", message_key => "scancore_error_0020", message_variables => { uuid => $an->data->{sys}{host_uuid} }, code => 255, file => $THIS_FILE, line => __LINE__});
}

# If we were called with '--prep-db', we'll prep the database schema regardless of whether clustat is found.
if ($an->data->{switches}{'prep-db'})
{
	if ($connections)
	{
		prep_databases($an);
	}
	else
	{
		# Failed
		$an->Log->entry({log_level => 1, message_key => "scancore_warning_0031", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scancore_warning_0031"})."\n";
	}
}

print $an->String->get({key => "scan_storcli_message_0001"})."\n";

# This does two things; It checks to see if storcli64 is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
find_lsi_controllers($an);

# If we're still alive, start gathering data.
gather_data($an);

# Do the loading of the schemas and copying data from more up to date DBs if the DB was loaded.
prep_databases($an);

# Archive, if needed.
archive_if_needed($an);

# Look to see if any databases need to be updated.
update_db($an);

# Figure out, other than temperatures, what should be added to or removed from health.
pre_process_health($an);

# Look for changes.
find_changes($an);

# Process temperatures! This also sets health values for warning and critical temperatures so make sure we
# always call this before process_health().
process_temperatures($an);

# Finally, process health weights.
process_health($an);

# Update the database
$an->DB->update_time({file => $THIS_FILE});

# Clean up and go away.
$an->nice_exit({exit_code => 0});


#############################################################################################################
# Function below                                                                                            #
#############################################################################################################

# This will archive stuff in the 'history' schema, if needed.
sub archive_if_needed
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "archive_if_needed" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the 'trigger' is '0', archiving is disabled.
	if (not $an->data->{scancore}{archive}{trigger})
	{
		return(1);
	}
	
	### NOTE: If a ScanCore db server was offline when an archive ran, when it returns, it's records will
	###       sync back, triggering a sooner-than-expected subsequent archive. This shouldn't happen 
	###       often, and the complexity of tracking archive dates is such that we'll not try to account
	###       for these cases. 
	### TODO: What we can do later is, when we write the restore stuff, build in a dedupe function.
	
	### Process:
	# 1. Count the records in history for each table, restricting the results to those from this host 
	#    (save for special tables like 'server') and if the number of records is greater than 
	#    'scancore::archive::trigger', start an archive.
	# 2. Set/update the 'archive_date' state.
	# 3. Lock the database.
	# 4. Select 'modified_date' from history.foo, offset by 
	#    ('scancore::archive::trigger' - 'scancore::archive::count').
	# 5. Make sure the 'scancore::archive::directory' exists, creating it if needed.
	# 6. Select all records older that the 'modified_date', write them to a file and then DELETE those
	#    records from the database.
	
	# Update the archive path, if set by a user. Also verify that there are sane archive values.
	$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
		name1 => "path::scancore_archive",       value1 => $an->data->{path}{scancore_archive}, 
		name2 => "scancore::archive::directory", value2 => $an->data->{scancore}{archive}{directory}, 
		name3 => "scancore::archive::trigger",   value3 => $an->data->{scancore}{archive}{trigger}, 
		name4 => "scancore::archive::count",     value4 => $an->data->{scancore}{archive}{count}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{archive}{directory} =~ /\/.*/)
	{
		$an->data->{path}{scancore_archive} = $an->data->{scancore}{archive}{directory};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "path::scancore_archive", value1 => $an->data->{path}{scancore_archive}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{trigger}) or ($an->data->{scancore}{archive}{trigger} =~ /\D/))
	{
		$an->data->{scancore}{archive}{trigger} = 100000;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::trigger", value1 => $an->data->{scancore}{archive}{trigger}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{count}) or ($an->data->{scancore}{archive}{count} =~ /\D/))
	{
		$an->data->{scancore}{archive}{count} = 50000;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::count", value1 => $an->data->{scancore}{archive}{count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	if (not -e $an->data->{path}{scancore_archive})
	{
		my $shell_call = $an->data->{path}{'mkdir'}." -p '".$an->data->{path}{scancore_archive}."'";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		close $file_handle;
		
		# Did it work?
		if (not -e $an->data->{path}{scancore_archive})
		{
			# Nope. :(
			$an->Alert->warning({message_key => "scancore_warning_0030", message_variables => { directory => $an->data->{path}{scancore_archive} }, quiet => 1, file => $THIS_FILE, line => __LINE__});
			return(1);
		}
	}
	
	# All of the changes happen in the variables table. This is set up like ScanCore and other agents in
	# case we find it necessary to add additional tables later.
	$an->data->{archive}{table} = {
		storcli_controllers	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_controller_host_uuid",
			offset			=>	0,
		},
		storcli_bbus	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_bbu_host_uuid",
			offset			=>	0,
		},
		storcli_cachevaults	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_cachevault_host_uuid",
			offset			=>	0,
		},
		storcli_drive_groups	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_drive_group_host_uuid",
			offset			=>	0,
		},
		storcli_physical_drives	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_physical_drive_host_uuid",
			offset			=>	0,
		},
		storcli_variables	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_variable_host_uuid",
			offset			=>	0,
		},
		storcli_virtual_drives	=>	{
			archive_date		=>	"",
			host_column		=>	"storcli_virtual_drive_host_uuid",
			offset			=>	0,
		},
	};
	my $archive_needed = 0;
	foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "table", value1 => $table, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $query = "
SELECT 
    COUNT(*) 
FROM 
    history.$table 
WHERE 
    ".$an->data->{archive}{table}{$table}{host_column}." = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $records = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $records = 0 if not defined $records;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "records", value1 => $records, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($records > $an->data->{scancore}{archive}{trigger})
		{
			   $archive_needed                             = 1;
			my $records_to_save                            = ($an->data->{scancore}{archive}{trigger} - $an->data->{scancore}{archive}{count});
			my $offset                                     = $records - $records_to_save;
			   $an->data->{archive}{table}{$table}{offset} = $offset;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "archive_needed",                   value1 => $archive_needed, 
				name2 => "records_to_save",                  value2 => $records_to_save, 
				name3 => "archive::table::${table}::offset", value3 => $an->data->{archive}{table}{$table}{offset}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# If I have something to archive, do so now.
	if ($archive_needed)
	{
		# This will store the files to compress after we release the locks.
		my $compress = [];
		
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Now loop through the table(s) that need to be archived.
		foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
		{
			next if not $an->data->{archive}{table}{$table}{offset};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "table", value1 => $table, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Now to do the archive.
			if ($table eq "storcli_controllers")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_controller_uuid", "storcli_controller_host_uuid", "storcli_controller_serial_number", "storcli_controller_model", "storcli_controller_alarm_state", "storcli_controller_cache_size"],
				});
			}
			elsif ($table eq "storcli_bbus")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_bbu_uuid", "storcli_bbu_host_uuid", "storcli_bbu_controller_uuid", "storcli_bbu_serial_number", "storcli_bbu_type", "storcli_bbu_model", "storcli_bbu_state", "storcli_bbu_manufacture_date", "storcli_bbu_design_capacity", "storcli_bbu_replacement_needed"],
				});
			}
			elsif ($table eq "storcli_cachevaults")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_cachevault_uuid", "storcli_cachevault_host_uuid", "storcli_cachevault_controller_uuid", "storcli_cachevault_serial_number", "storcli_cachevault_state", "storcli_cachevault_design_capacity", "storcli_cachevault_replacement_needed", "storcli_cachevault_type", "storcli_cachevault_model", "storcli_cachevault_manufacture_date"],
				});
			}
			elsif ($table eq "storcli_drive_groups")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_drive_group_uuid", "storcli_drive_group_host_uuid", "storcli_drive_group_virtual_drive_uuid", "storcli_drive_group_id_string", "storcli_drive_group_access", "storcli_drive_group_array_size", "storcli_drive_group_array_state", "storcli_drive_group_cache", "storcli_drive_group_cachecade", "storcli_drive_group_consistent", "storcli_drive_group_disk_cache", "storcli_drive_group_raid_type", "storcli_drive_group_read_cache", "storcli_drive_group_scheduled_cc", "storcli_drive_group_write_cache"],
				});
			}
			elsif ($table eq "storcli_physical_drives")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_physical_drive_uuid", "storcli_physical_drive_host_uuid", "storcli_physical_drive_controller_uuid", "storcli_physical_drive_virtual_drive", "storcli_physical_drive_drive_group", "storcli_physical_drive_enclosure_id", "storcli_physical_drive_slot_number", "storcli_physical_drive_serial_number", "storcli_physical_drive_size", "storcli_physical_drive_sector_size", "storcli_physical_drive_vendor", "storcli_physical_drive_model", "storcli_physical_drive_self_encrypting_drive"],
				});
			}
			elsif ($table eq "storcli_variables")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_variable_uuid", "storcli_variable_host_uuid", "storcli_variable_source_table", "storcli_variable_source_uuid", "storcli_variable_is_temperature", "storcli_variable_name", "storcli_variable_value"],
				});
			}
			elsif ($table eq "storcli_virtual_drives")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["storcli_virtual_drive_uuid", "storcli_virtual_drive_host_uuid", "storcli_virtual_drive_controller_uuid", "storcli_virtual_drive_id_string", "storcli_virtual_drive_creation_date", "storcli_virtual_drive_data_protection", "storcli_virtual_drive_disk_cache_policy", "storcli_virtual_drive_emulation_type", "storcli_virtual_drive_encryption", "storcli_virtual_drive_blocks", "storcli_virtual_drive_strip_size", "storcli_virtual_drive_drives_per_span", "storcli_virtual_drive_span_depth", "storcli_virtual_drive_scsi_naa_id"],
				});
			}
		}
		
		### TODO: Make this less of a hackish mc-hackington...
		# VACUUM FULL, if the database is on this machine. I need to do this from the command line 
		# because the user we connect as isn't allowed to do it. We'll also only vacuum our DB.
		my $db_name = "";
		foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
				name1 => "id",                        value1 => $id, 
				name2 => "scancore::db::${id}::host", value2 => $an->data->{scancore}{db}{$id}{host}, 
				name3 => "hostname",                  value3 => $an->hostname, 
				name4 => "short_hostname",            value4 => $an->short_hostname, 
			}, file => $THIS_FILE, line => __LINE__});
			if (($an->data->{scancore}{db}{$id}{host} eq $an->hostname) or ($an->data->{scancore}{db}{$id}{host} eq $an->short_hostname))
			{
				$db_name = $an->data->{scancore}{db}{$id}{name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "db_name",                   value1 => $db_name, 
					name2 => "scancore::db::${id}::name", value2 => $an->data->{scancore}{db}{$id}{name}, 
				}, file => $THIS_FILE, line => __LINE__});
				last;
			}
		}
		if ($db_name)
		{
			my $start      = time;
			my $shell_call = $an->data->{path}{su}." - postgres -c \"".$an->data->{path}{psql}." $db_name -c 'VACUUM FULL;'\"";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "start",      value1 => $start, 
				name2 => "shell_call", value2 => $shell_call, 
			}, file => $THIS_FILE, line => __LINE__});
			open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			close $file_handle;
			
			my $finished = time - $start;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "finished", value1 => $finished, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# This looks for anything other than temperature sensors that will feed into the health of the node.
sub pre_process_health
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "pre_process_health" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the array degraded or partially degraded?
	foreach my $id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}})
		{
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}})
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
				
				my $value = $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable};
				if ($value eq "Partially Degraded")
				{
					# Partially degraded array
					my $health_source_name                           = "drive_group:".$id_string,"-".$drive_group.":".$variable;
					   $an->data->{health}{new}{$health_source_name} = 5;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($value eq "Degraded")
				{
					# Degraded array
					my $health_source_name                           = "drive_group:".$id_string,"-".$drive_group.":".$variable;
					   $an->data->{health}{new}{$health_source_name} = 10;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
		}
	}
	
	# Controllers.
	foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}{$serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "controller::serial_number::${serial_number}::variable::$variable", value1 => $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable};
			if (($variable eq "alarm_state") && (lc($value) ne "missing") && (lc($value) ne "off"))
			{
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "memory_correctable_errors") && ($value ne "0"))
			{
				# TODO: I might want to scale this where 1~X = 1, Y~Z = 3, etc
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "memory_uncorrectable_errors") && ($value ne "0"))
			{
				# TODO: I might want to scale this where 1~X = 5, Y~Z = 10, etc
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "controller_status") && (lc($value) ne "optimal"))
			{
				# 'Needs Attention' when array degrades
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Physical Drives.
	foreach my $storcli_virtual_drive_id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}})
		{
			foreach my $enclosure_id (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}})
			{
				foreach my $slot_number (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}})
				{
					foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}})
					{
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "virtual_drive::${storcli_virtual_drive_id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::${variable}", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
						}, file => $THIS_FILE, line => __LINE__});
						
						my $value = $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable};
						if ((($variable eq "media_error_count") or ($variable eq "other_error_count")) && ($value ne "0"))
						{
							# If the count is over 50, set to '2'. If over 5, set to 1.
							my $health_source_name = "drive:".$variable;
							if ($value > 50)
							{
								$an->data->{health}{new}{$health_source_name} = 2;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
								}, file => $THIS_FILE, line => __LINE__});
							}
							elsif ($value > 5)
							{
								$an->data->{health}{new}{$health_source_name} = 1;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
								}, file => $THIS_FILE, line => __LINE__});
							}
						}
						elsif (($variable eq "predictive_failure_count") && ($value ne "0"))
						{
							# A single tick of this requires immediate replacement.
							my $health_source_name                           = "drive:".$variable;
							   $an->data->{health}{new}{$health_source_name} = 2;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
				}
			}
		}
	}
	
	# Cachevaults.
	foreach my $cachevault_serial_number (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cachevault::serial_number::${cachevault_serial_number}::variable::$variable", value1 => $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
			if (($variable eq "replacement_required") && (lc($value) eq "yes"))
			{
				my $health_source_name                           = "cachevault:".$cachevault_serial_number.":".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# BBUs
	foreach my $bbu_serial_number (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu::serial_number::${bbu_serial_number}::variable::$variable", value1 => $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable},
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
			if (($variable eq "replacement_required") && (lc($value) eq "yes"))
			{
				my $health_source_name                           = "bbu:".$bbu_serial_number.":".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	return(0);
}

# This reads in all health wieghts previously set, alters ones as needed, INSERTs new ones and DELETEs old
# ones.
sub process_health
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_health" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will hold our updates.
	$an->data->{sys}{sql} = [];
	
	# Read in previous health values.
	my $query = "
SELECT 
    health_uuid,
    health_agent_name,
    health_source_name,
    health_source_weight 
FROM 
    health 
WHERE 
    health_host_uuid  = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    health_agent_name = ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE)."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
		
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $health_uuid          = $row->[0]; 
		my $health_agent_name    = $row->[1]; 
		my $health_source_name   = $row->[2]; 
		my $health_source_weight = $row->[3];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "health_uuid",          value1 => $health_uuid, 
			name2 => "health_agent_name",    value2 => $health_agent_name, 
			name3 => "health_source_name",   value3 => $health_source_name, 
			name4 => "health_source_weight", value4 => $health_source_weight, 
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{health}{old}{$health_source_name}{uuid}  = $health_uuid;
		$an->data->{health}{old}{$health_source_name}{value} = $health_source_weight;
	}
	
	# Read in the new ones
	foreach my $health_source_name (sort {$a cmp $b} keys %{$an->data->{health}{new}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
		}, file => $THIS_FILE, line => __LINE__});
		if (exists $an->data->{health}{old}{$health_source_name})
		{
			# We've seen this before. Has it changed?
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "health::old::${health_source_name}::value", value1 => $an->data->{health}{old}{$health_source_name}{value}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($an->data->{health}{new}{$health_source_name} ne $an->data->{health}{old}{$health_source_name}{value})
			{
				# It has changed, update it.
				my $query = "
UPDATE 
    health 
SET 
    health_source_weight = ".$an->data->{sys}{use_db_fh}->quote($an->data->{health}{new}{$health_source_name}).", 
    modified_date        = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    health_uuid          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{health}{old}{$health_source_name}{uuid})."
;";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
				
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			# Delete the new old key, regardless of whether it has changed now.
			delete $an->data->{health}{old}{$health_source_name};
		}
		else
		{
			# New entry, INSERT it.
			my $query = "
INSERT INTO 
    health
(
    health_uuid,
    health_host_uuid,
    health_agent_name,
    health_source_name,
    health_source_weight,
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE).", 
    ".$an->data->{sys}{use_db_fh}->quote($health_source_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{health}{new}{$health_source_name}).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query, 
			}, file => $THIS_FILE, line => __LINE__});
			
			push @{$an->data->{sys}{sql}}, $query;
		}
	}
	
	# Delete any old entries that are left.
	foreach my $health_source_name (sort {$a cmp $b} keys %{$an->data->{health}{old}})
	{
		# Well set the source name to 'DELETED'.
		my $query = "
UPDATE 
    health 
SET 
    health_source_name = 'DELETED', 
    modified_date      = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    health_uuid        = ".$an->data->{sys}{use_db_fh}->quote($an->data->{health}{old}{$health_source_name}{uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
		
		$query = "
DELETE FROM 
    health 
WHERE 
    health_uuid        = ".$an->data->{sys}{use_db_fh}->quote($an->data->{health}{old}{$health_source_name}{uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# This reads in the various temperature sensors we read from this run and will set the temperature table 
# and/or set/clear warnings/critical states.
sub process_temperatures
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_temperatures" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### NOTE: We use 'sensor_host' to hold the serial number of the device hosting the sensor.
	# First, read in all existing entries. We'll compare and UPDATE or INSERT as needed and DELETE any 
	# stale entries. 
	my $query = "
SELECT 
    temperature_uuid, 
    temperature_sensor_name, 
    temperature_sensor_host, 
    temperature_celsius,
    temperature_state,
    temperature_is
FROM 
    temperature 
WHERE 
    temperature_host_uuid   = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
AND 
    temperature_agent_name  = ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE)." 
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	
	# One or more records were found.
	foreach my $row (@{$results})
	{
		my $temperature_uuid        = $row->[0]; 
		my $temperature_sensor_name = $row->[1];
		my $temperature_sensor_host = $row->[2];
		my $temperature_celsius     = $row->[3];
		my $temperature_state       = $row->[4];
		my $temperature_is          = $row->[5];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "temperature_uuid",        value1 => $temperature_uuid,
			name2 => "temperature_sensor_name", value2 => $temperature_sensor_name,
			name3 => "temperature_sensor_host", value3 => $temperature_sensor_host,
			name4 => "temperature_celsius",     value4 => $temperature_celsius,
			name5 => "temperature_state",       value5 => $temperature_state,
			name6 => "temperature_is",          value6 => $temperature_is,
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{old}{temperature}{$temperature_sensor_name}{$temperature_sensor_host} = {
			temperature_uuid	=>	$temperature_uuid, 
			temperature_celsius	=>	$temperature_celsius,
			temperature_state	=>	$temperature_state,
			temperature_is		=>	$temperature_is,
		};
	}
	
	# Loop through the temperature from this scan.
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{new}{temperature}})
	{
		foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{new}{temperature}{$variable}})
		{
			my $new_temperature_celsius = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_celsius};
			my $new_temperature_state   = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_state};
			my $new_temperature_is      = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_is};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "variable",                value1 => $variable, 
				name2 => "serial_number",           value2 => $serial_number, 
				name3 => "new_temperature_celsius", value3 => $new_temperature_celsius, 
				name4 => "new_temperature_state",   value4 => $new_temperature_state, 
				name5 => "new_temperature_is",      value5 => $new_temperature_is, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If the state is 'warning', set  a health weight of 1 and set critical to 2.
			if ($new_temperature_state eq "warning")
			{
				my $health_source_name                           = "temperature:".$serial_number;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($new_temperature_state eq "critical")
			{
				my $health_source_name                           = "temperature:".$serial_number;
				   $an->data->{health}{new}{$health_source_name} = 2;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Now see if the variable was seen before and, if so, if it changed.
			if (ref($an->data->{old}{temperature}{$variable}{$serial_number}))
			{
				# Update the existing entry, if needed.
				my $temperature_uuid        = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_uuid};
				my $old_temperature_celsius = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_celsius};
				my $old_temperature_state   = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_state};
				my $old_temperature_is      = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_is};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
					name1 => "temperature_uuid",         value1 => $temperature_uuid,
					name2 => "old_temperature_celsius",  value2 => $old_temperature_celsius,
					name3 => "old_temperature_state",    value3 => $old_temperature_state,
					name4 => "old_temperature_is",       value4 => $old_temperature_is,
				}, file => $THIS_FILE, line => __LINE__});
				
				if (($new_temperature_celsius ne $old_temperature_celsius) or 
				    ($new_temperature_state   ne $old_temperature_state)   or
				    ($new_temperature_is      ne $old_temperature_is))
				{
					# Something changed, update.
					my $query = "
UPDATE 
    temperature 
SET 
    temperature_celsius = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_celsius).", 
    temperature_state   = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_state).", 
    temperature_is      = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_is).", 
    modified_date       = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE
    temperature_uuid    = ".$an->data->{sys}{use_db_fh}->quote($temperature_uuid).";
";
					push @{$an->data->{sys}{sql}}, $query;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
				}
				else
				{
					# No change.
					$an->Log->entry({log_level => 3, message_key => "scan_storcli_log_0002", message_variables => {
						sensor_name => $variable,
						sensor_host => $serial_number, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# We still want this value, so delete it from the hash so it doesn't get 
				# deleted in the next step.
				delete $an->data->{old}{temperature}{$variable}{$serial_number};
			}
			else
			{
				# New entry
				my $query = "
INSERT INTO 
    temperature 
(
    temperature_uuid, 
    temperature_host_uuid, 
    temperature_sensor_host, 
    temperature_sensor_name, 
    temperature_agent_name, 
    temperature_celsius, 
    temperature_state, 
    temperature_is, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_celsius).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_is).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);
";
				push @{$an->data->{sys}{sql}}, $query;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Now, if any undeleted old entries remain, delete them from the database.
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{old}{temperature}})
	{
		foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{old}{temperature}{$variable}})
		{
			my $old_temperature_uuid = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_uuid};
			my $old_temperature      = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_celsius};
			my $old_state            = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_state};
			my $old_is               = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_is};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "variable",             value1 => $variable, 
				name2 => "serial_number",        value2 => $serial_number, 
				name3 => "old_temperature_uuid", value3 => $old_temperature_uuid, 
				name4 => "old_temperature",      value4 => $old_temperature, 
				name5 => "old_state",            value5 => $old_state, 
				name6 => "old_is",               value6 => $old_is, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Mark the sensor as DELETEd.
			my $query = "
UPDATE 
    temperature 
SET 
    temperature_state  = 'DELETED', 
    modified_date      = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE
    temperature_uuid   = ".$an->data->{sys}{use_db_fh}->quote($old_temperature_uuid).";
";
			push @{$an->data->{sys}{sql}}, $query;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			$query = "
DELETE FROM 
    temperature 
WHERE
    temperature_uuid   = ".$an->data->{sys}{use_db_fh}->quote($old_temperature_uuid).";
";
			push @{$an->data->{sys}{sql}}, $query;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# Commit the queries.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# This returns the value for a given storcli DB variable from this host.
sub get_storcli_variable
{
	my ($an, $storcli_variable_name, $storcli_variable_source_table, $storcli_variable_source_uuid) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_storcli_variable" }, message_key => "an_variables_0003", message_variables => { 
		name1 => "storcli_variable_name",         value1 => $storcli_variable_name, 
		name2 => "storcli_variable_source_table", value2 => $storcli_variable_source_table, 
		name3 => "storcli_variable_source_uuid",  value3 => $storcli_variable_source_uuid, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $query = "
SELECT 
    storcli_variable_value 
FROM 
    storcli_variables 
WHERE 
    storcli_variable_name         = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_name)." 
AND 
    storcli_variable_source_table = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_table)." 
AND 
    storcli_variable_source_uuid  = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_uuid)." 
AND 
    storcli_variable_host_uuid    = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $value = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
	   $value = "" if not defined $value;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "value", value1 => $value, 
	}, file => $THIS_FILE, line => __LINE__});
	
	return($value);
}

# This reads in the last scan data from one of the databases and compares it against the just-read data. If 
# anything changed, register an alert.
sub find_changes
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_changes" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Read in the old data. As we compare and UPDATE if needed, then we'll delete. If any are not found,
	# then it must be new and will be INSERTed. Any old records left over will have vanished.
	read_last_scan($an);
	
	### NOTE: We will loop through each section of data we scanned, deleting records as we process them
	###       that existed in the DB, and then marking as removed anything left in the databased data not
	###       seen in this scan.
	process_controllers($an);
	process_bbus($an);
	process_cachevaults($an);
	process_virtual_drives($an);	# This calls process_drive_groups();
	process_physical_disks($an);
	
	return(0);
}

# Look for added, changed or deleted drive groups.
sub process_drive_groups
{
	my ($an, $storcli_virtual_drive_id_string, $storcli_drive_group_virtual_drive_uuid, $controller_uuid, $host_controller_serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_drive_groups" }, message_key => "an_variables_0004", message_variables => { 
		name1 => "storcli_virtual_drive_id_string",        value1 => $storcli_virtual_drive_id_string, 
		name2 => "storcli_drive_group_virtual_drive_uuid", value2 => $storcli_drive_group_virtual_drive_uuid, 
		name3 => "controller_uuid",                        value3 => $controller_uuid, 
		name4 => "host_controller_serial_number",          value4 => $host_controller_serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	### NOTE: The parent VD may be VANISHED, in which case this DG is likely VANISHED, too.
	# Show the drive group and drives.
	foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}})
	{
		my $storcli_drive_group_id_string = $storcli_virtual_drive_id_string."-dg".$drive_group;
		my $virtual_drive                 = ($storcli_virtual_drive_id_string =~ /-vd(\d+)$/)[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "storcli_virtual_drive_id_string", value1 => $storcli_virtual_drive_id_string,
			name2 => "storcli_drive_group_id_string",   value2 => $storcli_drive_group_id_string,
			name3 => "virtual_drive",                   value3 => $virtual_drive,
			name4 => "drive_group",                     value4 => $drive_group,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Make sure I have the host's serial number and UUID.
		if (not $host_controller_serial_number)
		{
			# Error!
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0011", message_variables => { id_string => $storcli_virtual_drive_id_string }, code => 11, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 11});
		}
		if (not $controller_uuid)
		{
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0008", message_variables => { serial_number => $host_controller_serial_number }, code => 8, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 8});
		}
		
		### NOTE: This is here purely for debugging.
		# Show the basic drive group data
		foreach my $type ("variable", "temperature")
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "type", value1 => $type,
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->aligned_entries({
				log_level => 3, 
				file      => $THIS_FILE,
				line      => __LINE__,
				prefix    => "$storcli_drive_group_id_string ($drive_group) - $type",
				hash_ref  => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{$type},
			});
		}
		
		# Is this a new Drive Group?
		my $storcli_drive_group_uuid = "";
		my $is_new                   = 0;
		if (exists $an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string})
		{
			# Yes!
			$storcli_drive_group_uuid = $an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "storcli_drive_group_uuid", value1 => $storcli_drive_group_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# No, this is a new Drive Group. Create a new UUID for it.
			$storcli_drive_group_uuid = $an->Get->uuid();
			$is_new                   = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "storcli_drive_group_uuid", value1 => $storcli_drive_group_uuid,
				name2 => "is_new",   value2 => $is_new,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add the keys for looking it up by UUID or serial number.
			$an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string} = $storcli_drive_group_uuid;
			$an->data->{'scan-storcli'}{drive_groups}{by_uuid}{$storcli_drive_group_uuid}           = $storcli_virtual_drive_id_string;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "scan-storcli::drive_groups::by_id_string::$storcli_virtual_drive_id_string", value1 => $an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string},
				name2 => "scan-storcli::drive_groups::by_uuid::$storcli_drive_group_uuid",             value2 => $an->data->{'scan-storcli'}{drive_groups}{by_uuid}{$storcli_drive_group_uuid},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		my $new_drive_group_access       = "";
		my $new_drive_group_array_size   = "";
		my $new_drive_group_array_state  = "";
		my $new_drive_group_cache        = "";
		my $new_drive_group_cachecade    = "";
		my $new_drive_group_consistent   = "";
		my $new_drive_group_disk_cache   = "";
		my $new_drive_group_raid_type    = "";
		my $new_drive_group_read_cache   = "";
		my $new_drive_group_scheduled_cc = "";
		my $new_drive_group_write_cache  = "";
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${storcli_virtual_drive_id_string}::drive_group::${drive_group}::variable::${variable}", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable},
			}, file => $THIS_FILE, line => __LINE__});
			
			# Store and delete the value
			if ($variable eq "access")
			{
				$new_drive_group_access = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_access", value1 => $new_drive_group_access,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "array_size")
			{
				$new_drive_group_array_size = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_array_size", value1 => $new_drive_group_array_size,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "array_state")
			{
				$new_drive_group_array_state = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_array_state", value1 => $new_drive_group_array_state,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "cache")
			{
				$new_drive_group_cache = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_cache", value1 => $new_drive_group_cache,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "cachecade")
			{
				$new_drive_group_cachecade = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_cachecade", value1 => $new_drive_group_cachecade,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "consistent")
			{
				$new_drive_group_consistent = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_consistent", value1 => $new_drive_group_consistent,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "disk_cache")
			{
				$new_drive_group_disk_cache = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_disk_cache", value1 => $new_drive_group_disk_cache,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "raid_type")
			{
				$new_drive_group_raid_type = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_raid_type", value1 => $new_drive_group_raid_type,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "read_cache")
			{
				$new_drive_group_read_cache = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_read_cache", value1 => $new_drive_group_read_cache,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "scheduled_consistency_check")
			{
				$new_drive_group_scheduled_cc = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_scheduled_cc", value1 => $new_drive_group_scheduled_cc,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "write_cache")
			{
				$new_drive_group_write_cache = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drive_group_write_cache", value1 => $new_drive_group_write_cache,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
	
		# Pull out the rest of the variables now. If the Drive Group is new, all variables will be 
		# INSERTed. If the Drive Group exists, each variable will be examined and new ones will be 
		# INSERTed, existing ones will be checked for changes and UPDATEd as needed. If the Drive 
		# Group is NOT new, then variables from the old data will be deleted as we go and any not 
		# found in the current data set will be left over. We'll use this to determine variables that
		# have vanished. They will not be deleted, but their value will be set to 'VANISHED'.
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "is_new", value1 => $is_new,
		}, file => $THIS_FILE, line => __LINE__});
		if ($is_new)
		{
			### NOTE: DG 9999 will be mostly NULL and that is fine
			$an->Log->entry({log_level => 3, message_key => "an_variables_0014", message_variables => {
				name1  => "storcli_drive_group_uuid",      value1  => $storcli_drive_group_uuid,
				name2  => "controller_uuid",               value2  => $controller_uuid,
				name3  => "storcli_drive_group_id_string", value3  => $storcli_drive_group_id_string,
				name4  => "new_drive_group_access",        value4  => $new_drive_group_access,
				name5  => "new_drive_group_array_size",    value5  => $new_drive_group_array_size,
				name6  => "new_drive_group_array_state",   value6  => $new_drive_group_array_state,
				name7  => "new_drive_group_cache",         value7  => $new_drive_group_cache,
				name8  => "new_drive_group_cachecade",     value8  => $new_drive_group_cachecade,
				name9  => "new_drive_group_consistent",    value9  => $new_drive_group_consistent,
				name10 => "new_drive_group_disk_cache",    value10 => $new_drive_group_disk_cache,
				name11 => "new_drive_group_raid_type",     value11 => $new_drive_group_raid_type,
				name12 => "new_drive_group_read_cache",    value12 => $new_drive_group_read_cache,
				name13 => "new_drive_group_scheduled_cc",  value13 => $new_drive_group_scheduled_cc,
				name14 => "new_drive_group_write_cache",   value14 => $new_drive_group_write_cache,
			}, file => $THIS_FILE, line => __LINE__});
			
			### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
			# Send an alert telling the user that we've found a new controller.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort}, 
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_storcli_note_0005",
				alert_message_variables	=>	{
					on_controller		=>	$host_controller_serial_number,
					id_string		=>	$storcli_drive_group_id_string,
					access			=>	$new_drive_group_access,
					array_size		=>	$new_drive_group_array_size,
					array_state		=>	$new_drive_group_array_state,
					cache			=>	$new_drive_group_cache,
					cachecade		=>	$new_drive_group_cachecade,
					consistent		=>	$new_drive_group_consistent,
					disk_cache		=>	$new_drive_group_disk_cache,
					raid_type		=>	$new_drive_group_raid_type,
					read_cache		=>	$new_drive_group_read_cache,
					scheduled_cc		=>	$new_drive_group_scheduled_cc,
					write_cache		=>	$new_drive_group_write_cache,
				},
			});
			
			# INSERT
			my $query = "
INSERT INTO 
    storcli_drive_groups
(
    storcli_drive_group_uuid, 
    storcli_drive_group_host_uuid, 
    storcli_drive_group_virtual_drive_uuid, 
    storcli_drive_group_id_string, 
    storcli_drive_group_access, 
    storcli_drive_group_array_size, 
    storcli_drive_group_array_state, 
    storcli_drive_group_cache, 
    storcli_drive_group_cachecade, 
    storcli_drive_group_consistent, 
    storcli_drive_group_disk_cache, 
    storcli_drive_group_raid_type, 
    storcli_drive_group_read_cache, 
    storcli_drive_group_scheduled_cc, 
    storcli_drive_group_write_cache, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_access).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_array_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_array_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_cachecade).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_consistent).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_disk_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_raid_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_read_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_scheduled_cc).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_write_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			# Now record the query in the array
			$query =~ s/''/NULL/g;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;

			# Process the rest of the variables and temperatures now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{$type}})
				{
					my $value       = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{$type}{$variable};
					my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "value",       value2 => $value,
						name3 => "temperature", value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Send an alert telling the user that we've found a new controller.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	'FALSE',
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_storcli_note_0002",
						alert_message_variables	=>	{
							name			=>	$variable,
							value			=>	$value,
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_drive_groups', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		else
		{
			### NOTE: The serial number should never change (a changed SN/Drive Group should be 
			###       picked up as a new Drive Group), but we check/update just to be safe.
			# Look for changes.
			my $main_table_changed                 = 0;
			my $old_drive_group_id_string          = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_id_string};
			my $old_drive_group_virtual_drive_uuid = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_virtual_drive_uuid};
			my $old_drive_group_access             = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_access};
			my $old_drive_group_array_size         = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_size};
			my $old_drive_group_array_state        = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_state};
			my $old_drive_group_cache              = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cache};
			my $old_drive_group_cachecade          = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cachecade};
			my $old_drive_group_consistent         = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_consistent};
			my $old_drive_group_disk_cache         = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_disk_cache};
			my $old_drive_group_raid_type          = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_raid_type};
			my $old_drive_group_read_cache         = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_read_cache};
			my $old_drive_group_scheduled_cc       = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_scheduled_cc};
			my $old_drive_group_write_cache        = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_write_cache};
			
			$an->Log->entry({log_level => 3, message_key => "an_variables_0026", message_variables => {
				name1  => "storcli_drive_group_id_string",          value1  => $storcli_drive_group_id_string,
				name2  => "old_drive_group_id_string",              value2  => $old_drive_group_id_string,
				name3  => "storcli_drive_group_virtual_drive_uuid", value3  => $storcli_drive_group_virtual_drive_uuid,
				name4  => "old_drive_group_virtual_drive_uuid",     value4  => $old_drive_group_virtual_drive_uuid,
				name5  => "new_drive_group_access",                 value5  => $new_drive_group_access,
				name6  => "old_drive_group_access",                 value6  => $old_drive_group_access,
				name7  => "new_drive_group_array_size",             value7  => $new_drive_group_array_size,
				name8  => "old_drive_group_array_size",             value8  => $old_drive_group_array_size,
				name9  => "new_drive_group_array_state",            value9  => $new_drive_group_array_state,
				name10 => "old_drive_group_array_state",            value10 => $old_drive_group_array_state,
				name11 => "new_drive_group_cache",                  value11 => $new_drive_group_cache,
				name12 => "old_drive_group_cache",                  value12 => $old_drive_group_cache,
				name13 => "new_drive_group_cachecade",              value13 => $new_drive_group_cachecade,
				name14 => "old_drive_group_cachecade",              value14 => $old_drive_group_cachecade,
				name15 => "new_drive_group_consistent",             value15 => $new_drive_group_consistent,
				name16 => "old_drive_group_consistent",             value16 => $old_drive_group_consistent,
				name17 => "new_drive_group_disk_cache",             value17 => $new_drive_group_disk_cache,
				name18 => "old_drive_group_disk_cache",             value18 => $old_drive_group_disk_cache,
				name19 => "new_drive_group_raid_type",              value19 => $new_drive_group_raid_type,
				name20 => "old_drive_group_raid_type",              value20 => $old_drive_group_raid_type,
				name21 => "new_drive_group_read_cache",             value21 => $new_drive_group_read_cache,
				name22 => "old_drive_group_read_cache",             value22 => $old_drive_group_read_cache,
				name23 => "new_drive_group_scheduled_cc",           value23 => $new_drive_group_scheduled_cc,
				name24 => "old_drive_group_scheduled_cc",           value24 => $old_drive_group_scheduled_cc,
				name25 => "new_drive_group_write_cache",            value25 => $new_drive_group_write_cache,
				name26 => "old_drive_group_write_cache",            value26 => $old_drive_group_write_cache,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (not defined $old_drive_group_virtual_drive_uuid)
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0014", message_variables => { drive_group => $drive_group }, code => 14, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 14});
			}
			
			if (($storcli_drive_group_id_string          ne $old_drive_group_id_string)          or 
			    ($storcli_drive_group_virtual_drive_uuid ne $old_drive_group_virtual_drive_uuid) or 
			    ($new_drive_group_access                 ne $old_drive_group_access)             or 
			    ($new_drive_group_array_size             ne $old_drive_group_array_size)         or 
			    ($new_drive_group_array_state            ne $old_drive_group_array_state)        or 
			    ($new_drive_group_cache                  ne $old_drive_group_cache)              or 
			    ($new_drive_group_cachecade              ne $old_drive_group_cachecade)          or 
			    ($new_drive_group_consistent             ne $old_drive_group_consistent)         or 
			    ($new_drive_group_disk_cache             ne $old_drive_group_disk_cache)         or 
			    ($new_drive_group_raid_type              ne $old_drive_group_raid_type)          or 
			    ($new_drive_group_read_cache             ne $old_drive_group_read_cache)         or 
			    ($new_drive_group_scheduled_cc           ne $old_drive_group_scheduled_cc)       or 
			    ($new_drive_group_write_cache            ne $old_drive_group_write_cache))
			{
				# Send a warning level alert because nothing should change here, ever.
				my $title_key   = "an_alert_title_0004";
				my $message_key = "scan_storcli_warning_0024";
				if ($new_drive_group_access ne $old_drive_group_access)
				{
					if ($new_drive_group_access eq "VANISHED")
					{
						# Drive Group has returned.
						$message_key = "scan_storcli_warning_0025";
					}
				}
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						old_id_string		=>	$old_drive_group_id_string, 
						new_id_string		=>	$storcli_drive_group_id_string, 
						new_access		=>	$new_drive_group_access,
						old_access		=>	$old_drive_group_access,
						new_array_size		=>	$new_drive_group_array_size,
						old_array_size		=>	$old_drive_group_array_size,
						new_array_state		=>	$new_drive_group_array_state,
						old_array_state		=>	$old_drive_group_array_state,
						new_cache		=>	$new_drive_group_cache,
						old_cache		=>	$old_drive_group_cache,
						new_cachecade		=>	$new_drive_group_cachecade,
						old_cachecade		=>	$old_drive_group_cachecade,
						new_consistent		=>	$new_drive_group_consistent,
						old_consistent		=>	$old_drive_group_consistent,
						new_disk_cache		=>	$new_drive_group_disk_cache,
						old_disk_cache		=>	$old_drive_group_disk_cache,
						new_raid_type		=>	$new_drive_group_raid_type,
						old_raid_type		=>	$old_drive_group_raid_type,
						new_read_cache		=>	$new_drive_group_read_cache,
						old_read_cache		=>	$old_drive_group_read_cache,
						new_scheduled_cc	=>	$new_drive_group_scheduled_cc,
						old_scheduled_cc	=>	$old_drive_group_scheduled_cc,
						new_write_cache		=>	$new_drive_group_write_cache,
						old_write_cache		=>	$old_drive_group_write_cache,
					},
				});
				$main_table_changed = 1;
				
				my $query = "
UPDATE 
    storcli_drive_groups
SET
    storcli_drive_group_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_virtual_drive_uuid).", 
    storcli_drive_group_id_string          = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_id_string).", 
    storcli_drive_group_access             = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_access).", 
    storcli_drive_group_array_size         = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_array_size).", 
    storcli_drive_group_array_state        = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_array_state).", 
    storcli_drive_group_cache              = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_cache).", 
    storcli_drive_group_cachecade          = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_cachecade).", 
    storcli_drive_group_consistent         = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_consistent).", 
    storcli_drive_group_disk_cache         = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_disk_cache).", 
    storcli_drive_group_raid_type          = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_raid_type).", 
    storcli_drive_group_read_cache         = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_read_cache).", 
    storcli_drive_group_scheduled_cc       = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_scheduled_cc).", 
    storcli_drive_group_write_cache        = ".$an->data->{sys}{use_db_fh}->quote($new_drive_group_write_cache).", 
    modified_date                          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_drive_group_uuid               = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid)." 
;";

				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			### Process the rest of the variables now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{$type}})
				{
					my $new_variable_value = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{$type}{$variable};
					my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "temperature", value2 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable}{storcli_variable_uuid})
					{
						# Look for changes
						my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable}{storcli_variable_value};
						my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable}{storcli_variable_uuid};
						$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
							name1 => "variable",           value1 => $variable,
							name2 => "new_variable_value", value2 => $new_variable_value,
							name3 => "old_variable_value", value3 => $old_variable_value,
							name4 => "variable_uuid",      value4 => $variable_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						# Delete it so that we know it has been processed.
						delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable};
						
						if (($new_variable_value ne $old_variable_value))
						{
							# Changed! If the old value was 'VANISHED', then a 
							# sensor or variable returned. Otherwise, for now, we
							# treat everything as 'warning' and step down 
							# explicitely anything not of concern that proves 
							# noisey later (better safe than sorry).
							$an->data->{sys}{alert_sort}++; 
							
							my $message_key = "scan_storcli_warning_0026";
							if ($old_variable_value eq "VANISHED")
							{
								$message_key = "scan_storcli_warning_0027";
							}
							$an->Alert->register_alert({
								alert_level		=>	"warning", 
								alert_agent_name	=>	$THIS_FILE,
								alert_sort		=>	$an->data->{sys}{alert_sort},
								alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
								alert_title_key		=>	"an_alert_title_0004",
								alert_message_key	=>	$message_key,
								alert_message_variables	=>	{
									id_string		=>	$storcli_drive_group_id_string,
									name			=>	$variable,
									old_value		=>	$old_variable_value,
									new_value		=>	$new_variable_value,
								},
							});
							
							my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{sys}{sql}}, $query;
						}
					}
					else
					{
						# New variable, record it. This is a 'warning' level as 
						# variables aren't expected to spawn into existence.
						$an->data->{sys}{alert_sort}++; 
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	"an_alert_title_0003",
							alert_message_key	=>	"scan_storcli_warning_0028",
							alert_message_variables	=>	{
								id_string		=>	$storcli_drive_group_id_string,
								name			=>	$variable,
								value			=>	$new_variable_value,
							},
						});
						
						# INSERT
						my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_drive_groups', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
			}
			
			# Now look for any variables left from the previous scan that we didn't match up (and
			# delete) this pass.
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}})
				{
					# This variable has vanished
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "old_variable_value", value1 => $old_variable_value,
						name2 => "variable_uuid",      value2 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_drive_groups'}{source_uuid}{$storcli_drive_group_uuid}{$type}{$variable};
					
					# If the old value is already 'VANISHED', ignore it.
					next if $old_variable_value eq "VANISHED";
					
					### NOTE: For now, we're going to use warning level because variables
					###       shouldn't vanish, but under an-cm, it did happen for 
					###       reasons that we never figured out. So later, we may drop 
					###       the alert level in some cases.
					# Still here? Alert and UPDATE.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_storcli_warning_0028",
						alert_message_variables	=>	{
							id_string		=>	$storcli_drive_group_id_string,
							name			=>	$variable,
						},
					});
					
					my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query, 
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Now commit the changes. We do this here so that the VD is in place before processing drive
		# groups under it.
		$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
		
		# Delete the Drive Group from the last scan so that we can find controllers that have been removed.
		if (exists $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "sql::storcli_drive_groups::storcli_drive_group_uuid::$storcli_drive_group_uuid", value1 => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid},
			}, file => $THIS_FILE, line => __LINE__});
			delete $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid};
		}
	}
	
	### NOTE: We can't check for vanished drive groups here as we're called by each virtual drive.
	
	return(0);
}

# Look for added, changed or deleted virtual drives.
sub process_virtual_drives
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_virtual_drives" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This method is a little different because as we process virtual drives, we will also process and 
	# drive groups under them.
	$an->data->{sys}{sql} = [];
	foreach my $storcli_virtual_drive_id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		# The identifying string '<host_controller_sn>-vd<x>' where 'x' is the virtual drive number.
		my $host_controller_serial_number = $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{on_controller};
		my $controller_uuid               = $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number};
		my $virtual_drive                 = ($storcli_virtual_drive_id_string =~ /-vd(\d+)$/)[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "storcli_virtual_drive_id_string", value1 => $storcli_virtual_drive_id_string,
			name2 => "host_controller_serial_number",   value2 => $host_controller_serial_number,
			name3 => "controller_uuid",                 value3 => $controller_uuid,
			name4 => "virtual_drive",                   value4 => $virtual_drive,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Make sure I have the host's serial number and UUID.
		if (not $host_controller_serial_number)
		{
			# Error!
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0010", message_variables => { id_string => $storcli_virtual_drive_id_string }, code => 10, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 10});
		}
		if (not $controller_uuid)
		{
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0008", message_variables => { serial_number => $host_controller_serial_number }, code => 8, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 8});
		}
		
		### NOTE: This is here purely for debugging.
		# Show the basic virtual drive data.
		foreach my $type ("variable", "temperature")
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${storcli_virtual_drive_id_string}::${type}", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type},
			}, file => $THIS_FILE, line => __LINE__});
			next if not defined $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type};
			
			$an->Log->aligned_entries({
				log_level => 3, 
				file      => $THIS_FILE,
				line      => __LINE__,
				prefix    => "VD $virtual_drive - $type",
				hash_ref  => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type},
			});
		}
		
		# Is this a new Virtual Drive?
		my $storcli_virtual_drive_uuid = "";
		my $is_new                     = 0;
		if (exists $an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string})
		{
			# Yes!
			$storcli_virtual_drive_uuid = $an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "storcli_virtual_drive_uuid", value1 => $storcli_virtual_drive_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# No, this is a new Virtual Drive. Create a new UUID for it.
			$storcli_virtual_drive_uuid = $an->Get->uuid();
			$is_new                     = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "storcli_virtual_drive_uuid", value1 => $storcli_virtual_drive_uuid,
				name2 => "is_new",   value2 => $is_new,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add the keys for looking it up by UUID or serial number.
			$an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string} = $storcli_virtual_drive_uuid;
			$an->data->{'scan-storcli'}{virtual_drives}{by_uuid}{$storcli_virtual_drive_uuid}           = $storcli_virtual_drive_id_string;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "scan-storcli::virtual_drives::by_id_string::$storcli_virtual_drive_id_string", value1 => $an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string},
				name2 => "scan-storcli::virtual_drives::by_uuid::$storcli_virtual_drive_uuid",           value2 => $an->data->{'scan-storcli'}{virtual_drives}{by_uuid}{$storcli_virtual_drive_uuid},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		### These are the values for the main table. Anything else will go in the variables table.
		# Creation date is a combination of two variables.
		my $creation_date         = "";
		my $creation_time         = "";
		my $new_creation_date     = "";
		my $new_data_protection   = "";
		my $new_disk_cache_policy = "";
		my $new_emulation_type    = "";
		my $new_encryption        = "";
		my $new_blocks            = "";
		my $new_strip_size        = "";
		my $new_drives_per_span   = "";
		my $new_span_depth        = "";
		my $new_scsi_naa_id       = "";
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${storcli_virtual_drive_id_string}::variable::${variable}", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable},
			}, file => $THIS_FILE, line => __LINE__});
			
			# Store and delete the value
			if ($variable eq "creation_date")
			{
				# The creation date we store is a combination of two variables. That's why 
				# these first two entries are a little odd.
				$creation_date = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "creation_date", value1 => $creation_date,
					name2 => "creation_time", value2 => $creation_time,
				}, file => $THIS_FILE, line => __LINE__});
				
				# If I have the time, assemble.
				if ($creation_time)
				{
					$new_creation_date = $creation_date." ".$creation_time;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "new_creation_date", value1 => $new_creation_date,
					}, file => $THIS_FILE, line => __LINE__});
				}
				next;
			}
			if ($variable eq "creation_time")
			{
				$creation_time = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "creation_date", value1 => $creation_date,
					name2 => "creation_time", value2 => $creation_time,
				}, file => $THIS_FILE, line => __LINE__});
				
				# If I have the date, assemble.
				if ($creation_date)
				{
					$new_creation_date = $creation_date." ".$creation_time;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "new_creation_date", value1 => $new_creation_date,
					}, file => $THIS_FILE, line => __LINE__});
				}
				next;
			}
			# Back to our regularly scheduled programming...
			if ($variable eq "data_protection")
			{
				$new_data_protection = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_data_protection", value1 => $new_data_protection,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "disk_cache_policy")
			{
				$new_disk_cache_policy = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_disk_cache_policy", value1 => $new_disk_cache_policy,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "emulation_type")
			{
				$new_emulation_type = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_emulation_type", value1 => $new_emulation_type,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "encryption")
			{
				$new_encryption = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_encryption", value1 => $new_encryption,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "number_of_blocks")
			{
				$new_blocks = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_blocks", value1 => $new_blocks,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "strip_size")
			{
				$new_strip_size = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_strip_size", value1 => $new_strip_size,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "number_of_drives_per_span")
			{
				$new_drives_per_span = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_drives_per_span", value1 => $new_drives_per_span,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "span_depth")
			{
				$new_span_depth = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_span_depth", value1 => $new_span_depth,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "scsi_naa_id")
			{
				$new_scsi_naa_id = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_scsi_naa_id", value1 => $new_scsi_naa_id,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# Pull out the rest of the variables now. If the Virtual Drive is new, all variables will be 
		# INSERTed. If the Virtual Drive exists, each variable will be examined and new ones will be 
		# INSERTed, existing ones will be checked for changes and UPDATEd as needed. If the 
		# Virtual Drive is NOT new, then variables from the old data will be deleted as we go and any 
		# not found in the current data set will be left over. We'll use this to determine variables
		# that have vanished. They will not be deleted, but their value will be set to 'VANISHED'.
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "is_new", value1 => $is_new,
		}, file => $THIS_FILE, line => __LINE__});
		if ($is_new)
		{
			### NOTE: VD 9999 will be mostly NULL and that is fine
			$an->Log->entry({log_level => 3, message_key => "an_variables_0013", message_variables => {
				name1  => "storcli_virtual_drive_uuid",      value1  => $storcli_virtual_drive_uuid,
				name2  => "controller_uuid",                 value2  => $controller_uuid,
				name3  => "storcli_virtual_drive_id_string", value3  => $storcli_virtual_drive_id_string,
				name4  => "new_creation_date",               value4  => $new_creation_date,
				name5  => "new_data_protection",             value5  => $new_data_protection,
				name6  => "new_disk_cache_policy",           value6  => $new_disk_cache_policy,
				name7  => "new_emulation_type",              value7  => $new_emulation_type,
				name8  => "new_encryption",                  value8  => $new_encryption,
				name9  => "new_blocks",                      value9  => $new_blocks,
				name10 => "new_strip_size",                  value10 => $new_strip_size,
				name11 => "new_drives_per_span",             value11 => $new_drives_per_span,
				name12 => "new_span_depth",                  value12 => $new_span_depth,
				name13 => "new_scsi_naa_id",                 value13 => $new_scsi_naa_id,
			}, file => $THIS_FILE, line => __LINE__});
			
			### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
			# Send an alert telling the user that we've found a new controller.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort},	
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_storcli_note_0004",
				alert_message_variables	=>	{
					on_controller		=>	$host_controller_serial_number,
					id_string		=>	$storcli_virtual_drive_id_string,
					creation_date		=>	$new_creation_date,
					data_protection		=>	$new_data_protection,
					disk_cache_policy	=>	$new_disk_cache_policy,
					emulation_type		=>	$new_emulation_type,
					encryption		=>	$new_encryption,
					blocks			=>	$new_blocks,
					strip_size		=>	$new_strip_size,
					drives_per_span		=>	$new_drives_per_span,
					span_depth		=>	$new_span_depth,
					scsi_naa_id		=>	$new_scsi_naa_id,
				},
			});
			
			# INSERT
			my $query = "
INSERT INTO 
    storcli_virtual_drives
(
    storcli_virtual_drive_uuid, 
    storcli_virtual_drive_host_uuid, 
    storcli_virtual_drive_controller_uuid, 
    storcli_virtual_drive_id_string,
    storcli_virtual_drive_creation_date,
    storcli_virtual_drive_data_protection, 
    storcli_virtual_drive_disk_cache_policy, 
    storcli_virtual_drive_emulation_type, 
    storcli_virtual_drive_encryption, 
    storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size, 
    storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_creation_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_data_protection).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_disk_cache_policy).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_emulation_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_encryption).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_blocks).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_strip_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_drives_per_span).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_span_depth).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_scsi_naa_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			# Now record the query in the array
			$query =~ s/''/NULL/g;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;

			# Process the rest of the variables and temperatures now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type}})
				{
					my $value       = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type}{$variable};
					my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "value",       value2 => $value,
						name3 => "temperature", value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Send an alert telling the user that we've found a new controller.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	'FALSE',
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_storcli_note_0002",
						alert_message_variables	=>	{
							name			=>	$variable,
							value			=>	$value,
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_virtual_drives', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		else
		{
			### NOTE: The serial number should never change (a changed SN/Virtual Drive should be 
			###       picked up as a new Virtual Drive), but we check/update just to be safe.
			# Look for changes.
			my $main_table_changed                  = 0;
			my $old_storcli_virtual_drive_id_string = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_id_string};
			my $old_controller_uuid                 = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_controller_uuid};
			my $old_creation_date                   = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_creation_date};
			my $old_data_protection                 = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_data_protection};
			my $old_disk_cache_policy               = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_disk_cache_policy};
			my $old_emulation_type                  = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_emulation_type};
			my $old_encryption                      = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_encryption};
			my $old_blocks                          = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_blocks};
			my $old_strip_size                      = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_strip_size};
			my $old_drives_per_span                 = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_drives_per_span};
			my $old_span_depth                      = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_span_depth};
			my $old_scsi_naa_id                     = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_scsi_naa_id};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0024", message_variables => {
				name1  => "storcli_virtual_drive_id_string ...", value1  => $storcli_virtual_drive_id_string,
				name2  => "old_storcli_virtual_drive_id_string", value2  => $old_storcli_virtual_drive_id_string,
				name3  => "controller_uuid ...",                 value3  => $controller_uuid,
				name4  => "old_controller_uuid",                 value4  => $old_controller_uuid,
				name5  => "new_creation_date",                   value5  => $new_creation_date,
				name6  => "old_creation_date",                   value6  => $old_creation_date,
				name7  => "new_data_protection",                 value7  => $new_data_protection,
				name8  => "old_data_protection",                 value8  => $old_data_protection,
				name9  => "new_disk_cache_policy",               value9  => $new_disk_cache_policy,
				name10 => "old_disk_cache_policy",               value10 => $old_disk_cache_policy,
				name11 => "new_emulation_type",                  value11 => $new_emulation_type,
				name12 => "old_emulation_type",                  value12 => $old_emulation_type,
				name13 => "new_encryption",                      value13 => $new_encryption,
				name14 => "old_encryption",                      value14 => $old_encryption,
				name15 => "new_blocks",                          value15 => $new_blocks,
				name16 => "old_blocks",                          value16 => $old_blocks,
				name17 => "new_strip_size",                      value17 => $new_strip_size,
				name18 => "old_strip_size",                      value18 => $old_strip_size,
				name19 => "new_drives_per_span",                 value19 => $new_drives_per_span,
				name20 => "old_drives_per_span",                 value20 => $old_drives_per_span,
				name21 => "new_span_depth",                      value21 => $new_span_depth,
				name22 => "old_span_depth",                      value22 => $old_span_depth,
				name23 => "new_scsi_naa_id",                     value23 => $new_scsi_naa_id,
				name24 => "old_scsi_naa_id",                     value24 => $old_scsi_naa_id,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (($storcli_virtual_drive_id_string ne $old_storcli_virtual_drive_id_string) or 
			    ($controller_uuid                 ne $old_controller_uuid)                 or 
			    ($new_creation_date               ne $old_creation_date)                   or 
			    ($new_data_protection             ne $old_data_protection)                 or 
			    ($new_disk_cache_policy           ne $old_disk_cache_policy)               or 
			    ($new_emulation_type              ne $old_emulation_type)                  or 
			    ($new_encryption                  ne $old_encryption)                      or 
			    ($new_blocks                      ne $old_blocks)                          or 
			    ($new_strip_size                  ne $old_strip_size)                      or 
			    ($new_drives_per_span             ne $old_drives_per_span)                 or 
			    ($new_span_depth                  ne $old_span_depth)                      or 
			    ($new_scsi_naa_id                 ne $old_scsi_naa_id))
			{
				# I need the serial numbers for the controller UUIDs.
				my $new_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid};
				my $old_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "new_controller_serial_number", value1 => $new_controller_serial_number,
					name2 => "old_controller_serial_number", value2 => $old_controller_serial_number,
				}, file => $THIS_FILE, line => __LINE__});
				
				# Send a warning level alert because nothing should change here, ever.
				my $title_key   = "an_alert_title_0004";
				my $message_key = "scan_storcli_warning_0017";
				if ($new_creation_date ne $old_creation_date)
				{
					if ($old_creation_date eq "VANISHED")
					{
						# Virtual Drive has returned.
						$message_key = "scan_storcli_warning_0018";
					}
				}
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						old_on_controller	=>	$old_controller_serial_number, 
						new_on_controller	=>	$new_controller_serial_number, 
						old_id_string		=>	$old_storcli_virtual_drive_id_string, 
						new_id_string		=>	$storcli_virtual_drive_id_string, 
						old_creation_date	=>	$old_creation_date, 
						new_creation_date	=>	$new_creation_date, 
						old_data_protection	=>	$old_data_protection, 
						new_data_protection	=>	$new_data_protection, 
						old_disk_cache_policy	=>	$old_disk_cache_policy, 
						new_disk_cache_policy	=>	$new_disk_cache_policy, 
						old_emulation_type	=>	$old_emulation_type, 
						new_emulation_type	=>	$new_emulation_type, 
						old_encryption		=>	$old_encryption, 
						new_encryption		=>	$new_encryption, 
						old_blocks		=>	$old_blocks, 
						new_blocks		=>	$new_blocks, 
						old_strip_size		=>	$old_strip_size, 
						new_strip_size		=>	$new_strip_size, 
						old_drives_per_span	=>	$old_drives_per_span, 
						new_drives_per_span	=>	$new_drives_per_span, 
						old_span_depth		=>	$old_span_depth, 
						new_span_depth		=>	$new_span_depth, 
						old_scsi_naa_id		=>	$old_scsi_naa_id, 
						new_scsi_naa_id		=>	$new_scsi_naa_id, 
					},
				});
				$main_table_changed = 1;
				
				my $query = "
UPDATE 
    storcli_virtual_drives
SET
    storcli_virtual_drive_controller_uuid   = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    storcli_virtual_drive_id_string         = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_id_string).",
    storcli_virtual_drive_creation_date     = ".$an->data->{sys}{use_db_fh}->quote($new_creation_date).",
    storcli_virtual_drive_data_protection   = ".$an->data->{sys}{use_db_fh}->quote($new_data_protection).", 
    storcli_virtual_drive_disk_cache_policy = ".$an->data->{sys}{use_db_fh}->quote($new_disk_cache_policy).", 
    storcli_virtual_drive_emulation_type    = ".$an->data->{sys}{use_db_fh}->quote($new_emulation_type).", 
    storcli_virtual_drive_encryption        = ".$an->data->{sys}{use_db_fh}->quote($new_encryption).", 
    storcli_virtual_drive_blocks            = ".$an->data->{sys}{use_db_fh}->quote($new_blocks).", 
    storcli_virtual_drive_strip_size        = ".$an->data->{sys}{use_db_fh}->quote($new_strip_size).", 
    storcli_virtual_drive_drives_per_span   = ".$an->data->{sys}{use_db_fh}->quote($new_drives_per_span).", 
    storcli_virtual_drive_span_depth        = ".$an->data->{sys}{use_db_fh}->quote($new_span_depth).", 
    storcli_virtual_drive_scsi_naa_id       = ".$an->data->{sys}{use_db_fh}->quote($new_scsi_naa_id).", 
    modified_date                           = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_virtual_drive_uuid              = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid)." 
;";

				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			### Process the rest of the variables now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type}})
				{
					my $new_variable_value = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{$type}{$variable};
					my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "temperature", value2 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable}{storcli_variable_uuid})
					{
						# Look for changes
						my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable}{storcli_variable_value};
						my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable}{storcli_variable_uuid};
						$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
							name1 => "variable",           value1 => $variable,
							name2 => "new_variable_value", value2 => $new_variable_value,
							name3 => "old_variable_value", value3 => $old_variable_value,
							name4 => "variable_uuid",      value4 => $variable_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						# Delete it so that we know it has been processed.
						delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable};
						
						if (($new_variable_value ne $old_variable_value))
						{
							# Changed! If the old value was 'VANISHED', then a 
							# sensor or variable returned. Otherwise, for now, we
							# treat everything as 'warning' and step down 
							# explicitely anything not of concern that proves 
							# noisey later (better safe than sorry).
							$an->data->{sys}{alert_sort}++; 
							
							my $level       = "warning";
							my $message_key = "scan_storcli_warning_0019";
							my $title_key   = "an_alert_title_0004";
							if ($old_variable_value eq "VANISHED")
							{
								$message_key = "scan_storcli_warning_0020";
							}
							
							# If the 'name' is 'active operations' and the new is
							# 'Background Initialization', we're in the middle of
							# a BGI and this is not a warning. If the new is
							# 'None', the CGI completed.
							if ($variable =~ /Active Operations/i)
							{
								$level     = "notice";
								$title_key = "an_alert_title_0003";
								if ($new_variable_value =~ /None/i)
								{
									# BGI done!
									$message_key = "scan_storcli_note_0069";
								}
								else
								{
									# BGI in progress still, pull out the
									# percentage.
									my $percentage = ($new_variable_value =~ /\(\d+%\)/)[0];
									if ($percentage)
									{
										# Successfully pulled the new
										# percentage complete value.
										$new_variable_value = $percentage;
									}
									$message_key = "scan_storcli_note_0068";
								}
							}
							
							$an->Alert->register_alert({
								alert_level		=>	$level, 
								alert_agent_name	=>	$THIS_FILE,
								alert_sort		=>	$an->data->{sys}{alert_sort},
								alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
								alert_title_key		=>	$title_key,
								alert_message_key	=>	$message_key,
								alert_message_variables	=>	{
									id_string		=>	$storcli_virtual_drive_id_string,
									name			=>	$variable,
									old_value		=>	$old_variable_value,
									new_value		=>	$new_variable_value,
								},
							});
							
							my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{sys}{sql}}, $query;
						}
					}
					else
					{
						# New variable, record it. This is a 'warning' level as 
						# variables aren't expected to spawn into existence.
						$an->data->{sys}{alert_sort}++; 
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	"an_alert_title_0003",
							alert_message_key	=>	"scan_storcli_warning_0022",
							alert_message_variables	=>	{
								id_string		=>	$storcli_virtual_drive_id_string,
								name			=>	$variable,
								value			=>	$new_variable_value,
							},
						});
						
						# INSERT
						my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_virtual_drives', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
			}
			
			# Now look for any variables left from the previous scan that we didn't match up (and
			# delete) this pass.
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}})
				{
					# This variable has vanished
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "old_variable_value", value1 => $old_variable_value,
						name2 => "variable_uuid",      value2 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_virtual_drives'}{source_uuid}{$storcli_virtual_drive_uuid}{$type}{$variable};
					
					# If the old value is already 'VANISHED', ignore it.
					next if $old_variable_value eq "VANISHED";
					
					### NOTE: For now, we're going to use warning level because variables
					###       shouldn't vanish, but under an-cm, it did happen for 
					###       reasons that we never figured out. So later, we may drop 
					###       the alert level in some cases.
					# Still here? Alert and UPDATE.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_storcli_warning_0021",
						alert_message_variables	=>	{
							id_string		=>	$storcli_virtual_drive_id_string,
							name			=>	$variable,
						},
					});
					
					my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Now commit the changes. We do this here so that the VD is in place before processing drive
		# groups under it.
		$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
		
		# Process drive groups under this virtual drive. They'll likely have vanished, too.
		process_drive_groups($an, $storcli_virtual_drive_id_string, $storcli_virtual_drive_uuid, $controller_uuid, $host_controller_serial_number);
		
		# Delete the Virtual Drive from the last scan so that we can find controllers that have been removed.
		if (exists $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid})
		{
			delete $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid};
		}
	}
	
	# See if any Virtual Drives have vanished.
	foreach my $storcli_virtual_drive_uuid (keys %{$an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}})
	{
		# Virtual Drive vanished!
		my $storcli_virtual_drive_id_string = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_id_string};
		my $controller_uuid                 = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_controller_uuid};
		my $creation_date                   = $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_creation_date};
		my $host_controller_serial_number   = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "storcli_virtual_drive_id_string", value1 => $storcli_virtual_drive_id_string,
			name2 => "controller_uuid",                 value2 => $controller_uuid,
			name3 => "creation_date",                   value3 => $creation_date,
			name4 => "host_controller_serial_number",   value4 => $host_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid};
		
		# If the old creation date is already 'VANISHED', ignore it.
		next if $creation_date eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0023",
			alert_message_variables	=>	{
				id_string		=>	$storcli_virtual_drive_id_string, 
				controller_serial_number =>	$host_controller_serial_number, 
			},
		});
		
		my $query = "
UPDATE 
    storcli_virtual_drives
SET 
    storcli_virtual_drive_creation_date = 'VANISHED', 
    modified_date                       = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_virtual_drive_uuid          = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
		
		# Now commit the changes. We do this here so that the VD is in place before processing drive
		# groups under it.
		$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
		
		# Process drive groups under this virtual drive. They'll likely have vanished, too.
		process_drive_groups($an, $storcli_virtual_drive_id_string, $storcli_virtual_drive_uuid, $controller_uuid, $host_controller_serial_number);
	}
	
	### Now that we've processed virtual drives, see if in stray drive groups are left.
	foreach my $storcli_drive_group_uuid (keys %{$an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}})
	{
		# Drive Group vanished!
		my $storcli_drive_group_id_string = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_id_string};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "storcli_drive_group_id_string", value1 => $storcli_drive_group_id_string,
		}, file => $THIS_FILE, line => __LINE__});
		
		# If this drive group is '9999', we won't care if it vanishes because it was a pseudo DG 
		# anyway.
		next if $storcli_drive_group_id_string =~ /-dg9999$/;
		
		# Still here? Gather the rest of the data.
		my $controller_uuid = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_controller_uuid};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "controller_uuid", value1 => $controller_uuid,
		}, file => $THIS_FILE, line => __LINE__});
		
		# If I don't have the controller ID, see if I can parse it from the 
		if ((not $controller_uuid) && ($storcli_drive_group_id_string =~ /^(.*?)-vd/))
		{
			my $serial_number   = $1;
			   $controller_uuid = $an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number} ? $an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number} : "";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "serial_number",   value1 => $serial_number,
				name2 => "controller_uuid", value2 => $controller_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# If I still don't have a controller UUID, then something serious went wrong.
		if (not $controller_uuid)
		{
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0015", message_variables => { drive_group_uuid => $storcli_drive_group_uuid }, code => 15, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 15});
		}
		
		my $access                        = $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_access};
		my $host_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
			name1 => "storcli_drive_group_id_string", value1 => $storcli_drive_group_id_string,
			name2 => "access",                        value2 => $access,
			name3 => "host_controller_serial_number", value3 => $host_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid};
		
		# If the old creation date is already 'VANISHED', ignore it.
		next if $access eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0023",
			alert_message_variables	=>	{
				id_string		=>	$storcli_drive_group_id_string, 
				controller_serial_number =>	$host_controller_serial_number, 
			},
		});
		
		my $query = "
UPDATE 
    storcli_drive_groups
SET 
    storcli_drive_group_access = 'VANISHED', 
    modified_date              = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_drive_group_uuid   = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
		
		# Now commit the changes. We do this here so that the VD is in place before processing drive
		# groups under it.
		$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# Look for added, changed or deleted physical drives.
sub process_physical_disks
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_physical_disks" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	foreach my $storcli_virtual_drive_id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		my $virtual_drive = ($storcli_virtual_drive_id_string =~ /-vd(\d+)$/)[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "storcli_virtual_drive_id_string", value1 => $storcli_virtual_drive_id_string,
			name2 => "virtual_drive",                   value2 => $virtual_drive,
		}, file => $THIS_FILE, line => __LINE__});
		
		foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "drive_group", value1 => $drive_group,
			}, file => $THIS_FILE, line => __LINE__});
			
			foreach my $enclosure_id (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}})
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "enclosure_id", value1 => $enclosure_id,
				}, file => $THIS_FILE, line => __LINE__});
				
				foreach my $slot_number (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}})
				{
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "slot_number", value1 => $slot_number,
					}, file => $THIS_FILE, line => __LINE__});
					
					# This function is really just to help keep code clean and avoid massive indenting.
					process_a_physical_disk($an, $storcli_virtual_drive_id_string, $drive_group, $enclosure_id, $slot_number);
				}
			}
		}
	}
	
	# See if any Physical Disks have vanished.
	foreach my $storcli_physical_drive_uuid (keys %{$an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}})
	{
		# Physical Disk vanished!
		my $old_physical_disk_serial_number = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_serial_number};
		my $old_controller_uuid             = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_controller_uuid};
		my $old_model                       = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_model};
		my $old_controller_serial_number    = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "old_physical_disk_serial_number", value1 => $old_physical_disk_serial_number,
			name2 => "old_controller_uuid",          value2 => $old_controller_uuid,
			name3 => "old_model",                    value3 => $old_model,
			name4 => "old_controller_serial_number", value4 => $old_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid};
		
		# If the old alarm state is already 'VANISHED', ignore it.
		next if $old_model eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0035",
			alert_message_variables	=>	{
				physical_disk_serial_number =>	$old_physical_disk_serial_number, 
				controller_serial_number =>	$old_controller_serial_number, 
			},
		});
		
		my $query = "
UPDATE 
    storcli_physical_drives
SET 
    storcli_physical_drive_model = 'VANISHED', 
    modified_date                = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_physical_drive_uuid  = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

### NOTE: I don't loop by drive serial number, like in the other process_X() functions, so this one is 
###       designed a little different.
# This does the work of processing a specific physical disk.
sub process_a_physical_disk
{
	my ($an, $storcli_virtual_drive_id_string, $drive_group, $enclosure_id, $slot_number) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "process_a_physical_disk" }, message_key => "an_variables_0004", message_variables => { 
		name1 => "storcli_virtual_drive_id_string", value1 => $storcli_virtual_drive_id_string, 
		name2 => "drive_group",                     value2 => $drive_group, 
		name3 => "enclosure_id",                    value3 => $enclosure_id, 
		name4 => "slot_number",                     value4 => $slot_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my ($vd_controller_serial_number, $virtual_drive) = ($storcli_virtual_drive_id_string =~ /^(.*?)-vd(\d+)$/);
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "vd_controller_serial_number", value1 => $vd_controller_serial_number,
		name2 => "virtual_drive",               value2 => $virtual_drive,
	}, file => $THIS_FILE, line => __LINE__});
	
	# I need the drive's serial number right off the bat.
	#					 =             virtual_drive::0000000051622771-vd0            ::drive_group::0::           enclosure_id::7::            slot_number::1::           variable::serial_number: [S7M1RD440000E722PB9N]
	my $storcli_physical_drive_serial_number = $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{serial_number};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "storcli_physical_drive_serial_number", value1 => $storcli_physical_drive_serial_number,
	}, file => $THIS_FILE, line => __LINE__});
	if ($storcli_physical_drive_serial_number)
	{
		# Got it, delete it now.
		delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{serial_number};
	}
	else
	{
		# Error!
		$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0013", message_variables => { 
			virtual_drive => $storcli_virtual_drive_id_string,
			drive_group   => $drive_group,
			enclosure_id  => $enclosure_id,
			slot_number   => $slot_number,
		}, code => 13, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 13});
	}
	
	# Make sure I have a controller serial number.
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "virtual_drive::${storcli_virtual_drive_id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::on_controller", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller}, 
	}, file => $THIS_FILE, line => __LINE__});
	if (not $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller})
	{
		# Error!
		$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0012", message_variables => { serial_number => $storcli_physical_drive_serial_number }, code => 12, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 12});
	}
	
	my $host_controller_serial_number = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "host_controller_serial_number", value1 => $host_controller_serial_number,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Now make sure I can translate this to a UUID.
	if (not $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number})
	{
		$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0008", message_variables => { serial_number => $host_controller_serial_number }, code => 8, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 8});
	}
	my $controller_uuid = $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "controller_uuid", value1 => $controller_uuid,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Not gather the rest of the core table's values.
	my $new_size                  = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size};
	my $new_sector_size           = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sector_size};
	my $new_vendor                = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{manufacturer_identification};
	my $new_model                 = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_model};
	my $new_self_encrypting_drive = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{self_encrypting_drive};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
		name1 => "new_size",                  value1 => $new_size,
		name2 => "new_sector_size",           value2 => $new_sector_size,
		name3 => "new_vendor",                value3 => $new_vendor,
		name4 => "new_model",                 value4 => $new_model,
		name5 => "new_self_encrypting_drive", value5 => $new_self_encrypting_drive,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Get the temperature ranges, which depends on whether this is an SSD or HDD.
	my $drive_temperature_key = "hdd";
	my $drive_media           = $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_media};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "drive_media", value1 => $drive_media, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if (lc($drive_media) eq "ssd")
	{
		$drive_temperature_key = "ssd";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "drive_temperature_key", value1 => $drive_temperature_key, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Setup our thermal thresholds
	my $high_critical       = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{high_critical};
	my $high_warning        = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{high_warning};
	my $low_warning         = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{low_warning};
	my $low_critical        = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{low_critical};
	my $jump                = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{jump};
	my $buffer              = $an->data->{'scan-storcli'}{thresholds}{drives}{$drive_temperature_key}{buffer};
	my $clear_high_critical = $high_critical - $buffer;
	my $clear_high_warning  = $high_warning - $buffer;
	my $clear_low_critical  = $low_critical - $buffer;
	my $clear_low_warning   = $low_warning - $buffer;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
		name1  => "high_critical",       value1  => $high_critical, 
		name2  => "high_warning",        value2  => $high_warning, 
		name3  => "low_warning",         value3  => $low_warning, 
		name4  => "low_critical",        value4  => $low_critical, 
		name5  => "jump",                value5  => $jump, 
		name6  => "buffer",              value6  => $buffer, 
		name7  => "clear_high_critical", value7  => $clear_high_critical, 
		name8  => "clear_high_warning",  value8  => $clear_high_warning, 
		name9  => "clear_low_critical",  value9  => $clear_low_critical, 
		name10 => "clear_low_warning",   value10 => $clear_low_warning, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Fine-tune the alert thresholds
	if ($clear_high_critical < $high_warning)
	{
		$clear_high_critical = $high_warning + 1;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "clear_high_critical", value1 => $clear_high_critical, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ($clear_low_critical > $low_warning)
	{
		$clear_low_critical = $low_warning - 1;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "clear_low_critical", value1 => $clear_low_critical, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Is this a new physical disk?
	my $is_new                      = 0;
	my $storcli_physical_drive_uuid = "";
	if (exists $an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number})
	{
		# Yup!
		$storcli_physical_drive_uuid = $an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "storcli_physical_drive_uuid", value1 => $storcli_physical_drive_uuid,
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		$is_new                      = 1;
		$storcli_physical_drive_uuid = $an->Get->uuid();
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "is_new",                      value1 => $is_new,
			name2 => "storcli_physical_drive_uuid", value2 => $storcli_physical_drive_uuid,
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number} = $storcli_physical_drive_uuid;
		$an->data->{'scan-storcli'}{physical_drives}{by_uuid}{$storcli_physical_drive_uuid}            = $storcli_physical_drive_serial_number;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::physical_drives::by_serial::$storcli_physical_drive_serial_number", value1 => $an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number},
			name2 => "scan-storcli::physical_drives::by_uuid::$storcli_physical_drive_uuid",            value2 => $an->data->{'scan-storcli'}{physical_drives}{by_uuid}{$storcli_physical_drive_uuid},
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Pull out the rest of the variables now. If the physical disk is new, all variables will be 
	# INSERTed. If the physical drive exists, each variable will be examined and new ones will be 
	# INSERTed, existing ones will be checked for changes and UPDATEd as needed. If the physical disk is
	# NOT new, then variables from the old data will be deleted as we go and any not found in the current
	# data set will be left over. We'll use this to determine variables that have vanished. They will not
	# be deleted, but their value will be set to 'VANISHED'.
	if ($is_new)
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
			name1  => "storcli_physical_drive_serial_number", value1  => $storcli_physical_drive_serial_number,
			name2  => "storcli_physical_drive_uuid",          value2  => $storcli_physical_drive_uuid,
			name3  => "host_controller_serial_number",        value3  => $host_controller_serial_number,
			name4  => "virtual_drive",                        value4  => $virtual_drive,
			name5  => "drive_group",                          value5  => $drive_group,
			name6  => "controller_uuid",                      value6  => $controller_uuid,
			name7  => "new_size",                             value7  => $new_size,
			name8  => "new_sector_size",                      value8  => $new_sector_size,
			name9  => "new_vendor",                           value9  => $new_vendor,
			name10 => "new_model",                            value10 => $new_model,
			name11 => "new_self_encrypting_drive",            value11 => $new_self_encrypting_drive,
		}, file => $THIS_FILE, line => __LINE__});
		
		### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
		# Send an alert telling the user that we've found a new controller.
		$an->Alert->register_alert({
			alert_level		=>	"notice", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},	
			alert_title_key		=>	"an_alert_title_0003",
			alert_message_key	=>	"scan_storcli_note_0006",
			alert_message_variables	=>	{
				on_controller		=>	$host_controller_serial_number,
				virtual_drive		=>	$virtual_drive,
				drive_group		=>	$drive_group,
				serial_number		=>	$storcli_physical_drive_serial_number,
				size			=>	$new_size,
				sector_size		=>	$new_sector_size,
				vendor			=>	$new_vendor,
				model			=>	$new_model,
				self_encrypting_drive	=>	$new_self_encrypting_drive,
			},
		});
		
		# INSERT
		my $query = "
INSERT INTO 
    storcli_physical_drives
(
    storcli_physical_drive_uuid, 
    storcli_physical_drive_host_uuid, 
    storcli_physical_drive_controller_uuid, 
    storcli_physical_drive_virtual_drive, 
    storcli_physical_drive_drive_group, 
    storcli_physical_drive_enclosure_id, 
    storcli_physical_drive_slot_number, 
    storcli_physical_drive_serial_number, 
    storcli_physical_drive_size, 
    storcli_physical_drive_sector_size, 
    storcli_physical_drive_vendor, 
    storcli_physical_drive_model, 
    storcli_physical_drive_self_encrypting_drive, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($virtual_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($drive_group).", 
    ".$an->data->{sys}{use_db_fh}->quote($enclosure_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($slot_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_sector_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_vendor).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_self_encrypting_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;

		# Process the rest of the variables and temperatures now. 
		foreach my $type ("variable", "temperature")
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "type", value1 => $type,
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}})
			{
				my $value       = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}{$variable};
				my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "variable",    value1 => $variable,
					name2 => "value",       value2 => $value,
					name3 => "temperature", value3 => $temperature,
				}, file => $THIS_FILE, line => __LINE__});
				
				# If this is a thermal sensor, we need to see if it is OK or not.
				my $message_key       = "scan_storcli_note_0002";
				my $alert_level       = "notice";
				my $title_key         = "an_alert_title_0003";
				my $temperature_state = "ok";
				my $temperature_is    = "nominal";
				if ($type eq "temperature")
				{
					# This is a temperature, so see if the temperature outside of the 
					# warning or critical thresholds. This is a new sensor, so nothing
					# to compare against.
					my $temperature_state = "ok";
					my $temperature_is    = "nominal";
					if ($value > $high_critical)
					{
						# Crossed the critical threshold. This should
						# always be unset because it is a new
						# variable, but check anyway.
						my $set = $an->Alert->check_alert_sent({
							type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
							alert_sent_by		=>	$THIS_FILE,
							alert_record_locator	=>	$storcli_physical_drive_serial_number,
							alert_name		=>	$variable."_high_critical",
							modified_date		=>	$an->data->{sys}{db_timestamp},
						});
						if ($set)
						{
							# This is the first time we rose above the critical
							# threshold.
							$alert_level = "critical";
							$title_key   = "an_alert_title_0005";
							$message_key = "scan_storcli_note_0012";
						}
					}
					elsif ($value > $high_warning)
					{
						# Crossed the warning threshold. This should always be unset
						# because it is a new variable, but check anyway.
						my $set = $an->Alert->check_alert_sent({
							type			=>	"warning",
							alert_sent_by		=>	$THIS_FILE,
							alert_record_locator	=>	$storcli_physical_drive_serial_number,
							alert_name		=>	$variable."_high_warning",
							modified_date		=>	$an->data->{sys}{db_timestamp},
						});
						if ($set)
						{
							# This is the first time we rose above the critical
							# threshold.
							$alert_level = "warning";
							$title_key   = "an_alert_title_0004";
							$message_key = "scan_storcli_note_0013";
						}
					}
					elsif ($value < $low_critical)
					{
						# Dropped below the critical threshold. This should always be
						# unset because it is a new variable, but check anyway.
						my $set = $an->Alert->check_alert_sent({
							type			=>	"warning",
							alert_sent_by		=>	$THIS_FILE,
							alert_record_locator	=>	$storcli_physical_drive_serial_number,
							alert_name		=>	$variable."_low_critical",
							modified_date		=>	$an->data->{sys}{db_timestamp},
						});
						if ($set)
						{
							# This is the first time we rose above the critical
							# threshold.
							$alert_level = "critical";
							$title_key   = "an_alert_title_0005";
							$message_key = "scan_storcli_note_0014";
						}
					}
					elsif ($value < $low_warning)
					{
						# Crossed the warning threshold. This should always be unset
						# because it is a new variable, but check anyway.
						my $set = $an->Alert->check_alert_sent({
							type			=>	"warning",
							alert_sent_by		=>	$THIS_FILE,
							alert_record_locator	=>	$storcli_physical_drive_serial_number,
							alert_name		=>	$variable."_low_warning",
							modified_date		=>	$an->data->{sys}{db_timestamp},
						});
						if ($set)
						{
							# This is the first time we rose above the critical
							# threshold.
							$alert_level = "warning";
							$title_key   = "an_alert_title_0004";
							$message_key = "scan_storcli_note_0015";
						}
					}
					
					# Record this for later processing into the 'temperature' table.
					my $sensor_host_key = "pd:$storcli_physical_drive_serial_number";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "sensor_host_key", value1 => $sensor_host_key,
					}, file => $THIS_FILE, line => __LINE__});
					
					$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $value;
					$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
					$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
						name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
						name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# Send an alert telling the user that we've found a new physical drive sensor.
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	$alert_level, 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						serial_number		=>	$storcli_physical_drive_serial_number,
						name			=>	$variable,
						value			=>	$value,
						high_critical_temperature =>	$high_critical, 
						high_warning_temperature =>	$high_warning, 
						low_critical_temperature =>	$low_critical, 
						low_warning_temperature	=>	$low_warning, 
					},
				});
				
				# INSERT
				my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_physical_drives', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
		}
	}
	else
	{
		### NOTE: The serial number should never change, but we check/update just to be safe.
		# Look for changes.
		my $main_table_changed               = 0;
		my $old_controller_uuid              = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_controller_uuid};
		my $old_virtual_drive                = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_virtual_drive};
		my $old_drive_group                  = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_drive_group};
		my $old_enclosure_id                 = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_enclosure_id};
		my $old_slot_number                  = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_slot_number};
		my $old_physical_drive_serial_number = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_serial_number};
		my $old_size                         = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_size};
		my $old_sector_size                  = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_sector_size};
		my $old_vendor                       = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_vendor};
		my $old_model                        = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_model};
		my $old_self_encrypting_drive        = $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_self_encrypting_drive};
		$old_controller_uuid              = "" if not defined $old_controller_uuid;
		$old_physical_drive_serial_number = "" if not defined $old_physical_drive_serial_number;
		$old_model                        = "" if not defined $old_model;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0022", message_variables => {
			name1  => "storcli_physical_drive_serial_number", value1  => $storcli_physical_drive_serial_number,
			name2  => "old_physical_drive_serial_number",     value2  => $old_physical_drive_serial_number,
			name3  => "controller_uuid",                      value3  => $controller_uuid,
			name4  => "old_controller_uuid",                  value4  => $old_controller_uuid,
			name5  => "virtual_drive",                        value5  => $virtual_drive,
			name6  => "old_virtual_drive",                    value6  => $old_virtual_drive,
			name7  => "drive_group",                          value7  => $drive_group,
			name8  => "old_drive_group",                      value8  => $old_drive_group,
			name9  => "enclosure_id",                         value9  => $enclosure_id,
			name10 => "old_enclosure_id",                     value10 => $old_enclosure_id,
			name11 => "slot_number",                          value11 => $slot_number,
			name12 => "old_slot_number",                      value12 => $old_slot_number,
			name13 => "new_size",                             value13 => $new_size,
			name14 => "old_size",                             value14 => $old_size,
			name15 => "new_sector_size",                      value15 => $new_sector_size,
			name16 => "old_sector_size",                      value16 => $old_sector_size,
			name17 => "new_vendor",                           value17 => $new_vendor,
			name18 => "old_vendor",                           value18 => $old_vendor,
			name19 => "new_model",                            value19 => $new_model,
			name20 => "old_model",                            value20 => $old_model,
			name21 => "new_self_encrypting_drive",            value21 => $new_self_encrypting_drive,
			name22 => "old_self_encrypting_drive",            value22 => $old_self_encrypting_drive,
		}, file => $THIS_FILE, line => __LINE__});
		
		if (($storcli_physical_drive_serial_number ne $old_physical_drive_serial_number) or 
		    ($controller_uuid                      ne $old_controller_uuid)              or 
		    ($virtual_drive                        ne $old_virtual_drive)                or 
		    ($drive_group                          ne $old_drive_group)                  or 
		    ($enclosure_id                         ne $old_enclosure_id)                 or 
		    ($slot_number                          ne $old_slot_number)                  or 
		    ($new_size                             ne $old_size)                         or 
		    ($new_sector_size                      ne $old_sector_size)                  or 
		    ($new_vendor                           ne $old_vendor)                       or 
		    ($new_model                            ne $old_model)                        or 
		    ($new_self_encrypting_drive            ne $old_self_encrypting_drive))
		{
			# I'll need the old controller's serial number.
			my $old_host_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "old_host_controller_serial_number", value1 => $old_host_controller_serial_number,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Send a warning level alert because these really should never change.
			my $title_key   = "an_alert_title_0004";
			my $message_key = "scan_storcli_warning_0029";
			if ($new_model ne $old_model)
			{
				if ($old_model eq "VANISHED")
				{
					# Physical drive has returned.
					$message_key = "scan_storcli_warning_0030";
				}
			}
			$an->data->{sys}{alert_sort}++; 
			$an->Alert->register_alert({
				alert_level		=>	"warning", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort},
				alert_header		=>	'FALSE',
				alert_title_key		=>	$title_key,
				alert_message_key	=>	$message_key,
				alert_message_variables	=>	{
					new_on_controller	=>	$host_controller_serial_number,
					old_on_controller	=>	$old_host_controller_serial_number,
					new_virtual_drive	=>	$virtual_drive,
					old_virtual_drive	=>	$old_virtual_drive,
					new_drive_group		=>	$drive_group,
					old_drive_group		=>	$old_drive_group,
					new_enclosure_id	=>	$enclosure_id,
					old_enclosure_id	=>	$old_enclosure_id,
					new_slot_number		=>	$slot_number,
					old_slot_number		=>	$old_slot_number,
					new_serial_number	=>	$storcli_physical_drive_serial_number,
					old_serial_number	=>	$old_physical_drive_serial_number,
					new_vendor		=>	$new_vendor,
					old_vendor		=>	$old_vendor,
					new_model		=>	$new_model,
					old_model		=>	$old_model,
					new_size		=>	$new_size,
					old_size		=>	$old_size,
					new_sector_size		=>	$new_sector_size,
					old_sector_size		=>	$old_sector_size,
					new_self_encrypting_drive =>	$new_self_encrypting_drive,
					old_self_encrypting_drive =>	$old_self_encrypting_drive,
				},
			});
			$main_table_changed = 1;
			
			my $query = "
UPDATE 
    storcli_physical_drives
SET
    storcli_physical_drive_controller_uuid       = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    storcli_physical_drive_virtual_drive         = ".$an->data->{sys}{use_db_fh}->quote($virtual_drive).", 
    storcli_physical_drive_drive_group           = ".$an->data->{sys}{use_db_fh}->quote($drive_group).", 
    storcli_physical_drive_enclosure_id          = ".$an->data->{sys}{use_db_fh}->quote($enclosure_id).", 
    storcli_physical_drive_slot_number           = ".$an->data->{sys}{use_db_fh}->quote($slot_number).", 
    storcli_physical_drive_serial_number         = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_serial_number).", 
    storcli_physical_drive_size                  = ".$an->data->{sys}{use_db_fh}->quote($new_size).", 
    storcli_physical_drive_sector_size           = ".$an->data->{sys}{use_db_fh}->quote($new_sector_size).", 
    storcli_physical_drive_vendor                = ".$an->data->{sys}{use_db_fh}->quote($new_vendor).", 
    storcli_physical_drive_model                 = ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    storcli_physical_drive_self_encrypting_drive = ".$an->data->{sys}{use_db_fh}->quote($new_self_encrypting_drive).", 
    modified_date                                = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_physical_drive_uuid                  = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid)." 
;";

			# Now record the query in the array
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
		}
		
		### Process the rest of the variables now. 
		foreach my $type ("variable", "temperature")
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "type", value1 => $type,
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}})
			{
				my $new_variable_value = delete $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}{$variable};
				   $new_variable_value = "" if not defined $new_variable_value;
				my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable",    value1 => $variable,
					name2 => "temperature", value2 => $temperature,
				}, file => $THIS_FILE, line => __LINE__});
				if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_uuid})
				{
					# Look for changes
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
						name1 => "variable",           value1 => $variable,
						name2 => "new_variable_value", value2 => $new_variable_value,
						name3 => "old_variable_value", value3 => $old_variable_value,
						name4 => "variable_uuid",      value4 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable};
					
					# If there is no change, I still want to record the temperature 
					# (where applicable). So I setup like I will send an alert from the
					# start, but will only actually send if something has changed.
					my $message_key       = "scan_storcli_warning_0031";
					my $alert_level       = "info";
					my $title_key         = "an_alert_title_0002";
					my $temperature_state = "ok";
					my $temperature_is    = "nominal";
					if ($type eq "temperature")
					{
						# It's a temperature, so change the default message.
						$message_key = "scan_storcli_note_0064";
						if (($new_variable_value ne $old_variable_value))
						{
							# If the temperature is rising, see if we need to set
							# a high warning or critical, or, clear a low warning
							# or critical. Check for the reverse if the 
							# temperature is dropping.
							if ($old_variable_value eq "VANISHED")
							{
								### NOTE: We don't (yet) check to see if the 
								###       drive is overheating or freezing 
								###       here. That would require new logic 
								###       and is unlikely to be needed.
								# Temperature is back.
								$message_key = "scan_storcli_warning_0032";
							}
							elsif ($new_variable_value > $old_variable_value)
							{
								# Rising
								my $jumped = $new_variable_value - $old_variable_value;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "jumped", value1 => $jumped, 
								}, file => $THIS_FILE, line => __LINE__});
								if ($new_variable_value > $high_critical)
								{
									# Crossed the critical threshold. See
									# if this is the first time.
									my $set = $an->Alert->check_alert_sent({
										type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_high_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "set", value1 => $set, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($set)
									{
										# This is the first time we 
										# rose above the critical 
										# threshold.
										$alert_level = "critical";
										$title_key   = "an_alert_title_0005";
										$message_key = "scan_storcli_note_0008";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "critical";
									$temperature_is    = "high";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($new_variable_value > $high_warning)
								{
									# Crossed the warning threshold.
									my $set = $an->Alert->check_alert_sent({
										type			=>	"warning",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_high_warning",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "set", value1 => $set, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($set)
									{
										# This is the first time we rose above the 
										# critical threshold.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0009";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "warning";
									$temperature_is    = "high";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($new_variable_value > $clear_low_warning)
								{
									# Risen into the clear, make sure 
									# both warning and critical are 
									# cleared.
									my $cleared_critical = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_low_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									my $cleared_warning = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_low_warning",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "cleared_critical", value1 => $cleared_critical, 
										name2 => "cleared_warning",  value2 => $cleared_warning, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($cleared_critical)
									{
										$alert_level = "warning";
										$title_key   = "an_alert_title_0007";
										$message_key = "scan_storcli_note_0016";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($cleared_warning)
									{
										# The temperature has dropped back down to 
										# safe levels.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0006";
										$message_key = "scan_storcli_note_0016";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
								}
								elsif ($new_variable_value > $clear_low_critical)
								{
									# Risen above critical, but not in 
									# the clear.
									my $cleared_critical = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_low_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "cleared_critical", value1 => $cleared_critical, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($cleared_critical)
									{
										# Set the warning.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$storcli_physical_drive_serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										
										$alert_level = "warning";
										$title_key   = "an_alert_title_0006";
										$message_key = "scan_storcli_note_0017";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "warning";
									$temperature_is    = "low";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($jumped > $jump)
								{
									# The temperature jumped a large 
									# amount.
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_note_0018";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
										name1 => "alert_level", value1 => $alert_level,
										name2 => "title_key",   value2 => $title_key,
										name3 => "message_key", value3 => $message_key,
									}, file => $THIS_FILE, line => __LINE__});
								}
							}
							else
							{
								# Falling
								my $jumped = $old_variable_value - $new_variable_value;
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "jumped", value1 => $jumped, 
								}, file => $THIS_FILE, line => __LINE__});
								if ($new_variable_value < $low_critical)
								{
									# Dropped below the critical threshold. This 
									# should always be unset because it is a new
									# variable, but check anyway.
									my $set = $an->Alert->check_alert_sent({
										type			=>	"warning",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_low_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "set", value1 => $set, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($set)
									{
										# This is the first time we rose above the 
										# critical threshold.
										$alert_level = "critical";
										$title_key   = "an_alert_title_0005";
										$message_key = "scan_storcli_note_0010";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "critical";
									$temperature_is    = "low";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($new_variable_value < $low_warning)
								{
									# Crossed the warning threshold. This should
									# always be unset because it is a new
									# variable, but check anyway.
									my $set = $an->Alert->check_alert_sent({
										type			=>	"warning",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_low_warning",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "set", value1 => $set, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($set)
									{
										# This is the first time we rose above the 
										# critical threshold.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0011";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "warning";
									$temperature_is    = "low";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($new_variable_value < $clear_high_warning)
								{
									# Dropped into the clear
									my $cleared_critical = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_high_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									my $cleared_warning = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_high_warning",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "cleared_critical", value1 => $cleared_critical, 
										name2 => "cleared_warning",  value2 => $cleared_warning, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($cleared_critical)
									{
										$alert_level = "warning";
										$title_key   = "an_alert_title_0007";
										$message_key = "scan_storcli_note_0019";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($cleared_warning)
									{
										# The temperature has dropped back down to 
										# safe levels.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0006";
										$message_key = "scan_storcli_note_0019";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
								}
								elsif ($new_variable_value < $clear_high_critical)
								{
									# Dropped below critical, but not in
									# the clear.
									my $cleared_critical = $an->Alert->check_alert_sent({
										type			=>	"clear",
										alert_sent_by		=>	$THIS_FILE,
										alert_record_locator	=>	$storcli_physical_drive_serial_number,
										alert_name		=>	$variable."_high_critical",
										modified_date		=>	$an->data->{sys}{db_timestamp},
									});
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "cleared_critical", value1 => $cleared_critical, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($cleared_critical)
									{
										# Set the warning.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$storcli_physical_drive_serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										
										$alert_level = "warning";
										$title_key   = "an_alert_title_0006";
										$message_key = "scan_storcli_note_0020";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level,
											name2 => "title_key",   value2 => $title_key,
											name3 => "message_key", value3 => $message_key,
										}, file => $THIS_FILE, line => __LINE__});
									}
									$temperature_state = "warning";
									$temperature_is    = "high";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "temperature_state", value1 => $temperature_state, 
										name2 => "temperature_is",    value2 => $temperature_is, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($jumped > $jump)
								{
									# The temperature dropped a large
									# amount.
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_note_0021";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
										name1 => "alert_level", value1 => $alert_level,
										name2 => "title_key",   value2 => $title_key,
										name3 => "message_key", value3 => $message_key,
									}, file => $THIS_FILE, line => __LINE__});
								}
							}
						}
						
						# Record this for later processing into the 'temperature' 
						# table.
						my $sensor_host_key = "pd:$storcli_physical_drive_serial_number";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "sensor_host_key", value1 => $sensor_host_key,
						}, file => $THIS_FILE, line => __LINE__});
						
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_variable_value;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
							name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
							name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					
					# Now actually generate an alert and save the changes if something 
					# changed. 
					if (($new_variable_value ne $old_variable_value))
					{
						# Changed! If the old value was 'VANISHED', then a 
						# sensor or variable returned. Otherwise, for now, we
						# treat everything as 'warning' and step down 
						# explicitely anything not of concern that proves 
						# noisey later (better safe than sorry).
						$an->data->{sys}{alert_sort}++; 
						
						if ($type ne "temperature")
						{
							if ($old_variable_value eq "VANISHED")
							{
								$message_key = "scan_storcli_warning_0032";
							}
							
							# We want to watch for the 'error' counters. If they 
							# change, we make this a warning.
							if ($variable =~ /error_count/)
							{
								# If we're over 6, it's a warning. If its 
								# under 6, a notice. If it's 0, clear.
								if ($new_variable_value > 6)
								{
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "alert_level", value1 => $alert_level,
										name2 => "title_key",   value2 => $title_key,
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($new_variable_value > 0)
								{
									$alert_level = "notice";
									$title_key   = "an_alert_title_0003";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
										name1 => "alert_level", value1 => $alert_level,
										name2 => "title_key",   value2 => $title_key,
									}, file => $THIS_FILE, line => __LINE__});
								}
								$message_key = "scan_storcli_warning_0044";
								$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
									name1 => "message_key", value1 => $message_key,
								}, file => $THIS_FILE, line => __LINE__});
							}
							elsif ($variable =~ /fail/)
							{
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_warning_0045";
								$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
									name1 => "alert_level", value1 => $alert_level,
									name2 => "title_key",   value2 => $title_key,
									name3 => "message_key", value3 => $message_key,
								}, file => $THIS_FILE, line => __LINE__});
							}
						}
						$an->Alert->register_alert({
							alert_level		=>	$alert_level, 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	$title_key,
							alert_message_key	=>	$message_key,
							alert_message_variables	=>	{
								serial_number		=>	$storcli_physical_drive_serial_number,
								name			=>	$variable,
								old_value		=>	$old_variable_value ? $old_variable_value : "--",
								new_value		=>	$new_variable_value,
								high_critical_temperature =>	$high_critical, 
								high_warning_temperature =>	$high_warning, 
								low_critical_temperature =>	$low_critical, 
								low_warning_temperature	=>	$low_warning, 
								jump			=>	$jump,
							},
						});
						
						my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
				else
				{
					# New variable, record it. This is a 'warning' level as 
					# variables aren't expected to spawn into existence.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_storcli_warning_0033",
						alert_message_variables	=>	{
							serial_number		=>	$variable,
							name			=>	$variable,
							value			=>	$new_variable_value,
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_physical_drives', 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Now look for any variables left from the previous scan that we didn't match up (and delete)
		# this pass.
		foreach my $type ("variable", "temperature")
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "type", value1 => $type,
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}})
			{
				# This variable has vanished
				next if not defined $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_value};
				my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_value};
				my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable}{storcli_variable_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "old_variable_value", value1 => $old_variable_value,
					name2 => "variable_uuid",      value2 => $variable_uuid,
				}, file => $THIS_FILE, line => __LINE__});
				
				# Delete it so that we know it has been processed.
				delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_physical_drives'}{source_uuid}{$storcli_physical_drive_uuid}{$type}{$variable};
				
				# If the old value is already 'VANISHED', ignore it.
				next if $old_variable_value eq "VANISHED";
				
				### NOTE: For now, we're going to use warning level because variables
				###       shouldn't vanish, but under an-cm, it did happen for 
				###       reasons that we never figured out. So later, we may drop 
				###       the alert level in some cases.
				# Still here? Alert and UPDATE.
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
					alert_title_key		=>	"an_alert_title_0004",
					alert_message_key	=>	"scan_storcli_warning_0034",
					alert_message_variables	=>	{
						serial_number		=>	$storcli_physical_drive_serial_number,
						name			=>	$variable,
					},
				});
				
				my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
		}
	}
	
	# Delete the Physical Drive from the last scan so that we can find disks that have been removed.
	if (exists $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid})
	{
		delete $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid};
	}
	
	return(0);
}

# Look for added, changed or deleted cachevaults (FBUs).
sub process_cachevaults
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_cachevaults" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Setup our thermal thresholds
	my $high_critical       = $an->data->{'scan-storcli'}{thresholds}{cachevault}{high_critical};
	my $high_warning        = $an->data->{'scan-storcli'}{thresholds}{cachevault}{high_warning};
	my $low_warning         = $an->data->{'scan-storcli'}{thresholds}{cachevault}{low_warning};
	my $low_critical        = $an->data->{'scan-storcli'}{thresholds}{cachevault}{low_critical};
	my $jump                = $an->data->{'scan-storcli'}{thresholds}{cachevault}{jump};
	my $buffer              = $an->data->{'scan-storcli'}{thresholds}{cachevault}{buffer};
	my $clear_high_critical = $high_critical - $buffer;
	my $clear_high_warning  = $high_warning - $buffer;
	my $clear_low_critical  = $low_critical - $buffer;
	my $clear_low_warning   = $low_warning - $buffer;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
		name1  => "high_critical",       value1  => $high_critical, 
		name2  => "high_warning",        value2  => $high_warning, 
		name3  => "low_warning",         value3  => $low_warning, 
		name4  => "low_critical",        value4  => $low_critical, 
		name5  => "jump",                value5  => $jump, 
		name6  => "buffer",              value6  => $buffer, 
		name7  => "clear_high_critical", value7  => $clear_high_critical, 
		name8  => "clear_high_warning",  value8  => $clear_high_warning, 
		name9  => "clear_low_critical",  value9  => $clear_low_critical, 
		name10 => "clear_low_warning",   value10 => $clear_low_warning, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Find new, changed and replaced Cachevaults (FBUs).
	$an->data->{sys}{sql} = [];
	foreach my $cachevault_serial_number (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "cachevault_serial_number", value1 => $cachevault_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Is this a new Cachevault?
		my $cachevault_uuid = "";
		my $is_new          = 0;
		if (exists $an->data->{'scan-storcli'}{cachevaults}{by_serial}{$cachevault_serial_number})
		{
			# Yes!
			$cachevault_uuid = $an->data->{'scan-storcli'}{cachevaults}{by_serial}{$cachevault_serial_number};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cachevault_uuid", value1 => $cachevault_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# No, this is a new Cachevault. Create a new UUID for it.
			$cachevault_uuid = $an->Get->uuid();
			$is_new          = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "cachevault_uuid", value1 => $cachevault_uuid,
				name2 => "is_new",   value2 => $is_new,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add the keys for looking it up by UUID or serial number.
			$an->data->{'scan-storcli'}{cachevaults}{by_serial}{$cachevault_serial_number} = $cachevault_uuid;
			$an->data->{'scan-storcli'}{cachevaults}{by_uuid}{$cachevault_uuid} = $cachevault_serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "scan-storcli::cachevaults::by_serial::$cachevault_serial_number", value1 => $an->data->{'scan-storcli'}{cachevaults}{by_serial}{$cachevault_serial_number},
				name2 => "scan-storcli::cachevaults::by_uuid::$cachevault_uuid", value2 => $an->data->{'scan-storcli'}{cachevaults}{by_uuid}{$cachevault_uuid},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# First up, get the controller serial number and translate that to a controller_uuid.
		if (not $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{host_controller_serial_number})
		{
			# Error!
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0009", message_variables => { serial_number => $cachevault_serial_number }, code => 9, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 9});
		}
		my $host_controller_serial_number = $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{host_controller_serial_number};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "host_controller_serial_number", value1 => $host_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		if (not $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number})
		{
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0008", message_variables => { serial_number => $host_controller_serial_number }, code => 8, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 8});
		}
		my $controller_uuid = $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "controller_uuid", value1 => $controller_uuid,
		}, file => $THIS_FILE, line => __LINE__});
		
		# These are the values for the main table. Anything else will go in the variables table.
		my $new_type               = "";
		my $new_model              = "";
		my $new_state              = "";
		my $new_manufacture_date   = "";
		my $new_design_capacity    = "";
		my $new_replacement_needed = "";
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "variable", value1 => $variable,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Store and delete the value
			if ($variable eq "type")
			{
				$new_type = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_type", value1 => $new_type,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "device_name")
			{
				$new_model = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_model", value1 => $new_model,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "state")
			{
				$new_state = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_state", value1 => $new_state,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "date_of_manufacture")
			{
				$new_manufacture_date = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_manufacture_date", value1 => $new_manufacture_date,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "design_capacity")
			{
				$new_design_capacity = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_design_capacity", value1 => $new_design_capacity,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "replacement_required")
			{
				$new_replacement_needed = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_replacement_needed", value1 => $new_replacement_needed,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# Pull out the rest of the variables now. If the Cachevault is new, all variables will be 
		# INSERTed. If the Cachevault exists, each variable will be examined and new ones will be 
		# INSERTed, existing ones will be checked for changes and UPDATEd as needed. If the 
		# Cachevault is NOT new, then variables from the old data will be deleted as we go and any 
		# not found in the current data set will be left over. We'll use this to determine variables
		# that have vanished. They will not be deleted, but their value will be set to 'VANISHED'.
		if ($is_new)
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "cachevault_uuid",          value1 => $cachevault_uuid,
				name2 => "controller_uuid",          value2 => $controller_uuid,
				name3 => "cachevault_serial_number", value3 => $cachevault_serial_number,
				name4 => "new_type",                 value4 => $new_type,
				name5 => "new_model",                value5 => $new_model,
				name6 => "new_state",                value6 => $new_state,
				name7 => "new_design_capacity",      value7 => $new_design_capacity,
				name8 => "new_manufacture_date",     value8 => $new_manufacture_date,
				name9 => "new_replacement_needed",   value9 => $new_replacement_needed,
			}, file => $THIS_FILE, line => __LINE__});
			
			### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
			# Send an alert telling the user that we've found a new controller.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort},	
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_storcli_note_0007",
				alert_message_variables	=>	{
					on_controller		=>	$host_controller_serial_number,
					serial_number		=>	$cachevault_serial_number,
					type			=>	$new_type, 
					model			=>	$new_model, 
					'state'			=>	$new_state, 
					design_capacity		=>	$new_design_capacity, 
					manufacture_date	=>	$new_manufacture_date, 
					replacement_needed	=>	$new_replacement_needed, 
				},
			});
			
			# INSERT
			my $query = "
INSERT INTO 
    storcli_cachevaults
(
    storcli_cachevault_uuid, 
    storcli_cachevault_host_uuid, 
    storcli_cachevault_controller_uuid, 
    storcli_cachevault_serial_number, 
    storcli_cachevault_type, 
    storcli_cachevault_model, 
    storcli_cachevault_state, 
    storcli_cachevault_design_capacity, 
    storcli_cachevault_manufacture_date, 
    storcli_cachevault_replacement_needed, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($cachevault_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($cachevault_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			# Now record the query in the array
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;

			# Process the rest of the variables and temperatures now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}})
				{
					my $value       = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}{$variable};
					my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "value",       value2 => $value,
						name3 => "temperature", value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					my $message_key       = "scan_storcli_note_0002";
					my $alert_level       = "info";
					my $title_key         = "an_alert_title_0002";
					my $temperature_state = "ok";
					my $temperature_is    = "nominal";
					if ($type eq "temperature")
					{
						# This is a temperature, so see if the temperature outside of
						# the warning or critical thresholds. This is a new sensor, 
						# so nothing to compare against.
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($value > $high_critical)
						{
							# Crossed the critical threshold. This should
							# always be unset because it is a new
							# variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$cachevault_serial_number,
								alert_name		=>	$variable."_high_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0036";
							}
						}
						elsif ($value > $high_warning)
						{
							# Crossed the warning threshold. This should always 
							# be unset because it is a new variable, but check 
							# anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$cachevault_serial_number,
								alert_name		=>	$variable."_high_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0037";
							}
						}
						elsif ($value < $low_critical)
						{
							# Dropped below the critical threshold. This should 
							# always be unset because it is a new variable, but 
							# check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$cachevault_serial_number,
								alert_name		=>	$variable."_low_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0038";
							}
						}
						elsif ($value < $low_warning)
						{
							# Crossed the warning threshold. This should always be unset
							# because it is a new variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$cachevault_serial_number,
								alert_name		=>	$variable."_low_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the critical
								# threshold.
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0039";
							}
						}
						
						# Record this for later processing into the 'temperature' table.
						my $sensor_host_key = "cachevault:$cachevault_serial_number";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "sensor_host_key", value1 => $sensor_host_key,
						}, file => $THIS_FILE, line => __LINE__});
						
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $value;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
							name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
							name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					
					# Send an alert telling the user that we've found a new controller.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	$alert_level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	'FALSE',
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							serial_number		=>	$cachevault_serial_number,
							name			=>	$variable,
							value			=>	$value,
							high_critical_temperature =>	$high_critical, 
							high_warning_temperature =>	$high_warning, 
							low_critical_temperature =>	$low_critical, 
							low_warning_temperature	=>	$low_warning, 
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_cachevaults', 
    ".$an->data->{sys}{use_db_fh}->quote($cachevault_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		else
		{
			### NOTE: The serial number should never change (a changed SN/Cachevault should be 
			###       picked up as a new Cachevault), but we check/update just to be safe.
			# Look for changes.
			my $main_table_changed           = 0;
			my $old_cachevault_serial_number = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_serial_number};
			my $old_controller_uuid          = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_controller_uuid};
			my $old_type                     = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_type};
			my $old_model                    = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_model};
			my $old_state                    = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_state};
			my $old_design_capacity          = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_design_capacity};
			my $old_manufacture_date         = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_manufacture_date};
			my $old_replacement_needed       = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_replacement_needed};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0016", message_variables => {
				name1  => "cachevault_serial_number",     value1  => $cachevault_serial_number,
				name2  => "old_cachevault_serial_number", value2  => $old_cachevault_serial_number,
				name3  => "controller_uuid",              value3  => $controller_uuid,
				name4  => "old_controller_uuid",          value4  => $old_controller_uuid,
				name5  => "new_type",                     value5  => $new_type,
				name6  => "old_type",                     value6  => $old_type,
				name7  => "new_model",                    value7  => $new_model,
				name8  => "old_model",                    value8  => $old_model,
				name9  => "new_state",                    value9  => $new_state,
				name10 => "old_state",                    value10 => $old_state,
				name11 => "new_design_capacity",          value11 => $new_design_capacity,
				name12 => "old_design_capacity",          value12 => $old_design_capacity,
				name13 => "new_manufacture_date",         value13 => $new_manufacture_date,
				name14 => "old_manufacture_date",         value14 => $old_manufacture_date,
				name15 => "new_replacement_needed",       value15 => $new_replacement_needed,
				name16 => "old_replacement_needed",       value16 => $old_replacement_needed,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (($cachevault_serial_number ne $old_cachevault_serial_number) or 
			    ($controller_uuid          ne $old_controller_uuid)          or 
			    ($new_type                 ne $old_type)                     or 
			    ($new_model                ne $old_model)                    or 
			    ($new_state                ne $old_state)                    or 
			    ($new_design_capacity      ne $old_design_capacity)          or
			    ($new_manufacture_date     ne $old_manufacture_date)         or 
			    ($new_replacement_needed   ne $old_replacement_needed))
			{
				# I need the serial numbers for the controller UUIDs.
				my $new_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid};
				my $old_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "new_controller_serial_number", value1 => $new_controller_serial_number,
					name2 => "old_controller_serial_number", value2 => $old_controller_serial_number,
				}, file => $THIS_FILE, line => __LINE__});
				
				# Send a warning level alert because the most likely change is 'state' or 
				# 'replacement_needed'.
				my $title_key   = "an_alert_title_0004";
				my $message_key = "scan_storcli_warning_0036";
				if ($new_state ne $old_state)
				{
					if ($old_state eq "VANISHED")
					{
						# Cachevault has returned.
						$message_key = "scan_storcli_warning_0037";
					}
					### TODO: Verify this is the expected string on Cachevaults.
					if ($new_state =~ /optimal/i)
					{
						$title_key = "an_alert_title_0004";
					}
				}
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						new_on_controller	=>	$new_controller_serial_number, 
						old_on_controller	=>	$old_controller_serial_number, 
						new_model		=>	$new_model,
						old_model		=>	$old_model,
						new_serial_number	=>	$cachevault_serial_number,
						old_serial_number	=>	$old_cachevault_serial_number,
						new_type		=>	$new_type, 
						old_type		=>	$old_type, 
						new_state		=>	$new_state, 
						old_state		=>	$old_state, 
						new_design_capacity	=>	$new_design_capacity, 
						old_design_capacity	=>	$old_design_capacity, 
						new_manufacture_date	=>	$new_manufacture_date, 
						old_manufacture_date	=>	$old_manufacture_date, 
						new_replacement_needed	=>	$new_replacement_needed, 
						old_replacement_needed	=>	$old_replacement_needed, 
					},
				});
				$main_table_changed = 1;
				
				my $query = "
UPDATE 
    storcli_cachevaults
SET
    storcli_cachevault_controller_uuid    = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    storcli_cachevault_serial_number      = ".$an->data->{sys}{use_db_fh}->quote($cachevault_serial_number).", 
    storcli_cachevault_type               = ".$an->data->{sys}{use_db_fh}->quote($new_type).", 
    storcli_cachevault_model              = ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    storcli_cachevault_state              = ".$an->data->{sys}{use_db_fh}->quote($new_state).", 
    storcli_cachevault_manufacture_date   = ".$an->data->{sys}{use_db_fh}->quote($new_manufacture_date).", 
    storcli_cachevault_design_capacity    = ".$an->data->{sys}{use_db_fh}->quote($new_design_capacity).", 
    storcli_cachevault_replacement_needed = ".$an->data->{sys}{use_db_fh}->quote($new_replacement_needed).", 
    modified_date                  = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_cachevault_uuid               = ".$an->data->{sys}{use_db_fh}->quote($cachevault_uuid)." 
;";

				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			### Process the rest of the variables now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}})
				{
					my $new_variable_value = delete $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}{$variable};
					my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",           value1 => $variable,
						name2 => "new_variable_value", value2 => $new_variable_value,
						name3 => "temperature",        value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable}{storcli_variable_uuid})
					{
						# Look for changes
						my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable}{storcli_variable_value};
						my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable}{storcli_variable_uuid};
						$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
							name1 => "variable",           value1 => $variable,
							name2 => "new_variable_value", value2 => $new_variable_value,
							name3 => "old_variable_value", value3 => $old_variable_value,
							name4 => "variable_uuid",      value4 => $variable_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						# Delete it so that we know it has been processed.
						delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable};
						
						# If there is no change, I still want to record the 
						# temperature (where applicable). So I setup like I will send
						# an alert from the start, but will only actually send if 
						# something has changed.
						my $message_key       = "scan_storcli_warning_0038";
						my $alert_level       = "info";
						my $title_key         = "an_alert_title_0002";
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($type eq "temperature")
						{
							# It's a temperature, so change the default message.
							$message_key = "scan_storcli_note_0065";
							if (($new_variable_value ne $old_variable_value))
							{
								# If the temperature is rising, see if we 
								# need to set a high warning or critical, or,
								# clear a low warning or critical. Check for
								# the reverse if the temperature is dropping.
								if ($old_variable_value eq "VANISHED")
								{
									### NOTE: We don't (yet) check to see
									###       if the drive is overheating
									###       or freezing here. That 
									###       would require new logic and
									###       is unlikely to be needed.
									# Temperature is back.
									$message_key = "scan_storcli_warning_0039";
								}
								elsif ($old_variable_value > $new_variable_value)
								{
									# Rising
									my $jumped = $new_variable_value - $old_variable_value;
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value > $high_critical)
									{
										# Crossed the critical 
										# threshold. See if this is 
										# the first time.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0040";
										}
										$temperature_state = "critical";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $high_warning)
									{
										# Crossed the warning 
										# threshold.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0041";
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $clear_low_warning)
									{
										# Risen into the clear, make 
										# sure both warning and 
										# critical are cleared.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0042";
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0042";
										}
									}
									elsif ($new_variable_value > $clear_low_critical)
									{
										# Risen above critical, but 
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$cachevault_serial_number,
												alert_name		=>	$variable."_low_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0043";
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature jumped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0044";
									}
								}
								else
								{
									# Falling
									my $jumped = $old_variable_value - $new_variable_value;
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value < $low_critical)
									{
										# Dropped below the critical 
										# threshold. This should 
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0045";
										}
										$temperature_state = "critical";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $low_warning)
									{
										# Crossed the warning 
										# threshold. This should
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0046";
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $clear_high_warning)
									{
										# Dropped into the clear
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0047";
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0047";
										}
									}
									elsif ($new_variable_value < $clear_high_critical)
									{
										# Dropped below critical, but
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$cachevault_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$cachevault_serial_number,
												alert_name		=>	$variable."_high_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0048";
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature dropped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0049";
									}
								}
							}
							
							# Record this for later processing into the 
							# 'temperature' table.
							my $sensor_host_key = "cachevault:$cachevault_serial_number";
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "sensor_host_key", value1 => $sensor_host_key,
							}, file => $THIS_FILE, line => __LINE__});
							
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_variable_value;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
								name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
								name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
								name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						
						# Now actually generate an alert and save the changes if something 
						# changed. 
						if (($new_variable_value ne $old_variable_value))
						{
							# Changed! If the old value was 'VANISHED', then a 
							# sensor or variable returned. Otherwise, for now, we
							# treat everything as 'warning' and step down 
							# explicitely anything not of concern that proves 
							# noisey later (better safe than sorry).
							$an->data->{sys}{alert_sort}++; 
							
							if ($type ne "temperature")
							{
								if ($old_variable_value eq "VANISHED")
								{
									$message_key = "scan_storcli_warning_0039";
								}
								
								# Check for some important issues
								#if ($variable =~ /memory_correctable_errors/)
								# Nothing seems to be of special interest... See: SELECT a.host_name, b.storcli_cachevault_serial_number AS sn, b.storcli_cachevault_type, storcli_cachevault_model, c.storcli_variable_name AS variable, c.storcli_variable_value AS value, c.storcli_variable_is_temperature AS temp, c.modified_date FROM hosts a, storcli_cachevaults b, storcli_variables c WHERE a.host_uuid = b.storcli_cachevault_host_uuid AND b.storcli_cachevault_uuid = c.storcli_variable_source_uuid AND a.host_name = 'an-a07n01.alteeve.com';
							}
							$an->Alert->register_alert({
								alert_level		=>	$alert_level, 
								alert_agent_name	=>	$THIS_FILE,
								alert_sort		=>	$an->data->{sys}{alert_sort},
								alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
								alert_title_key		=>	$title_key,
								alert_message_key	=>	$message_key,
								alert_message_variables	=>	{
									serial_number		=>	$cachevault_serial_number,
									name			=>	$variable,
									old_value		=>	$old_variable_value ? $old_variable_value : "--",
									new_value		=>	$new_variable_value,
									high_critical_temperature =>	$high_critical, 
									high_warning_temperature =>	$high_warning, 
									low_critical_temperature =>	$low_critical, 
									low_warning_temperature	=>	$low_warning, 
									jump			=>	$jump,
								},
							});
							
							my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{sys}{sql}}, $query;
						}
					}
					else
					{
						# New variable, record it. This is a 'warning' level as 
						# variables aren't expected to spawn into existence.
						$an->data->{sys}{alert_sort}++; 
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	"an_alert_title_0003",
							alert_message_key	=>	"scan_storcli_warning_0041",
							alert_message_variables	=>	{
								serial_number		=>	$variable,
								name			=>	$variable,
								value			=>	$new_variable_value,
							},
						});
						
						# INSERT
						my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_cachevaults', 
    ".$an->data->{sys}{use_db_fh}->quote($cachevault_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
			}
			
			# Now look for any variables left from the previous scan that we didn't match up (and
			# delete) this pass.
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}})
				{
					# This variable has vanished
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "old_variable_value", value1 => $old_variable_value,
						name2 => "variable_uuid",      value2 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_cachevaults'}{source_uuid}{$cachevault_uuid}{$type}{$variable};
					
					# If the old value is already 'VANISHED', ignore it.
					next if $old_variable_value eq "VANISHED";
					
					### NOTE: For now, we're going to use warning level because variables
					###       shouldn't vanish, but under an-cm, it did happen for 
					###       reasons that we never figured out. So later, we may drop 
					###       the alert level in some cases.
					# Still here? Alert and UPDATE.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_storcli_warning_0040",
						alert_message_variables	=>	{
							serial_number		=>	$cachevault_serial_number,
							name			=>	$variable,
						},
					});
					
					my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Delete the Cachevault from the last scan so that we can find controllers that have been removed.
		if (exists $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid})
		{
			delete $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid};
		}
	}
	
	# See if any Cachevaults have vanished.
	foreach my $cachevault_uuid (keys %{$an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}})
	{
		# Cachevault vanished!
		my $old_cachevault_serial_number = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_serial_number};
		my $old_controller_uuid          = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_controller_uuid};
		my $old_state                    = $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid}{storcli_cachevault_state};
		my $old_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "old_cachevault_serial_number", value1 => $old_cachevault_serial_number,
			name2 => "old_controller_uuid",          value2 => $old_controller_uuid,
			name3 => "old_state",                    value3 => $old_state,
			name4 => "old_controller_serial_number", value4 => $old_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$cachevault_uuid};
		
		# If the old alarm state is already 'VANISHED', ignore it.
		next if $old_state eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0042",
			alert_message_variables	=>	{
				cachevault_serial_number =>	$old_cachevault_serial_number, 
				controller_serial_number =>	$old_controller_serial_number, 
			},
		});
		
		my $query = "
UPDATE 
    storcli_cachevaults
SET 
    storcli_cachevault_state = 'VANISHED', 
    modified_date     = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_cachevault_uuid  = ".$an->data->{sys}{use_db_fh}->quote($cachevault_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# Look for added, changed or deleted battery backup units (BBUs).
sub process_bbus
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_bbus" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Find new, changed and replaced BBUs.
	$an->data->{sys}{sql} = [];
	foreach my $bbu_serial_number (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "bbu_serial_number", value1 => $bbu_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Is this a new BBU?
		my $bbu_uuid = "";
		my $is_new   = 0;
		if (exists $an->data->{'scan-storcli'}{bbus}{by_serial}{$bbu_serial_number})
		{
			# Yes!
			$bbu_uuid = $an->data->{'scan-storcli'}{bbus}{by_serial}{$bbu_serial_number};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu_uuid", value1 => $bbu_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# No, this is a new BBU. Create a new UUID for it.
			$bbu_uuid = $an->Get->uuid();
			$is_new   = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "bbu_uuid", value1 => $bbu_uuid,
				name2 => "is_new",   value2 => $is_new,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add the keys for looking it up by UUID or serial number.
			$an->data->{'scan-storcli'}{bbus}{by_serial}{$bbu_serial_number} = $bbu_uuid;
			$an->data->{'scan-storcli'}{bbus}{by_uuid}{$bbu_uuid} = $bbu_serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "scan-storcli::bbus::by_serial::$bbu_serial_number", value1 => $an->data->{'scan-storcli'}{bbus}{by_serial}{$bbu_serial_number},
				name2 => "scan-storcli::bbus::by_uuid::$bbu_uuid", value2 => $an->data->{'scan-storcli'}{bbus}{by_uuid}{$bbu_uuid},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# The temperature range of the BBU depends on whether it is charging or discharging.
		my $bbu_temperature_key = "normal";
		# Get the charge state.
		# - None
		# - Discharging
		# - Charging
		my $charging = $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{charging_status};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "charging", value1 => $charging, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($charging =~ /^discharging$/i)
		{
			$bbu_temperature_key = "discharging";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu_temperature_key", value1 => $bbu_temperature_key, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Setup our thermal thresholds
		my $high_critical       = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{high_critical};
		my $high_warning        = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{high_warning};
		my $low_warning         = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{low_warning};
		my $low_critical        = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{low_critical};
		my $jump                = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{jump};
		my $buffer              = $an->data->{'scan-storcli'}{thresholds}{bbu}{$bbu_temperature_key}{buffer};
		my $clear_high_critical = $high_critical - $buffer;
		my $clear_high_warning  = $high_warning - $buffer;
		my $clear_low_critical  = $low_critical - $buffer;
		my $clear_low_warning   = $low_warning - $buffer;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
			name1  => "high_critical",       value1  => $high_critical, 
			name2  => "high_warning",        value2  => $high_warning, 
			name3  => "low_warning",         value3  => $low_warning, 
			name4  => "low_critical",        value4  => $low_critical, 
			name5  => "jump",                value5  => $jump, 
			name6  => "buffer",              value6  => $buffer, 
			name7  => "clear_high_critical", value7  => $clear_high_critical, 
			name8  => "clear_high_warning",  value8  => $clear_high_warning, 
			name9  => "clear_low_critical",  value9  => $clear_low_critical, 
			name10 => "clear_low_warning",   value10 => $clear_low_warning, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Fine-tune the alert thresholds
		if ($clear_high_critical < $high_warning)
		{
			$clear_high_critical = $high_warning + 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "clear_high_critical", value1 => $clear_high_critical, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($clear_low_critical > $low_warning)
		{
			$clear_low_critical = $low_warning - 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "clear_low_critical", value1 => $clear_low_critical, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# First up, get the controller serial number and translate that to a controller_uuid.
		if (not $an->data->{bbu}{serial_number}{$bbu_serial_number}{host_controller_serial_number})
		{
			# Error!
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0007", message_variables => { serial_number => $bbu_serial_number }, code => 7, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 7});
		}
		my $host_controller_serial_number = $an->data->{bbu}{serial_number}{$bbu_serial_number}{host_controller_serial_number};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "host_controller_serial_number", value1 => $host_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		if (not $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number})
		{
			$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0008", message_variables => { serial_number => $host_controller_serial_number }, code => 8, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 8});
		}
		my $controller_uuid = $an->data->{'scan-storcli'}{controllers}{by_serial}{$host_controller_serial_number};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "controller_uuid", value1 => $controller_uuid,
		}, file => $THIS_FILE, line => __LINE__});
		
		# These are the values for the main table. Anything else will go in the variables table.
		my $new_type               = "";
		my $new_model              = "";
		my $new_state              = "";
		my $new_manufacture_date   = "";
		my $new_design_capacity    = "";
		my $new_replacement_needed = "";
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "variable", value1 => $variable,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Store and delete the value
			if ($variable eq "type")
			{
				$new_type = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_type", value1 => $new_type,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "manufacture_name")
			{
				$new_model = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_model", value1 => $new_model,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "battery_state")
			{
				$new_state = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_model", value1 => $new_model,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "date_of_manufacture")
			{
				$new_manufacture_date = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_manufacture_date", value1 => $new_manufacture_date,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "design_capacity")
			{
				$new_design_capacity = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_design_capacity", value1 => $new_design_capacity,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if ($variable eq "replacement_required")
			{
				$new_replacement_needed = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_replacement_needed", value1 => $new_replacement_needed,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# Pull out the rest of the variables now. If the BBU is new, all variables will be INSERTed.
		# If the BBU exists, each variable will be examined and new ones will be INSERTed, existing 
		# ones will be checked for changes and UPDATEd as needed. If the BBU is NOT new, then 
		# variables from the old data will be deleted as we go and any not found in the current data
		# set will be left over. We'll use this to determine variables that have vanished. They will 
		# not be deleted, but their value will be set to 'VANISHED'.
		if ($is_new)
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "bbu_uuid",               value1 => $bbu_uuid,
				name2 => "controller_uuid",        value2 => $controller_uuid,
				name3 => "bbu_serial_number",      value3 => $bbu_serial_number,
				name4 => "new_type",               value4 => $new_type,
				name5 => "new_model",              value5 => $new_model,
				name6 => "new_state",              value6 => $new_state,
				name7 => "new_design_capacity",    value7 => $new_design_capacity,
				name8 => "new_manufacture_date",   value8 => $new_manufacture_date,
				name9 => "new_replacement_needed", value9 => $new_replacement_needed,
			}, file => $THIS_FILE, line => __LINE__});
			
			### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
			# Send an alert telling the user that we've found a new controller.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort},	
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_storcli_note_0003",
				alert_message_variables	=>	{
					on_controller		=>	$host_controller_serial_number,
					serial_number		=>	$bbu_serial_number,
					type			=>	$new_type, 
					model			=>	$new_model, 
					'state'			=>	$new_state, 
					design_capacity		=>	$new_design_capacity, 
					manufacture_date	=>	$new_manufacture_date, 
					replacement_needed	=>	$new_replacement_needed, 
				},
			});
			
			# INSERT
			my $query = "
INSERT INTO 
    storcli_bbus
(
    storcli_bbu_uuid, 
    storcli_bbu_host_uuid, 
    storcli_bbu_controller_uuid, 
    storcli_bbu_serial_number, 
    storcli_bbu_type, 
    storcli_bbu_model, 
    storcli_bbu_state, 
    storcli_bbu_design_capacity, 
    storcli_bbu_manufacture_date, 
    storcli_bbu_replacement_needed, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($bbu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($bbu_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			# Now record the query in the array
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;

			# Process the rest of the variables and temperatures now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}})
				{
					my $value       = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}{$variable};
					my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "value",       value2 => $value,
						name3 => "temperature", value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					my $message_key       = "scan_storcli_note_0002";
					my $alert_level       = "notice";
					my $title_key         = "an_alert_title_0003";
					my $temperature_state = "ok";
					my $temperature_is    = "nominal";
					if ($type eq "temperature")
					{
						# This is a temperature, so see if the temperature outside of
						# the warning or critical thresholds. This is a new sensor, 
						# so nothing to compare against.
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($value > $high_critical)
						{
							# Crossed the critical threshold. This should
							# always be unset because it is a new
							# variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$bbu_serial_number,
								alert_name		=>	$variable."_high_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0050";
							}
						}
						elsif ($value > $high_warning)
						{
							# Crossed the warning threshold. This should always 
							# be unset because it is a new variable, but check 
							# anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$bbu_serial_number,
								alert_name		=>	$variable."_high_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0051";
							}
						}
						elsif ($value < $low_critical)
						{
							# Dropped below the critical threshold. This should 
							# always be unset because it is a new variable, but 
							# check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$bbu_serial_number,
								alert_name		=>	$variable."_low_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0052";
							}
						}
						elsif ($value < $low_warning)
						{
							# Crossed the warning threshold. This should always be unset
							# because it is a new variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$bbu_serial_number,
								alert_name		=>	$variable."_low_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the critical
								# threshold.
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0053";
							}
						}
						
						# Record this for later processing into the 'temperature' table.
						my $sensor_host_key = "bbu:$bbu_serial_number";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "sensor_host_key", value1 => $sensor_host_key,
						}, file => $THIS_FILE, line => __LINE__});
						
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $value;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
							name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
							name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					
					# Send an alert telling the user that we've found a new controller.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	$alert_level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	'FALSE',
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							serial_number		=>	$bbu_serial_number,
							name			=>	$variable,
							value			=>	$value,
							high_critical_temperature =>	$high_critical, 
							high_warning_temperature =>	$high_warning, 
							low_critical_temperature =>	$low_critical, 
							low_warning_temperature	=>	$low_warning, 
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_bbus', 
    ".$an->data->{sys}{use_db_fh}->quote($bbu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		else
		{
			### NOTE: The serial number should never change (a changed SN/BBU should be picked up
			###       as a new BBU), but we check/update just to be safe.
			# Look for changes.
			my $main_table_changed     = 0;
			my $old_bbu_serial_number  = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_serial_number};
			my $old_controller_uuid    = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_controller_uuid};
			my $old_type               = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_type};
			my $old_model              = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_model};
			my $old_state              = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_state};
			my $old_design_capacity    = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_design_capacity};
			my $old_manufacture_date   = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_manufacture_date};
			my $old_replacement_needed = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_replacement_needed};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0016", message_variables => {
				name1  => "bbu_serial_number",      value1  => $bbu_serial_number,
				name2  => "old_bbu_serial_number",  value2  => $old_bbu_serial_number,
				name3  => "controller_uuid",        value3  => $controller_uuid,
				name4  => "old_controller_uuid",    value4  => $old_controller_uuid,
				name5  => "new_type",               value5  => $new_type,
				name6  => "old_type",               value6  => $old_type,
				name7  => "new_model",              value7  => $new_model,
				name8  => "old_model",              value8  => $old_model,
				name9  => "new_state",              value9  => $new_state,
				name10 => "old_state",              value10 => $old_state,
				name11 => "new_design_capacity",    value11 => $new_design_capacity,
				name12 => "old_design_capacity",    value12 => $old_design_capacity,
				name13 => "new_manufacture_date",   value13 => $new_manufacture_date,
				name14 => "old_manufacture_date",   value14 => $old_manufacture_date,
				name15 => "new_replacement_needed", value15 => $new_replacement_needed,
				name16 => "old_replacement_needed", value16 => $old_replacement_needed,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (($bbu_serial_number      ne $old_bbu_serial_number) or 
			    ($controller_uuid        ne $old_controller_uuid)   or 
			    ($new_type               ne $old_type)              or 
			    ($new_model              ne $old_model)             or 
			    ($new_state              ne $old_state)             or 
			    ($new_design_capacity    ne $old_design_capacity)   or
			    ($new_manufacture_date   ne $old_manufacture_date)  or 
			    ($new_replacement_needed ne $old_replacement_needed))
			{
				# I need the serial numbers for the controller UUIDs.
				my $new_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid};
				my $old_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "new_controller_serial_number", value1 => $new_controller_serial_number,
					name2 => "old_controller_serial_number", value2 => $old_controller_serial_number,
				}, file => $THIS_FILE, line => __LINE__});
				
				# Send a warning level alert because the most likely change is 'state' or 
				# 'replacement_needed'.
				my $title_key   = "an_alert_title_0004";
				my $message_key = "scan_storcli_warning_0010";
				if ($new_state ne $old_state)
				{
					if ($old_state eq "VANISHED")
					{
						# BBU has returned.
						$message_key = "scan_storcli_warning_0011";
					}
					### TODO: Verify this is the expected string on BBUs.
					if ($new_state =~ /optimal/i)
					{
						$title_key = "an_alert_title_0004";
					}
				}
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						new_on_controller	=>	$new_controller_serial_number, 
						old_on_controller	=>	$old_controller_serial_number, 
						new_model		=>	$new_model,
						old_model		=>	$old_model,
						new_serial_number	=>	$bbu_serial_number,
						old_serial_number	=>	$old_bbu_serial_number,
						new_type		=>	$new_type, 
						old_type		=>	$old_type, 
						new_state		=>	$new_state, 
						old_state		=>	$old_state, 
						new_design_capacity	=>	$new_design_capacity, 
						old_design_capacity	=>	$old_design_capacity, 
						new_manufacture_date	=>	$new_manufacture_date, 
						old_manufacture_date	=>	$old_manufacture_date, 
						new_replacement_needed	=>	$new_replacement_needed, 
						old_replacement_needed	=>	$old_replacement_needed, 
					},
				});
				$main_table_changed = 1;
				
				my $query = "
UPDATE 
    storcli_bbus
SET
    storcli_bbu_controller_uuid    = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    storcli_bbu_serial_number      = ".$an->data->{sys}{use_db_fh}->quote($bbu_serial_number).", 
    storcli_bbu_type               = ".$an->data->{sys}{use_db_fh}->quote($new_type).", 
    storcli_bbu_model              = ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    storcli_bbu_state              = ".$an->data->{sys}{use_db_fh}->quote($new_state).", 
    storcli_bbu_manufacture_date   = ".$an->data->{sys}{use_db_fh}->quote($new_manufacture_date).", 
    storcli_bbu_design_capacity    = ".$an->data->{sys}{use_db_fh}->quote($new_design_capacity).", 
    storcli_bbu_replacement_needed = ".$an->data->{sys}{use_db_fh}->quote($new_replacement_needed).", 
    modified_date                  = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_bbu_uuid               = ".$an->data->{sys}{use_db_fh}->quote($bbu_uuid)." 
;";

				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			### Process the rest of the variables now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}})
				{
					my $new_variable_value = delete $an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}{$variable};
					my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "temperature", value2 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable}{storcli_variable_uuid})
					{
						# Look for changes
						my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable}{storcli_variable_value};
						my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable}{storcli_variable_uuid};
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new_variable_value", value1 => $new_variable_value,
							name2 => "old_variable_value", value2 => $old_variable_value,
							name3 => "variable_uuid",      value3 => $variable_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						# Delete it so that we know it has been processed.
						delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable};
						
						# If there is no change, I still want to record the 
						# temperature (where applicable). So I setup like I will send
						# an alert from the start, but will only actually send if 
						# something has changed.
						my $message_key       = "scan_storcli_warning_0012";
						my $alert_level       = "info";
						my $title_key         = "an_alert_title_0002";
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($type eq "temperature")
						{
							# It's a temperature, so change the default message 
							# and drop the default alert level.
							$message_key = "scan_storcli_note_0066";
							$alert_level = "info";
							$title_key   = "an_alert_title_0002";
							if (($new_variable_value ne $old_variable_value))
							{
								# If the temperature is rising, see if we 
								# need to set a high warning or critical, or,
								# clear a low warning or critical. Check for
								# the reverse if the temperature is dropping.
								if ($old_variable_value eq "VANISHED")
								{
									### NOTE: We don't (yet) check to see
									###       if the drive is overheating
									###       or freezing here. That 
									###       would require new logic and
									###       is unlikely to be needed.
									# Temperature is back.
									$message_key = "scan_storcli_warning_0013";
								}
								elsif ($new_variable_value > $old_variable_value)
								{
									# Rising
									my $jumped = $new_variable_value - $old_variable_value;
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value > $high_critical)
									{
										# Crossed the critical 
										# threshold. See if this is 
										# the first time.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0054";
										}
										$temperature_state = "critical";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $high_warning)
									{
										# Crossed the warning 
										# threshold.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0055";
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $clear_low_warning)
									{
										# Risen into the clear, make 
										# sure both warning and 
										# critical are cleared.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0056";
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0056";
										}
									}
									elsif ($new_variable_value > $clear_low_critical)
									{
										# Risen above critical, but 
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$bbu_serial_number,
												alert_name		=>	$variable."_low_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0057";
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature jumped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0058";
									}
								}
								else
								{
									# Falling
									my $jumped = $old_variable_value - $new_variable_value;
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value < $low_critical)
									{
										# Dropped below the critical 
										# threshold. This should 
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0059";
										}
										$temperature_state = "critical";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $low_warning)
									{
										# Crossed the warning 
										# threshold. This should
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0060";
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $clear_high_warning)
									{
										# Dropped into the clear
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0061";
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0061";
										}
									}
									elsif ($new_variable_value < $clear_high_critical)
									{
										# Dropped below critical, but
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$bbu_serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$bbu_serial_number,
												alert_name		=>	$variable."_high_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0062";
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature dropped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0063";
									}
								}
							}
							
							# Record this for later processing into the 
							# 'temperature' table.
							my $sensor_host_key = "bbu:$bbu_serial_number";
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "sensor_host_key", value1 => $sensor_host_key,
							}, file => $THIS_FILE, line => __LINE__});
							
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_variable_value;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
								name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
								name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
								name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						
						# Now actually generate an alert and save the changes if something 
						# changed. 
						if (($new_variable_value ne $old_variable_value))
						{
							# Changed! If the old value was 'VANISHED', then a 
							# sensor or variable returned. Otherwise, for now, we
							# treat everything as 'warning' and step down 
							# explicitely anything not of concern that proves 
							# noisey later (better safe than sorry).
							$an->data->{sys}{alert_sort}++; 
							
							if ($type ne "temperature")
							{
								if ($old_variable_value eq "VANISHED")
								{
									$message_key = "scan_storcli_warning_0013";
								}
								
								### TODO: If the learn cycle is active, then drop related sensor alerts to 'notice'.
								# Check for some important issues
								if ($variable =~ /over_charged/)
								{
									$alert_level = "critical";
									$title_key   = "an_alert_title_0005";
									$message_key = "scan_storcli_warning_0049";
								}
								if ($variable =~ /over_temperature/)
								{
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_warning_0050";
								}
								if ($variable =~ /pack_is_about_to_fail_and_should_be_replaced/)
								{
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_warning_0051";
								}
								# Other things that might be of interest... See: SELECT a.host_name, b.storcli_bbu_serial_number AS sn, b.storcli_bbu_type, b.storcli_bbu_model, c.storcli_variable_name AS variable, c.storcli_variable_value AS value, c.storcli_variable_is_temperature AS temp, c.modified_date FROM hosts a, storcli_bbus b, storcli_variables c WHERE a.host_uuid = b.storcli_bbu_host_uuid AND b.storcli_bbu_uuid = c.storcli_variable_source_uuid AND a.host_name = 'an-a05n01.alteeve.com';
							}
							$an->Alert->register_alert({
								alert_level		=>	$alert_level, 
								alert_agent_name	=>	$THIS_FILE,
								alert_sort		=>	$an->data->{sys}{alert_sort},
								alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
								alert_title_key		=>	$title_key,
								alert_message_key	=>	$message_key,
								alert_message_variables	=>	{
									serial_number		=>	$bbu_serial_number,
									name			=>	$variable,
									old_value		=>	$old_variable_value ? $old_variable_value : "--",
									new_value		=>	$new_variable_value,
									high_critical_temperature =>	$high_critical, 
									high_warning_temperature =>	$high_warning, 
									low_critical_temperature =>	$low_critical, 
									low_warning_temperature	=>	$low_warning, 
									jump			=>	$jump,
								},
							});
							
							my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{sys}{sql}}, $query;
						}
					}
					else
					{
						# New variable, record it. This is a 'warning' level as 
						# variables aren't expected to spawn into existence.
						$an->data->{sys}{alert_sort}++; 
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	"an_alert_title_0003",
							alert_message_key	=>	"scan_storcli_warning_0015",
							alert_message_variables	=>	{
								serial_number		=>	$variable,
								name			=>	$variable,
								value			=>	$new_variable_value,
							},
						});
						
						# INSERT
						my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_bbus', 
    ".$an->data->{sys}{use_db_fh}->quote($bbu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
			}
			
			# Now look for any variables left from the previous scan that we didn't match up (and
			# delete) this pass.
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}})
				{
					# This variable has vanished
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "old_variable_value", value1 => $old_variable_value,
						name2 => "variable_uuid",      value2 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_bbus'}{source_uuid}{$bbu_uuid}{$type}{$variable};
					
					# If the old value is already 'VANISHED', ignore it.
					next if $old_variable_value eq "VANISHED";
					
					### NOTE: For now, we're going to use warning level because variables
					###       shouldn't vanish, but under an-cm, it did happen for 
					###       reasons that we never figured out. So later, we may drop 
					###       the alert level in some cases.
					# Still here? Alert and UPDATE.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_storcli_warning_0014",
						alert_message_variables	=>	{
							serial_number		=>	$bbu_serial_number,
							name			=>	$variable,
						},
					});
					
					my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Delete the BBU from the last scan so that we can find controllers that have been removed.
		if (exists $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid})
		{
			delete $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid};
		}
	}
	
	# See if any BBUs have vanished.
	foreach my $bbu_uuid (keys %{$an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}})
	{
		# BBU vanished!
		my $old_bbu_serial_number        = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_serial_number};
		my $old_controller_uuid          = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_controller_uuid};
		my $old_state                    = $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid}{storcli_bbu_state};
		my $old_controller_serial_number = $an->data->{'scan-storcli'}{controllers}{by_uuid}{$old_controller_uuid};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
			name1 => "old_bbu_serial_number",        value1 => $old_bbu_serial_number,
			name2 => "old_controller_uuid",          value2 => $old_controller_uuid,
			name3 => "old_state",                    value3 => $old_state,
			name4 => "old_controller_serial_number", value4 => $old_controller_serial_number,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$bbu_uuid};
		
		# If the old alarm state is already 'VANISHED', ignore it.
		next if $old_state eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0016",
			alert_message_variables	=>	{
				bbu_serial_number	=>	$old_bbu_serial_number, 
				controller_serial_number =>	$old_controller_serial_number, 
			},
		});
		
		my $query = "
UPDATE 
    storcli_bbus
SET 
    storcli_bbu_state = 'VANISHED', 
    modified_date     = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_bbu_uuid  = ".$an->data->{sys}{use_db_fh}->quote($bbu_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# Look for added, changed or deleted controllers.
sub process_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Setup our thermal thresholds
	my $high_critical       = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{high_critical};
	my $high_warning        = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{high_warning};
	my $low_warning         = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{low_warning};
	my $low_critical        = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{low_critical};
	my $jump                = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{jump};
	my $buffer              = $an->data->{'scan-storcli'}{thresholds}{raid_on_chip}{buffer};
	my $clear_high_critical = $high_critical - $buffer;
	my $clear_high_warning  = $high_warning - $buffer;
	my $clear_low_critical  = $low_critical - $buffer;
	my $clear_low_warning   = $low_warning - $buffer;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
		name1  => "high_critical",       value1  => $high_critical, 
		name2  => "high_warning",        value2  => $high_warning, 
		name3  => "low_warning",         value3  => $low_warning, 
		name4  => "low_critical",        value4  => $low_critical, 
		name5  => "jump",                value5  => $jump, 
		name6  => "buffer",              value6  => $buffer, 
		name7  => "clear_high_critical", value7  => $clear_high_critical, 
		name8  => "clear_high_warning",  value8  => $clear_high_warning, 
		name9  => "clear_low_critical",  value9  => $clear_low_critical, 
		name10 => "clear_low_warning",   value10 => $clear_low_warning, 
	}, file => $THIS_FILE, line => __LINE__});
	
	# Fine-tune the alert thresholds
	if ($clear_high_critical < $high_warning)
	{
		$clear_high_critical = $high_warning + 1;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "clear_high_critical", value1 => $clear_high_critical, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ($clear_low_critical > $low_warning)
	{
		$clear_low_critical = $low_warning - 1;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "clear_low_critical", value1 => $clear_low_critical, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# Look for new, changed or deleted controllers.
	$an->data->{sys}{sql} = [];
	foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "serial_number",                                        value1 => $serial_number,
			name2 => "scan-storcli::controllers::by_serial::$serial_number", value2 => $an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number},
		}, file => $THIS_FILE, line => __LINE__});
		
		# Is this controller in the database yet?
		my $controller_uuid = "";
		my $is_new          = 0;
		if ($an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number})
		{
			# Yes!
			$controller_uuid = $an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "controller_uuid", value1 => $controller_uuid,
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# No, this is a new controller. Create a new UUID for it.
			$controller_uuid = $an->Get->uuid();
			$is_new          = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "controller_uuid", value1 => $controller_uuid,
				name2 => "is_new",          value2 => $is_new,
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add the keys for looking it up by UUID or serial number.
			$an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number} = $controller_uuid;
			$an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid} = $serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "scan-storcli::controllers::by_serial::$serial_number", value1 => $an->data->{'scan-storcli'}{controllers}{by_serial}{$serial_number},
				name2 => "scan-storcli::controllers::by_uuid::$controller_uuid", value2 => $an->data->{'scan-storcli'}{controllers}{by_uuid}{$controller_uuid},
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# These are the values for the main table. Anything else will go in the variables table which
		# will be processed after the controller.
		my $new_model       = "";
		my $new_alarm_state = "";
		my $new_cache_size  = "";
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}{$serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "variable", value1 => $variable,
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($variable eq "model")
			{
				# Store and delete the value
				$new_model = delete $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_model", value1 => $new_model,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			elsif ($variable eq "alarm_state")
			{
				# Store and delete the value
				$new_alarm_state = delete $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_alarm_state", value1 => $new_alarm_state,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			elsif ($variable eq "on_board_memory_size")
			{
				# Store and delete the value
				$new_cache_size = delete $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "new_cache_size", value1 => $new_cache_size,
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# Pull out the rest of the variables now. If the controller is new, all variables will be 
		# INSERTed. If the controller exists, each variable will be examined and new ones will be
		# INSERTed, existing ones will be checked for changes and UPDATEd as needed. If the 
		# controller is NOT new, then variables from the old data will be deleted as we go and any
		# not found in the current data set will be left over. We'll use this to determine variables
		# that have vanished. They will not be deleted, but their value will be set to 'VANISHED'.
		if ($is_new)
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
				name1 => "serial_number",   value1 => $serial_number,
				name2 => "new_model",       value2 => $new_model,
				name3 => "new_alarm_state", value3 => $new_alarm_state,
				name4 => "new_cache_size",  value4 => $new_cache_size,
			}, file => $THIS_FILE, line => __LINE__});
			
			### NOTE: The rest of the alerts will be in the format '- Variable: [$value]'.
			# Send an alert telling the user that we've found a new controller.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_sort		=>	$an->data->{sys}{alert_sort},	
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_storcli_note_0001",
				alert_message_variables	=>	{
					model			=>	$new_model,
					serial_number		=>	$serial_number,
					say_cache_size		=>	$an->Readable->bytes_to_hr({'bytes' => $new_cache_size}),
					alarm_state		=>	$new_alarm_state,
				},
			});
			
			# INSERT
			my $query = "
INSERT INTO 
    storcli_controllers
(
    storcli_controller_host_uuid, 
    storcli_controller_uuid, 
    storcli_controller_serial_number, 
    storcli_controller_model, 
    storcli_controller_alarm_state, 
    storcli_controller_cache_size, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_alarm_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_cache_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			# Now record the query in the array
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;

			# Process the rest of the variables and temperatures now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}{$serial_number}{$type}})
				{
					my $value       = delete $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable};
					my $temperature = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "value",       value2 => $value,
						name3 => "temperature", value3 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					my $message_key       = "scan_storcli_note_0002";
					my $alert_level       = "notice";
					my $title_key         = "an_alert_title_0003";
					my $temperature_state = "ok";
					my $temperature_is    = "nominal";
					if ($type eq "temperature")
					{
						# This is a temperature, so see if the temperature outside of
						# the warning or critical thresholds. This is a new sensor, 
						# so nothing to compare against.
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($value > $high_critical)
						{
							# Crossed the high critical threshold. This should
							# always be unset because it is a new variable, but 
							# check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$serial_number,
								alert_name		=>	$variable."_high_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0022";
							}
						}
						elsif ($value > $high_warning)
						{
							# Crossed the high warning threshold. This should 
							# always be unset because it is a new variable, but 
							# check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$serial_number,
								alert_name		=>	$variable."_high_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0023";
							}
						}
						elsif ($value < $low_critical)
						{
							# Dropped below the low critical threshold. This 
							# should always be unset because it is a new 
							# variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$serial_number,
								alert_name		=>	$variable."_low_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								$alert_level = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_storcli_note_0024";
							}
						}
						elsif ($value < $low_warning)
						{
							# Dropped below the low warning threshold. This 
							# should always be unset because it is a new 
							# variable, but check anyway.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$serial_number,
								alert_name		=>	$variable."_low_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$alert_level = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_storcli_note_0025";
							}
						}
						
						# Record this for later processing into the 'temperature' table.
						my $sensor_host_key = "controller:$serial_number";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "sensor_host_key", value1 => $sensor_host_key,
						}, file => $THIS_FILE, line => __LINE__});
						
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $value;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
						$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
							name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
							name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					
					# Send an alert telling the user that we've found a new controller.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	$alert_level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	'FALSE',
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							serial_number		=>	$serial_number,
							name			=>	$variable,
							value			=>	$value,
							high_critical_temperature =>	$high_critical, 
							high_warning_temperature =>	$high_warning, 
							low_critical_temperature =>	$low_critical, 
							low_warning_temperature	=>	$low_warning, 
						},
					});
					
					# INSERT
					my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_controllers', 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		else
		{
			### NOTE: The serial number should never change (a changed SN/controller should be 
			###       picked up as a new controller), but we check/update just to be safe.
			# Look for changes.
			my $main_table_changed = 0;
			my $old_serial_number  = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_serial_number};
			my $old_model          = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_model};
			my $old_alarm_state    = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_alarm_state};
			my $old_cache_size     = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_cache_size};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0008", message_variables => {
				name1 => "serial_number",     value1 => $serial_number,
				name2 => "old_serial_number", value2 => $old_serial_number,
				name3 => "new_model",         value3 => $new_model,
				name4 => "old_model",         value4 => $old_model,
				name5 => "new_alarm_state",   value5 => $new_alarm_state,
				name6 => "old_alarm_state",   value6 => $old_alarm_state,
				name7 => "new_cache_size",    value7 => $new_cache_size,
				name8 => "old_cache_size",    value8 => $old_cache_size,
			}, file => $THIS_FILE, line => __LINE__});
			
			if (($serial_number   ne $old_serial_number) or 
			    ($new_model       ne $old_model)         or 
			    ($new_alarm_state ne $old_alarm_state)   or 
			    ($new_cache_size  ne $old_cache_size))
			{
				# Send a warning level alert because the most likely change is 'alarm_state'.
				# If, however, the alarm state is now 'off', then we'll clear the alert.
				my $title_key   = "an_alert_title_0004";
				my $message_key = "scan_storcli_warning_0002";
				if ($new_alarm_state ne $old_alarm_state)
				{
					if ($old_alarm_state eq "VANISHED")
					{
						# Controller has returned.
						$message_key = "scan_storcli_warning_0009";
					}
					if ($new_alarm_state =~ /off/i)
					{
						$title_key = "an_alert_title_0004";
					}
				}
				$an->data->{sys}{alert_sort}++; 
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	$an->data->{sys}{alert_sort},
					alert_header		=>	'FALSE',
					alert_title_key		=>	$title_key,
					alert_message_key	=>	$message_key,
					alert_message_variables	=>	{
						new_serial_number	=>	$serial_number,
						old_serial_number	=>	$old_serial_number,
						new_model		=>	$new_model,
						old_model		=>	$old_model,
						new_alarm_state		=>	$new_alarm_state,
						old_alarm_state		=>	$old_alarm_state,
						new_cache_size		=>	$new_cache_size,
						old_cache_size		=>	$old_cache_size,
					},
				});
				$main_table_changed = 1;
				
				my $query = "
UPDATE 
    storcli_controllers
SET 
    storcli_controller_serial_number = ".$an->data->{sys}{use_db_fh}->quote($serial_number).", 
    storcli_controller_model         = ".$an->data->{sys}{use_db_fh}->quote($new_model).", 
    storcli_controller_alarm_state   = ".$an->data->{sys}{use_db_fh}->quote($new_alarm_state).", 
    storcli_controller_cache_size    = ".$an->data->{sys}{use_db_fh}->quote($new_cache_size).", 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_controller_host_uuid     = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    storcli_controller_uuid          = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid)." 
;";

				# Now record the query in the array
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			### Process the rest of the variables now. 
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}{$serial_number}{$type}})
				{
					# Being in the 'variable' hash, 'is_temperature' is 'FALSE'.
					my $new_variable_value = delete $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable};
					my $temperature        = $type eq "temperature" ? "TRUE" : "FALSE";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "variable",    value1 => $variable,
						name2 => "temperature", value2 => $temperature,
					}, file => $THIS_FILE, line => __LINE__});
					if (exists $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable}{storcli_variable_uuid})
					{
						# Look for changes
						my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable}{storcli_variable_value};
						my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable}{storcli_variable_uuid};
						$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
							name1 => "new_variable_value", value1 => $new_variable_value,
							name2 => "old_variable_value", value2 => $old_variable_value,
							name3 => "variable_uuid",      value3 => $variable_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						# Delete it so that we know it has been processed.
						delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable};
						
						# If there is no change, I still want to record the 
						# temperature (where applicable). So I setup like I will send
						# an alert from the start, but will only actually send if 
						# something has changed.
						my $message_key       = "scan_storcli_warning_0003";
						my $alert_level       = "info";
						my $title_key         = "an_alert_title_0002";
						my $temperature_state = "ok";
						my $temperature_is    = "nominal";
						if ($type eq "temperature")
						{
							# It's a temperature, so change the default message.
							$message_key = "scan_storcli_note_0067";
							if (($new_variable_value ne $old_variable_value))
							{
								# If the temperature is rising, see if we 
								# need to set a high warning or critical, or,
								# clear a low warning or critical. Check for
								# the reverse if the temperature is dropping.
								if ($old_variable_value eq "VANISHED")
								{
									### NOTE: We don't (yet) check to see
									###       if the drive is overheating
									###       or freezing here. That 
									###       would require new logic and
									###       is unlikely to be needed.
									# Temperature is back.
									$message_key = "scan_storcli_warning_0006";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "message_key", value1 => $message_key, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($old_variable_value > $new_variable_value)
								{
									# Rising
									my $jumped = ($new_variable_value - $old_variable_value);
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value > $high_critical)
									{
										# Crossed the critical 
										# threshold. See if this is 
										# the first time.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",	# This is not the alert level, 'warning' == trouble, 'clear' == ok now.
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0026";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "critical";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $high_warning)
									{
										# Crossed the warning 
										# threshold.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0027";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value > $clear_low_warning)
									{
										# Risen into the clear, make 
										# sure both warning and 
										# critical are cleared.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0028";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0028";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
									}
									elsif ($new_variable_value > $clear_low_critical)
									{
										# Risen above critical, but 
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$serial_number,
												alert_name		=>	$variable."_low_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0029";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature jumped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0030";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level, 
											name2 => "title_key",   value2 => $title_key, 
											name3 => "message_key", value3 => $message_key, 
										}, file => $THIS_FILE, line => __LINE__});
									}
								}
								else
								{
									# Falling
									my $jumped = $old_variable_value - $new_variable_value;
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "jumped", value1 => $jumped, 
									}, file => $THIS_FILE, line => __LINE__});
									if ($new_variable_value < $low_critical)
									{
										# Dropped below the critical 
										# threshold. This should 
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_low_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "critical";
											$title_key   = "an_alert_title_0005";
											$message_key = "scan_storcli_note_0031";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "critical";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $low_warning)
									{
										# Crossed the warning 
										# threshold. This should
										# always be unset because it
										# is a new variable, but 
										# check anyway.
										my $set = $an->Alert->check_alert_sent({
											type			=>	"warning",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_low_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "set", value1 => $set, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($set)
										{
											# This is the first 
											# time we rose above 
											# the critical 
											# threshold.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0004";
											$message_key = "scan_storcli_note_0032";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "warning";
										$temperature_is    = "low";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($new_variable_value < $clear_high_warning)
									{
										# Dropped into the clear
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										my $cleared_warning = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_high_warning",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
											name2 => "cleared_warning",  value2 => $cleared_warning, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											$alert_level = "warning";
											$title_key   = "an_alert_title_0007";
											$message_key = "scan_storcli_note_0033";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										elsif ($cleared_warning)
										{
											# The temperature has
											# dropped back down 
											# to safe levels.
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0033";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
									}
									elsif ($new_variable_value < $clear_high_critical)
									{
										# Dropped below critical, but
										# not in the clear.
										my $cleared_critical = $an->Alert->check_alert_sent({
											type			=>	"clear",
											alert_sent_by		=>	$THIS_FILE,
											alert_record_locator	=>	$serial_number,
											alert_name		=>	$variable."_high_critical",
											modified_date		=>	$an->data->{sys}{db_timestamp},
										});
										$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
											name1 => "cleared_critical", value1 => $cleared_critical, 
										}, file => $THIS_FILE, line => __LINE__});
										if ($cleared_critical)
										{
											# Set the warning.
											my $set = $an->Alert->check_alert_sent({
												type			=>	"warning",
												alert_sent_by		=>	$THIS_FILE,
												alert_record_locator	=>	$serial_number,
												alert_name		=>	$variable."_high_warning",
												modified_date		=>	$an->data->{sys}{db_timestamp},
											});
											$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
												name1 => "set", value1 => $set, 
											}, file => $THIS_FILE, line => __LINE__});
											
											$alert_level = "warning";
											$title_key   = "an_alert_title_0006";
											$message_key = "scan_storcli_note_0034";
											$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
												name1 => "alert_level", value1 => $alert_level, 
												name2 => "title_key",   value2 => $title_key, 
												name3 => "message_key", value3 => $message_key, 
											}, file => $THIS_FILE, line => __LINE__});
										}
										$temperature_state = "warning";
										$temperature_is    = "high";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
											name1 => "temperature_state", value1 => $temperature_state, 
											name2 => "temperature_is",    value2 => $temperature_is, 
										}, file => $THIS_FILE, line => __LINE__});
									}
									elsif ($jumped > $jump)
									{
										# The temperature dropped a 
										# large amount.
										$alert_level = "warning";
										$title_key   = "an_alert_title_0004";
										$message_key = "scan_storcli_note_0035";
										$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
											name1 => "alert_level", value1 => $alert_level, 
											name2 => "title_key",   value2 => $title_key, 
											name3 => "message_key", value3 => $message_key, 
										}, file => $THIS_FILE, line => __LINE__});
									}
								}
							}
							
							# Record this for later processing into the 
							# 'temperature' table.
							my $sensor_host_key = "controller:$serial_number";
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "sensor_host_key", value1 => $sensor_host_key,
							}, file => $THIS_FILE, line => __LINE__});
							
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_variable_value;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = $temperature_state;
							$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = $temperature_is;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
								name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
								name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
								name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						
						### TODO: Check to see if the new state of certain key 
						###       variables are worthy of setting a health weight. 
						###       We can't check just on changes.
						
						# Now actually generate an alert and save the changes if something 
						# changed. 
						if (($new_variable_value ne $old_variable_value))
						{
							# Changed! If the old value was 'VANISHED', then a 
							# sensor or variable returned. Otherwise, for now, we
							# treat everything as 'warning' and step down 
							# explicitely anything not of concern that proves 
							# noisey later (better safe than sorry).
							$an->data->{sys}{alert_sort}++; 
							
							# The 'Safe ID' seems to change frequently, so we 
							# drop this to an 'info' level alert.
							if ($variable eq "safe_id")
							{
								$alert_level = "info";
								$title_key   = "an_alert_title_0002";
								$message_key = "scan_storcli_note_0070";
							}
							
							# If it is a temperature, we may want to make some 
							# changes to the alert level/message.
							if ($type ne "temperature")
							{
								if ($old_variable_value eq "VANISHED")
								{
									$message_key = "scan_storcli_warning_0006";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
										name1 => "message_key", value1 => $message_key, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								
								# Check for some important issues
								if ($variable =~ /memory_correctable_errors/)
								{
									$alert_level = "warning";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_warning_0046";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
										name1 => "alert_level", value1 => $alert_level, 
										name2 => "title_key",   value2 => $title_key, 
										name3 => "message_key", value3 => $message_key, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($variable =~ /memory_uncorrectable_errors/)
								{
									$alert_level = "critical";
									$title_key   = "an_alert_title_0005";
									$message_key = "scan_storcli_warning_0047";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
										name1 => "alert_level", value1 => $alert_level, 
										name2 => "title_key",   value2 => $title_key, 
										name3 => "message_key", value3 => $message_key, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								elsif ($variable =~ /controller_status/)
								{
									$alert_level = "critical";
									$title_key   = "an_alert_title_0004";
									$message_key = "scan_storcli_warning_0048";
									$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
										name1 => "alert_level", value1 => $alert_level, 
										name2 => "title_key",   value2 => $title_key, 
										name3 => "message_key", value3 => $message_key, 
									}, file => $THIS_FILE, line => __LINE__});
								}
								# There more of interest... See: SELECT a.host_name, b.storcli_controller_serial_number AS sn, b.storcli_controller_model, c.storcli_variable_name AS variable, c.storcli_variable_value AS value, c.storcli_variable_is_temperature AS temp, c.modified_date FROM hosts a, storcli_controllers b, storcli_variables c WHERE a.host_uuid = b.storcli_controller_host_uuid AND b.storcli_controller_uuid = c.storcli_variable_source_uuid AND a.host_name = 'an-a07n01.alteeve.com';
							}
							
							$an->Alert->register_alert({
								alert_level		=>	$alert_level, 
								alert_agent_name	=>	$THIS_FILE,
								alert_sort		=>	$an->data->{sys}{alert_sort},
								alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
								alert_title_key		=>	$title_key,
								alert_message_key	=>	$message_key,
								alert_message_variables	=>	{
									serial_number		=>	$serial_number,
									name			=>	$variable,
									old_value		=>	$old_variable_value ? $old_variable_value : "--",
									new_value		=>	$new_variable_value,
									high_critical_temperature =>	$high_critical, 
									high_warning_temperature =>	$high_warning, 
									low_critical_temperature =>	$low_critical, 
									low_warning_temperature	=>	$low_warning, 
									jump			=>	$jump,
								},
							});
							
							my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{sys}{sql}}, $query;
						}
					}
					else
					{
						# New variable, record it. This is a 'warning' level as 
						# variables aren't expected to spawn into existence.
						$an->data->{sys}{alert_sort}++; 
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_sort		=>	$an->data->{sys}{alert_sort},
							alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
							alert_title_key		=>	"an_alert_title_0003",
							alert_message_key	=>	"scan_storcli_warning_0004",
							alert_message_variables	=>	{
								serial_number		=>	$serial_number,
								name			=>	$variable,
								value			=>	$new_variable_value,
							},
						});
						
						# INSERT
						my $query = "
INSERT INTO 
    storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    'storcli_controllers', 
    ".$an->data->{sys}{use_db_fh}->quote($controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "query", value1 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{sys}{sql}}, $query;
					}
				}
			}
			
			# Now look for any variables left from the previous scan that we didn't match up (and
			# delete) this pass.
			foreach my $type ("variable", "temperature")
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "type", value1 => $type,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}})
				{
					# This variable has vanished
					my $old_variable_value = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable}{storcli_variable_value};
					my $variable_uuid      = $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable}{storcli_variable_uuid};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "old_variable_value", value1 => $old_variable_value,
						name2 => "variable_uuid",      value2 => $variable_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Delete it so that we know it has been processed.
					delete $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{'storcli_controllers'}{source_uuid}{$controller_uuid}{$type}{$variable};
					
					# If the old value is already 'VANISHED', ignore it.
					next if $old_variable_value eq "VANISHED";
					
					### NOTE: For now, we're going to use warning level because variables
					###       shouldn't vanish, but under an-cm, it did happen for 
					###       reasons that we never figured out. So later, we may drop 
					###       the alert level in some cases.
					# Still here? Alert and UPDATE.
					$an->data->{sys}{alert_sort}++; 
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_sort		=>	$an->data->{sys}{alert_sort},
						alert_header		=>	$main_table_changed ? "FALSE" : "TRUE",
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_storcli_warning_0007",
						alert_message_variables	=>	{
							serial_number		=>	$serial_number,
							name			=>	$variable,
						},
					});
					
					my $query = "
UPDATE 
    storcli_variables 
SET 
    storcli_variable_value = 'VANISHED', 
    modified_date          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_variable_uuid  = ".$an->data->{sys}{use_db_fh}->quote($variable_uuid)."
;";
					# Now record the query in the array
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
					push @{$an->data->{sys}{sql}}, $query;
				}
			}
		}
		
		# Delete the controller from the last scan so that we can find controllers that have been 
		# removed.
		if (exists $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid})
		{
			delete $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid};
		}
	}
	
	# See if any controllers vanished.
	foreach my $controller_uuid (keys %{$an->data->{sql}{storcli_controllers}{storcli_controller_uuid}})
	{
		# Controller vanished!
		my $old_serial_number = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_serial_number};
		my $old_model         = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_model};
		my $old_alarm_state   = $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid}{storcli_controller_alarm_state};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
		 	name1 => "controller_uuid",   value1 => $controller_uuid,
			name2 => "old_serial_number", value2 => $old_serial_number,
			name3 => "old_model",         value3 => $old_model,
			name4 => "old_alarm_state",   value4 => $old_alarm_state,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Delete it so that we know it has been processed.
		delete $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$controller_uuid};
		
		# If the old alarm state is already 'VANISHED', ignore it.
		next if $old_alarm_state eq "VANISHED";
		
		# Still here? Alert and UPDATE.
		### NOTE: For now, we're going to use warning level because controllers should never vanish
		###       unless one failed. If that is the case, the admin already knows, but this will let
		###       other notification targets know that the change has happened.
		$an->data->{sys}{alert_sort}++; 
		$an->Alert->register_alert({
			alert_level		=>	"warning", 
			alert_agent_name	=>	$THIS_FILE,
			alert_sort		=>	$an->data->{sys}{alert_sort},
			alert_header		=>	"TRUE",
			alert_title_key		=>	"an_alert_title_0004",
			alert_message_key	=>	"scan_storcli_warning_0008",
			alert_message_variables	=>	{
				model			=>	$old_model,
				serial_number		=>	$old_serial_number,
			},
		});
		
		my $query = "
UPDATE 
    storcli_controllers
SET 
    storcli_controller_alarm_state   = 'VANISHED', 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    storcli_controller_host_uuid     = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    storcli_controller_uuid          = ".$an->data->{sys}{use_db_fh}->quote($controller_uuid)." 
;";
		# Now record the query in the array
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# In some weird (and so far unreproducable) case, a controller will get recorded twice. If this happens, the 
# system will think it keeps finding and losing controllers. So this check purges duplicates.
sub clear_duplicate_controllers
{
	my ($an) = @_;
	
	# Get a list of controllers on this host and count them by their serial numbers.
	my $query = "SELECT storcli_controller_uuid, storcli_controller_serial_number, storcli_controller_alarm_state FROM storcli_controllers WHERE storcli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).";";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1  => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	my $count   = @{$results};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "results", value1 => $results, 
		name2 => "count",   value2 => $count,
	}, file => $THIS_FILE, line => __LINE__});
	if ($count > 1)
	{
		### NOTE: This works a little differently from originally intended, but it actually works 
		###       better. This should track 'uuid::serial_number' as the UUIDs are unique, the serial
		###       numbers aren't. As it is now, only the first seen UUID is deleted. In most cases, 
		###       there are only two entries, so this deletes one and leaves the other, so everything
		###       isn't discovered again new. When we re-do this for M3, swap the logic but skip the
		###       most recently updated one.
		# We'll loop through and track controllers by their serial numbers. If any controller serial 
		# number is seen 2 or more times, it will be purged and re-added on the next scan.
		my $duplicate_controllers = {};
		foreach my $row (@{$results})
		{
			my $storcli_controller_uuid          = $row->[0]; 
			my $storcli_controller_serial_number = $row->[1]; 
			my $storcli_controller_alarm_state   = $row->[2]; 
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "storcli_controller_uuid",          value1 => $storcli_controller_uuid, 
				name2 => "storcli_controller_serial_number", value2 => $storcli_controller_serial_number, 
				name3 => "storcli_controller_alarm_state",   value3 => $storcli_controller_alarm_state, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Add this to the controllers we know about
			if (not exists $duplicate_controllers->{$storcli_controller_serial_number})
			{
				$duplicate_controllers->{$storcli_controller_serial_number}{count}           = 1;
				$duplicate_controllers->{$storcli_controller_serial_number}{controller_uuid} = $storcli_controller_uuid;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "duplicate_controllers->${storcli_controller_serial_number}::count",           value1 => $duplicate_controllers->{$storcli_controller_serial_number}{count}, 
					name2 => "duplicate_controllers->${storcli_controller_serial_number}::controller_uuid", value2 => $duplicate_controllers->{$storcli_controller_serial_number}{controller_uuid}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				$duplicate_controllers->{$storcli_controller_serial_number}{count}++;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "duplicate_controllers->${storcli_controller_serial_number}", value1 => $duplicate_controllers->{$storcli_controller_serial_number}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		foreach my $storcli_controller_serial_number (sort {$a cmp $b} keys %{$duplicate_controllers})
		{
			my $count                   = $duplicate_controllers->{$storcli_controller_serial_number}{count};
			my $storcli_controller_uuid = $duplicate_controllers->{$storcli_controller_serial_number}{controller_uuid}; 
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "storcli_controller_serial_number", value1 => $storcli_controller_serial_number, 
				name2 => "count",                            value2 => $count, 
				name3 => "storcli_controller_uuid",          value3 => $storcli_controller_uuid, 
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($count > 1)
			{
				# Duplicate. Send an alert and then purge.
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_sort		=>	1,
					alert_header		=>	'TRUE',
					alert_title_key		=>	"an_alert_title_0003",,
					alert_message_key	=>	"scan_storcli_warning_0052",
					alert_message_variables	=>	{
						serial_number		=>	$storcli_controller_serial_number,
						count			=>	$count,
					},
				});
				
				# We'll commit this batch of queries per controller
				my $queries = [];
				
				# Delete all physical drives
				my $query = "SELECT storcli_physical_drive_uuid FROM storcli_physical_drives WHERE storcli_physical_drive_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
				my $count   = @{$results};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "results", value1 => $results, 
					name2 => "count",   value2 => $count,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $row (@{$results})
				{
					my $storcli_physical_drive_uuid = $row->[0]; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "storcli_physical_drive_uuid", value1 => $storcli_physical_drive_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_physical_drives' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).";";
					push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_physical_drives' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).";";
					
					push @{$queries}, "DELETE FROM history.storcli_physical_drives WHERE storcli_physical_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).";";
					push @{$queries}, "DELETE FROM storcli_physical_drives         WHERE storcli_physical_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).";";
				}
				
				# The storcli_drive_groups are linked to the virtual drives, so we need to 
				# pull up all the VDs on this controller and use their UUIDs to delete 
				# down-stream DGs
				$query = "SELECT storcli_virtual_drive_uuid FROM storcli_virtual_drives WHERE storcli_virtual_drive_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
				$count   = @{$results};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "results", value1 => $results, 
					name2 => "count",   value2 => $count,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $row (@{$results})
				{
					my $storcli_virtual_drive_uuid = $row->[0]; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "storcli_virtual_drive_uuid", value1 => $storcli_virtual_drive_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Select the DGs under this VD.
					my $query = "SELECT storcli_drive_group_uuid FROM storcli_drive_groups WHERE storcli_drive_group_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
					my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
					my $count   = @{$results};
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "results", value1 => $results, 
						name2 => "count",   value2 => $count,
					}, file => $THIS_FILE, line => __LINE__});
					foreach my $row (@{$results})
					{
						my $storcli_drive_group_uuid = $row->[0]; 
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1 => "storcli_drive_group_uuid", value1 => $storcli_drive_group_uuid,
						}, file => $THIS_FILE, line => __LINE__});
						
						push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_drive_groups' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).";";
						push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_drive_groups' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).";";
						
						push @{$queries}, "DELETE FROM history.storcli_drive_groups WHERE storcli_drive_group_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).";";
						push @{$queries}, "DELETE FROM storcli_drive_groups         WHERE storcli_drive_group_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).";";
					}
					
					push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_virtual_drives' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
					push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_virtual_drives' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
					
					push @{$queries}, "DELETE FROM history.storcli_virtual_drives WHERE storcli_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
					push @{$queries}, "DELETE FROM storcli_virtual_drives         WHERE storcli_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
				}
				
				# Delete all cachevaults (FBUs)
				$query = "SELECT storcli_cachevault_uuid FROM storcli_cachevaults WHERE storcli_cachevault_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
				$count   = @{$results};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "results", value1 => $results, 
					name2 => "count",   value2 => $count,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $row (@{$results})
				{
					my $storcli_cachevault_uuid = $row->[0]; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "storcli_cachevault_uuid", value1 => $storcli_cachevault_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_cachevaults' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).";";
					push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_cachevaults' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).";";
					
					push @{$queries}, "DELETE FROM history.storcli_cachevaults WHERE storcli_cachevault_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).";";
					push @{$queries}, "DELETE FROM storcli_cachevaults         WHERE storcli_cachevault_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).";";
				}
				
				# Delete all BBUs
				$query = "SELECT storcli_bbu_uuid FROM storcli_bbus WHERE storcli_bbu_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
				$count   = @{$results};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "results", value1 => $results, 
					name2 => "count",   value2 => $count,
				}, file => $THIS_FILE, line => __LINE__});
				foreach my $row (@{$results})
				{
					my $storcli_bbu_uuid = $row->[0]; 
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "storcli_bbu_uuid", value1 => $storcli_bbu_uuid,
					}, file => $THIS_FILE, line => __LINE__});
					
					push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_bbus' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).";";
					push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_bbus' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).";";
					
					push @{$queries}, "DELETE FROM history.storcli_bbus WHERE storcli_bbu_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).";";
					push @{$queries}, "DELETE FROM storcli_bbus         WHERE storcli_bbu_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).";";
				}
				
				# Finally, delete the controller.
				push @{$queries}, "DELETE FROM history.storcli_variables WHERE storcli_variable_source_table = 'storcli_controllers' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				push @{$queries}, "DELETE FROM storcli_variables         WHERE storcli_variable_source_table = 'storcli_controllers' AND storcli_variable_source_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				
				push @{$queries}, "DELETE FROM history.storcli_controllers WHERE storcli_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				push @{$queries}, "DELETE FROM storcli_controllers         WHERE storcli_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
				
				# Commit. Because it's an array, it'll be done as a single transaction
				foreach my $query (@{$queries})
				{
					$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query,
					}, file => $THIS_FILE, line => __LINE__});
				}
				$an->DB->do_db_write({query => $queries, source => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	return(0);
}

# This reads in the last scan's data.
sub read_last_scan
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "read_last_scan" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	clear_duplicate_controllers($an);
	
	# Read in the controller(s)
	my $query = "
SELECT 
    storcli_controller_uuid, 
    storcli_controller_serial_number, 
    storcli_controller_model, 
    storcli_controller_alarm_state, 
    storcli_controller_cache_size 
FROM 
    storcli_controllers 
WHERE 
    storcli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).";";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_controller_uuid          = $row->[0]; 
		my $storcli_controller_serial_number = $row->[1]; 
		my $storcli_controller_model         = $row->[2]; 
		my $storcli_controller_alarm_state   = $row->[3]; 
		my $storcli_controller_cache_size    = $row->[4]; 
		$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
			name1 => "storcli_controller_uuid",          value1 => $storcli_controller_uuid, 
			name2 => "storcli_controller_serial_number", value2 => $storcli_controller_serial_number, 
			name3 => "storcli_controller_model",         value3 => $storcli_controller_model, 
			name4 => "storcli_controller_alarm_state",   value4 => $storcli_controller_alarm_state, 
			name5 => "storcli_controller_cache_size",    value5 => $storcli_controller_cache_size, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this controllers
		$an->data->{'scan-storcli'}{controllers}{by_serial}{$storcli_controller_serial_number} = $storcli_controller_uuid;
		$an->data->{'scan-storcli'}{controllers}{by_uuid}{$storcli_controller_uuid}            = $storcli_controller_serial_number;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::controllers::by_serial::${storcli_controller_serial_number}", value1 => $an->data->{'scan-storcli'}{controllers}{by_serial}{$storcli_controller_serial_number}, 
			name2 => "scan-storcli::controllers::by_uuid::${storcli_controller_uuid}",            value2 => $an->data->{'scan-storcli'}{controllers}{by_uuid}{$storcli_controller_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid} = {
			storcli_controller_serial_number	=>	$storcli_controller_serial_number, 
			storcli_controller_model		=>	$storcli_controller_model, 
			storcli_controller_alarm_state		=>	$storcli_controller_alarm_state, 
			storcli_controller_cache_size		=>	$storcli_controller_cache_size, 
		};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "scan-storcli::controllers::by_serial::$storcli_controller_serial_number",                                         value1 => $an->data->{'scan-storcli'}{controllers}{by_serial}{$storcli_controller_serial_number}, 
			name2 => "scan-storcli::controllers::by_uuid::$storcli_controller_uuid",                                                    value2 => $an->data->{'scan-storcli'}{controllers}{by_uuid}{$storcli_controller_uuid}, 
			name3 => "sql::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::storcli_controller_serial_number", value3 => $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_serial_number}, 
			name4 => "sql::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::storcli_controller_model",         value4 => $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_model}, 
			name5 => "sql::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::storcli_controller_alarm_state",   value5 => $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_alarm_state}, 
			name6 => "sql::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::storcli_controller_cache_size",    value6 => $an->data->{sql}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_cache_size}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# Now load the cachevault data
	$query = "
SELECT 
    storcli_cachevault_uuid, 
    storcli_cachevault_controller_uuid, 
    storcli_cachevault_serial_number, 
    storcli_cachevault_state, 
    storcli_cachevault_design_capacity, 
    storcli_cachevault_replacement_needed, 
    storcli_cachevault_type, 
    storcli_cachevault_model, 
    storcli_cachevault_manufacture_date 
FROM 
    storcli_cachevaults
WHERE
    storcli_cachevault_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_cachevault_uuid               =         $row->[0]; 
		my $storcli_cachevault_controller_uuid    =         $row->[1];
		my $storcli_cachevault_serial_number      =         $row->[2];
		my $storcli_cachevault_state              = defined $row->[3] ? $row->[3] : "";
		my $storcli_cachevault_design_capacity    = defined $row->[4] ? $row->[4] : "";
		my $storcli_cachevault_replacement_needed = defined $row->[5] ? $row->[5] : "";
		my $storcli_cachevault_type               = defined $row->[6] ? $row->[6] : "";
		my $storcli_cachevault_model              = defined $row->[7] ? $row->[7] : "";
		my $storcli_cachevault_manufacture_date   = defined $row->[8] ? $row->[8] : "";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
			name1 => "storcli_cachevault_uuid",               value1 => $storcli_cachevault_uuid, 
			name2 => "storcli_cachevault_controller_uuid",    value2 => $storcli_cachevault_controller_uuid, 
			name3 => "storcli_cachevault_serial_number",      value3 => $storcli_cachevault_serial_number, 
			name4 => "storcli_cachevault_state",              value4 => $storcli_cachevault_state, 
			name5 => "storcli_cachevault_design_capacity",    value5 => $storcli_cachevault_design_capacity, 
			name6 => "storcli_cachevault_replacement_needed", value6 => $storcli_cachevault_replacement_needed, 
			name7 => "storcli_cachevault_type",               value7 => $storcli_cachevault_type, 
			name8 => "storcli_cachevault_model",              value8 => $storcli_cachevault_model, 
			name9 => "storcli_cachevault_manufacture_date",   value9 => $storcli_cachevault_manufacture_date, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this cachevault
		$an->data->{'scan-storcli'}{cachevaults}{by_serial}{$storcli_cachevault_serial_number} = $storcli_cachevault_uuid;
		$an->data->{'scan-storcli'}{cachevaults}{by_uuid}{$storcli_cachevault_uuid}            = $storcli_cachevault_serial_number;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::cachevaults::by_serial::${storcli_cachevault_serial_number}", value1 => $an->data->{'scan-storcli'}{cachevaults}{by_serial}{$storcli_cachevault_serial_number}, 
			name2 => "scan-storcli::cachevaults::by_uuid::${storcli_cachevault_uuid}",            value2 => $an->data->{'scan-storcli'}{cachevaults}{by_uuid}{$storcli_cachevault_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid} = {
			storcli_cachevault_controller_uuid	=>	$storcli_cachevault_controller_uuid, 
			storcli_cachevault_serial_number	=>	$storcli_cachevault_serial_number, 
			storcli_cachevault_state		=>	$storcli_cachevault_state, 
			storcli_cachevault_design_capacity	=>	$storcli_cachevault_design_capacity, 
			storcli_cachevault_replacement_needed	=>	$storcli_cachevault_replacement_needed, 
			storcli_cachevault_type			=>	$storcli_cachevault_type, 
			storcli_cachevault_model		=>	$storcli_cachevault_model, 
			storcli_cachevault_manufacture_date	=>	$storcli_cachevault_manufacture_date, 
		};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0008", message_variables => {
			name1 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_controller_uuid",    value1 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_controller_uuid}, 
			name2 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_serial_number",      value2 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_serial_number}, 
			name3 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_state",              value3 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_state}, 
			name4 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_design_capacity",    value4 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_design_capacity}, 
			name5 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_replacement_needed", value5 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_replacement_needed}, 
			name6 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_type",               value6 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_type}, 
			name7 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_model",              value7 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_model}, 
			name8 => "sql::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::storcli_cachevault_manufacture_date",   value8 => $an->data->{sql}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_manufacture_date}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# The BBU data...
	$query = "
SELECT 
    storcli_bbu_uuid, 
    storcli_bbu_controller_uuid, 
    storcli_bbu_serial_number, 
    storcli_bbu_type, 
    storcli_bbu_model, 
    storcli_bbu_state, 
    storcli_bbu_manufacture_date, 
    storcli_bbu_design_capacity, 
    storcli_bbu_replacement_needed 
FROM 
    storcli_bbus
WHERE
    storcli_bbu_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_bbu_uuid               =         $row->[0]; 
		my $storcli_bbu_controller_uuid    =         $row->[1];
		my $storcli_bbu_serial_number      =         $row->[2];
		my $storcli_bbu_type               = defined $row->[3] ? $row->[3] : "";
		my $storcli_bbu_model              = defined $row->[4] ? $row->[4] : "";
		my $storcli_bbu_state              = defined $row->[5] ? $row->[5] : "";
		my $storcli_bbu_manufacture_date   = defined $row->[6] ? $row->[6] : "";
		my $storcli_bbu_design_capacity    = defined $row->[7] ? $row->[7] : "";
		my $storcli_bbu_replacement_needed = defined $row->[8] ? $row->[8] : "";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
			name1 => "storcli_bbu_uuid",               value1 => $storcli_bbu_uuid, 
			name2 => "storcli_bbu_controller_uuid",    value2 => $storcli_bbu_controller_uuid, 
			name3 => "storcli_bbu_serial_number",      value3 => $storcli_bbu_serial_number, 
			name4 => "storcli_bbu_type",               value4 => $storcli_bbu_type, 
			name5 => "storcli_bbu_model",              value5 => $storcli_bbu_model, 
			name6 => "storcli_bbu_state",              value6 => $storcli_bbu_state, 
			name7 => "storcli_bbu_manufacture_date",   value7 => $storcli_bbu_manufacture_date, 
			name8 => "storcli_bbu_design_capacity",    value8 => $storcli_bbu_design_capacity, 
			name9 => "storcli_bbu_replacement_needed", value9 => $storcli_bbu_replacement_needed, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this BBU
		$an->data->{'scan-storcli'}{bbus}{by_serial}{$storcli_bbu_serial_number} = $storcli_bbu_uuid;
		$an->data->{'scan-storcli'}{bbus}{by_uuid}{$storcli_bbu_uuid}            = $storcli_bbu_serial_number;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::bbus::by_serial::${storcli_bbu_serial_number}", value1 => $an->data->{'scan-storcli'}{bbus}{by_serial}{$storcli_bbu_serial_number}, 
			name2 => "scan-storcli::bbus::by_uuid::${storcli_bbu_uuid}",            value2 => $an->data->{'scan-storcli'}{bbus}{by_uuid}{$storcli_bbu_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid} = {
			storcli_bbu_controller_uuid	=>	$storcli_bbu_controller_uuid, 
			storcli_bbu_serial_number	=>	$storcli_bbu_serial_number,
			storcli_bbu_type		=>	$storcli_bbu_type, 
			storcli_bbu_model		=>	$storcli_bbu_model, 
			storcli_bbu_state		=>	$storcli_bbu_state, 
			storcli_bbu_manufacture_date	=>	$storcli_bbu_manufacture_date, 
			storcli_bbu_design_capacity	=>	$storcli_bbu_design_capacity, 
			storcli_bbu_replacement_needed	=>	$storcli_bbu_replacement_needed, 
		};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0008", message_variables => {
			name1 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_controller_uuid",    value1 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_controller_uuid}, 
			name2 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_serial_number",      value2 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_serial_number}, 
			name3 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_type",               value3 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_type}, 
			name4 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_model",              value4 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_model}, 
			name5 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_state",              value5 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_state}, 
			name6 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_manufacture_date",   value6 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_manufacture_date}, 
			name7 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_design_capacity",    value7 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_design_capacity}, 
			name8 => "sql::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::storcli_bbu_replacement_needed", value8 => $an->data->{sql}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_replacement_needed}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# The virtual drives data...
	$query = "
SELECT 
    storcli_virtual_drive_uuid, 
    storcli_virtual_drive_controller_uuid, 
    storcli_virtual_drive_id_string, 
    storcli_virtual_drive_creation_date, 
    storcli_virtual_drive_data_protection, 
    storcli_virtual_drive_disk_cache_policy, 
    storcli_virtual_drive_emulation_type, 
    storcli_virtual_drive_encryption, 
    storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size, 
    storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id 
FROM 
    storcli_virtual_drives
WHERE
    storcli_virtual_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_virtual_drive_uuid              =         $row->[0]; 
		my $storcli_virtual_drive_controller_uuid   =         $row->[1];
		my $storcli_virtual_drive_id_string         =         $row->[2];
		my $storcli_virtual_drive_creation_date     = defined $row->[3]  ? $row->[3]  : "";
		my $storcli_virtual_drive_data_protection   = defined $row->[4]  ? $row->[4]  : "";
		my $storcli_virtual_drive_disk_cache_policy = defined $row->[5]  ? $row->[5]  : "";
		my $storcli_virtual_drive_emulation_type    = defined $row->[6]  ? $row->[6]  : "";
		my $storcli_virtual_drive_encryption        = defined $row->[7]  ? $row->[7]  : "";
		my $storcli_virtual_drive_blocks            = defined $row->[8]  ? $row->[8]  : "";
		my $storcli_virtual_drive_strip_size        = defined $row->[9]  ? $row->[9]  : "";
		my $storcli_virtual_drive_drives_per_span   = defined $row->[10] ? $row->[10] : "";
		my $storcli_virtual_drive_span_depth        = defined $row->[11] ? $row->[11] : "";
		my $storcli_virtual_drive_scsi_naa_id       = defined $row->[12] ? $row->[12] : "";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0013", message_variables => {
			name1  => "storcli_virtual_drive_uuid",              value1  => $storcli_virtual_drive_uuid, 
			name2  => "storcli_virtual_drive_controller_uuid",   value2  => $storcli_virtual_drive_controller_uuid, 
			name3  => "storcli_virtual_drive_id_string",         value3  => $storcli_virtual_drive_id_string, 
			name4  => "storcli_virtual_drive_creation_date",     value4  => $storcli_virtual_drive_creation_date, 
			name5  => "storcli_virtual_drive_data_protection",   value5  => $storcli_virtual_drive_data_protection, 
			name6  => "storcli_virtual_drive_disk_cache_policy", value6  => $storcli_virtual_drive_disk_cache_policy, 
			name7  => "storcli_virtual_drive_emulation_type",    value7  => $storcli_virtual_drive_emulation_type, 
			name8  => "storcli_virtual_drive_encryption",        value8  => $storcli_virtual_drive_encryption, 
			name9  => "storcli_virtual_drive_blocks",            value9  => $storcli_virtual_drive_blocks, 
			name10 => "storcli_virtual_drive_strip_size",        value10 => $storcli_virtual_drive_strip_size, 
			name11 => "storcli_virtual_drive_drives_per_span",   value11 => $storcli_virtual_drive_drives_per_span, 
			name12 => "storcli_virtual_drive_span_depth",        value12 => $storcli_virtual_drive_span_depth, 
			name13 => "storcli_virtual_drive_scsi_naa_id",       value13 => $storcli_virtual_drive_scsi_naa_id, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this virtual drive.
		$an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string} = $storcli_virtual_drive_uuid;
		$an->data->{'scan-storcli'}{virtual_drives}{by_uuid}{$storcli_virtual_drive_uuid}           = $storcli_virtual_drive_id_string;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::virtual_drives::by_id_string::${storcli_virtual_drive_id_string}", value1 => $an->data->{'scan-storcli'}{virtual_drives}{by_id_string}{$storcli_virtual_drive_id_string}, 
			name2 => "scan-storcli::virtual_drives::by_uuid::${storcli_virtual_drive_uuid}",           value2 => $an->data->{'scan-storcli'}{virtual_drives}{by_uuid}{$storcli_virtual_drive_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the drive group data. (Drive groups have no SN)
		$an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid} = {
			storcli_virtual_drive_controller_uuid	=>	$storcli_virtual_drive_controller_uuid, 
			storcli_virtual_drive_id_string		=>	$storcli_virtual_drive_id_string, 
			storcli_virtual_drive_creation_date	=>	$storcli_virtual_drive_creation_date, 
			storcli_virtual_drive_data_protection	=>	$storcli_virtual_drive_data_protection, 
			storcli_virtual_drive_disk_cache_policy	=>	$storcli_virtual_drive_disk_cache_policy, 
			storcli_virtual_drive_emulation_type	=>	$storcli_virtual_drive_emulation_type, 
			storcli_virtual_drive_encryption	=>	$storcli_virtual_drive_encryption, 
			storcli_virtual_drive_blocks		=>	$storcli_virtual_drive_blocks, 
			storcli_virtual_drive_strip_size	=>	$storcli_virtual_drive_strip_size, 
			storcli_virtual_drive_drives_per_span	=>	$storcli_virtual_drive_drives_per_span, 
			storcli_virtual_drive_span_depth	=>	$storcli_virtual_drive_span_depth, 
			storcli_virtual_drive_scsi_naa_id	=>	$storcli_virtual_drive_scsi_naa_id, 
		};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0012", message_variables => {
			name1  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_controller_uuid",   value1  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_controller_uuid}, 
			name2  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_id_string",         value2  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_id_string}, 
			name3  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_creation_date",     value3  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_creation_date}, 
			name4  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_data_protection",   value4  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_data_protection}, 
			name5  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_disk_cache_policy", value5  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_disk_cache_policy}, 
			name6  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_emulation_type",    value6  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_emulation_type}, 
			name7  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_encryption",        value7  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_encryption}, 
			name8  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_blocks",            value8  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_blocks}, 
			name9  => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_strip_size",        value9  => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_strip_size}, 
			name10 => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_drives_per_span",   value10 => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_drives_per_span}, 
			name11 => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_span_depth",        value11 => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_span_depth}, 
			name12 => "sql::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::storcli_virtual_drive_scsi_naa_id",       value12 => $an->data->{sql}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_scsi_naa_id}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# The drive group data...
	$query = "
SELECT 
    storcli_drive_group_uuid, 
    storcli_drive_group_virtual_drive_uuid, 
    storcli_drive_group_id_string, 
    storcli_drive_group_access, 
    storcli_drive_group_array_size, 
    storcli_drive_group_array_state, 
    storcli_drive_group_cache, 
    storcli_drive_group_cachecade, 
    storcli_drive_group_consistent, 
    storcli_drive_group_disk_cache, 
    storcli_drive_group_raid_type, 
    storcli_drive_group_read_cache, 
    storcli_drive_group_scheduled_cc, 
    storcli_drive_group_write_cache 
FROM 
    storcli_drive_groups
WHERE
    storcli_drive_group_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_drive_group_uuid               =         $row->[0]; 
		my $storcli_drive_group_virtual_drive_uuid =         $row->[1];
		my $storcli_drive_group_id_string          =         $row->[2];
		my $storcli_drive_group_access             = defined $row->[3]  ? $row->[3]  : "";
		my $storcli_drive_group_array_size         = defined $row->[4]  ? $row->[4]  : "";
		my $storcli_drive_group_array_state        = defined $row->[5]  ? $row->[5]  : "";
		my $storcli_drive_group_cache              = defined $row->[6]  ? $row->[6]  : "";
		my $storcli_drive_group_cachecade          = defined $row->[7]  ? $row->[7]  : "";
		my $storcli_drive_group_consistent         = defined $row->[8]  ? $row->[8]  : "";
		my $storcli_drive_group_disk_cache         = defined $row->[9]  ? $row->[9]  : "";
		my $storcli_drive_group_raid_type          = defined $row->[10] ? $row->[10] : "";
		my $storcli_drive_group_read_cache         = defined $row->[11] ? $row->[11] : "";
		my $storcli_drive_group_scheduled_cc       = defined $row->[12] ? $row->[12] : "";
		my $storcli_drive_group_write_cache        = defined $row->[13] ? $row->[13] : "";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0014", message_variables => {
			name1  => "storcli_drive_group_uuid",               value1  => $storcli_drive_group_uuid, 
			name2  => "storcli_drive_group_virtual_drive_uuid", value2  => $storcli_drive_group_virtual_drive_uuid, 
			name3  => "storcli_drive_group_id_string",          value3  => $storcli_drive_group_id_string, 
			name4  => "storcli_drive_group_access",             value4  => $storcli_drive_group_access, 
			name5  => "storcli_drive_group_array_size",         value5  => $storcli_drive_group_array_size, 
			name6  => "storcli_drive_group_array_state",        value6  => $storcli_drive_group_array_state, 
			name7  => "storcli_drive_group_cache",              value7  => $storcli_drive_group_cache, 
			name8  => "storcli_drive_group_cachecade",          value8  => $storcli_drive_group_cachecade, 
			name9  => "storcli_drive_group_consistent",         value9  => $storcli_drive_group_consistent, 
			name10 => "storcli_drive_group_disk_cache",         value10 => $storcli_drive_group_disk_cache, 
			name11 => "storcli_drive_group_raid_type",          value11 => $storcli_drive_group_raid_type, 
			name12 => "storcli_drive_group_read_cache",         value12 => $storcli_drive_group_read_cache, 
			name13 => "storcli_drive_group_scheduled_cc",       value13 => $storcli_drive_group_scheduled_cc, 
			name14 => "storcli_drive_group_write_cache",        value14 => $storcli_drive_group_write_cache, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this virtual drive.
		$an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string} = $storcli_drive_group_uuid;
		$an->data->{'scan-storcli'}{drive_groups}{by_uuid}{$storcli_drive_group_uuid}           = $storcli_drive_group_id_string;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::drive_groups::by_id_string::${storcli_drive_group_id_string}", value1 => $an->data->{'scan-storcli'}{drive_groups}{by_id_string}{$storcli_drive_group_id_string}, 
			name2 => "scan-storcli::drive_groups::by_uuid::${storcli_drive_group_uuid}",           value2 => $an->data->{'scan-storcli'}{drive_groups}{by_uuid}{$storcli_drive_group_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the drive group data. (Drive groups have no SN)
		$an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid} = {
			storcli_drive_group_virtual_drive_uuid	=>	$storcli_drive_group_virtual_drive_uuid, 
			storcli_drive_group_id_string		=>	$storcli_drive_group_id_string, 
			storcli_drive_group_access		=>	$storcli_drive_group_access, 
			storcli_drive_group_array_size		=>	$storcli_drive_group_array_size, 
			storcli_drive_group_array_state		=>	$storcli_drive_group_array_state, 
			storcli_drive_group_cache		=>	$storcli_drive_group_cache, 
			storcli_drive_group_cachecade		=>	$storcli_drive_group_cachecade, 
			storcli_drive_group_consistent		=>	$storcli_drive_group_consistent, 
			storcli_drive_group_disk_cache		=>	$storcli_drive_group_disk_cache, 
			storcli_drive_group_raid_type		=>	$storcli_drive_group_raid_type, 
			storcli_drive_group_read_cache		=>	$storcli_drive_group_read_cache, 
			storcli_drive_group_scheduled_cc	=>	$storcli_drive_group_scheduled_cc, 
			storcli_drive_group_write_cache		=>	$storcli_drive_group_write_cache, 
		};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0013", message_variables => {
			name1  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_virtual_drive_uuid", value1  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_virtual_drive_uuid}, 
			name2  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_id_string",          value2  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_id_string}, 
			name3  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_access",             value3  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_access}, 
			name4  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_array_size",         value4  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_size}, 
			name5  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_array_state",        value5  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_state}, 
			name6  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_cache",              value6  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cache}, 
			name7  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_cachecade",          value7  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cachecade}, 
			name8  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_consistent",         value8  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_consistent}, 
			name9  => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_disk_cache",         value9  => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_disk_cache}, 
			name10 => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_raid_type",          value10 => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_raid_type}, 
			name11 => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_read_cache",         value11 => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_read_cache}, 
			name12 => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_scheduled_cc",       value12 => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_scheduled_cc}, 
			name13 => "sql::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::storcli_drive_group_write_cache",        value13 => $an->data->{sql}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_write_cache}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# And now, the physical drives.
	$query = "
SELECT 
    storcli_physical_drive_uuid, 
    storcli_physical_drive_controller_uuid, 
    storcli_physical_drive_virtual_drive, 
    storcli_physical_drive_drive_group, 
    storcli_physical_drive_enclosure_id, 
    storcli_physical_drive_slot_number, 
    storcli_physical_drive_serial_number, 
    storcli_physical_drive_size, 
    storcli_physical_drive_sector_size, 
    storcli_physical_drive_vendor, 
    storcli_physical_drive_model, 
    storcli_physical_drive_self_encrypting_drive 
FROM 
    storcli_physical_drives
WHERE
    storcli_physical_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_physical_drive_uuid                  =         $row->[0]; 
		my $storcli_physical_drive_controller_uuid       =         $row->[1];
		my $storcli_physical_drive_virtual_drive         = defined $row->[2]  ? $row->[2]  : "";
		my $storcli_physical_drive_drive_group           = defined $row->[3]  ? $row->[3]  : "";
		my $storcli_physical_drive_enclosure_id          = defined $row->[4]  ? $row->[4]  : "";
		my $storcli_physical_drive_slot_number           = defined $row->[5]  ? $row->[5]  : "";
		my $storcli_physical_drive_serial_number         = defined $row->[6]  ? $row->[6]  : "";
		my $storcli_physical_drive_size                  = defined $row->[7]  ? $row->[7]  : "";
		my $storcli_physical_drive_sector_size           = defined $row->[8]  ? $row->[8]  : "";
		my $storcli_physical_drive_vendor                = defined $row->[9]  ? $row->[9]  : "";
		my $storcli_physical_drive_model                 = defined $row->[10] ? $row->[10] : "";
		my $storcli_physical_drive_self_encrypting_drive = defined $row->[11] ? $row->[11] : "";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
			name1  => "storcli_physical_drive_uuid",                  value1  => $storcli_physical_drive_uuid, 
			name2  => "storcli_physical_drive_controller_uuid",       value2  => $storcli_physical_drive_controller_uuid, 
			name3  => "storcli_physical_drive_virtual_drive",         value3  => $storcli_physical_drive_virtual_drive, 
			name4  => "storcli_physical_drive_drive_group",           value4  => $storcli_physical_drive_drive_group, 
			name5  => "storcli_physical_drive_enclosure_id",          value5  => $storcli_physical_drive_enclosure_id, 
			name6  => "storcli_physical_drive_slot_number",           value6  => $storcli_physical_drive_slot_number, 
			name7  => "storcli_physical_drive_serial_number",         value7  => $storcli_physical_drive_serial_number, 
			name8  => "storcli_physical_drive_size",                  value8  => $storcli_physical_drive_size, 
			name9  => "storcli_physical_drive_sector_size",           value9  => $storcli_physical_drive_sector_size, 
			name10 => "storcli_physical_drive_vendor",                value10 => $storcli_physical_drive_vendor, 
			name11 => "storcli_physical_drive_model",                 value11 => $storcli_physical_drive_model, 
			name12 => "storcli_physical_drive_self_encrypting_drive", value12 => $storcli_physical_drive_self_encrypting_drive, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Make it so that we can look up the serial number from the drive's UUID and vice versa
		$an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number} = $storcli_physical_drive_uuid;
		$an->data->{'scan-storcli'}{physical_drives}{by_uuid}{$storcli_physical_drive_uuid}            = $storcli_physical_drive_serial_number;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "scan-storcli::physical_drives::by_serial::${storcli_physical_drive_serial_number}", value1 => $an->data->{'scan-storcli'}{physical_drives}{by_serial}{$storcli_physical_drive_serial_number}, 
			name2 => "scan-storcli::physical_drives::by_uuid::${storcli_physical_drive_uuid}",            value2 => $an->data->{'scan-storcli'}{physical_drives}{by_uuid}{$storcli_physical_drive_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Store the information about this physical drive
		$an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid} = {
			storcli_physical_drive_controller_uuid		=>	$storcli_physical_drive_controller_uuid, 
			storcli_physical_drive_virtual_drive		=>	$storcli_physical_drive_virtual_drive, 
			storcli_physical_drive_drive_group		=>	$storcli_physical_drive_drive_group, 
			storcli_physical_drive_enclosure_id		=>	$storcli_physical_drive_enclosure_id, 
			storcli_physical_drive_slot_number		=>	$storcli_physical_drive_slot_number, 
			storcli_physical_drive_serial_number		=>	$storcli_physical_drive_serial_number, 
			storcli_physical_drive_size			=>	$storcli_physical_drive_size, 
			storcli_physical_drive_sector_size		=>	$storcli_physical_drive_sector_size, 
			storcli_physical_drive_vendor			=>	$storcli_physical_drive_vendor, 
			storcli_physical_drive_model			=>	$storcli_physical_drive_model, 
			storcli_physical_drive_self_encrypting_drive	=>	$storcli_physical_drive_self_encrypting_drive, 
		};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
			name1  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_controller_uuid",       value1  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_controller_uuid}, 
			name2  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_virtual_drive",         value2  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_virtual_drive}, 
			name3  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_drive_group",           value3  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_drive_group}, 
			name4  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_enclosure_id",          value4  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_enclosure_id}, 
			name5  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_slot_number",           value5  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_slot_number}, 
			name6  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_serial_number",         value6  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_serial_number}, 
			name7  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_size",                  value7  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_size}, 
			name8  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_sector_size",           value8  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_sector_size}, 
			name9  => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_vendor",                value9  => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_vendor}, 
			name10 => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_model",                 value10 => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_model}, 
			name11 => "sql::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::storcli_physical_drive_self_encrypting_drive", value11 => $an->data->{sql}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_self_encrypting_drive}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# Lastly, the variables.
	$query = "
SELECT 
    storcli_variable_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value 
FROM 
    storcli_variables
WHERE
    storcli_variable_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	
	$results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results, 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $storcli_variable_uuid            =         $row->[0]; 
		my $storcli_variable_source_table    =         $row->[1]; 
		my $storcli_variable_source_uuid     =         $row->[2]; 
		my $storcli_variable_is_temperature  =         $row->[3]; 
		my $storcli_variable_name            =         $row->[4]; 
		my $storcli_variable_value           = defined $row->[5] ? $row->[5] : ""; 
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "storcli_variable_uuid",           value1 => $storcli_variable_uuid, 
			name2 => "storcli_variable_source_table",   value2 => $storcli_variable_source_table, 
			name3 => "storcli_variable_source_uuid",    value3 => $storcli_variable_source_uuid, 
			name4 => "storcli_variable_is_temperature", value4 => $storcli_variable_is_temperature, 
			name5 => "storcli_variable_name",           value5 => $storcli_variable_name, 
			name6 => "storcli_variable_value",          value6 => $storcli_variable_value, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# We store these differently for easier reference.
		my $type = $storcli_variable_is_temperature eq "1" ? "temperature" : "variable";
		$an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{$storcli_variable_source_table}{source_uuid}{$storcli_variable_source_uuid}{$type}{$storcli_variable_name} = {
			storcli_variable_uuid		=>	$storcli_variable_uuid, 
			storcli_variable_is_temperature	=>	$storcli_variable_is_temperature, 
			storcli_variable_value		=>	$storcli_variable_value, 
		};
		
		# Entries are so long that we log the one per variable.
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "sql::storcli_variables::storcli_variable_uuid::source_table::${storcli_variable_source_table}::source_uuid::${storcli_variable_source_uuid}::${type}::${storcli_variable_name}::storcli_variable_uuid",           value1 => $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{$storcli_variable_source_table}{source_uuid}{$storcli_variable_source_uuid}{$type}{$storcli_variable_name}{storcli_variable_uuid}, 
		}, file => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "sql::storcli_variables::storcli_variable_uuid::source_table::${storcli_variable_source_table}::source_uuid::${storcli_variable_source_uuid}::${type}::${storcli_variable_name}::storcli_variable_is_temperature", value1 => $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{$storcli_variable_source_table}{source_uuid}{$storcli_variable_source_uuid}{$type}{$storcli_variable_name}{storcli_variable_is_temperature}, 
		}, file => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "sql::storcli_variables::storcli_variable_uuid::source_table::${storcli_variable_source_table}::source_uuid::${storcli_variable_source_uuid}::${type}::${storcli_variable_name}::storcli_variable_value",          value1 => $an->data->{sql}{storcli_variables}{storcli_variable_uuid}{source_table}{$storcli_variable_source_table}{source_uuid}{$storcli_variable_source_uuid}{$type}{$storcli_variable_name}{storcli_variable_value}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	undef $results;
	
	# Return the number 
	return(0);
}

# This looks at each DB's 'updated' table to see if any are behind. If any are, it will update the tables 
# based on the time the last entry was made for a given host.
sub update_db
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "scancore::db_resync_needed", value1 => $an->data->{scancore}{db_resync_needed}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{db_resync_needed})
	{
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Update Controllers and the various dangly bits hanging off them.
		update_db_controllers($an);
		update_db_cachevaults($an);
		update_db_bbus($an);
		update_db_virtual_drives($an);
		update_db_drive_groups($an);
		update_db_physical_drives($an);
		update_db_variables($an);
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# Update the 'storcli_physical_drives' table.
sub update_db_physical_drives
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_physical_drives" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_physical_drives' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_physical_drive_uuid, 
    storcli_physical_drive_controller_uuid, 
    storcli_physical_drive_virtual_drive, 
    storcli_physical_drive_drive_group, 
    storcli_physical_drive_enclosure_id, 
    storcli_physical_drive_slot_number, 
    storcli_physical_drive_serial_number, 
    storcli_physical_drive_size, 
    storcli_physical_drive_sector_size, 
    storcli_physical_drive_vendor, 
    storcli_physical_drive_model, 
    storcli_physical_drive_self_encrypting_drive, 
    modified_date 
FROM 
    history.storcli_physical_drives
WHERE
    storcli_physical_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_physical_drive_uuid                  =         $row->[0]; 
			my $storcli_physical_drive_controller_uuid       =         $row->[1];
			my $storcli_physical_drive_virtual_drive         = defined $row->[2]  ? $row->[2]  : "";
			my $storcli_physical_drive_drive_group           = defined $row->[3]  ? $row->[3]  : "";
			my $storcli_physical_drive_enclosure_id          = defined $row->[4]  ? $row->[4]  : "";
			my $storcli_physical_drive_slot_number           = defined $row->[5]  ? $row->[5]  : "";
			my $storcli_physical_drive_serial_number         = defined $row->[6]  ? $row->[6]  : "";
			my $storcli_physical_drive_size                  = defined $row->[7]  ? $row->[7]  : "";
			my $storcli_physical_drive_sector_size           = defined $row->[8]  ? $row->[8]  : "";
			my $storcli_physical_drive_vendor                = defined $row->[9]  ? $row->[9]  : "";
			my $storcli_physical_drive_model                 = defined $row->[10] ? $row->[10] : "";
			my $storcli_physical_drive_self_encrypting_drive = defined $row->[11] ? $row->[11] : "";
			my $modified_date                                =         $row->[12];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0013", message_variables => {
				name1  => "storcli_physical_drive_uuid",                  value1  => $storcli_physical_drive_uuid, 
				name2  => "storcli_physical_drive_controller_uuid",       value2  => $storcli_physical_drive_controller_uuid, 
				name3  => "storcli_physical_drive_virtual_drive",         value3  => $storcli_physical_drive_virtual_drive, 
				name4  => "storcli_physical_drive_drive_group",           value4  => $storcli_physical_drive_drive_group, 
				name5  => "storcli_physical_drive_enclosure_id",          value5  => $storcli_physical_drive_enclosure_id, 
				name6  => "storcli_physical_drive_slot_number",           value6  => $storcli_physical_drive_slot_number, 
				name7  => "storcli_physical_drive_serial_number",         value7  => $storcli_physical_drive_serial_number, 
				name8  => "storcli_physical_drive_size",                  value8  => $storcli_physical_drive_size, 
				name9  => "storcli_physical_drive_sector_size",           value9  => $storcli_physical_drive_sector_size, 
				name10 => "storcli_physical_drive_vendor",                value10 => $storcli_physical_drive_vendor, 
				name11 => "storcli_physical_drive_model",                 value11 => $storcli_physical_drive_model, 
				name12 => "storcli_physical_drive_self_encrypting_drive", value12 => $storcli_physical_drive_self_encrypting_drive, 
				name13 => "modified_date",                                value13 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid} = {
				storcli_physical_drive_controller_uuid		=>	$storcli_physical_drive_controller_uuid, 
				storcli_physical_drive_virtual_drive		=>	$storcli_physical_drive_virtual_drive, 
				storcli_physical_drive_drive_group		=>	$storcli_physical_drive_drive_group, 
				storcli_physical_drive_enclosure_id		=>	$storcli_physical_drive_enclosure_id, 
				storcli_physical_drive_slot_number		=>	$storcli_physical_drive_slot_number, 
				storcli_physical_drive_serial_number		=>	$storcli_physical_drive_serial_number, 
				storcli_physical_drive_size			=>	$storcli_physical_drive_size, 
				storcli_physical_drive_sector_size		=>	$storcli_physical_drive_sector_size, 
				storcli_physical_drive_vendor			=>	$storcli_physical_drive_vendor, 
				storcli_physical_drive_model			=>	$storcli_physical_drive_model, 
				storcli_physical_drive_self_encrypting_drive	=>	$storcli_physical_drive_self_encrypting_drive, 
			};
			$an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid} = {
				storcli_physical_drive_controller_uuid		=>	$storcli_physical_drive_controller_uuid, 
				storcli_physical_drive_virtual_drive		=>	$storcli_physical_drive_virtual_drive, 
				storcli_physical_drive_drive_group		=>	$storcli_physical_drive_drive_group, 
				storcli_physical_drive_enclosure_id		=>	$storcli_physical_drive_enclosure_id, 
				storcli_physical_drive_slot_number		=>	$storcli_physical_drive_slot_number, 
				storcli_physical_drive_serial_number		=>	$storcli_physical_drive_serial_number, 
				storcli_physical_drive_size			=>	$storcli_physical_drive_size, 
				storcli_physical_drive_sector_size		=>	$storcli_physical_drive_sector_size, 
				storcli_physical_drive_vendor			=>	$storcli_physical_drive_vendor, 
				storcli_physical_drive_model			=>	$storcli_physical_drive_model, 
				storcli_physical_drive_self_encrypting_drive	=>	$storcli_physical_drive_self_encrypting_drive, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_physical_drive_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}})
		{
			my $storcli_physical_drive_controller_uuid       = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_controller_uuid};
			my $storcli_physical_drive_virtual_drive         = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_virtual_drive};
			my $storcli_physical_drive_drive_group           = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_drive_group};
			my $storcli_physical_drive_enclosure_id          = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_enclosure_id};
			my $storcli_physical_drive_slot_number           = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_slot_number};
			my $storcli_physical_drive_serial_number         = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_serial_number};
			my $storcli_physical_drive_size                  = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_size};
			my $storcli_physical_drive_sector_size           = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_sector_size};
			my $storcli_physical_drive_vendor                = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_vendor};
			my $storcli_physical_drive_model                 = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_model};
			my $storcli_physical_drive_self_encrypting_drive = $an->data->{db_data}{unified}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{storcli_physical_drive_self_encrypting_drive};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
				name1  => "storcli_physical_drive_uuid",                  value1  => $storcli_physical_drive_uuid, 
				name2  => "storcli_physical_drive_controller_uuid",       value2  => $storcli_physical_drive_controller_uuid, 
				name3  => "storcli_physical_drive_virtual_drive",         value3  => $storcli_physical_drive_virtual_drive, 
				name4  => "storcli_physical_drive_drive_group",           value4  => $storcli_physical_drive_drive_group, 
				name5  => "storcli_physical_drive_enclosure_id",          value5  => $storcli_physical_drive_enclosure_id, 
				name6  => "storcli_physical_drive_slot_number",           value6  => $storcli_physical_drive_slot_number, 
				name7  => "storcli_physical_drive_serial_number",         value7  => $storcli_physical_drive_serial_number, 
				name8  => "storcli_physical_drive_size",                  value8  => $storcli_physical_drive_size, 
				name9  => "storcli_physical_drive_sector_size",           value9  => $storcli_physical_drive_sector_size, 
				name10 => "storcli_physical_drive_vendor",                value10 => $storcli_physical_drive_vendor, 
				name11 => "storcli_physical_drive_model",                 value11 => $storcli_physical_drive_model, 
				name12 => "storcli_physical_drive_self_encrypting_drive", value12 => $storcli_physical_drive_self_encrypting_drive, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_physical_drive_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_physical_drives::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_physical_drives}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_physical_drives::modified_date::${modified_date}::storcli_physical_drive_uuid::${storcli_physical_drive_uuid}", value1 => $an->data->{db_data}{$id}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_physical_drive_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_physical_drives
SET
    storcli_physical_drive_controller_uuid       = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_controller_uuid).", 
    storcli_physical_drive_virtual_drive         = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_virtual_drive).", 
    storcli_physical_drive_drive_group           = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_drive_group).", 
    storcli_physical_drive_enclosure_id          = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_enclosure_id).", 
    storcli_physical_drive_slot_number           = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_slot_number).", 
    storcli_physical_drive_serial_number         = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_serial_number).", 
    storcli_physical_drive_size                  = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_size).", 
    storcli_physical_drive_sector_size           = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_sector_size).", 
    storcli_physical_drive_vendor                = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_vendor).", 
    storcli_physical_drive_model                 = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_model).", 
    storcli_physical_drive_self_encrypting_drive = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_self_encrypting_drive).", 
    modified_date                                = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_physical_drive_uuid                  = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_physical_drives
(
    storcli_physical_drive_uuid, 
    storcli_physical_drive_host_uuid, 
    storcli_physical_drive_controller_uuid, 
    storcli_physical_drive_serial_number, 
    storcli_physical_drive_virtual_drive, 
    storcli_physical_drive_drive_group, 
    storcli_physical_drive_enclosure_id, 
    storcli_physical_drive_slot_number, 
    storcli_physical_drive_size, 
    storcli_physical_drive_sector_size, 
    storcli_physical_drive_vendor, 
    storcli_physical_drive_model, 
    storcli_physical_drive_self_encrypting_drive, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_virtual_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_drive_group).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_enclosure_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_slot_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_sector_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_vendor).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_self_encrypting_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_physical_drives WHERE storcli_physical_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_physical_drives", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_physical_drives/ history.storcli_physical_drives/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_physical_drive_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_physical_drives}{modified_date}{$modified_date}{storcli_physical_drive_uuid}{$storcli_physical_drive_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_physical_drives
(
    storcli_physical_drive_uuid, 
    storcli_physical_drive_host_uuid, 
    storcli_physical_drive_controller_uuid, 
    storcli_physical_drive_virtual_drive, 
    storcli_physical_drive_drive_group, 
    storcli_physical_drive_enclosure_id, 
    storcli_physical_drive_slot_number, 
    storcli_physical_drive_serial_number, 
    storcli_physical_drive_size, 
    storcli_physical_drive_sector_size, 
    storcli_physical_drive_vendor, 
    storcli_physical_drive_model, 
    storcli_physical_drive_self_encrypting_drive, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_virtual_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_drive_group).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_enclosure_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_slot_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_sector_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_vendor).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_physical_drive_self_encrypting_drive).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_physical_drive_uuid?
			} # foreach my $id 
		} # foreach my $storcli_physical_drive_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_drive_groups' table.
sub update_db_drive_groups
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_drive_groups" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_drive_groups' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_drive_group_uuid, 
    storcli_drive_group_virtual_drive_uuid, 
    storcli_drive_group_id_string, 
    storcli_drive_group_access, 
    storcli_drive_group_array_size, 
    storcli_drive_group_array_state, 
    storcli_drive_group_cache, 
    storcli_drive_group_cachecade, 
    storcli_drive_group_consistent, 
    storcli_drive_group_disk_cache, 
    storcli_drive_group_raid_type, 
    storcli_drive_group_read_cache, 
    storcli_drive_group_scheduled_cc, 
    storcli_drive_group_write_cache, 
    modified_date 
FROM 
    history.storcli_drive_groups
WHERE
    storcli_drive_group_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_drive_group_uuid               =         $row->[0]; 
			my $storcli_drive_group_virtual_drive_uuid =         $row->[1];
			my $storcli_drive_group_id_string          =         $row->[2];
			my $storcli_drive_group_access             = defined $row->[3]  ? $row->[3]  : "";
			my $storcli_drive_group_array_size         = defined $row->[4]  ? $row->[4]  : "";
			my $storcli_drive_group_array_state        = defined $row->[5]  ? $row->[5]  : "";
			my $storcli_drive_group_cache              = defined $row->[6]  ? $row->[6]  : "";
			my $storcli_drive_group_cachecade          = defined $row->[7]  ? $row->[7]  : "";
			my $storcli_drive_group_consistent         = defined $row->[8]  ? $row->[8]  : "";
			my $storcli_drive_group_disk_cache         = defined $row->[9]  ? $row->[9]  : "";
			my $storcli_drive_group_raid_type          = defined $row->[10] ? $row->[10] : "";
			my $storcli_drive_group_read_cache         = defined $row->[11] ? $row->[11] : "";
			my $storcli_drive_group_scheduled_cc       = defined $row->[12] ? $row->[12] : "";
			my $storcli_drive_group_write_cache        = defined $row->[13] ? $row->[13] : "";
			my $modified_date                          =         $row->[14];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0015", message_variables => {
				name1  => "storcli_drive_group_uuid",               value1  => $storcli_drive_group_uuid, 
				name2  => "storcli_drive_group_virtual_drive_uuid", value2  => $storcli_drive_group_virtual_drive_uuid, 
				name3  => "storcli_drive_group_id_string",          value3  => $storcli_drive_group_id_string, 
				name4  => "storcli_drive_group_access",             value4  => $storcli_drive_group_access, 
				name5  => "storcli_drive_group_array_size",         value5  => $storcli_drive_group_array_size, 
				name6  => "storcli_drive_group_array_state",        value6  => $storcli_drive_group_array_state, 
				name7  => "storcli_drive_group_cache",              value7  => $storcli_drive_group_cache, 
				name8  => "storcli_drive_group_cachecade",          value8  => $storcli_drive_group_cachecade, 
				name9  => "storcli_drive_group_consistent",         value9  => $storcli_drive_group_consistent, 
				name10 => "storcli_drive_group_disk_cache",         value10 => $storcli_drive_group_disk_cache, 
				name11 => "storcli_drive_group_raid_type",          value11 => $storcli_drive_group_raid_type, 
				name12 => "storcli_drive_group_read_cache",         value12 => $storcli_drive_group_read_cache, 
				name13 => "storcli_drive_group_scheduled_cc",       value13 => $storcli_drive_group_scheduled_cc, 
				name14 => "storcli_drive_group_write_cache",        value14 => $storcli_drive_group_write_cache, 
				name15 => "modified_date",                          value15 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid} = {
				storcli_drive_group_virtual_drive_uuid	=>	$storcli_drive_group_virtual_drive_uuid, 
				storcli_drive_group_id_string		=>	$storcli_drive_group_id_string, 
				storcli_drive_group_access		=>	$storcli_drive_group_access, 
				storcli_drive_group_array_size		=>	$storcli_drive_group_array_size, 
				storcli_drive_group_array_state		=>	$storcli_drive_group_array_state, 
				storcli_drive_group_cache		=>	$storcli_drive_group_cache, 
				storcli_drive_group_cachecade		=>	$storcli_drive_group_cachecade, 
				storcli_drive_group_consistent		=>	$storcli_drive_group_consistent, 
				storcli_drive_group_disk_cache		=>	$storcli_drive_group_disk_cache, 
				storcli_drive_group_raid_type		=>	$storcli_drive_group_raid_type, 
				storcli_drive_group_read_cache		=>	$storcli_drive_group_read_cache, 
				storcli_drive_group_scheduled_cc	=>	$storcli_drive_group_scheduled_cc, 
				storcli_drive_group_write_cache		=>	$storcli_drive_group_write_cache, 
			};
			$an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid} = {
				storcli_drive_group_virtual_drive_uuid	=>	$storcli_drive_group_virtual_drive_uuid, 
				storcli_drive_group_id_string		=>	$storcli_drive_group_id_string, 
				storcli_drive_group_access		=>	$storcli_drive_group_access, 
				storcli_drive_group_array_size		=>	$storcli_drive_group_array_size, 
				storcli_drive_group_array_state		=>	$storcli_drive_group_array_state, 
				storcli_drive_group_cache		=>	$storcli_drive_group_cache, 
				storcli_drive_group_cachecade		=>	$storcli_drive_group_cachecade, 
				storcli_drive_group_consistent		=>	$storcli_drive_group_consistent, 
				storcli_drive_group_disk_cache		=>	$storcli_drive_group_disk_cache, 
				storcli_drive_group_raid_type		=>	$storcli_drive_group_raid_type, 
				storcli_drive_group_read_cache		=>	$storcli_drive_group_read_cache, 
				storcli_drive_group_scheduled_cc	=>	$storcli_drive_group_scheduled_cc, 
				storcli_drive_group_write_cache		=>	$storcli_drive_group_write_cache, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_drive_group_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}})
		{
			my $storcli_drive_group_virtual_drive_uuid = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_virtual_drive_uuid};
			my $storcli_drive_group_id_string          = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_id_string};
			my $storcli_drive_group_access             = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_access};
			my $storcli_drive_group_array_size         = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_size};
			my $storcli_drive_group_array_state        = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_array_state};
			my $storcli_drive_group_cache              = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cache};
			my $storcli_drive_group_cachecade          = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_cachecade};
			my $storcli_drive_group_consistent         = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_consistent};
			my $storcli_drive_group_disk_cache         = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_disk_cache};
			my $storcli_drive_group_raid_type          = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_raid_type};
			my $storcli_drive_group_read_cache         = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_read_cache};
			my $storcli_drive_group_scheduled_cc       = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_scheduled_cc};
			my $storcli_drive_group_write_cache        = $an->data->{db_data}{unified}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{storcli_drive_group_write_cache};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0014", message_variables => {
				name1  => "storcli_drive_group_uuid",               value1  => $storcli_drive_group_uuid, 
				name2  => "storcli_drive_group_virtual_drive_uuid", value2  => $storcli_drive_group_virtual_drive_uuid, 
				name3  => "storcli_drive_group_id_string",          value3  => $storcli_drive_group_id_string, 
				name4  => "storcli_drive_group_access",             value4  => $storcli_drive_group_access, 
				name5  => "storcli_drive_group_array_size",         value5  => $storcli_drive_group_array_size, 
				name6  => "storcli_drive_group_array_state",        value6  => $storcli_drive_group_array_state, 
				name7  => "storcli_drive_group_cache",              value7  => $storcli_drive_group_cache, 
				name8  => "storcli_drive_group_cachecade",          value8  => $storcli_drive_group_cachecade, 
				name9  => "storcli_drive_group_consistent",         value9  => $storcli_drive_group_consistent, 
				name10 => "storcli_drive_group_disk_cache",         value10 => $storcli_drive_group_disk_cache, 
				name11 => "storcli_drive_group_raid_type",          value11 => $storcli_drive_group_raid_type, 
				name12 => "storcli_drive_group_read_cache",         value12 => $storcli_drive_group_read_cache, 
				name13 => "storcli_drive_group_scheduled_cc",       value13 => $storcli_drive_group_scheduled_cc, 
				name14 => "storcli_drive_group_write_cache",        value14 => $storcli_drive_group_write_cache, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_drive_group_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_drive_groups::storcli_drive_group_uuid::${storcli_drive_group_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_drive_groups}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_drive_groups::modified_date::${modified_date}::storcli_drive_group_uuid::${storcli_drive_group_uuid}", value1 => $an->data->{db_data}{$id}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_drive_group_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_drive_groups
SET
    storcli_drive_group_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_virtual_drive_uuid).", 
    storcli_drive_group_id_string          = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_id_string).", 
    storcli_drive_group_access             = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_access).", 
    storcli_drive_group_array_size         = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_size).", 
    storcli_drive_group_array_state        = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_state).", 
    storcli_drive_group_cache              = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cache).", 
    storcli_drive_group_cachecade          = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cachecade).", 
    storcli_drive_group_consistent         = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_consistent).", 
    storcli_drive_group_disk_cache         = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_disk_cache).", 
    storcli_drive_group_raid_type          = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_raid_type).", 
    storcli_drive_group_read_cache         = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_read_cache).", 
    storcli_drive_group_scheduled_cc       = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_scheduled_cc).", 
    storcli_drive_group_write_cache        = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_write_cache).", 
    modified_date                          = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_drive_group_uuid               = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_drive_groups
(
    storcli_drive_group_uuid, 
    storcli_drive_group_host_uuid, 
    storcli_drive_group_virtual_drive_uuid, 
    storcli_drive_group_id_string, 
    storcli_drive_group_access, 
    storcli_drive_group_array_size, 
    storcli_drive_group_array_state, 
    storcli_drive_group_cache, 
    storcli_drive_group_cachecade, 
    storcli_drive_group_consistent, 
    storcli_drive_group_disk_cache, 
    storcli_drive_group_raid_type, 
    storcli_drive_group_read_cache, 
    storcli_drive_group_scheduled_cc, 
    storcli_drive_group_write_cache, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_access).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cachecade).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_consistent).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_disk_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_raid_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_read_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_scheduled_cc).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_write_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_drive_groups WHERE storcli_drive_group_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_drive_groups", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_drive_groups/ history.storcli_drive_groups/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_drive_group_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_drive_groups}{modified_date}{$modified_date}{storcli_drive_group_uuid}{$storcli_drive_group_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_drive_groups
(
   storcli_drive_group_uuid, 
    storcli_drive_group_host_uuid, 
    storcli_drive_group_virtual_drive_uuid, 
    storcli_drive_group_id_string, 
    storcli_drive_group_access, 
    storcli_drive_group_array_size, 
    storcli_drive_group_array_state, 
    storcli_drive_group_cache, 
    storcli_drive_group_cachecade, 
    storcli_drive_group_consistent, 
    storcli_drive_group_disk_cache, 
    storcli_drive_group_raid_type, 
    storcli_drive_group_read_cache, 
    storcli_drive_group_scheduled_cc, 
    storcli_drive_group_write_cache, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_access).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_array_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_cachecade).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_consistent).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_disk_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_raid_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_read_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_scheduled_cc).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_drive_group_write_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_drive_group_uuid?
			} # foreach my $id 
		} # foreach my $storcli_drive_group_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_virtual_drives' table.
sub update_db_virtual_drives
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_virtual_drives" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_virtual_drives' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_virtual_drive_uuid, 
    storcli_virtual_drive_controller_uuid, 
    storcli_virtual_drive_id_string, 
    storcli_virtual_drive_creation_date, 
    storcli_virtual_drive_data_protection, 
    storcli_virtual_drive_disk_cache_policy, 
    storcli_virtual_drive_emulation_type, 
    storcli_virtual_drive_encryption, 
    storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size, 
    storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id, 
    modified_date 
FROM 
    history.storcli_virtual_drives
WHERE
    storcli_virtual_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_virtual_drive_uuid              =         $row->[0]; 
			my $storcli_virtual_drive_controller_uuid   =         $row->[1];
			my $storcli_virtual_drive_id_string         = defined $row->[2]  ? $row->[2]  : "";
			my $storcli_virtual_drive_creation_date     = defined $row->[3]  ? $row->[3]  : "";
			my $storcli_virtual_drive_data_protection   = defined $row->[4]  ? $row->[4]  : "";
			my $storcli_virtual_drive_disk_cache_policy = defined $row->[5]  ? $row->[5]  : "";
			my $storcli_virtual_drive_emulation_type    = defined $row->[6]  ? $row->[6]  : "";
			my $storcli_virtual_drive_encryption        = defined $row->[7]  ? $row->[7]  : "";
			my $storcli_virtual_drive_blocks            = defined $row->[8]  ? $row->[8]  : "";
			my $storcli_virtual_drive_strip_size        = defined $row->[9]  ? $row->[9]  : "";
			my $storcli_virtual_drive_drives_per_span   = defined $row->[10] ? $row->[10] : "";
			my $storcli_virtual_drive_span_depth        = defined $row->[11] ? $row->[11] : "";
			my $storcli_virtual_drive_scsi_naa_id       = defined $row->[12] ? $row->[12] : "";
			my $modified_date                           =         $row->[13];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0014", message_variables => {
				name1  => "storcli_virtual_drive_uuid",              value1  => $storcli_virtual_drive_uuid, 
				name2  => "storcli_virtual_drive_controller_uuid",   value2  => $storcli_virtual_drive_controller_uuid, 
				name3  => "storcli_virtual_drive_id_string",         value3  => $storcli_virtual_drive_id_string, 
				name4  => "storcli_virtual_drive_creation_date",     value4  => $storcli_virtual_drive_creation_date, 
				name5  => "storcli_virtual_drive_data_protection",   value5  => $storcli_virtual_drive_data_protection, 
				name6  => "storcli_virtual_drive_disk_cache_policy", value6  => $storcli_virtual_drive_disk_cache_policy, 
				name7  => "storcli_virtual_drive_emulation_type",    value7  => $storcli_virtual_drive_emulation_type, 
				name8  => "storcli_virtual_drive_encryption",        value8  => $storcli_virtual_drive_encryption, 
				name9  => "storcli_virtual_drive_blocks",            value9  => $storcli_virtual_drive_blocks, 
				name10 => "storcli_virtual_drive_strip_size",        value10 => $storcli_virtual_drive_strip_size, 
				name11 => "storcli_virtual_drive_drives_per_span",   value11 => $storcli_virtual_drive_drives_per_span, 
				name12 => "storcli_virtual_drive_span_depth",        value12 => $storcli_virtual_drive_span_depth, 
				name13 => "storcli_virtual_drive_scsi_naa_id",       value13 => $storcli_virtual_drive_scsi_naa_id, 
				name14 => "modified_date",                           value14 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid} = {
				storcli_virtual_drive_controller_uuid	=>	$storcli_virtual_drive_controller_uuid, 
				storcli_virtual_drive_id_string		=>	$storcli_virtual_drive_id_string, 
				storcli_virtual_drive_creation_date	=>	$storcli_virtual_drive_creation_date, 
				storcli_virtual_drive_data_protection	=>	$storcli_virtual_drive_data_protection, 
				storcli_virtual_drive_disk_cache_policy	=>	$storcli_virtual_drive_disk_cache_policy, 
				storcli_virtual_drive_emulation_type	=>	$storcli_virtual_drive_emulation_type, 
				storcli_virtual_drive_encryption	=>	$storcli_virtual_drive_encryption, 
				storcli_virtual_drive_blocks		=>	$storcli_virtual_drive_blocks, 
				storcli_virtual_drive_strip_size	=>	$storcli_virtual_drive_strip_size, 
				storcli_virtual_drive_drives_per_span	=>	$storcli_virtual_drive_drives_per_span, 
				storcli_virtual_drive_span_depth	=>	$storcli_virtual_drive_span_depth, 
				storcli_virtual_drive_scsi_naa_id	=>	$storcli_virtual_drive_scsi_naa_id, 
			};
			$an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid} = {
				storcli_virtual_drive_controller_uuid	=>	$storcli_virtual_drive_controller_uuid, 
				storcli_virtual_drive_id_string		=>	$storcli_virtual_drive_id_string, 
				storcli_virtual_drive_creation_date	=>	$storcli_virtual_drive_creation_date, 
				storcli_virtual_drive_data_protection	=>	$storcli_virtual_drive_data_protection, 
				storcli_virtual_drive_disk_cache_policy	=>	$storcli_virtual_drive_disk_cache_policy, 
				storcli_virtual_drive_emulation_type	=>	$storcli_virtual_drive_emulation_type, 
				storcli_virtual_drive_encryption	=>	$storcli_virtual_drive_encryption, 
				storcli_virtual_drive_blocks		=>	$storcli_virtual_drive_blocks, 
				storcli_virtual_drive_strip_size	=>	$storcli_virtual_drive_strip_size, 
				storcli_virtual_drive_drives_per_span	=>	$storcli_virtual_drive_drives_per_span, 
				storcli_virtual_drive_span_depth	=>	$storcli_virtual_drive_span_depth, 
				storcli_virtual_drive_scsi_naa_id	=>	$storcli_virtual_drive_scsi_naa_id, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_virtual_drive_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}})
		{
			my $storcli_virtual_drive_controller_uuid   = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_controller_uuid};
			my $storcli_virtual_drive_id_string         = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_id_string};
			my $storcli_virtual_drive_creation_date     = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_creation_date};
			my $storcli_virtual_drive_data_protection   = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_data_protection};
			my $storcli_virtual_drive_disk_cache_policy = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_disk_cache_policy};
			my $storcli_virtual_drive_emulation_type    = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_emulation_type};
			my $storcli_virtual_drive_encryption        = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_encryption};
			my $storcli_virtual_drive_blocks            = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_blocks};
			my $storcli_virtual_drive_strip_size        = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_strip_size};
			my $storcli_virtual_drive_drives_per_span   = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_drives_per_span};
			my $storcli_virtual_drive_span_depth        = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_span_depth};
			my $storcli_virtual_drive_scsi_naa_id       = $an->data->{db_data}{unified}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{storcli_virtual_drive_scsi_naa_id};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0013", message_variables => {
				name1  => "storcli_virtual_drive_uuid",              value1  => $storcli_virtual_drive_uuid, 
				name2  => "storcli_virtual_drive_controller_uuid",   value2  => $storcli_virtual_drive_controller_uuid, 
				name3  => "storcli_virtual_drive_id_string",         value3  => $storcli_virtual_drive_id_string, 
				name4  => "storcli_virtual_drive_creation_date",     value4  => $storcli_virtual_drive_creation_date, 
				name5  => "storcli_virtual_drive_data_protection",   value5  => $storcli_virtual_drive_data_protection, 
				name6  => "storcli_virtual_drive_disk_cache_policy", value6  => $storcli_virtual_drive_disk_cache_policy, 
				name7  => "storcli_virtual_drive_emulation_type",    value7  => $storcli_virtual_drive_emulation_type, 
				name8  => "storcli_virtual_drive_encryption",        value8  => $storcli_virtual_drive_encryption, 
				name9  => "storcli_virtual_drive_blocks",            value9  => $storcli_virtual_drive_blocks, 
				name10 => "storcli_virtual_drive_strip_size",        value10 => $storcli_virtual_drive_strip_size, 
				name11 => "storcli_virtual_drive_drives_per_span",   value11 => $storcli_virtual_drive_drives_per_span, 
				name12 => "storcli_virtual_drive_span_depth",        value12 => $storcli_virtual_drive_span_depth, 
				name13 => "storcli_virtual_drive_scsi_naa_id",       value13 => $storcli_virtual_drive_scsi_naa_id, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_storcli_virtual_drive_blocks          =  $an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_blocks);
			my $quoted_storcli_virtual_drive_drives_per_span =  $an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_drives_per_span);
			my $quoted_storcli_virtual_drive_span_depth      =  $an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_span_depth);
			   $quoted_storcli_virtual_drive_blocks          =~ s/^'(.*?)'$/$1/;
			   $quoted_storcli_virtual_drive_drives_per_span =~ s/^'(.*?)'$/$1/;
			   $quoted_storcli_virtual_drive_span_depth      =~ s/^'(.*?)'$/$1/;
			if ((($quoted_storcli_virtual_drive_blocks)          && ($quoted_storcli_virtual_drive_blocks =~ /\D/))          or 
			    (($quoted_storcli_virtual_drive_drives_per_span) && ($quoted_storcli_virtual_drive_drives_per_span =~ /\D/)) or 
			    (($quoted_storcli_virtual_drive_span_depth)      && ($quoted_storcli_virtual_drive_span_depth =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0016", message_variables => { 
					virtual_drive_blocks => $quoted_storcli_virtual_drive_blocks,
					drives_per_span      => $quoted_storcli_virtual_drive_drives_per_span,
					span_depth           => $quoted_storcli_virtual_drive_span_depth,
				}, code => 16, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 16});
			}
			$quoted_storcli_virtual_drive_blocks          = "NULL" if $quoted_storcli_virtual_drive_blocks          eq "";
			$quoted_storcli_virtual_drive_drives_per_span = "NULL" if $quoted_storcli_virtual_drive_drives_per_span eq "";
			$quoted_storcli_virtual_drive_span_depth      = "NULL" if $quoted_storcli_virtual_drive_span_depth      eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_virtual_drive_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_virtual_drives::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_virtual_drives}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_virtual_drives::modified_date::${modified_date}::storcli_virtual_drive_uuid::${storcli_virtual_drive_uuid}", value1 => $an->data->{db_data}{$id}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_virtual_drive_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_virtual_drives
SET
    storcli_virtual_drive_controller_uuid   = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_controller_uuid).", 
    storcli_virtual_drive_id_string         = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_id_string).", 
    storcli_virtual_drive_creation_date     = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_creation_date).", 
    storcli_virtual_drive_data_protection   = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_data_protection).", 
    storcli_virtual_drive_disk_cache_policy = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_disk_cache_policy).", 
    storcli_virtual_drive_emulation_type    = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_emulation_type).", 
    storcli_virtual_drive_encryption        = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_encryption).", 
    storcli_virtual_drive_blocks            = $quoted_storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size        = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_strip_size).", 
    storcli_virtual_drive_drives_per_span   = $quoted_storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth        = $quoted_storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id       = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_scsi_naa_id).", 
    modified_date                           = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_virtual_drive_uuid              = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_virtual_drives
(
    storcli_virtual_drive_uuid, 
    storcli_virtual_drive_id_string, 
    storcli_virtual_drive_host_uuid, 
    storcli_virtual_drive_controller_uuid, 
    storcli_virtual_drive_creation_date, 
    storcli_virtual_drive_data_protection, 
    storcli_virtual_drive_disk_cache_policy, 
    storcli_virtual_drive_emulation_type, 
    storcli_virtual_drive_encryption, 
    storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size, 
    storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_creation_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_data_protection).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_disk_cache_policy).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_emulation_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_encryption).", 
    $quoted_storcli_virtual_drive_blocks, 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_strip_size).", 
    $quoted_storcli_virtual_drive_drives_per_span, 
    $quoted_storcli_virtual_drive_span_depth, 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_scsi_naa_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_virtual_drives WHERE storcli_virtual_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_virtual_drives", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_virtual_drives/ history.storcli_virtual_drives/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_virtual_drive_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_virtual_drives}{modified_date}{$modified_date}{storcli_virtual_drive_uuid}{$storcli_virtual_drive_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_virtual_drives
(
    storcli_virtual_drive_uuid, 
    storcli_virtual_drive_id_string, 
    storcli_virtual_drive_host_uuid, 
    storcli_virtual_drive_controller_uuid, 
    storcli_virtual_drive_creation_date, 
    storcli_virtual_drive_data_protection, 
    storcli_virtual_drive_disk_cache_policy, 
    storcli_virtual_drive_emulation_type, 
    storcli_virtual_drive_encryption, 
    storcli_virtual_drive_blocks, 
    storcli_virtual_drive_strip_size, 
    storcli_virtual_drive_drives_per_span, 
    storcli_virtual_drive_span_depth, 
    storcli_virtual_drive_scsi_naa_id, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_id_string).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_creation_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_data_protection).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_disk_cache_policy).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_emulation_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_encryption).", 
    $quoted_storcli_virtual_drive_blocks, 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_strip_size).", 
    $quoted_storcli_virtual_drive_drives_per_span, 
    $quoted_storcli_virtual_drive_span_depth, 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_virtual_drive_scsi_naa_id).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_virtual_drive_uuid?
			} # foreach my $id 
		} # foreach my $storcli_virtual_drive_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_bbus' table.
sub update_db_bbus
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_bbus" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_bbus' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_bbu_uuid, 
    storcli_bbu_controller_uuid, 
    storcli_bbu_serial_number, 
    storcli_bbu_type, 
    storcli_bbu_model, 
    storcli_bbu_state, 
    storcli_bbu_manufacture_date, 
    storcli_bbu_design_capacity, 
    storcli_bbu_replacement_needed, 
    modified_date 
FROM 
    history.storcli_bbus
WHERE
    storcli_bbu_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_bbu_uuid               =         $row->[0]; 
			my $storcli_bbu_controller_uuid    =         $row->[1];
			my $storcli_bbu_serial_number      =         $row->[2];
			my $storcli_bbu_type               = defined $row->[3] ? $row->[3] : "";
			my $storcli_bbu_model              = defined $row->[4] ? $row->[4] : "";
			my $storcli_bbu_state              = defined $row->[5] ? $row->[5] : "";
			my $storcli_bbu_manufacture_date   = defined $row->[6] ? $row->[6] : "";
			my $storcli_bbu_design_capacity    = defined $row->[7] ? $row->[7] : "";
			my $storcli_bbu_replacement_needed = defined $row->[8] ? $row->[8] : "";
			my $modified_date                  =         $row->[9];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
				name1  => "storcli_bbu_uuid",               value1  => $storcli_bbu_uuid, 
				name2  => "storcli_bbu_controller_uuid",    value2  => $storcli_bbu_controller_uuid, 
				name3  => "storcli_bbu_serial_number",      value3  => $storcli_bbu_serial_number, 
				name4  => "storcli_bbu_type",               value4  => $storcli_bbu_type, 
				name5  => "storcli_bbu_model",              value5  => $storcli_bbu_model, 
				name6  => "storcli_bbu_state",              value6  => $storcli_bbu_state, 
				name7  => "storcli_bbu_manufacture_date",   value7  => $storcli_bbu_manufacture_date, 
				name8  => "storcli_bbu_design_capacity",    value8  => $storcli_bbu_design_capacity, 
				name9  => "storcli_bbu_replacement_needed", value9  => $storcli_bbu_replacement_needed, 
				name10 => "modified_date",                  value10 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid} = {
				storcli_bbu_controller_uuid	=>	$storcli_bbu_controller_uuid, 
				storcli_bbu_serial_number	=>	$storcli_bbu_serial_number,
				storcli_bbu_type		=>	$storcli_bbu_type, 
				storcli_bbu_model		=>	$storcli_bbu_model, 
				storcli_bbu_state		=>	$storcli_bbu_state, 
				storcli_bbu_manufacture_date	=>	$storcli_bbu_manufacture_date, 
				storcli_bbu_design_capacity	=>	$storcli_bbu_design_capacity, 
				storcli_bbu_replacement_needed	=>	$storcli_bbu_replacement_needed, 
			};
			$an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid} = {
				storcli_bbu_controller_uuid	=>	$storcli_bbu_controller_uuid, 
				storcli_bbu_serial_number	=>	$storcli_bbu_serial_number,
				storcli_bbu_type		=>	$storcli_bbu_type, 
				storcli_bbu_model		=>	$storcli_bbu_model, 
				storcli_bbu_state		=>	$storcli_bbu_state, 
				storcli_bbu_manufacture_date	=>	$storcli_bbu_manufacture_date, 
				storcli_bbu_design_capacity	=>	$storcli_bbu_design_capacity, 
				storcli_bbu_replacement_needed	=>	$storcli_bbu_replacement_needed, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_bbus}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_bbu_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}})
		{
			my $storcli_bbu_controller_uuid    = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_controller_uuid};
			my $storcli_bbu_serial_number      = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_serial_number};
			my $storcli_bbu_type               = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_type};
			my $storcli_bbu_model              = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_model};
			my $storcli_bbu_state              = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_state};
			my $storcli_bbu_manufacture_date   = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_manufacture_date};
			my $storcli_bbu_design_capacity    = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_design_capacity};
			my $storcli_bbu_replacement_needed = $an->data->{db_data}{unified}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}{storcli_bbu_replacement_needed};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "storcli_bbu_uuid",               value1 => $storcli_bbu_uuid, 
				name2 => "storcli_bbu_controller_uuid",    value2 => $storcli_bbu_controller_uuid, 
				name3 => "storcli_bbu_serial_number",      value3 => $storcli_bbu_serial_number, 
				name4 => "storcli_bbu_type",               value4 => $storcli_bbu_type, 
				name5 => "storcli_bbu_model",              value5 => $storcli_bbu_model, 
				name6 => "storcli_bbu_state",              value6 => $storcli_bbu_state, 
				name7 => "storcli_bbu_manufacture_date",   value7 => $storcli_bbu_manufacture_date, 
				name8 => "storcli_bbu_design_capacity",    value8 => $storcli_bbu_design_capacity, 
				name9 => "storcli_bbu_replacement_needed", value9 => $storcli_bbu_replacement_needed, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_bbu_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_bbus::storcli_bbu_uuid::${storcli_bbu_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_bbus}{storcli_bbu_uuid}{$storcli_bbu_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_bbus::modified_date::${modified_date}::storcli_bbu_uuid::${storcli_bbu_uuid}", value1 => $an->data->{db_data}{$id}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_bbu_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_bbus
SET
    storcli_bbu_controller_uuid    = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_controller_uuid).", 
    storcli_bbu_serial_number      = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_serial_number).", 
    storcli_bbu_type               = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_type).", 
    storcli_bbu_model              = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_model).", 
    storcli_bbu_state              = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_state).", 
    storcli_bbu_manufacture_date   = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_manufacture_date).", 
    storcli_bbu_design_capacity    = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_design_capacity).", 
    storcli_bbu_replacement_needed = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_replacement_needed).", 
    modified_date                  = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_bbu_uuid               = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_bbus
(
    storcli_bbu_uuid, 
    storcli_bbu_host_uuid, 
    storcli_bbu_controller_uuid, 
    storcli_bbu_serial_number, 
    storcli_bbu_type, 
    storcli_bbu_model, 
    storcli_bbu_state, 
    storcli_bbu_design_capacity, 
    storcli_bbu_manufacture_date, 
    storcli_bbu_replacement_needed, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_bbus WHERE storcli_bbu_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_bbus", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_bbus/ history.storcli_bbus/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_bbu_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_bbus}{modified_date}{$modified_date}{storcli_bbu_uuid}{$storcli_bbu_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_bbus
(
    storcli_bbu_uuid, 
    storcli_bbu_host_uuid, 
    storcli_bbu_controller_uuid, 
    storcli_bbu_serial_number, 
    storcli_bbu_type, 
    storcli_bbu_model, 
    storcli_bbu_state, 
    storcli_bbu_design_capacity, 
    storcli_bbu_manufacture_date, 
    storcli_bbu_replacement_needed, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_bbu_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_bbu_uuid?
			} # foreach my $id 
		} # foreach my $storcli_bbu_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_cachevaults' table.
sub update_db_cachevaults
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_cachevaults" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_cachevaults' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_cachevault_uuid, 
    storcli_cachevault_controller_uuid, 
    storcli_cachevault_serial_number, 
    storcli_cachevault_state, 
    storcli_cachevault_design_capacity, 
    storcli_cachevault_replacement_needed, 
    storcli_cachevault_type, 
    storcli_cachevault_manufacture_date, 
    modified_date 
FROM 
    history.storcli_cachevaults
WHERE
    storcli_cachevault_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_cachevault_uuid               =         $row->[0]; 
			my $storcli_cachevault_controller_uuid    =         $row->[1];
			my $storcli_cachevault_serial_number      =         $row->[2]; 
			my $storcli_cachevault_state              = defined $row->[3] ? $row->[3] : "";
			my $storcli_cachevault_design_capacity    = defined $row->[4] ? $row->[4] : "";
			my $storcli_cachevault_replacement_needed = defined $row->[5] ? $row->[5] : "";
			my $storcli_cachevault_type               = defined $row->[6] ? $row->[6] : "";
			my $storcli_cachevault_manufacture_date   = defined $row->[7] ? $row->[7] : "";
			my $modified_date                         =         $row->[8];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "storcli_cachevault_uuid",               value1 => $storcli_cachevault_uuid, 
				name2 => "storcli_cachevault_controller_uuid",    value2 => $storcli_cachevault_controller_uuid, 
				name3 => "storcli_cachevault_serial_number",      value3 => $storcli_cachevault_serial_number, 
				name4 => "storcli_cachevault_state",              value4 => $storcli_cachevault_state, 
				name5 => "storcli_cachevault_design_capacity",    value5 => $storcli_cachevault_design_capacity, 
				name6 => "storcli_cachevault_replacement_needed", value6 => $storcli_cachevault_replacement_needed, 
				name7 => "storcli_cachevault_type",               value7 => $storcli_cachevault_type, 
				name8 => "storcli_cachevault_manufacture_date",   value8 => $storcli_cachevault_manufacture_date, 
				name9 => "modified_date",                         value9 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid} = {
				storcli_cachevault_controller_uuid	=>	$storcli_cachevault_controller_uuid, 
				storcli_cachevault_serial_number	=>	$storcli_cachevault_serial_number, 
				storcli_cachevault_state		=>	$storcli_cachevault_state, 
				storcli_cachevault_design_capacity	=>	$storcli_cachevault_design_capacity, 
				storcli_cachevault_replacement_needed	=>	$storcli_cachevault_replacement_needed, 
				storcli_cachevault_type			=>	$storcli_cachevault_type, 
				storcli_cachevault_manufacture_date	=>	$storcli_cachevault_manufacture_date, 
			};
			$an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid} = {
				storcli_cachevault_controller_uuid	=>	$storcli_cachevault_controller_uuid, 
				storcli_cachevault_serial_number	=>	$storcli_cachevault_serial_number, 
				storcli_cachevault_state		=>	$storcli_cachevault_state, 
				storcli_cachevault_design_capacity	=>	$storcli_cachevault_design_capacity, 
				storcli_cachevault_replacement_needed	=>	$storcli_cachevault_replacement_needed, 
				storcli_cachevault_type			=>	$storcli_cachevault_type, 
				storcli_cachevault_manufacture_date	=>	$storcli_cachevault_manufacture_date, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_cachevault_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}})
		{
			my $storcli_cachevault_controller_uuid    = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_controller_uuid};
			my $storcli_cachevault_serial_number      = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_serial_number};
			my $storcli_cachevault_state              = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_state};
			my $storcli_cachevault_design_capacity    = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_design_capacity};
			my $storcli_cachevault_replacement_needed = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_replacement_needed};
			my $storcli_cachevault_type               = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_type};
			my $storcli_cachevault_manufacture_date   = $an->data->{db_data}{unified}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{storcli_cachevault_manufacture_date};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0008", message_variables => {
				name1 => "storcli_cachevault_uuid",               value1 => $storcli_cachevault_uuid, 
				name2 => "storcli_cachevault_controller_uuid",    value2 => $storcli_cachevault_controller_uuid, 
				name3 => "storcli_cachevault_serial_number",      value3 => $storcli_cachevault_serial_number, 
				name4 => "storcli_cachevault_state",              value4 => $storcli_cachevault_state, 
				name5 => "storcli_cachevault_design_capacity",    value5 => $storcli_cachevault_design_capacity, 
				name6 => "storcli_cachevault_replacement_needed", value6 => $storcli_cachevault_replacement_needed, 
				name7 => "storcli_cachevault_type",               value7 => $storcli_cachevault_type, 
				name8 => "storcli_cachevault_manufacture_date",   value8 => $storcli_cachevault_manufacture_date, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_cachevault_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_cachevaults::storcli_cachevault_uuid::${storcli_cachevault_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_cachevaults}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_cachevaults::modified_date::${modified_date}::storcli_cachevault_uuid::${storcli_cachevault_uuid}", value1 => $an->data->{db_data}{$id}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_cachevault_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_cachevaults
SET
    storcli_cachevault_controller_uuid    = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_controller_uuid).", 
    storcli_cachevault_serial_number      = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_serial_number).", 
    storcli_cachevault_state              = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_state).", 
    storcli_cachevault_design_capacity    = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_design_capacity).", 
    storcli_cachevault_replacement_needed = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_replacement_needed).", 
    storcli_cachevault_type               = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_type).", 
    storcli_cachevault_manufacture_date   = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_manufacture_date).", 
    modified_date                         = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_cachevault_uuid               = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_cachevaults
(
    storcli_cachevault_uuid, 
    storcli_cachevault_host_uuid, 
    storcli_cachevault_controller_uuid, 
    storcli_cachevault_serial_number, 
    storcli_cachevault_state, 
    storcli_cachevault_design_capacity, 
    storcli_cachevault_replacement_needed, 
    storcli_cachevault_type, 
    storcli_cachevault_manufacture_date, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_cachevaults WHERE storcli_cachevault_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_cachevaults", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_cachevaults/ history.storcli_cachevaults/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_cachevault_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_cachevaults}{modified_date}{$modified_date}{storcli_cachevault_uuid}{$storcli_cachevault_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_cachevaults
(
    storcli_cachevault_uuid, 
    storcli_cachevault_host_uuid, 
    storcli_cachevault_controller_uuid, 
    storcli_cachevault_serial_number, 
    storcli_cachevault_state, 
    storcli_cachevault_design_capacity, 
    storcli_cachevault_replacement_needed, 
    storcli_cachevault_type, 
    storcli_cachevault_manufacture_date, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_design_capacity).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_replacement_needed).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_cachevault_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_cachevault_uuid?
			} # foreach my $id 
		} # foreach my $storcli_cachevault_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_variables' table.
sub update_db_variables
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_variables" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_variables' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_variable_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
FROM 
    history.storcli_variables
WHERE
    storcli_variable_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_variable_uuid            = $row->[0]; 
			my $storcli_variable_source_table    = $row->[1]; 
			my $storcli_variable_source_uuid     = $row->[2]; 
			my $storcli_variable_is_temperature  = $row->[3]; 
			my $storcli_variable_name            = $row->[4]; 
			my $storcli_variable_value           = defined $row->[5] ? $row->[5] : ""; 
			my $modified_date                    = $row->[6];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0007", message_variables => {
				name1 => "storcli_variable_uuid",           value1 => $storcli_variable_uuid, 
				name2 => "storcli_variable_source_table",   value2 => $storcli_variable_source_table, 
				name3 => "storcli_variable_source_uuid",    value3 => $storcli_variable_source_uuid, 
				name4 => "storcli_variable_is_temperature", value4 => $storcli_variable_is_temperature, 
				name5 => "storcli_variable_name",           value5 => $storcli_variable_name, 
				name6 => "storcli_variable_value",          value6 => $storcli_variable_value, 
				name7 => "modified_date",                   value7 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid} = {
				storcli_variable_source_table	=>	$storcli_variable_source_table, 
				storcli_variable_source_uuid	=>	$storcli_variable_source_uuid, 
				storcli_variable_is_temperature	=>	$storcli_variable_is_temperature, 
				storcli_variable_name		=>	$storcli_variable_name, 
				storcli_variable_value		=>	$storcli_variable_value, 
			};
			$an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid} = {
				storcli_variable_source_table	=>	$storcli_variable_source_table, 
				storcli_variable_source_uuid	=>	$storcli_variable_source_uuid, 
				storcli_variable_is_temperature	=>	$storcli_variable_is_temperature, 
				storcli_variable_name		=>	$storcli_variable_name, 
				storcli_variable_value		=>	$storcli_variable_value, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_variables}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_variable_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}})
		{
			my $storcli_variable_source_table   = $an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}{storcli_variable_source_table};
			my $storcli_variable_source_uuid    = $an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}{storcli_variable_source_uuid};
			my $storcli_variable_is_temperature = $an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}{storcli_variable_is_temperature};
			my $storcli_variable_name           = $an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}{storcli_variable_name};
			my $storcli_variable_value          = $an->data->{db_data}{unified}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}{storcli_variable_value};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "storcli_variable_uuid",           value1 => $storcli_variable_uuid, 
				name2 => "storcli_variable_source_table",   value2 => $storcli_variable_source_table, 
				name3 => "storcli_variable_source_uuid",    value3 => $storcli_variable_source_uuid, 
				name4 => "storcli_variable_is_temperature", value4 => $storcli_variable_is_temperature, 
				name5 => "storcli_variable_name",           value5 => $storcli_variable_name, 
				name6 => "storcli_variable_value",          value6 => $storcli_variable_value, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_variable_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_variables::storcli_variable_uuid::${storcli_variable_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_variables::storcli_variable_uuid::${storcli_variable_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_variables}{storcli_variable_uuid}{$storcli_variable_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_variables::modified_date::${modified_date}::storcli_variable_uuid::${storcli_variable_uuid}", value1 => $an->data->{db_data}{$id}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# storcli_variable_uuid from this host.
							my $query = "
UPDATE 
    public.storcli_variables
SET
    storcli_variable_source_table   = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_table).", 
    storcli_variable_source_uuid    = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_uuid).", 
    storcli_variable_is_temperature = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_is_temperature).", 
    storcli_variable_name           = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_name).", 
    storcli_variable_value          = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_value).", 
    modified_date                   = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_variable_uuid           = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_variables WHERE storcli_variable_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_variables", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_variables/ history.storcli_variables/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_variable_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_variables}{modified_date}{$modified_date}{storcli_variable_uuid}{$storcli_variable_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_variables
(
    storcli_variable_uuid, 
    storcli_variable_host_uuid, 
    storcli_variable_source_table, 
    storcli_variable_source_uuid, 
    storcli_variable_is_temperature, 
    storcli_variable_name, 
    storcli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_variable_uuid?
			} # foreach my $id 
		} # foreach my $storcli_variable_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'storcli_controllers' table.
sub update_db_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'storcli_controllers' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    storcli_controller_uuid, 
    storcli_controller_serial_number, 
    storcli_controller_model, 
    storcli_controller_alarm_state, 
    storcli_controller_cache_size, 
    modified_date 
FROM 
    history.storcli_controllers
WHERE
    storcli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $storcli_controller_uuid          = $row->[0]; 
			my $storcli_controller_serial_number = $row->[1]; 
			my $storcli_controller_model         = $row->[2]; 
			my $storcli_controller_alarm_state   = $row->[3]; 
			my $storcli_controller_cache_size    = $row->[4]; 
			my $modified_date                    = $row->[5];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "storcli_controller_uuid",          value1 => $storcli_controller_uuid, 
				name2 => "storcli_controller_serial_number", value2 => $storcli_controller_serial_number, 
				name3 => "storcli_controller_model",         value3 => $storcli_controller_model, 
				name4 => "storcli_controller_alarm_state",   value4 => $storcli_controller_alarm_state, 
				name5 => "storcli_controller_cache_size",    value5 => $storcli_controller_cache_size, 
				name6 => "modified_date",                    value6 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid} = {
				storcli_controller_serial_number	=>	$storcli_controller_serial_number, 
				storcli_controller_model		=>	$storcli_controller_model, 
				storcli_controller_alarm_state		=>	$storcli_controller_alarm_state, 
				storcli_controller_cache_size		=>	$storcli_controller_cache_size, 
			};
			$an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid} = {
				storcli_controller_serial_number	=>	$storcli_controller_serial_number, 
				storcli_controller_model		=>	$storcli_controller_model, 
				storcli_controller_alarm_state		=>	$storcli_controller_alarm_state, 
				storcli_controller_cache_size		=>	$storcli_controller_cache_size, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{storcli_controllers}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $storcli_controller_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}})
		{
			my $storcli_controller_serial_number = $an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_serial_number};
			my $storcli_controller_model = $an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_model};
			my $storcli_controller_alarm_state = $an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_alarm_state};
			my $storcli_controller_cache_size = $an->data->{db_data}{unified}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid}{storcli_controller_cache_size};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "storcli_controller_uuid",          value1  => $storcli_controller_uuid, 
				name2 => "storcli_controller_serial_number", value2 => $storcli_controller_serial_number, 
				name3 => "storcli_controller_model",         value3 => $storcli_controller_model, 
				name4 => "storcli_controller_alarm_state",   value4 => $storcli_controller_alarm_state, 
				name5 => "storcli_controller_cache_size",    value5 => $storcli_controller_cache_size, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'storcli_controller_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::seen", value1 => $an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::storcli_controllers::storcli_controller_uuid::${storcli_controller_uuid}::exists", value1 => $an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{storcli_controllers}{storcli_controller_uuid}{$storcli_controller_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::storcli_controllers::modified_date::${modified_date}::storcli_controller_uuid::${storcli_controller_uuid}", value1 => $an->data->{db_data}{$id}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.storcli_controllers
SET
    storcli_controller_serial_number = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_serial_number).", 
    storcli_controller_model         = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_model).", 
    storcli_controller_alarm_state   = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_alarm_state).", 
    storcli_controller_cache_size    = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_cache_size).", 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    storcli_controller_host_uuid     = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    storcli_controller_uuid          = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.storcli_controllers
(
    storcli_controller_host_uuid, 
    storcli_controller_uuid, 
    storcli_controller_serial_number, 
    storcli_controller_model, 
    storcli_controller_alarm_state, 
    storcli_controller_cache_size, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_alarm_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_cache_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.storcli_controllers WHERE storcli_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "storcli_controllers", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.storcli_controllers/ history.storcli_controllers/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'storcli_controller_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{storcli_controllers}{modified_date}{$modified_date}{storcli_controller_uuid}{$storcli_controller_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.storcli_controllers
(
    storcli_controller_host_uuid, 
    storcli_controller_uuid, 
    storcli_controller_serial_number, 
    storcli_controller_model, 
    storcli_controller_alarm_state, 
    storcli_controller_cache_size, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).",
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_alarm_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($storcli_controller_cache_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen storcli_controller_uuid?
			} # foreach my $id 
		} # foreach my $storcli_controller_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# This checks to see if this agent's databases tables exist and, if not, load the schema. If the schema gets
# loaded, we'll check other databases for older information and load it.
sub prep_databases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "prep_databases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Loop through the databases...
	$an->Log->entry({log_level => 3, message_key => "scancore_log_0016", message_variables => { agent => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		my $query = "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE tablename='storcli_controllers' AND schemaname='public';";
		#                     The actual query -----------------.                                                .------- Row 0
		#                        Query this DB --.              |                                                |    .-- Columns 0
		my $count = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "count", value1 => $count
		}, file => $THIS_FILE, line => __LINE__});
		
		# Did we find the table?
		if ($count < 1)
		{
			# Nope. Need to load the database schema.
			$an->Log->entry({log_level => 3, message_key => "scancore_log_0017", file => $THIS_FILE, line => __LINE__});
			$an->DB->load_schema({id => $id, file => $an->data->{path}{sql}});
			
			# Send an alert telling the user that we've initialized this database.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"notice_message_0002",
				alert_message_variables	=>	{
					name			=>	$an->data->{scancore}{db}{$id}{name},
					host			=>	$an->data->{scancore}{db}{$id}{host},
					agent			=>	$THIS_FILE,
				},
			});
		}
		else
		{
			# Table exists, schema load is not needed.
			$an->Log->entry({log_level => 3, message_key => "scancore_log_0018", file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# This gathers the various data from the controller(s).
sub gather_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "gather_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: This assumes the controllers go 0, 1, ... n. If this is wrong, we'll need to call 
	###       'storcli64 show all' and parse 'System Overview'.
	# Loops through reach found controller.
	foreach my $controller (1..$an->data->{sys}{adapter_count})
	{
		# We drop the number by 1 because the '/cX' starts at '0' where the controller count starts 
		# at '1'.
		my $adapter = ($controller - 1);
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "controller", value1 => $controller, 
			name2 => "adapter",    value2 => $adapter, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read in controller data.
		my $serial_number = get_controller_info($an, $adapter);
		
		# We use dummy VDs and DGs to store drives not allocated to either yet. The drives will 
		# reference their parent controller, but the VDs and DGs won't. To deal with this, we need to
		# allocate the pseudo DG and VG to something, so we'll use the first controller's SN that we
		# see.
		if ($controller eq "1")
		{
			my $storcli_virtual_drive_id_string = $serial_number."-vd9999";
			$an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{on_controller} = $serial_number;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${storcli_virtual_drive_id_string}::variable::on_controller", value1 => $an->data->{virtual_drive}{$storcli_virtual_drive_id_string}{variable}{on_controller}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Read in cachevault (FBU) data (if it exists).
		get_cachevault_data($an, $adapter, $serial_number);
		
		# Read in BBU data (if it exists).
		get_bbu_data($an, $adapter, $serial_number);
		
		# Read in virtual drive information.
		get_virtual_drive_data($an, $adapter, $serial_number);
		
		# Read in the physical disk information.
		get_physical_disk_data($an, $adapter, $serial_number);
	}
	
	return(0);
}

# This looks for physical disks on the controller.
sub get_physical_disk_data
{
	my ($an, $adapter, $serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_physical_disk_data" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "adapter",       value1 => $adapter, 
		name2 => "serial_number", value2 => $serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $virtual_drive         = $serial_number."-vd9999";
	my $drive_group           = 9999;
	my $enclosure_id          = "";
	my $slot_number           = "";
	my $device_id             = "";
	my $state                 = "";
	my $drive_size            = "";
	my $interface             = "";
	my $drive_media           = "";
	my $self_encrypting_drive = "";
	my $protection_info       = "";
	my $drive_model           = "";
	my $spun_up               = "";
	my $in_drive_header       = 0;
	my $in_port_status        = 0;
	my $start_break           = 0;
	my $sector_size           = 0;
	my $sector_variables      = [];
	my $shell_call            = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{physical_disk_data};
	$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
		name1 => "virtual_drive", value1 => $virtual_drive, 
		name2 => "shell_call",    value2 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		next if not $line;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### TODO: Make sure we don't hit a case where we don't find the virtual drive ID string 
		###       before we start recording data. If we do, we'll have to artificially create the ID
		###       from the controller's serial number (which is pretty safe).
		# If I am in the drive header, look for this drive data
		#                                     EID          :Slt            DID     State   DG      Size       Intf  Med     SED     PI      SeSz     Model      Sp
		#                                     252          :0              9       Onln    0       136.218 GB SAS   HDD     N       N       512B     MK1401GRRB U
		if (($in_drive_header) && ($line =~ /^$enclosure_id:$slot_number\s+(\d+)\s+(.*?)\s+(.*?)\s+(.*?B)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?B)\s+(.*?)\s+(.*)$/))
		{
			$device_id             = $1;
			$state                 = $2;
			$drive_group           = $3;
			$drive_size            = $4;
			$interface             = $5;
			$drive_media           = $6;
			$self_encrypting_drive = $7;
			$protection_info       = $8;
			$sector_size           = $9;
			$drive_model           = $10;
			$spun_up               = $11;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0013", message_variables => {
				name1  => "enclosure_id",          value1  => $enclosure_id, 
				name2  => "slot_number",           value2  => $slot_number, 
				name3  => "device_id",             value3  => $device_id, 
				name4  => "state",                 value4  => $state, 
				name5  => "drive_group",           value5  => $drive_group, 
				name6  => "drive_size",            value6  => $drive_size, 
				name7  => "interface",             value7  => $interface, 
				name8  => "drive_media",           value8  => $drive_media, 
				name9  => "self_encrypting_drive", value9  => $self_encrypting_drive, 
				name10 => "protection_info",       value10 => $protection_info, 
				name11 => "sector_size",           value11 => $sector_size, 
				name12 => "drive_model",           value12 => $drive_model, 
				name13 => "spun_up",               value13 => $spun_up, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If it isn't in a drive group, it also won't be in a virtual drive.
			if ($drive_group eq "-")
			{
				$drive_group = 9999 ;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "drive_group", value1 => $drive_group, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($drive_group =~ /^\d+$/)
			{
				# Find the virtual drive this drive is connected to, if any.
				foreach my $this_virtual_drive (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
				{
					# This avoids auto-vivication of the drive group under the virtual drive
					next if not exists $an->data->{virtual_drive}{$this_virtual_drive}{drive_group}{$drive_group};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "virtual_drive::${this_virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_size", value1 => $an->data->{virtual_drive}{$this_virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{virtual_drive}{$this_virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size})
					{
						# Found it.
						$virtual_drive = $this_virtual_drive;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "virtual_drive", value1 => $virtual_drive, 
						}, file => $THIS_FILE, line => __LINE__});
						last;
					}
				}
			}
			else
			{
				# Not sure that this should ever happen...
				$an->Log->entry({log_level => 1, message_key => "scan_storcli_warning_0005", message_variables => {
					line        => $line, 
					drive_group => $drive_group,
				}, file => $THIS_FILE, line => __LINE__});
			}
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive", value1 => $virtual_drive, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to record this here because drives not in a drive group will be missed 
			# later in process_vg_pd_list_data(). Drives processed there may overwrite this data,
			# which is fine.
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{device_id}             = $device_id;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{'state'}               = $state;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size}            = $drive_size;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{interface}             = $interface;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_media}           = $drive_media;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{self_encrypting_drive} = $self_encrypting_drive;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{protection_info}       = $protection_info;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sector_size}           = $sector_size;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_model}           = $drive_model;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{spun_up}               = $spun_up;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller}         = $serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0011", message_variables => {
				name1  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::device_id",             value1  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{device_id}, 
				name2  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::state",                 value2  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{'state'}, 
				name3  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_size",            value3  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size}, 
				name4  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::interface",             value4  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{interface}, 
				name5  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_media",           value5  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_media}, 
				name6  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::self_encrypting_drive", value6  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{self_encrypting_drive}, 
				name7  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::protection_info",       value7  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{protection_info}, 
				name8  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::sector_size",           value8  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sector_size}, 
				name9  => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_model",           value9  => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_model}, 
				name10 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::spun_up",               value10 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{spun_up}, 
				name11 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::on_controller",         value11 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller}, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# See if I am entering or exiting a section.
		if ($line =~ /Drive \/c$adapter\/e(\d+)\/s(\d+):/i)
		{
			$enclosure_id    = $1;
			$slot_number     = $2;
			#$slot_number     = sprintf("%02d", $slot_number);
			$in_drive_header = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "enclosure_id",    value1 => $enclosure_id, 
				name2 => "slot_number",     value2 => $slot_number, 
				name3 => "in_drive_header", value3 => $in_drive_header, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		if ($line =~ /Drive \/c$adapter\/e(\d+)\/s(\d+) State/i)
		{
			$enclosure_id    = $1;
			$slot_number     = $2;
			#$slot_number     = sprintf("%02d", $slot_number);
			$in_drive_header = 0;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "enclosure_id",    value1 => $enclosure_id, 
				name2 => "slot_number",     value2 => $slot_number, 
				name3 => "in_drive_header", value3 => $in_drive_header, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		if ($line =~ /^Port Status /)
		{
			$in_port_status = 1;
			$start_break    = 0;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "in_port_status", value1 => $in_port_status, 
				name2 => "start_break",    value2 => $start_break, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if (($line =~ /^--------/) && ($in_port_status))
		{
			if (not $start_break)
			{
				# Split point set, must be the start break
				$start_break = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "start_break", value1 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			else
			{
				# In 'port status' and start break set, must be end break.
				$in_port_status = 0;
				$start_break    = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_port_status", value1 => $in_port_status, 
					name2 => "start_break",    value2 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				
				### NOTE: So far as I can tell, there is only ever two SAS ports on hard 
				###       drives. The way the system parses them handles N-number of ports,
				###       though. For now, we'll squeeze these into the top layer variables
				###       to save having to have another table to process.
				my $sas_port_0_port_status = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{0}{port_status};
				my $sas_port_0_link_speed  = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{0}{link_speed};
				my $sas_port_0_sas_address = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{0}{sas_address};
				my $sas_port_1_port_status = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{1}{port_status};
				my $sas_port_1_link_speed  = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{1}{link_speed};
				my $sas_port_1_sas_address = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{1}{sas_address};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
					name1 => "sas_port_0_port_status", value1 => $sas_port_0_port_status, 
					name2 => "sas_port_0_link_speed",  value2 => $sas_port_0_link_speed, 
					name3 => "sas_port_0_sas_address", value3 => $sas_port_0_sas_address, 
					name4 => "sas_port_1_port_status", value4 => $sas_port_1_port_status, 
					name5 => "sas_port_1_link_speed",  value5 => $sas_port_1_link_speed, 
					name6 => "sas_port_1_sas_address", value6 => $sas_port_1_sas_address, 
				}, file => $THIS_FILE, line => __LINE__});
				
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_0_port_status} = $sas_port_0_port_status;
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_0_link_speed}  = $sas_port_0_link_speed;
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_0_sas_address} = $sas_port_0_sas_address;
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_1_port_status} = $sas_port_1_port_status;
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_1_link_speed}  = $sas_port_1_link_speed;
				$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sas_port_1_sas_address} = $sas_port_1_sas_address;
				next;
			}
		}
		
		# We stop processing a given drive when we see 'Inquiry Data'.
		if ($line =~ /^Inquiry Data =/)
		{
			# Process and variables that need their size calculated from sectors to bytes.
			# These are always variables.
			foreach my $variable (sort {$a cmp $b} @{$sector_variables})
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
				next if not $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable};

				my $value = $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
				if ($value =~ /^(\d+) bytes, (\d+) sectors/)
				{
					my $size    = $1;
					my $sectors = $2;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
						name1 => "size",        value1 => $size, 
						name2 => "sectors",     value2 => $sectors, 
						name3 => "sector_size", value3 => $sector_size, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($sector_size)
					{
						$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = ($sectors * $sector_size);
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					else
					{
						$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = $size;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
			}
			
			# Record the drive as being on this controller.
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller} = $serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::on_controller", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{on_controller}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			$virtual_drive    = $serial_number."-vd9999";
			$drive_group      = 9999;
			$enclosure_id     = "";
			$slot_number      = "";
			$in_drive_header  = 0;
			$in_port_status   = 0;
			$start_break      = 0;
			$sector_size      = 0;
			$sector_variables = [];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive", value1 => $virtual_drive, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		next if $enclosure_id eq "";
		
		# If I am in the port status, parse the port info.
		if (($in_port_status) && ($line =~ /^(\d+)\s+(.*?)\s+(\d.*?)Gb\/s\s+(0x.*)$/))
		{
			my $sas_port    = $1;
			my $port_status = $2;
			my $link_speed  = $3." Gbps";
			my $sas_address = $4;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
				name1 => "sas_port",    value1 => $sas_port, 
				name2 => "port_status", value2 => $port_status, 
				name3 => "link_speed",  value3 => $link_speed, 
				name4 => "sas_address", value4 => $sas_address, 
			}, file => $THIS_FILE, line => __LINE__});
			
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{port_status} = $port_status;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{link_speed}  = $link_speed;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{sas_address} = $sas_address;
			# These are so flipping long that we print them as three separate log entries so that
			# they're easier to read in the logs.
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::sas_port::${sas_port}::port_status", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{port_status}, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::sas_port::${sas_port}::link_speed",  value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{link_speed}, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::sas_port::${sas_port}::sas_address", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{sas_port}{$sas_port}{sas_address}, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		### If I have a 'variable = value' pair split and parse.
		# The 'Drive position' isn't set for drives not in an array/drive group.
		if ($line =~ /^Drive position = DriveGroup:(\d+), Span:(\d+), Row:(\d+)/i)
		{
			my $this_drive_group = $1;
			my $span             = $2;
			my $row              = $3;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "this_drive_group", value1 => $this_drive_group, 
				name2 => "span",             value2 => $span, 
				name3 => "row",              value3 => $row, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# I don't pick up this until well into the scan, but the drive group should match 
			# what we found earlier. Just to be safe though, if not, throw a warning.
			if ($this_drive_group ne $drive_group)
			{
				# Report this error 
				$an->Log->entry({log_level => 0, title_key => "tools_title_0002", message_key => "scan_storcli_warning_0001", message_variables => { 
					adapter         => $adapter,
					serial_number   => $serial_number, 
					virtual_drive   => $virtual_drive, 
					enclosure_id    => $enclosure_id, 
					slot_number     => $slot_number, 
					span            => $span, 
					row             => $row, 
					old_drive_group => $drive_group,
					new_drive_group => $this_drive_group,
					shell_call      => $shell_call,
				}, file => $THIS_FILE, line => __LINE__});
				$drive_group = $this_drive_group;
				$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
					name1 => "drive_group", value1 => $drive_group, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{span} = $span;
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{row}  = $row;
			
			# These are so flipping long that we print them as three separate log entries so that
			# they're easier to read in the logs.
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::span", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{span}, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::row", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{row}, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# Split and process all 'variable = value' lines we've not already handled.
		if ($line =~ /^(.*?)\s+=\s+(.*)$/)
		{
			my $variable = $1;
			my $value    = $2;
			my $type     = "variable";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Process some variable names.
			if ($variable =~ /^SN$/i)
			{
				$variable = "Serial Number";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ /^WWN$/i)
			{
				$variable = "World Wide Name";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ /^PI /i)
			{
				$variable =~ s/^PI /Protection Information /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ / Id$/i)
			{
				$variable =~ s/ Id$/ Identification/;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ /^Sector Size$/i)
			{
				# Convert to bytes and record.
				$value       = $an->Readable->hr_to_bytes({base2 => 1, size => $value})." Bytes";
				$sector_size = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "value",       value1 => $value, 
					name2 => "sector_size", value2 => $sector_size, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ / EKM/i)
			{
				# De-TLA it
				$variable =~ s/ EKM/ External Key Management/;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ /S\.M\.A\.R\.T\./i)
			{
				$variable =~ s/S\.M\.A\.R\.T\./SMART/;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($variable =~ /S\.M\.A\.R\.T/i)
			{
				$variable =~ s/S\.M\.A\.R\.T/SMART/;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Process some values.
			if ($value =~ /^(\d.*?B) \[(0x.*?) Sectors\]/)
			{
				my $size        = $1;
				my $hex_sectors = $2;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "size",        value1 => $size, 
					name2 => "hex_sectors", value2 => $hex_sectors, 
				}, file => $THIS_FILE, line => __LINE__});
				
				my $sectors = Math::BigInt->new($hex_sectors);
				my $bytes   = $an->Readable->hr_to_bytes({base2 => 1, size => $size});
				   $value   = "$bytes bytes, $sectors sectors";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
					name1 => "size",        value1 => $size, 
					name2 => "bytes",       value2 => $bytes, 
					name3 => "hex_sectors", value3 => $hex_sectors, 
					name4 => "value",       value4 => $value, 
					name5 => "variable",    value5 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# Mark this for sector size calculation later.
				push @{$sector_variables}, $variable;
			}
			if (($value =~ /^(\d+\s*[A-Za-z]+B)$/i) or ($value =~ /^(\d+\.\d+\s*[A-Za-z]+B)$/i))
			{
				my $size  = $1;
				    $value = $an->Readable->hr_to_bytes({base2 => 1, size => $size})." Bytes";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "size",  value1 => $size, 
					name2 => "value", value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^(\d.*?)C \(\d.*? F\)/i)
			{
				$value = $1;
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "value", value1 => $value, 
					name2 => "type",  value2 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if (($value =~ /^(\d+)C$/i) or ($value =~ /^(\d+\.\d+)C$/i))
			{
				$value = $1;
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "value", value1 => $value, 
					name2 => "type",  value2 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if (($value =~ /^(\d+)F$/i) or ($value =~ /^(\d+\.\d+)F$/i))
			{
				$value = $an->Convert->convert_to_celsius({temperature => $1});
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "value", value1 => $value, 
					name2 => "type",  value2 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^(\d.*?)Gb\/s$/)
			{
				$value = $1." Gbps";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value eq "NA")
			{
				$value = "N/A";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Process/standardize the variable.
			$variable = process_variable_name($an, $variable);
			
			# Record
			$an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}{$variable} = $value;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive::${virtual_drive}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::${type}::$variable", value1 => $an->data->{virtual_drive}{$virtual_drive}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{$type}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	return(0);
}

# This looks for virtual drives on the controller.
sub get_virtual_drive_data
{
	my ($an, $adapter, $serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_virtual_drive_data" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "adapter",       value1 => $adapter, 
		name2 => "serial_number", value2 => $serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $virtual_drive = "";
	my $id_string     = "";
	my $in_overview   = 0;
	my $in_pd_list    = 0;
	my $in_vd_data    = 0;
	my $start_break   = 0;
	my $shell_call    = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{virtual_drive_data};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		next if not $line;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /\/c$adapter\/v(\d+):/)
		{
			$virtual_drive                                                  = $1;
			$id_string                                                      = $serial_number."-vd".$virtual_drive;
			$an->data->{virtual_drive}{$id_string}{variable}{on_controller} = $serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "virtual_drive",                                           value1 => $virtual_drive, 
				name2 => "id_string",                                              value2 => $id_string, 
				name3 => "virtual_drive::${id_string}::variable::on_controller", value3 => $an->data->{virtual_drive}{$id_string}{variable}{on_controller}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We set the VD '9999' to the same SN so that we can find unallocated disks later.
			my $unallocated_id_string = $serial_number."-vd9999";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "unallocated_id_string", value1 => $unallocated_id_string, 
			}, file => $THIS_FILE, line => __LINE__});
			if (not $an->data->{virtual_drive}{$unallocated_id_string}{variable}{on_controller})
			{
				$an->data->{virtual_drive}{$unallocated_id_string}{variable}{on_controller} = $serial_number;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${unallocated_id_string}::variable::on_controller", value1 => $an->data->{virtual_drive}{$unallocated_id_string}{variable}{on_controller}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		if ($line =~ /PDs for VD (\d+) :/)
		{
			$virtual_drive = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "virtual_drive", value1 => $virtual_drive, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /VD(\d+) Properties/)
		{
			$virtual_drive = $1;
			$in_vd_data   = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "virtual_drive", value1 => $virtual_drive, 
				name2 => "in_vd_data",   value2 => $in_vd_data, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		next if $virtual_drive eq "";
		
		# See if I am entering or exiting the overview chunk.
		if ($line =~ /^DG\/VD/)
		{
			$in_overview = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "in_overview", value1 => $in_overview, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		if (($line =~ /^--------/) && ($in_overview))
		{
			if (not $start_break)
			{
				# Split point set, must be the start break
				$start_break = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "start_break", value1 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			else
			{
				# Split point and start break set, must be end break.
				$in_overview = 0;
				$start_break = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_overview", value1 => $in_overview, 
					name2 => "start_break", value2 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		if ($in_overview)
		{
			process_vg_overview_data($an, $line, $serial_number);
		}
		
		# See if I am entering or exiting the physical drive chunk.
		if ($line =~ /^EID:Slt/)
		{
			$in_pd_list = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "in_pd_list", value1 => $in_pd_list, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		if (($line =~ /^--------/) && ($in_pd_list))
		{
			if (not $start_break)
			{
				# Split point set, must be the start break
				$start_break = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "start_break", value1 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			else
			{
				# Split point and start break set, must be end break.
				$in_pd_list  = 0;
				$start_break = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_pd_list", value1 => $in_pd_list, 
					name2 => "start_break", value2 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		if ($in_pd_list)
		{
			process_vg_pd_list_data($an, $line, $virtual_drive, $serial_number, $id_string);
		}
		
		if ($in_vd_data)
		{
			if ($line =~ /^(.*?) = (.*)$/)
			{
				my $variable = $1;
				my $value    = $2;
				my $type     = "variable";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# Convert some formatting.
				if (($value =~ /^(\d+\s*[A-Za-z]+B)$/i) or ($value =~ /^(\d+\.\d+\s*[A-Za-z]+B)$/i))
				{
					# Convert to bytes
					$value = $an->Readable->hr_to_bytes({base2 => 1, size => $value})." Bytes";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "value", value1 => $value, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($value =~ /^(\d\d)-(\d\d)-(\d\d\d\d)$/)
				{
					# Convert dd-mm-yyyy to yyyy/mm/dd
					$value = $3."/".$2."/".$1;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "value", value1 => $value, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($value =~ /^(\d\d):(\d\d):(\d\d) (\wM)$/)
				{
					# Convert AM/PM -> 24h
					my $hour   = $1;
					my $minute = $2;
					my $second = $3;
					my $suffix = $4;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
						name1 => "hour",   value1 => $hour, 
						name2 => "minute", value2 => $minute, 
						name3 => "second", value3 => $second, 
						name4 => "suffix", value4 => $suffix, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($suffix eq "PM")
					{
						$hour += 12;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "hour", value1 => $hour, 
						}, file => $THIS_FILE, line => __LINE__});
					}
					$value = "$hour:$minute:$second";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "value", value1 => $value, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# Record
				$variable = process_variable_name($an, $variable);
				$an->data->{virtual_drive}{$id_string}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::${type}::$variable", value1 => $an->data->{virtual_drive}{$id_string}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	close $file_handle;
	
	return(0);
}

# This parses a virtual drive's physical disk overview line
sub process_vg_pd_list_data
{
	my ($an, $line, $virtual_drive, $serial_number, $id_string) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_vg_pd_list_data" }, message_key => "an_variables_0004", message_variables => { 
		name1 => "line",          value1 => $line, 
		name2 => "virtual_drive", value2 => $virtual_drive, 
		name3 => "serial_number", value3 => $serial_number, 
		name4 => "id_string",     value4 => $id_string, 
	}, file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "line", value1 => $line, 
	}, file => $THIS_FILE, line => __LINE__});
	### Sector size is either '512B' or '4 KB'
	#               EID:Slt       DID     State   DG      Size       Intf  Med     SED     PI      SeSz     Model      Sp
	#               252:0         9       Onln    0       136.218 GB SAS   HDD     N       N       512B     MK1401GRRB U
	if ($line =~ /^(\d+):(\d+)\s+(\d+)\s+(.*?)\s+(.*?)\s+(.*?B)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?B)\s+(.*?)\s+(.*)$/)
	{
		my $enclosure_id          = $1;
		my $slot_number           = $2;
		my $device_id             = $3;
		my $state                 = $4;
		my $drive_group           = $5;
		my $drive_size            = $6;
		my $interface             = $7;
		my $drive_media           = $8;
		my $self_encrypting_drive = $9;
		my $protection_info       = $10;
		my $sector_size           = $11;
		my $drive_model           = $12;
		my $spun_up               = $13;
		   $drive_group           = 9999 if $drive_group eq "-";
		   $protection_info       = $protection_info       =~ /n/i ? "No" : "Yes";
		   $self_encrypting_drive = $self_encrypting_drive =~ /n/i ? "No" : "Yes";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0013", message_variables => {
			name1  => "enclosure_id",          value1  => $enclosure_id, 
			name2  => "slot_number",           value2  => $slot_number, 
			name3  => "device_id",             value3  => $device_id, 
			name4  => "state",                 value4  => $state, 
			name5  => "drive_group",           value5  => $drive_group, 
			name6  => "drive_size",            value6  => $drive_size, 
			name7  => "interface",             value7  => $interface, 
			name8  => "drive_media",           value8  => $drive_media, 
			name9  => "self_encrypting_drive", value9  => $self_encrypting_drive, 
			name10 => "protection_info",       value10 => $protection_info, 
			name11 => "sector_size",           value11 => $sector_size, 
			name12 => "drive_model",           value12 => $drive_model, 
			name13 => "spun_up",               value13 => $spun_up, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Convert the sector and drive sizes into bytes. The controller uses 'xB' but uses base2 values.
		$sector_size = $an->Readable->hr_to_bytes({base2 => 1, size => $sector_size})." Bytes";
		$drive_size  = $an->Readable->hr_to_bytes({base2 => 1, size => $drive_size})." Bytes";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "sector_size", value1 => $sector_size, 
			name2 => "drive_size",  value2 => $drive_size, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### Long hashes are long... x_x
		# Store the data (we'll convert it in a minute.
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{device_id}             = $device_id;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{'state'}               = $state;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size}            = $drive_size;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{interface}             = $interface;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_media}           = $drive_media;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{self_encrypting_drive} = $self_encrypting_drive;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{protection_info}       = $protection_info;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sector_size}           = $sector_size;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_model}           = $drive_model;
		$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{spun_up}               = $spun_up;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
			name1  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::device_id",             value1  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{device_id}, 
			name2  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::state",                 value2  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{'state'}, 
			name3  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_size",            value3  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_size}, 
			name4  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::interface",             value4  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{interface}, 
			name5  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_media",           value5  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_media}, 
			name6  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::self_encrypting_drive", value6  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{self_encrypting_drive}, 
			name7  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::protection_info",       value7  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{protection_info}, 
			name8  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::sector_size",           value8  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{sector_size}, 
			name9  => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::drive_model",           value9  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{drive_model}, 
			name10 => "virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::spun_up",               value10 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{spun_up}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### WARNING: The strings we set here will be parsed later, so don't change them without also 
		###          changing where they're checked for elsewhere in this agent.
		### NOTE: We don't use a function for this because the glossary for the block of data is 
		###       specific for the table above (it would appear).
		# Translate the weird short form to useable strings
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}})
		{
			my $value = $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => ">> virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			if ($value =~ /^DHS$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Dedicated Hot Spare";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^UGood$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Unconfigured Good";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^GHS$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Global Hotspare";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^UBad$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Unconfigured Bad";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^Onln$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Online";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^Offln$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Offline";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^U$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Spun Up";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^D$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Spun Down";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^T$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Transition";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^F$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Foreign";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^UGUnsp$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Unsupported";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^UGShld$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Unconfigured shielded";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^HSPShld$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Hotspare shielded";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^CFShld$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Configured shielded";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^Cpybck$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Copyback";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^CBShld$/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable} = "Copyback Shielded";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	else
	{
		# Unparsed line
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "? line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# This parses a virtual drive overview line
sub process_vg_overview_data
{
	my ($an, $line, $serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_vg_overview_data" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "line",          value1 => $line, 
		name2 => "serial_number", value2 => $serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $drive_group                 = "";
	my $virtual_drive               = "";
	my $raid_type                   = "";
	my $array_state                 = "";
	my $access                      = "";
	my $consistent                  = "";
	my $cache                       = "";
	my $cachecade                   = "";
	my $scheduled_consistency_check = "";
	my $array_size                  = "";
	my $name                        = "";
	my $id_string                   = "";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "line", value1 => $line, 
	}, file => $THIS_FILE, line => __LINE__});
	# Get the line when there is no name
	#	        0   / 0      RAID5   Optl    RW      Yes     NRWBD   -       OFF     953.531 GB
	if ($line =~ /^(\d+)\/(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+ \wB)$/i)
	{
		$drive_group                 = $1;
		$virtual_drive               = $2;
		$raid_type                   = $3;
		$array_state                 = $4;
		$access                      = $5;
		$consistent                  = $6;
		$cache                       = $7;
		$cachecade                   = $8;
		$scheduled_consistency_check = $9;
		$array_size                  = $10;
		$id_string                   = $serial_number."-vd".$virtual_drive;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0011", message_variables => {
			name1  => "drive_group",                 value1  => $drive_group, 
			name2  => "virtual_drive",               value2  => $virtual_drive, 
			name3  => "raid_type",                   value3  => $raid_type, 
			name4  => "array_state",                 value4  => $array_state, 
			name5  => "access",                      value5  => $access, 
			name6  => "consistent",                  value6  => $consistent, 
			name7  => "cache",                       value7  => $cache, 
			name8  => "cachecade",                   value8  => $cachecade, 
			name9  => "scheduled_consistency_check", value9  => $scheduled_consistency_check, 
			name10 => "array_size",                  value10 => $array_size, 
			name11 => "id_string",                   value11 => $id_string, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	# Get the line when there is a name
	#		   0   / 0      RAID5   Optl    RW      Yes     RWBD    -       OFF       3.271 TB VD0
	#		   1   / 1      RAID5   Optl    RW      Yes     RWBD    -       OFF     744.187 GB VD1
	#		   2   / 2      RAID0   Optl    RW      Yes     RWBD    -       OFF       1.636 TB VD2
	elsif ($line =~ /^(\d+)\/(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+ \wB)\s+(.*)$/i)
	{
		$drive_group                 = $1;
		$virtual_drive               = $2;
		$raid_type                   = $3;
		$array_state                 = $4;
		$access                      = $5;
		$consistent                  = $6;
		$cache                       = $7;
		$cachecade                   = $8;
		$scheduled_consistency_check = $9;
		$array_size                  = $10;
		$name                        = $11;
		$id_string                   = $serial_number."-vd".$virtual_drive;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
			name1  => "drive_group",                 value1  => $drive_group, 
			name2  => "virtual_drive",               value2  => $virtual_drive, 
			name3  => "raid_type",                   value3  => $raid_type, 
			name4  => "array_state",                 value4  => $array_state, 
			name5  => "access",                      value5  => $access, 
			name6  => "consistent",                  value6  => $consistent, 
			name7  => "cache",                       value7  => $cache, 
			name8  => "cachecade",                   value8  => $cachecade, 
			name9  => "scheduled_consistency_check", value9  => $scheduled_consistency_check, 
			name10 => "array_size",                  value10 => $array_size, 
			name11 => "name",                        value11 => $name, 
			name12 => "id_string",                   value12 => $id_string, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		# Unmatched line...
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "? line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		next;
	}
	
	# Convert the array size into bytes. The controller uses 'xB' but uses base2 values.
	$array_size = $an->Readable->hr_to_bytes({base2 => 1, size => $array_size})." Bytes";
	
	# Store the data.
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{on_controller}               = $serial_number;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{raid_type}                   = $raid_type;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{array_state}                 = $array_state;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{access}                      = $access;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{consistent}                  = $consistent;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{cache}                       = $cache;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{cachecade}                   = $cachecade;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{scheduled_consistency_check} = $scheduled_consistency_check;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{array_size}                  = $array_size;
	$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{name}                        = $name;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
		name1  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::on_controller",               value1  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{on_controller}, 
		name2  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::raid_type",                   value2  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{raid_type}, 
		name3  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::array_state",                 value3  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{array_state}, 
		name4  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::access",                      value4  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{access}, 
		name5  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::consistent",                  value5  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{consistent}, 
		name6  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::cache",                       value6  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{cache}, 
		name7  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::cachecade",                   value7  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{cachecade}, 
		name8  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::scheduled_consistency_check", value8  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{scheduled_consistency_check}, 
		name9  => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::array_size",                  value9  => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{array_size}, 
		name10 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::name",                        value10 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{name}, 
	}, file => $THIS_FILE, line => __LINE__});
	
	### WARNING: The strings we set here will be parsed later, so don't change them without also changing
	###          where they're checked for elsewhere in this agent.
	### NOTE: We don't use a function for this because the glossary for the block of data is specific for
	###       the table above (it would appear).
	# Translate the weird short form to useable strings
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => ">> virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} eq "-")
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "No";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^Cac$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "CacheCade";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^Rec$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Recovery";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^OfLn$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "OffLine";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^Pdgd$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Partially Degraded";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^dgrd$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Degraded";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^Optl$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Optimal";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^RO$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Read Only";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^RW$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Read Write";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^HD$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Hidden";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^TRANS$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Transport Ready";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^B$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Blocked";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^Consist$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Consistent";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} =~ /^sCC$/i)
		{
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable} = "Scheduled Check Consistency";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Because they hate programmers, the cache is a combination of a few of the 
		# above strings.
		if ($variable eq "cache")
		{
			my $cache = $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cache", value1 => $cache, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Prep some blanks
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{read_cache}  = "";
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache} = "";
			$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{disk_cache}  = "";
			
			# Read cache
			if ($cache =~ /NR/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{read_cache} = "No Read-Ahead";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::read_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{read_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($cache =~ /R/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{read_cache} = "Always Read-Ahead";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::read_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{read_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Write cache
			if ($cache =~ /AWB/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache} = "Always Write-Back";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::write_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($cache =~ /WB/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache} = "Write-Back";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::write_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($cache =~ /WT/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache} = "Write-Through";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::write_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{write_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Disk cache
			if ($cache =~ /C/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{disk_cache} = "Cached IO";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::disk_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{disk_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($cache =~ /D/i)
			{
				$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{disk_cache} = "Direct IO";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::disk_cache", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{disk_cache}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	return(0);
}

# This looks for a BBU and, if it finds one, parses the output for it.
sub get_bbu_data
{
	my ($an, $adapter, $serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_bbu_data" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "adapter",       value1 => $adapter, 
		name2 => "serial_number", value2 => $serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $bbu_serial_number = "";
	my $bbu_data          = [];
	my $shell_call        = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{bbu_data};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		last if $line =~ /$adapter Failed /i;
		
		if ($line =~ /^Serial Number\s+(\S.*)?/i)
		{
			$bbu_serial_number = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu_serial_number", value1 => $bbu_serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		push @{$bbu_data}, $line;
	}
	close $file_handle;
	
	# If I didn't find a serial number, then I probably don't have an FBU.
	return(0) if not $bbu_serial_number;
	
	# Record the controller the bbu is on.
	$an->data->{bbu}{serial_number}{$bbu_serial_number}{host_controller_serial_number} = $serial_number;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "bbu::serial_number::${bbu_serial_number}::host_controller_serial_number", value1 => $an->data->{bbu}{serial_number}{$bbu_serial_number}{host_controller_serial_number},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Still alive? Good, time to parse the most annoying output ever... >_<
	my $split_point = 0;
	my $start_break = 0;
	my $end_break   = 0;
	foreach my $line (@{$bbu_data})
	{
		next if not $line;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($line =~ /Property(\s+)Value/)
		{
			$split_point = length($1) + 8;
			$start_break = 0;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "split_point", value1 => $split_point, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# See if I am entering or exiting a data chunk.
		if (($line =~ /^--------/) && ($split_point))
		{
			if (not $start_break)
			{
				# Split point set, must be the start break
				$start_break = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "start_break", value1 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			else
			{
				# Split point and start break set, must be end break.
				$split_point = 0;
				$start_break = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "split_point", value1 => $split_point, 
					name2 => "start_break", value2 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# If I have a split point, break the string.
		if ($split_point)
		{
			# Elegant? I think not!
			my $variable = "";
			my $value    = "";
			my $type     = "variable";
			if ($split_point >= length($line))
			{
				# Variable with no value
				$variable =  $line;
				$variable =~ s/\s+$//;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				($variable, $value) = ($line =~ /^(.{$split_point})(.*)$/);
				$variable =~ s/\s+$//;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# Because LSI is either evil or amazingly incompetent, we have the variable
				# "Absolute State of charge" listed twice, but once with 'State' and the 
				# other with 'state' (capital versus small 'S'). We fix it because it is the
				# same data and we don't want two records, so the second copy will now just
				# overwrite the first one.
				if ($variable eq "Absolute State of charge")
				{
					$variable = "Absolute state of charge";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# They use 'Temperature' twice; once for the temperature and once to show if
				# it is OK or not. We'll avoid one clobbering the other by renaming the 
				# status one.
				if (($variable eq "Temperature") && ($value !~ /^\d/))
				{
					$variable = "Temperature Status";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				if (($variable eq "Temperature") && ($value =~ /^\d/))
				{
					$variable = "BBU Temperature";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# *sigh* - Typo on their part, but also a re-use of the variable name 
				# "Remaining Time Alarm". The Status one we will rename the variable and the 
				# later we'll fix the type. 
				if ((lc($variable) eq "remaining time alarm") && ($value !~ /\d/))
				{
					# No digit in the value, so this is the status.
					$variable = "Remaining Time Alarm Status";
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				if ($variable =~ /remining /)
				{
					$variable =~ s/emining /emaining /;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				if ($variable =~ /\(initial setting\)/i)
				{
					$variable =~ s/\(initial setting\)//i;
					$variable =  "Initial ".$variable." Setting";
					$variable =~ s/\s+//;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "variable", value1 => $variable, 
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
			
			# Is this a temperature or something else we want to pre-process?
			if ($value =~ /^(\d+) C$/i)
			{
				# Yup
				$value = $1;
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d+) F$/i)
			{
				# Yup, but translate
				$value = $an->Convert->convert_to_celsius({temperature => $1});
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /\d+d \((\d+) seconds\)$/i)
			{
				# This is a static time span (like the time between learn cycles.
				$value =  $1;
				$value .= " seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d\d\d\d)\/(\d\d)\/(\d\d)\s+(\d\d:\d\d:\d\d)\s+\(\d+ seconds\)$/i)
			{
				### NOTE: The 'X seconds' seems to not change and be a useless number...
				# This is a specific time in the future, properly formatted
				$value = "$1/$2/$3, $4";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d\d)\/(\d\d)\/(\d\d\d\d)$/i)
			{
				# 'Murica! mm/dd/yyyy -> yyyy/mm/dd
				$value = $3."/".$2."/".$1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d+) hour\(s\)$/i)
			{
				# 'Murica! mm/dd/yyyy -> yyyy/mm/dd
				$value =  $1 * 3600;
				$value .= " seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Record
			$variable = process_variable_name($an, $variable);
			
			# 'Auto-Learn' and 'Auto_Learn' are both used because screw consistency, right?
			$variable =~ s/auto-learn/auto_learn/;
			
			$an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}{$variable} = $value;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu:serial_number::${bbu_serial_number}::${type}::$variable", value1 => $an->data->{bbu}{serial_number}{$bbu_serial_number}{$type}{$variable},
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# This looks for a cachevault (flash-backup unit) and, if one is found, parses the output.
sub get_cachevault_data
{
	my ($an, $adapter, $serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_cachevault_data" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "adapter",       value1 => $adapter, 
		name2 => "serial_number", value2 => $serial_number, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $cachevault_serial_number = "";
	my $cachevault_data          = [];
	my $shell_call               = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{cachevault_data};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		last if $line =~ /Cachevault doesn't exist/i;
		
		if ($line =~ /^Serial Number\s+(\S.*)?/i)
		{
			$cachevault_serial_number = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cachevault_serial_number", value1 => $cachevault_serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		push @{$cachevault_data}, $line;
	}
	close $file_handle;
	
	# If I didn't find a serial number, then I probably don't have an FBU.
	return(0) if not $cachevault_serial_number;
	
	# Record the controller the cachevault is on.
	$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{host_controller_serial_number} = $serial_number;
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "cachevault::serial_number::${cachevault_serial_number}::host_controller_serial_number", value1 => $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{host_controller_serial_number},
	}, file => $THIS_FILE, line => __LINE__});
	
	# Still alive? Good, time to parse the most annoying output ever... >_<
	my $split_point = 0;
	my $start_break = 0;
	my $end_break   = 0;
	foreach my $line (@{$cachevault_data})
	{
		next if not $line;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($line =~ /Property(\s+)Value/)
		{
			$split_point = length($1) + 8;
			$start_break = 0;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "split_point", value1 => $split_point, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# See if I am entering or exiting a data chunk.
		if (($line =~ /^--------/) && ($split_point))
		{
			if (not $start_break)
			{
				# Split point set, must be the start break
				$start_break = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "start_break", value1 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			else
			{
				# Split point and start break set, must be end break.
				$split_point = 0;
				$start_break = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "split_point", value1 => $split_point, 
					name2 => "start_break", value2 => $start_break, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		# If I have a split point, break the string.
		if ($split_point)
		{
			my $variable = "";
			my $value    = "";
			my $type     = "variable";
			if ($split_point >= length($line))
			{
				# Variable with no value
				$variable =  $line;
				$variable =~ s/\s+$//;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				($variable, $value) = ($line =~ /^(.{$split_point})(.*)$/);
				$variable =~ s/\s+$//;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# With BBUs, they use 'Temperature' twice; once for status and once for the current
			# temperature. They don't currently do this with Cachevaults, but in case they do
			# later, we'll rename the temperature variable.
			if (($variable eq "Temperature") && ($value =~ /^\d/))
			{
				$variable = "Cachevault Temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "variable", value1 => $variable, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Is this a temperature or something else we want to pre-process?
			if ($value =~ /^(\d+) C$/i)
			{
				# Yup
				$value = $1;
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d+) F$/i)
			{
				# Yup, but translate
				$value = $an->Convert->convert_to_celsius({temperature => $1});
				$type  = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /\d+d \((\d+) seconds\)$/i)
			{
				# This is a static time span (like the time between learn cycles.
				$value =  $1;
				$value .= " seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d\d\d\d)\/(\d\d)\/(\d\d)\s+(\d\d:\d\d:\d\d)\s+\(\d+ seconds\)$/i)
			{
				### NOTE: The 'X seconds' seems to not change and be a useless number...
				# This is a specific time in the future, properly formatted
				# yyyy/mm/dd -> 
				$value = "$1/$2/$3, $4";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d\d)\/(\d\d)\/(\d\d\d\d)$/i)
			{
				# 'Murica! mm/dd/yyyy -> yyyy/mm/dd
				$value = $3."/".$2."/".$1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($value =~ /^(\d+) hour\(s\)$/i)
			{
				# 'Murica! mm/dd/yyyy -> yyyy/mm/dd
				$value =  $1 * 3600;
				$value .= " seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable,
					name2 => "value",    value2 => $value,
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Record
			$variable = process_variable_name($an, $variable);
			
			# 'Auto-Learn' and 'Auto_Learn' are both used because screw consistency, right?
			$variable =~ s/auto-learn/auto_learn/;
			
			$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}{$variable} = $value;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cachevault:serial_number::${cachevault_serial_number}::${type}::$variable", value1 => $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{$type}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# This gets the basic information about the controller.
sub get_controller_info
{
	my ($an, $adapter) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_controller_info" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "adapter", value1 => $adapter, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $in_raid_level_supported = 0;
	my $multiline_value         = "";
	my $in_header               = 1;
	my $in_basics               = 0;
	my $in_supported_ops        = 0;
	my $in_supported_pd_ops     = 0;
	my $in_supported_vd_ops     = 0;
	my $in_hardware_config      = 0;
	my $in_capabilities         = 0;
	my $in_policies             = 0;
	my $in_defaults             = 0;
	my $serial_number           = "";
	my $controller_data         = [];
	my $shell_call              = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{controller_info};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		next if not $line;
		last if $line =~ /^TOPOLOGY:$/i;
		
		# The time changes constantly, so ignore it.
		if ($line =~ /Date\/Time/i)
		{
			next;
		}
		
		# RAID Level Supported can be multi-line because $reasons.
		if ($line =~ /RAID Level Supported = (.*)$/)
		{
			$multiline_value         = $1;
			$in_raid_level_supported = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "multiline_value",         value1 => $multiline_value, 
				name2 => "in_raid_level_supported", value2 => $in_raid_level_supported, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($in_raid_level_supported)
		{
			if ($line =~ / = /)
			{
				# Found the next line, close up RAID Level Supported.
				push @{$controller_data}, "RAID Level Supported = $multiline_value";
				$multiline_value         = "";
				$in_raid_level_supported = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "multiline_value",         value1 => $multiline_value, 
					name2 => "in_raid_level_supported", value2 => $in_raid_level_supported, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				$multiline_value .= " $line";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "multiline_value", value1 => $multiline_value, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
		}
		
		if ($line =~ /^Serial Number = (.*)?/i)
		{
			$serial_number = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "serial_number", value1 => $serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		### LSI reuses the save variable names in different sections. This tries to catch and rename 
		### them
		# Ignore stuff in the header
		if ($line =~ /^Basics/)
		{
			$in_header = 0;
			$in_basics = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "in_header", value1 => $in_header, 
				name2 => "in_basics", value2 => $in_basics, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($in_basics)
		{
			if ($line =~ /^Version/)
			{
				$in_basics = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "in_basics", value1 => $in_basics, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		elsif ($line =~ /^Controller\s+=/)
		{
			# This is the header data, which we don't care about.
			next;
		}
		if ($in_header)
		{
			next;
		}
		
		# Mangle supported adapter operation variables.
		if ($line =~ /^Supported Adapter Operations/)
		{
			$in_supported_ops = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "in_supported_ops", value1 => $in_supported_ops, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($in_supported_ops)
		{
			if ($line =~ /^Supported PD Operations/)
			{
				$in_supported_ops    = 0;
				$in_supported_pd_ops = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_supported_ops",    value1 => $in_supported_ops, 
					name2 => "in_supported_pd_ops", value2 => $in_supported_pd_ops, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			if ($line =~ /^BBU /)
			{
				$line =~ s/^BBU /BBU Supported /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Rebuild Rate /)
			{
				$line =~ s/^Rebuild Rate /Configurable Rebuild Rate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^CC Rate /)
			{
				$line =~ s/^CC Rate /Configurable Consistency Check Rate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^BGI Rate /)
			{
				$line =~ s/^BGI Rate /Configurable background Initialization Rate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Reconstruct Rate /)
			{
				$line =~ s/^Reconstruct Rate /Configurable Reconstruct Rate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Patrol Read Rate /)
			{
				$line =~ s/^Patrol Read Rate /Configurable Patrol Read Rate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Alarm Control /)
			{
				$line =~ s/^Alarm Control /Configurable Alarm Control /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Spanning /)
			{
				$line =~ s/^Spanning /Spanning Supported /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /Hot Spare /)
			{
				$line =~ s/Hot Spare /Hot Spare Supported /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Foreign Config Import /)
			{
				$line =~ s/^Foreign Config Import /Foreign Config Import Supported /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Self Diagnostic /)
			{
				$line =~ s/^Self Diagnostic /Self Diagnostic Supported /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Abort CC on Error /)
			{
				$line =~ s/^Abort CC on Error /Configurable Abort CC on Error /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Block SSD Write Disk Cache Change /)
			{
				$line =~ s/^Block SSD Write Disk Cache Change /Configurable Block SSD Write Disk Cache Change /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle supported adapter physical disk operation variables.
		if ($in_supported_pd_ops)
		{
			if ($line =~ /^Supported VD Operations/)
			{
				$in_supported_pd_ops = 0;
				$in_supported_vd_ops = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_supported_pd_ops", value1 => $in_supported_pd_ops, 
					name2 => "in_supported_vd_ops", value2 => $in_supported_vd_ops, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Deny Locate /)
			{
				$line =~ s/^Deny Locate /Deny Physical Disk Locate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Read Policy /)
			{
				$line =~ s/^Read Policy /Physical Disk Read Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Write Policy /)
			{
				$line =~ s/^Write Policy /Physical Disk Write Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle supported adapter virtual drive operation variables.
		if ($in_supported_vd_ops)
		{
			if ($line =~ /^Advanced Software Option/)
			{
				$in_supported_vd_ops = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "in_supported_vd_ops", value1 => $in_supported_vd_ops, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Deny Locate /)
			{
				$line =~ s/^Deny Locate /Deny Virtual Disk Locate /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Read Policy /)
			{
				$line =~ s/^Read Policy /Virtual Disk Read Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Write Policy /)
			{
				$line =~ s/^Write Policy /Virtual Disk Write Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle hardware config variables.
		if ($line =~ /^HwCfg/)
		{
			$in_hardware_config = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "in_hardware_config", value1 => $in_hardware_config, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($in_hardware_config)
		{
			if ($line =~ /^Policies/)
			{
				$in_hardware_config  = 0;
				$in_policies         = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_hardware_config", value1 => $in_hardware_config, 
					name2 => "in_policies",        value2 => $in_policies, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^BBU /)
			{
				$line =~ s/^BBU /BBU Connected /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle policy variables.
		if ($in_policies)
		{
			if ($line =~ /^Boot/)
			{
				$in_policies = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "in_policies", value1 => $in_policies, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Disable Online Controller Reset /)
			{
				$line =~ s/^Disable Online Controller Reset /Disable Online Controller Reset Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Expose Enclosure Devices /)
			{
				$line =~ s/^Expose Enclosure Devices /Expose Enclosure Devices Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Maintain PD Fail History /)
			{
				$line =~ s/^Maintain PD Fail History /Maintain PD Fail History Policy /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle defaults variables
		if ($line =~ /^Defaults/)
		{
			$in_defaults = 1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "in_defaults", value1 => $in_defaults, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($in_defaults)
		{
			if ($line =~ /^Capabilities/)
			{
				$in_defaults     = 0;
				$in_capabilities = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "in_defaults",     value1 => $in_defaults, 
					name2 => "in_capabilities", value2 => $in_capabilities, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Disable Online Controller Reset /)
			{
				$line =~ s/^Disable Online Controller Reset /Disable Online Controller Reset Default /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Expose Enclosure Devices /)
			{
				$line =~ s/^Expose Enclosure Devices /Expose Enclosure Devices Default /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Maintain PD Fail History /)
			{
				$line =~ s/^Maintain PD Fail History /Maintain PD Fail History Default /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Many of the variables in the 'Defaults' section are also used for their current 
			# values. So to help differentiate them, we're going to prefix the variables with
			# 'Default '.
			if (($in_defaults) && ($line =~ / = /))
			{
				$line = "Default ".$line if $line !~ /^Default /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# Mangle capability variables.
		if ($in_capabilities)
		{
			if ($line =~ /^Scheduled Tasks/)
			{
				$in_capabilities = 0;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "in_capabilities", value1 => $in_capabilities, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($line =~ /^Boot Volume Supported /)
			{
				$line =~ s/^Boot Volume Supported /Boot Volume Capable /;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "<< line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
		
		# T10-PI (T10 working group, Protection Information) has three levels (Taken from the Seagate
		# PDF listed below):
		# Type 0 - Describes a drive that is not formatted with PI information bytes. This allows 
		#          for legacy support in non-PI systems.
		# Type 1 - Provides support of PI protection using 10- and 16-byte commands. The RDPROTECT
		#          and WRTPROTECT bits allow for checking control through the CDB. Eight bytes of
		#          Protection Information are transmitted at sector boundaries across the interface 
		#          if RDPROTECT and WRTPROTECT bits are non-zero values. Type I does not allow the 
		#          use of 32-byte commands.
		# Type 2 - Provides checking control and additional expected fields within the 32-byte CDBs. 
		#          Eight bytes of Protection Information are transmitted at sector boundaries across 
		#          the interface if RDPROTECT and WRTPROTECT bits are non-zero values. Type II does 
		#          allow the use of 10- and 16-byte commands with zero values in the RDPROTECT and 
		#          WRTPROTECT fields. The drive will generate a dummy (for example, 0xFFFF) eight 
		#          bytes of Protection Information in the media, but these eight bytes will not be 
		#          transferred to the host during read.
		# Type 3 - ? (GUARD tag, reference tag and app tag are combined)
		#          - http://www.snia.org/sites/default/education/tutorials/2008/fall/storage/RichardVanderbilt_Why_Data_Integrity_rev2.pdf
		#          Protection is enabled and the 32-byte commands are not valid. The Reference Tag is
		#          not defined and may be used as an extension of the Application Tag. The drive will
		#          not check the Reference Tag. 
		#          - https://www.hgst.com/sites/default/files/resources/End-to-end_Data_Protection.pdf
		#          Type 3 does not define the ref tag.
		#          - http://lxr.free-electrons.com/source/block/t10-pi.c
		#          
		
		# LSI loves to randomly sticking things together...
		$line =~ s/BatteryFRU/Battery FRU/;
		$line =~ s/ChipRevision/Chip Revision/;
		$line =~ s/DisableHII/Disable HII/;
		$line =~ s/EnableCrashDump/Enable Crash-Dump/;
		$line =~ s/EnableLDBBM/Enable LD_BBM/;
		$line =~ s/elementcount/element_count/i;
		$line =~ s/perio/per_io/i;
		
		### NOTE: ROC is RAID on Chip, which is what they call their controller's ASIC
		# and they love their weird short forms
		$line =~ s/Ctrl/Controller/i;
		$line =~ s/Mfg/Manufacture/i;
		$line =~ s/Cfg/Config/i;
		$line =~ s/Perf /Performance /i;
		$line =~ s/ Ext / External /i;
		$line =~ s/ VD/ Virtual Disk/i;
		$line =~ s/ VDs/ Virtual Disks/i;
		$line =~ s/VD /Virtual Disk /i;
		$line =~ s/ PD/ Physical Disk/i;
		$line =~ s/ PI/ Protection Information/i;
		$line =~ s/ LDPI/ Logical Disk Protection Information/i;	# https://www.seagate.com/files/staticfiles/docs/pdf/whitepaper/safeguarding-data-from-corruption-technology-paper-tp621us.pdf
		$line =~ s/ CC/ Consistency Check/i;
		$line =~ s/ BGI/ Background Initialization/i;
		$line =~ s/ BGI/ Background/i;
		$line =~ s/ LD/ Logical Device/i;
		$line =~ s/ FW/ Firmware/i;
		$line =~ s/ HII/ Human Interface Infrastructure/i;
		$line =~ s/ PFK/ Premium Feature Key/i;
		$line =~ s/ WB/ Write-Back/i;
		$line =~ s/SSC /Security Subsystem Class /i;		# https://en.wikipedia.org/wiki/Opal_Storage_Specification
		$line =~ s/ SMP/ Serial Management Protocol/i;		# https://en.wikipedia.org/wiki/Serial_Attached_SCSI#Characteristics
		$line =~ s/ STP/ Serial ATA Tunneling Protocol/i;	# https://en.wikipedia.org/wiki/Serial_Attached_SCSI#Characteristics
		$line =~ s/Phys /Physical Layers /i;			# 12Gps MegaRAID SAS Software User Guide, March 14, 2016, 4.14.8, https://en.wikipedia.org/wiki/PHY_(chip)
		$line =~ s/Phy /Physical Layer /i;			# 12Gps MegaRAID SAS Software User Guide, March 14, 2016, 4.14.8, https://en.wikipedia.org/wiki/PHY_(chip)
		$line =~ s/ OCE/ Online Capacity Expansion/i;		# 12Gps MegaRAID SAS Software User Guide, March 14, 2016, 5.5.14 -> 5
		$line =~ s/ RLM/ RAID Level Migration/i;		# 12Gps MegaRAID SAS Software User Guide, March 14, 2016, 5.5.14 -> 5
		$line =~ s/ EKM/ External Key Management/i;
		$line =~ s/ BBM/ Bad Block Management/i;
		$line =~ s/ QD/ Queue Depth/i;
		$line =~ s/NCQ/Native Command Queuing/i;		# https://en.wikipedia.org/wiki/Native_Command_Queuing
		$line =~ s/ LDBBM/ Logical Disk Bad Block Management/i;
		$line =~ s/TPM/Trusted Platform Module/i;		# https://en.wikipedia.org/wiki/Trusted_Platform_Module
		$line =~ s/\(hrs\)/\(Hours\)/i;
		$line =~ s/ hrs/ Hours/i;
		$line =~ s/ZCR /Zero-Channel RAID /i;
		$line =~ s/R1E /RAID 1E /i;
		$line =~ s/ R10/ RAID 10/i;
		$line =~ s/RAID(\d+)/RAID $1/gi;
		$line =~ s/TTY /Terminal /i;
		$line =~ s/CME /Continuous Media Error/i;
		$line =~ s/SGE /Scatter-Gather Element/i;		# https://en.wikipedia.org/wiki/Vectored_I/O
		
		# Standardize some random strings with the same meaning
		$line =~ s/Id /ID /;
		$line =~ s/ NA/ N\/A/;
		$line =~ s/Bios/BIOS/;
		$line =~ s/S\.M\.A\.R\.T\./SMART/i;
		$line =~ s/S\.M\.A\.R\.T/SMART/i;
		
		# And randomly using sentances...
		$line =~ s/A rollback operation is in progress/Roll-back operation in progress/i;
		$line =~ s/must be rebooted to complete security operation/Reboot Required for Security Operation/i;
		$line =~ s/Maximum number of direct attached drives to spin up in 1 min/direct attached drives spun-up per minute/i;
		
		# And things that break variables when they change
		$line =~ s/\(Default\)//;
		$line =~ s/Sesmonitoring/SCSI Enclosure Service Monitoring/i;		# https://en.wikipedia.org/wiki/SES-2_Enclosure_Management
		$line =~ s/SecurityonJBOD/Security on JBOD/i;
		$line =~ s/ForceFlash/Force Flash/i;
		$line =~ s/DisableImmediateIO/Disable Immediate IO/i;
		$line =~ s/LargeIOSupport/Large IO Support/i;
		$line =~ s/DrvActivityLEDSetting/Drive Activity LED Setting/i;
		$line =~ s/FlushWriteVerify/Flush Write Verify/i;
		$line =~ s/CPLDUpdate/Complex Programmable Logic Device Update/i;	# https://en.wikipedia.org/wiki/Complex_programmable_logic_device
		$line =~ s/ForceTo512e/Force to 512e/i;					# 512-byte sector size emulation
		$line =~ s/discardCacheDuringLDDelete/Discard Cache During Logical Disk Delete/;
		$line =~ s/Breakmirror/Break Mirror/i;					# 12Gps MegaRAID SAS Software User Guide, March 14, 2016, 4.14.16
		$line =~ s/Cachebypass/Cache Bypass/i;
		$line =~ s/PolaritySplit/Polarity Split/i;
		$line =~ s/EnableCrashDump/Enable Crash Dump/i;
		$line =~ s/PowerSave/Power Save/i;
		
		push @{$controller_data}, $line;
	}
	close $file_handle;
	
	# If I didn't find a serial number, something went wrong.
	if (not $serial_number)
	{
		# Error out.
		$an->Alert->error({title_key => "an_0003", message_key => "scan_storcli_error_0006", message_variables => { adapter => $adapter }, code => 6, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 6});
	}
	
	# Get the current alarm state.
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{alarm_state};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^Alarm\s+(.*)$/i)
		{
			my $state = $1;
			   $line  = "Alarm State = $state";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# Get the rebuild rate
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{rebuild_rate};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^Rebuildrate\s+(\d+)%$/i)
		{
			my $rate = $1;
			   $line = "Rebuild Rate % = $rate";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# Get the background initialization rate
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{bgi_rate};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^BGI Rate\s+(\d+)%$/i)
		{
			my $rate = $1;
			   $line = "Background Initialization Rate % = $rate";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# Get the consistency check rate
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{cc_rate};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^CC Rate\s+(\d+)%$/i)
		{
			my $rate = $1;
			   $line = "Consistency Check Rate % = $rate";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# Get the patrol read rate
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{pr_rate};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^Patrol Read Rate\s+(\d+)%$/i)
		{
			my $rate = $1;
			   $line = "Patrol Read Rate % = $rate";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# Get the performance mode
	$shell_call = $an->data->{path}{storcli64}." /c".$adapter." ".$an->data->{sys}{arguments}{performance_mode};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open ($file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		   $line =~ s/^\s+//;
		   $line =~ s/\s+$//;
		   $line =~ s/\s+:/:/;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /^Perf Mode\s+(.*)$/i)
		{
			my $mode = $1;
			   $line = "Performance Mode = $mode";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$controller_data}, $line;
		}
	}
	close $file_handle;
	
	# If we're alive, we're ready to proceed.
	foreach my $line (@{$controller_data})
	{
		my $type = "variable";
		if ($line =~ /^(.*?)\s+=\s+(.*)$/)
		{
			my $variable = $1;
			my $value    = $2;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If the variable has units, pull them out.
			if ($variable =~ /\((\w+B)\)$/i)
			{
				my $units    =  $1;
				   $variable =~ s/\($units\)//i;
				   $variable =~ s/^\s+//;
				   $variable =~ s/\s+$//;
				my $size = $an->Readable->hr_to_bytes({size => $value, type => $units, base2 => 1 })." Bytes";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "units",    value3 => $units, 
					name4 => "size",     value4 => $size, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(Degree Celsius\)/i)
			{
# 				$variable =~ s/\(Degree Celsius\)/ C/i;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+$//;
				$variable =~ s/\s+/ /;
				$type     = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(Degree Fahrenheit\)/i)
			{
				# Covert to °C
				$variable =~ s/\(Degree Fahrenheit\)//i;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+$//;
				$value    =  $an->Convert->convert_to_celsius({temperature => $value});
				$type     = "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(hours\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(hours\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Hours";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(hour\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(min\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Hour";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(mins\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(mins\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Minutes";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(min\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(min\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Minute";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(secs\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(secs\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ /\(sec\)/i)
			{
				# THis will get translated when generating an alert
				$variable =~ s/\(sec\)//;
				$variable =~ s/^\s+//;
				$variable =~ s/^\s+//;
				$variable =~ s/\s+/ /g;
				$value    .= " Second";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Convert some values.
			if ($value =~ /(\d\d)\/(\d\d)\/(\d\d\d\d), (\d\d:\d\d:\d\d)/)
			{
				# mm/dd/yyyy -> yyyy/mm/dd
				$value = "$3/$1/$2, $4";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /(\d+) hrs/)
			{
				$value = "$1 Hours";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /\(hrs\)/)
			{
				$value =~ s/\(hrs\)/\(Hours\)/;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^(\d+)s/)
			{
				$value = $1." Seconds";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^0x\w+$/)
			{
				# Hex value, leave it alone
				$an->data->{controller}{serial_number}{$serial_number}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::serial_number::${serial_number}::${type}::${variable}", value1 => $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable},
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			if (($value =~ /^(\d+\s*[A-Za-z]+B)$/i) or ($value =~ /^(\d+\.\d+\s*[A-Za-z]+B)$/i))
			{
				my $size  = $1;
				   $value = $an->Readable->hr_to_bytes({base2 => 1, size => $size});
				$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
					name1 => "size",  value1 => $size, 
					name2 => "value", value2 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^00\/00\/00$/i)
			{
				$value = "N/A";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			if ($value =~ /^AWB$/i)
			{
				$value = "Always Write-Back";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^WB$/i)
			{
				$value = "Write-Back";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^WT$/i)
			{
				$value = "Write-Through";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			if ($value =~ /^(\d+) sectors/i)
			{
				$value = $1." Sectors";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "value", value1 => $value, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Store it
			if (exists $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable})
			{
				# Conflict! This is a dirty way to keep them separate
				$variable .= " 2";
			}
			
			$variable = process_variable_name($an, $variable);
			$an->data->{controller}{serial_number}{$serial_number}{$type}{$variable} = $value;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "controller::serial_number::${serial_number}::${type}::${variable}", value1 => $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "serial_number", value1 => $serial_number,
	}, file => $THIS_FILE, line => __LINE__});
	return($serial_number);
}

# This processes variable names to flatten them and remove spaces and special characters.
sub process_variable_name
{
	my ($an, $variable) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_variable_name" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	
	$variable =  lc($variable);
	$variable =~ s/ /_/g;
	$variable =~ s/-/_/g;
	$variable =~ s/&/and/g;
	$variable =~ s/\//_or_/g;
	$variable =~ s/_%/_percent/g;
	$variable =~ s/{_}+/_/g;
	$variable =~ s/^_+//g;
	$variable =~ s/_+$//g;
	$variable =~ s/(\w)\(/$1_\(/;
	$variable =~ s/\((.*?)\)/-_$1/g;
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	return($variable);
}

# This does two things; It checks to see if storcli64 is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
sub find_lsi_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_lsi_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will keep track of how many controllers we find.
	my $adapter_count = 0;
	
	# Vendor-specific copies of storcli replace it. So first, check to see if that is the case on this 
	# node.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "path::perccli64", value1 => $an->data->{path}{perccli64}, 
	}, file => $THIS_FILE, line => __LINE__});
	if (-e $an->data->{path}{perccli64})
	{
		# It does, replace the 'storcli64' path.
		$an->data->{path}{storcli64} = $an->data->{path}{perccli64};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "path::storcli64", value1 => $an->data->{path}{storcli64}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# First, do we have storcli64 installed?
	if (not -e $an->data->{path}{storcli64})
	{
		# Nope, exit.
		print $an->String->get({key => "scan_storcli_error_0001", variables => { path => $an->data->{path}{storcli64} }})."\n";
		$an->Log->entry({log_level => 2, message_key => "scan_storcli_error_0001", message_variables => { path => $an->data->{path}{storcli64} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 1});
	}
	
	# Make sure it is executable
	if (not -x $an->data->{path}{storcli64})
	{
		print $an->String->get({key => "scan_storcli_error_0002", variables => { path => $an->data->{path}{storcli64} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_storcli_error_0002", message_variables => { path => $an->data->{path}{storcli64} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 2});
	}
	
	# Still alive? Good! Look for controllers now.
	my $shell_call = $an->data->{path}{storcli64}." ".$an->data->{sys}{arguments}{adapter_count};
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $_;
		   $line =~ s/\r//;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /Controller Count = (\d+)/i)
		{
			$adapter_count = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "adapter_count", value1 => $adapter_count
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	# Have we any adapters?
	if ($adapter_count > 0)
	{
		$an->data->{sys}{adapter_count} = $adapter_count;
		$an->Log->entry({log_level => 3, message_key => "scan_storcli_log_0001", message_variables => {
			count => $an->data->{sys}{adapter_count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		print $an->String->get({key => "scan_storcli_error_0003", variables => { path => $an->data->{path}{storcli64} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_storcli_error_0003", message_variables => { path => $an->data->{path}{storcli64} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 3});
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "scan_storcli_message_0002"})."\n";

	return(0);
}
