#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released under the terms of the GNU GPL 
# version 2.
#
# ScanCore Scan Agent for APC/Schneider Brand UPSes.
#
# https://alteeve.com
# 
# Exit Codes:
# 0   - Success
# 1   - Passed in host name was not found in the database.
# 
# 255 - The host's UUID isn't in the hosts table yet, ScanCore itself hasn't been run.
# 
# TODO:
# - Temperature data isn't going into the main 'temperatures' table.
# - Find a way to determine conditions where diffirent pairs of UPSes power each node so that 

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;
use Socket;
no warnings 'recursion';

# Disable buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $scancore_directory = ($running_directory =~ /^(.*?)\/agents\/$THIS_FILE$/)[0];

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		path			=>	{
			core_strings		=>	"$scancore_directory/ScanCore.xml",
			# This stores this node's UUID. It is used to track all our sensor data in the 
			# database. If you change this here, change it ScanCore, too.
			host_uuid		=>	"/etc/striker/host.uuid",
			snmpget			=>	"/usr/bin/snmpget",
			snmpset			=>	"/usr/bin/snmpset",
			strings			=>	"$running_directory/$THIS_FILE.xml",
			sql			=>	"$running_directory/$THIS_FILE.sql",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
		},
		sys			=>	{
			# This will get set by AN::Tools::DB->connect_to_databases()
			host_uuid_query		=>	"",
			# When a lock is requested, this is set to the time the lock was set. 
			# DB->do_db_write() and DB->do_db_read() will check this and if its age is >50% of
			# scancore::locking::reap_age, it will renew the lock.
			local_lock_active	=>	0,
			sql			=>	[],
		},
		scancore		=>	{
			archive			=>	{
				directory		=>	"/var/ScanCore/archives/",
				division		=>	25000,
				trigger			=>	20000,
				count			=>	10000,
				dump_file_header	=>	"
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = history, pg_catalog;
",
			},
		},
		# These are values the user might set in striker.conf
		'scan-apc-ups'		=>	{
			disable			=>	0,
			language		=>	"en_CA",
			log_file		=>	"/var/log/ScanCore.log",
			log_level		=>	1,
			log_language		=>	"en_CA",
			log_db_transactions	=>	0,
			# CSV of UPSes to scan. If set, /etc/hosts will not be processed. If not set, hosts
			# will be searched for any entry with 'ups' in its name and added to this.
			upses			=>	"",
			# Once parsed, the UPSes will be scanned using this hash where the key is the UPS 
			# name and the value is the IP address.
			ups			=>	{},
			# By default, a temperature sensor will go into warning state this number of °C below
			# critical temperature.
			temperature_warning_delta	=>	3,
			# It will be marked as 'clear' when the temperature drops this many °C below the 
			# critical temperature.
			temperature_clear_delta		=>	5,
			temperature_shutdown_delta	=>	5,
			# If the battery charge drops below this level, a warning level alert will be 
			# triggered.
			low_charge_percentage_warning	=>	20,
			# If the battery charge rate climbs above this level, the user will be informed that 
			# the UPS is back to an acceptible charge
			low_charge_percentage_ok	=>	25,
			# This is the number of volts above the low voltage trasfer lever or below the high 
			# voltage transfer level needed to clear the alert.
			transfer_voltage_clear_delta	=>	2,
			# This is the number of scans in a row that an alert state needs to exist for before 
			# we trigger an alarm.
			sensor_loss_count_to_alarm	=>	3,
		},
		'default'		=>	{
			battery			=>	{
				# Estimated next replacement date (in 'mm/dd/yy' or 'mm/dd/yyyy' format.)
				replacement_date	=>	".1.3.6.1.4.1.318.1.1.1.2.2.21.0",
				# 1 => OK,	2 => Replacement needed
				health			=>	".1.3.6.1.4.1.318.1.1.1.2.2.4.0",
				model			=>	".1.3.6.1.4.1.318.1.1.1.2.2.19.0",
				# High precision, (1000 = 100.0% charge)
				percentage_charge_hp	=>	".1.3.6.1.4.1.318.1.1.1.2.3.1.0",
				# Last approximate replacement date (mm/dd/yy or yyyy format)
				last_replacement_date	=>	".1.3.6.1.4.1.318.1.1.1.2.1.3.0",
				# 1 => unknown,	2 => batteryNormal,	3 => batteryLow, 
				# 4 => batteryInFaultCondition
				'state'			=>	".1.3.6.1.4.1.318.1.1.1.2.1.1.0",
				# High-precision, (315 == 31.5)
				temperature_hp		=>	".1.3.6.1.4.1.318.1.1.1.2.3.2.0",
				# Temperature alarm upper limit (in even degrees, 40 = 40*C or *F
				# (see ups::temperature_units))
				alarm_temperature	=>	".1.3.6.1.4.1.318.1.1.10.1.2.2.1.3.1",
				# High precision voltage (271 = 27.1 vDC)
				voltage_hp		=>	".1.3.6.1.4.1.318.1.1.1.2.3.4.0",
			},
			input			=>	{
				# High precision, (600 == 60.0 Hz)
				frequency_hp		=>	".1.3.6.1.4.1.318.1.1.1.3.3.4.0",
				# 1 => Auto,	2 => Low,	3 => Medium,	4 => High
				sensitivity		=>	".1.3.6.1.4.1.318.1.1.1.5.2.7.0",
				# High precision, (1245 => "124.5 vAC)
				voltage_hp		=>	".1.3.6.1.4.1.318.1.1.1.3.3.1.0",
				# High precision; Maximum and minimum voltage in the last 60 seconds (1245 == 124.5 vAC)
				'1m_maximum_input_voltage_hp'	=>	".1.3.6.1.4.1.318.1.1.1.3.3.2.0",
				'1m_minimum_input_voltage_hp'	=>	".1.3.6.1.4.1.318.1.1.1.3.3.3.0",
			},
			ups			=>	{
				# Time in tickss after AC restore before UPS powers on (ie: 1000 = 10 seconds)
				ac_restore_delay	=>	".1.3.6.1.4.1.318.1.1.1.5.2.9.0",
				# Delay time from when the shutdown command is sent until when the UPS
				# actually powers off (measured in ticks)
				shutdown_delay		=>	".1.3.6.1.4.1.318.1.1.1.5.2.10.0",
				firmware_version	=>	".1.3.6.1.4.1.318.1.1.1.1.2.1.0",
				# The modes are documented as 'scan_apc_ups_health_00{01..20}' with
				# the integer value correlating to the returned health integer value.
				health			=>	".1.3.6.1.4.1.318.1.1.1.4.1.1.0",
				# Voltage at which TRIM ONLINE kicks in (127 == 127 vAC)
				high_transfer_voltage	=>	".1.3.6.1.4.1.318.1.1.1.5.2.2.0",
				# 1 => noTransfer, 	2 => highLineVoltage,	3 => brownout,
				# 4 => blackout,	5 => smallMomentarySag,	6 => deepMomentarySag,
				# 7 => smallMomentarySpike,	8 => largeMomentarySpike,
				# 9 => selfTest,	10 => rateOfVoltageChange
				last_transfer_reason	=>	".1.3.6.1.4.1.318.1.1.1.3.2.5.0",
				# Voltage at which BOOST ONLINE kicks in (106 == 106vAC)
				low_transfer_voltage	=>	".1.3.6.1.4.1.318.1.1.1.5.2.3.0",
				# Manufactured date (in 'mm/dd/yy' or 'mm/dd/yyyy' format.)
				manufactured_date	=>	".1.3.6.1.4.1.318.1.1.1.1.2.2.0",
				model			=>	".1.3.6.1.4.1.318.1.1.1.1.2.5.0",
				# Temperature units (1 = *C, 2 = *F)
				temperature_units	=>	".1.3.6.1.4.1.318.1.1.10.1.2.2.1.5.1",
				serial_number		=>	".1.3.6.1.4.1.318.1.1.1.1.2.3.0",
				# This is used to power off the UPS. Set:
				# 2 = turnUpsOff (no delay), 
				# 3 = turnUpsOffGracefully (use delay)
				power_off		=>	".1.3.6.1.4.1.318.1.1.1.6.2.1.0",
			},
			nmc			=>	{
				firmware_version	=>	".1.3.6.1.4.1.318.1.4.2.4.1.4.1",
				serial_number		=>	".1.3.6.1.4.1.318.1.4.2.4.1.2.1",
				mac_address		=>	".1.3.6.1.2.1.4.30.1.4.2",
			},
			output			=>	{
				# High precision, Current load percentage (58 = 5.8%)
				load_percentage_hp	=>	".1.3.6.1.4.1.318.1.1.1.4.3.3.0",
				# Time in ticks on batteries, 0 == not on batteries
				time_on_batteries		=>	".1.3.6.1.4.1.318.1.1.1.2.1.2.0",
				# In ticks (10ms)
				estimated_runtime	=>	".1.3.6.1.4.1.318.1.1.1.2.2.3.0",
				# high-precision, (600 == 60.0 Hz)
				frequency_hp		=>	".1.3.6.1.4.1.318.1.1.1.4.3.2.0",
				# High precision (1245 = 124.5 vAC)
				voltage_hp		=>	".1.3.6.1.4.1.318.1.1.1.4.3.1.0",
				# Total output power (in 10 watt-hour increments, divide by 100
				# for kW/hr
				total_output		=>	".1.3.6.1.4.1.318.1.1.1.4.3.6.0",
			},
		},
		snmp			=>	{
			alternate		=>	{
				'SUART'			=>	{
				},
			},
			community	=>	{
				'read'		=>	"public",
				'write'		=>	"private",
			},
		},
	},
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{'scan-apc-ups'}{language});
$an->default_log_language($an->data->{'scan-apc-ups'}{log_language});
$an->default_log_file    ($an->data->{'scan-apc-ups'}{log_file});

# Set the log level.
$an->Log->level($an->data->{'scan-apc-ups'}{log_level});
$an->Log->db_transactions(1) if $an->data->{'scan-apc-ups'}{log_db_transactions};

# Read in the language strings.
$an->Storage->read_words({file => $an->data->{path}{strings}});
$an->Storage->read_words({file => $an->data->{path}{core_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for help.
$an->Get->switches();
$an->Log->adjust_log_level({key => $THIS_FILE});

# Help?
if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	# Help!
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Exit if we're disabled.
if ($an->data->{'scan-apc-ups'}{disable})
{
	$an->nice_exit({exit_code => 1});
}

print $an->String->get({key => "scan_apc_ups_message_0001"})."\n";

# I'll need to loop through the DBs and ensure our schema is loaded for each one.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({ log_level => 3, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});

# Make sure this host's UUID is in the 'hosts' table. If the user is running this directly without first
# running ScanCore, it won't be.
if (not $an->DB->verify_host_uuid())
{
	# ScanCore hasn't run, this host isn't in the 'hosts' table.
	$an->Alert->error({title_key => "an_0003", message_key => "scancore_error_0020", message_variables => { uuid => $an->data->{sys}{host_uuid} }, code => 255, file => $THIS_FILE, line => __LINE__});
}

# If we were called with '--prep-db', we'll prep the database schema regardless of whether any upses are
# found.
if ($an->data->{switches}{'prep-db'})
{
	if ($connections)
	{
		prep_databases($an);
	}
	else
	{
		# Failed
		$an->Log->entry({log_level => 1, message_key => "scancore_warning_0031", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scancore_warning_0031"})."\n";
	}
}

# Find the UPSes.
find_upses($an);

# Gather details on UPSes. Returns '1' if no UPSes were found.
if (gather_ups_data($an))
{
	# No UPSes found.
	$an->Log->entry({log_level => 2, message_key => "scan_apc_ups_message_0003", file => $THIS_FILE, line => __LINE__});
	$an->nice_exit({exit_code => 1});
}

# Do the loading of the schemas and copying data from more up to date DBs if the DB was loaded.
prep_databases($an);

# Archive, if needed.
archive_if_needed($an);

# Look to see if any databases need to be updated.
update_db($an);

# Look for changes.
find_changes($an);

# Process temperatures!
process_temperatures($an);

# Update the database
$an->DB->update_time({file => $THIS_FILE});

# Clean up and go away.
$an->nice_exit({exit_code => 0});

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This will archive stuff in the 'history' schema, if needed.
sub archive_if_needed
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "archive_if_needed" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the 'trigger' is '0', archiving is disabled.
	if (not $an->data->{scancore}{archive}{trigger})
	{
		return(1);
	}
	
	### NOTE: If a ScanCore db server was offline when an archive ran, when it returns, it's records will
	###       sync back, triggering a sooner-than-expected subsequent archive. This shouldn't happen 
	###       often, and the complexity of tracking archive dates is such that we'll not try to account
	###       for these cases. 
	### TODO: What we can do later is, when we write the restore stuff, build in a dedupe function.
	
	### Process:
	# 1. Count the records in history for each table, restricting the results to those from this host 
	#    (save for special tables like 'server') and if the number of records is greater than 
	#    'scancore::archive::trigger', start an archive.
	# 2. Set/update the 'archive_date' state.
	# 3. Lock the database.
	# 4. Select 'modified_date' from history.foo, offset by 
	#    ('scancore::archive::trigger' - 'scancore::archive::count').
	# 5. Make sure the 'scancore::archive::directory' exists, creating it if needed.
	# 6. Select all records older that the 'modified_date', write them to a file and then DELETE those
	#    records from the database.
	
	# Update the archive path, if set by a user. Also verify that there are sane archive values.
	$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
		name1 => "path::scancore_archive",       value1 => $an->data->{path}{scancore_archive}, 
		name2 => "scancore::archive::directory", value2 => $an->data->{scancore}{archive}{directory}, 
		name3 => "scancore::archive::trigger",   value3 => $an->data->{scancore}{archive}{trigger}, 
		name4 => "scancore::archive::count",     value4 => $an->data->{scancore}{archive}{count}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{archive}{directory} =~ /\/.*/)
	{
		$an->data->{path}{scancore_archive} = $an->data->{scancore}{archive}{directory};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "path::scancore_archive", value1 => $an->data->{path}{scancore_archive}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{trigger}) or ($an->data->{scancore}{archive}{trigger} =~ /\D/))
	{
		$an->data->{scancore}{archive}{trigger} = 100000;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::trigger", value1 => $an->data->{scancore}{archive}{trigger}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{count}) or ($an->data->{scancore}{archive}{count} =~ /\D/))
	{
		$an->data->{scancore}{archive}{count} = 50000;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::count", value1 => $an->data->{scancore}{archive}{count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	if (not -e $an->data->{path}{scancore_archive})
	{
		my $shell_call = $an->data->{path}{'mkdir'}." -p '".$an->data->{path}{scancore_archive}."'";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		close $file_handle;
		
		# Did it work?
		if (not -e $an->data->{path}{scancore_archive})
		{
			# Nope. :(
			$an->Alert->warning({message_key => "scancore_warning_0030", message_variables => { directory => $an->data->{path}{scancore_archive} }, quiet => 1, file => $THIS_FILE, line => __LINE__});
			return(1);
		}
	}
	
	# Unlike ScanCore, matching 'apc_ups_battery' to a host requires a join on 'apc_ups', so this is a 
	# bit more complex.
	$an->data->{archive}{table} = {
		apc_ups	=>	{
			archive_date	=>	"",
			offset		=>	0,
		},
		apc_ups_battery	=>	{
			archive_date	=>	"",
			offset		=>	0,
		},
		apc_ups_input	=>	{
			archive_date	=>	"",
			offset		=>	0,
		},
		apc_ups_output	=>	{
			archive_date	=>	"",
			offset		=>	0,
		},
	};
	my $archive_needed = 0;
	foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "table", value1 => $table, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $query = "
SELECT 
    COUNT(*) 
FROM 
    history.$table 
WHERE 
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		if ($table ne "apc_ups")
		{
			$query = "
SELECT 
    COUNT(*) 
FROM 
    history.$table a, 
    apc_ups b 
WHERE 
    a.${table}_apc_ups_uuid = b.apc_ups_uuid 
AND 
    b.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $records = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $records = 0 if not defined $records;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "records", value1 => $records, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($records > $an->data->{scancore}{archive}{trigger})
		{
			   $archive_needed                             = 1;
			my $records_to_save                            = ($an->data->{scancore}{archive}{trigger} - $an->data->{scancore}{archive}{count});
			my $offset                                     = $records - $records_to_save;
			   $an->data->{archive}{table}{$table}{offset} = $offset;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "archive_needed",                   value1 => $archive_needed, 
				name2 => "records_to_save",                  value2 => $records_to_save, 
				name3 => "archive::table::${table}::offset", value3 => $an->data->{archive}{table}{$table}{offset}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# If I have something to archive, do so now.
	if ($archive_needed)
	{
		# This will store the files to compress after we release the locks.
		my $compress = [];
		
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Now loop through the table(s) that need to be archived.
		foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
		{
			next if not $an->data->{archive}{table}{$table}{offset};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "table", value1 => $table, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Now to do the archive.
			if ($table eq "apc_ups")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { apc_ups_host_uuid => $an->data->{sys}{host_uuid} },
					columns      => ["apc_ups_uuid", "apc_ups_host_uuid", "apc_ups_serial_number", "apc_ups_name", "apc_ups_ip", "apc_ups_ac_restore_delay", "apc_ups_shutdown_delay", "apc_ups_firmware_version", "apc_ups_health", "apc_ups_high_transfer_voltage", "apc_ups_low_transfer_voltage", "apc_ups_last_transfer_reason", "apc_ups_manufactured_date", "apc_ups_model", "apc_ups_temperature_units", "apc_ups_nmc_firmware_version", "apc_ups_nmc_serial_number",  "apc_ups_nmc_mac_address"],
				});
			}
			elsif ($table eq "apc_ups_battery")
			{
				### NOTE: The 'table' will use prefix '1.' and the 'join_table' will use 
				###       prefix 'b.', set the conditionals accordingly.
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { 'a.apc_ups_battery_apc_ups_uuid' => 'b.apc_ups_uuid', 'b.apc_ups_host_uuid' => $an->data->{sys}{host_uuid} },
					join_table   => "apc_ups", 
					columns      => [ "apc_ups_battery_id", "apc_ups_battery_apc_ups_uuid", "apc_ups_battery_replacement_date", "apc_ups_battery_health", "apc_ups_battery_model", "apc_ups_battery_percentage_charge", "apc_ups_battery_last_replacement_date", "apc_ups_battery_state", "apc_ups_battery_temperature", "apc_ups_battery_alarm_temperature", "apc_ups_battery_voltage" ],
				});
			}
			elsif ($table eq "apc_ups_input")
			{
				### NOTE: The 'table' will use prefix '1.' and the 'join_table' will use 
				###       prefix 'b.', set the conditionals accordingly.
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { 'a.apc_ups_input_apc_ups_uuid' => 'b.apc_ups_uuid', 'b.apc_ups_host_uuid' => $an->data->{sys}{host_uuid} },
					join_table   => "apc_ups", 
					columns      => [ "apc_ups_input_id", "apc_ups_input_apc_ups_uuid", "apc_ups_input_frequency", "apc_ups_input_sensitivity", "apc_ups_input_voltage", "apc_ups_input_1m_maximum_input_voltage", "apc_ups_input_1m_minimum_input_voltage" ],
				});
			}
			elsif ($table eq "apc_ups_output")
			{
				### NOTE: The 'table' will use prefix '1.' and the 'join_table' will use 
				###       prefix 'b.', set the conditionals accordingly.
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { 'a.apc_ups_output_apc_ups_uuid' => 'b.apc_ups_uuid', 'b.apc_ups_host_uuid' => $an->data->{sys}{host_uuid} },
					join_table   => "apc_ups", 
					columns      => [ "apc_ups_output_id", "apc_ups_output_apc_ups_uuid", "apc_ups_output_load_percentage", "apc_ups_output_time_on_batteries", "apc_ups_output_estimated_runtime", "apc_ups_output_frequency", "apc_ups_output_voltage", "apc_ups_output_total_output" ],
				});
			}
		}
		
		### TODO: Make this less of a hackish mc-hackington...
		# VACUUM FULL, if the database is on this machine. I need to do this from the command line 
		# because the user we connect as isn't allowed to do it. We'll also only vacuum our DB.
		my $db_name = "";
		foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
				name1 => "id",                        value1 => $id, 
				name2 => "scancore::db::${id}::host", value2 => $an->data->{scancore}{db}{$id}{host}, 
				name3 => "hostname",                  value3 => $an->hostname, 
				name4 => "short_hostname",            value4 => $an->short_hostname, 
			}, file => $THIS_FILE, line => __LINE__});
			if (($an->data->{scancore}{db}{$id}{host} eq $an->hostname) or ($an->data->{scancore}{db}{$id}{host} eq $an->short_hostname))
			{
				$db_name = $an->data->{scancore}{db}{$id}{name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "db_name",                   value1 => $db_name, 
					name2 => "scancore::db::${id}::name", value2 => $an->data->{scancore}{db}{$id}{name}, 
				}, file => $THIS_FILE, line => __LINE__});
				last;
			}
		}
		if ($db_name)
		{
			my $start      = time;
			my $shell_call = $an->data->{path}{su}." - postgres -c \"".$an->data->{path}{psql}." $db_name -c 'VACUUM FULL;'\"";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "start",      value1 => $start, 
				name2 => "shell_call", value2 => $shell_call, 
			}, file => $THIS_FILE, line => __LINE__});
			open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			close $file_handle;
			
			my $finished = time - $start;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "finished", value1 => $finished, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# This reads in the various temperature sensors we read from this run and will set the temperature table 
# and/or set/clear warnings/critical states.
sub process_temperatures
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_temperatures" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### NOTE: We use 'sensor_host' to hold the serial number of the device hosting the sensor.
	# First, read in all existing entries. We'll compare and UPDATE or INSERT as needed and DELETE any 
	# stale entries. 
	my $query = "
SELECT 
    temperature_uuid, 
    temperature_sensor_name, 
    temperature_sensor_host, 
    temperature_celsius,
    temperature_state,
    temperature_is
FROM 
    temperature 
WHERE 
    temperature_host_uuid   = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
AND 
    temperature_agent_name  = ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE)." 
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query, 
	}, file => $THIS_FILE, line => __LINE__});
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	
	# One or more records were found.
	foreach my $row (@{$results})
	{
		my $temperature_uuid        = $row->[0]; 
		my $temperature_sensor_name = $row->[1];
		my $temperature_sensor_host = $row->[2];
		my $temperature_celsius     = $row->[3];
		my $temperature_state       = $row->[4];
		my $temperature_is          = $row->[5];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "temperature_uuid",        value1 => $temperature_uuid,
			name2 => "temperature_sensor_name", value2 => $temperature_sensor_name,
			name3 => "temperature_sensor_host", value3 => $temperature_sensor_host,
			name4 => "temperature_celsius",     value4 => $temperature_celsius,
			name5 => "temperature_state",       value5 => $temperature_state,
			name6 => "temperature_is",          value6 => $temperature_is,
		}, file => $THIS_FILE, line => __LINE__});
		
		$an->data->{old}{temperature}{$temperature_sensor_name}{$temperature_sensor_host} = {
			temperature_uuid	=>	$temperature_uuid, 
			temperature_celsius	=>	$temperature_celsius,
			temperature_state	=>	$temperature_state,
			temperature_is		=>	$temperature_is,
		};
	}
	
	# Loop through the temperature from this scan.
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{new}{temperature}})
	{
		foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{new}{temperature}{$variable}})
		{
			my $new_temperature_celsius = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_celsius};
			my $new_temperature_state   = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_state};
			my $new_temperature_is      = $an->data->{new}{temperature}{$variable}{$serial_number}{temperature_is};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "variable",                value1 => $variable, 
				name2 => "serial_number",           value2 => $serial_number, 
				name3 => "new_temperature_celsius", value3 => $new_temperature_celsius, 
				name4 => "new_temperature_state",   value4 => $new_temperature_state, 
				name5 => "new_temperature_is",      value5 => $new_temperature_is, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If the state is 'warning', set  a health weight of 1 and set critical to 2.
			if ($new_temperature_state eq "warning")
			{
				my $health_source_name                           = "temperature:".$serial_number;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($new_temperature_state eq "critical")
			{
				my $health_source_name                           = "temperature:".$serial_number;
				   $an->data->{health}{new}{$health_source_name} = 2;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Now see if the variable was seen before and, if so, if it changed.
			if (ref($an->data->{old}{temperature}{$variable}{$serial_number}))
			{
				# Update the existing entry, if needed.
				my $temperature_uuid        = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_uuid};
				my $old_temperature_celsius = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_celsius};
				my $old_temperature_state   = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_state};
				my $old_temperature_is      = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_is};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
					name1 => "temperature_uuid",         value1 => $temperature_uuid,
					name2 => "old_temperature_celsius",  value2 => $old_temperature_celsius,
					name3 => "old_temperature_state",    value3 => $old_temperature_state,
					name4 => "old_temperature_is",       value4 => $old_temperature_is,
				}, file => $THIS_FILE, line => __LINE__});
				
				if (($new_temperature_celsius ne $old_temperature_celsius) or 
				    ($new_temperature_state   ne $old_temperature_state)   or
				    ($new_temperature_is      ne $old_temperature_is))
				{
					# Something changed, update.
					my $query = "
UPDATE 
    temperature 
SET 
    temperature_celsius = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_celsius).", 
    temperature_state   = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_state).", 
    temperature_is      = ".$an->data->{sys}{use_db_fh}->quote($new_temperature_is).", 
    modified_date       = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE
    temperature_uuid    = ".$an->data->{sys}{use_db_fh}->quote($temperature_uuid).";
";
					push @{$an->data->{sys}{sql}}, $query;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "query", value1 => $query
					}, file => $THIS_FILE, line => __LINE__});
				}
				else
				{
					# No change.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "variable",      value1 => $variable,
						name2 => "serial_number", value2 => $serial_number,
					}, file => $THIS_FILE, line => __LINE__});
				}
				
				# We still want this value, so delete it from the hash so it doesn't get 
				# deleted in the next step.
				delete $an->data->{old}{temperature}{$variable}{$serial_number};
			}
			else
			{
				# New entry
				my $query = "
INSERT INTO 
    temperature 
(
    temperature_uuid, 
    temperature_host_uuid, 
    temperature_sensor_host, 
    temperature_sensor_name, 
    temperature_agent_name, 
    temperature_celsius, 
    temperature_state, 
    temperature_is, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($variable).", 
    ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_celsius).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_temperature_is).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);
";
				push @{$an->data->{sys}{sql}}, $query;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Now, if any undeleted old entries remain, delete them from the database.
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{old}{temperature}})
	{
		foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{old}{temperature}{$variable}})
		{
			my $old_temperature_uuid = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_uuid};
			my $old_temperature      = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_celsius};
			my $old_state            = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_state};
			my $old_is               = $an->data->{old}{temperature}{$variable}{$serial_number}{temperature_is};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "variable",             value1 => $variable, 
				name2 => "serial_number",        value2 => $serial_number, 
				name3 => "old_temperature_uuid", value3 => $old_temperature_uuid, 
				name4 => "old_temperature",      value4 => $old_temperature, 
				name5 => "old_state",            value5 => $old_state, 
				name6 => "old_is",               value6 => $old_is, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Mark the sensor as DELETEd.
			my $query = "
UPDATE 
    temperature 
SET 
    temperature_state  = 'DELETED', 
    modified_date      = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE
    temperature_uuid   = ".$an->data->{sys}{use_db_fh}->quote($old_temperature_uuid).";
";
			push @{$an->data->{sys}{sql}}, $query;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			$query = "
DELETE FROM 
    temperature 
WHERE
    temperature_uuid   = ".$an->data->{sys}{use_db_fh}->quote($old_temperature_uuid).";
";
			push @{$an->data->{sys}{sql}}, $query;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# Commit the queries.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# This reads in the last scan data from one of the databases and compares it against the just-read data. If 
# anything changed, register an alert.
sub find_changes
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "find_changes" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### NOTE: For now, we do it this way because we look for UPSes by their name/IPs, so we don't have
	###       the serial number yet. This may get reworked later.
	# As I read in each UPS, I will record the serial numbers. At the end, I will check in the database
	# for any entries that were not found and mark them as lost.
	my $seen_upses = [];
	
	# Loop through each UPS
	my $id        = $an->data->{sys}{read_db_id};
	my $host_name = $an->hostname;
	
	# If a UPS crosses its shutdown threshold, it will be added to this array. If both/all UPSes need 
	# to be shutdown, the Anvil! will be stopped.
	my $shutdown_ups = [];
	foreach my $ups_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-ups'}{ups}})
	{
		# Convert all the long hashes into shorter variables
		my $new_apc_ups_ip            = $an->data->{ups}{$ups_name}{ip};
		my $new_apc_ups_model         = $an->data->{ups}{$ups_name}{model};
		my $new_apc_ups_serial_number = $an->data->{ups}{$ups_name}{apc_ups_serial_number} ? $an->data->{ups}{$ups_name}{apc_ups_serial_number} : "--";
		my $new_apc_ups_name          = $ups_name;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "new_apc_ups_ip",            value1 => $new_apc_ups_ip, 
			name2 => "new_apc_ups_model",         value2 => $new_apc_ups_model, 
			name3 => "new_apc_ups_serial_number", value3 => $new_apc_ups_serial_number, 
			name4 => "new_apc_ups_name",          value4 => $new_apc_ups_name, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Record this UPS
		push @{$seen_upses}, $new_apc_ups_serial_number;
		
		#############################################################################################
		# Base UPS and NMC information                                                              #
		#############################################################################################
		
		my $new_apc_ups_ac_restore_delay      = defined $an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay}      ? $an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay}      : 0;
		my $new_apc_ups_shutdown_delay        = defined $an->data->{ups}{$ups_name}{apc_ups_shutdown_delay}        ? $an->data->{ups}{$ups_name}{apc_ups_shutdown_delay}        : 0;
		my $new_apc_ups_firmware_version      = defined $an->data->{ups}{$ups_name}{apc_ups_firmware_version}      ? $an->data->{ups}{$ups_name}{apc_ups_firmware_version}      : 0;
		my $new_apc_ups_health                = defined $an->data->{ups}{$ups_name}{apc_ups_health}                ? $an->data->{ups}{$ups_name}{apc_ups_health}                : 0;
		my $new_apc_ups_high_transfer_voltage = defined $an->data->{ups}{$ups_name}{apc_ups_high_transfer_voltage} ? $an->data->{ups}{$ups_name}{apc_ups_high_transfer_voltage} : 0;
		my $new_apc_ups_low_transfer_voltage  = defined $an->data->{ups}{$ups_name}{apc_ups_low_transfer_voltage}  ? $an->data->{ups}{$ups_name}{apc_ups_low_transfer_voltage}  : 0;
		my $new_apc_ups_last_transfer_reason  = defined $an->data->{ups}{$ups_name}{apc_ups_last_transfer_reason}  ? $an->data->{ups}{$ups_name}{apc_ups_last_transfer_reason}  : 0;
		my $new_apc_ups_manufactured_date     = defined $an->data->{ups}{$ups_name}{apc_ups_manufactured_date}     ? $an->data->{ups}{$ups_name}{apc_ups_manufactured_date}     : 0;
		my $new_apc_ups_temperature_units     = defined $an->data->{ups}{$ups_name}{apc_ups_temperature_units}     ? $an->data->{ups}{$ups_name}{apc_ups_temperature_units}     : 0;
		my $new_apc_ups_nmc_firmware_version  = defined $an->data->{ups}{$ups_name}{apc_ups_nmc_firmware_version}  ? $an->data->{ups}{$ups_name}{apc_ups_nmc_firmware_version}  : 0;
		my $new_apc_ups_nmc_serial_number     = defined $an->data->{ups}{$ups_name}{apc_ups_nmc_serial_number}     ? $an->data->{ups}{$ups_name}{apc_ups_nmc_serial_number}     : 0;
		my $new_apc_ups_nmc_mac_address       = defined $an->data->{ups}{$ups_name}{apc_ups_nmc_mac_address}       ? $an->data->{ups}{$ups_name}{apc_ups_nmc_mac_address}       : 0;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0012", message_variables => {
			name1  => "new_apc_ups_ac_restore_delay",      value1  => $new_apc_ups_ac_restore_delay,
			name2  => "new_apc_ups_shutdown_delay",        value2  => $new_apc_ups_shutdown_delay,
			name3  => "new_apc_ups_firmware_version",      value3  => $new_apc_ups_firmware_version,
			name4  => "new_apc_ups_health",                value4  => $new_apc_ups_health,
			name5  => "new_apc_ups_high_transfer_voltage", value5  => $new_apc_ups_high_transfer_voltage,
			name6  => "new_apc_ups_low_transfer_voltage",  value6  => $new_apc_ups_low_transfer_voltage,
			name7  => "new_apc_ups_last_transfer_reason",  value7  => $new_apc_ups_last_transfer_reason,
			name8  => "new_apc_ups_manufactured_date",     value8  => $new_apc_ups_manufactured_date,
			name9  => "new_apc_ups_temperature_units",     value9  => $new_apc_ups_temperature_units,
			name10 => "new_apc_ups_nmc_firmware_version",  value10 => $new_apc_ups_nmc_firmware_version,
			name11 => "new_apc_ups_nmc_serial_number",     value11 => $new_apc_ups_nmc_serial_number,
			name12 => "new_apc_ups_nmc_mac_address",       value12 => $new_apc_ups_nmc_mac_address,
		}, file => $THIS_FILE, line => __LINE__});
		
		#############################################################################################
		# Battery information                                                                       #
		#############################################################################################
		
		my $new_apc_ups_battery_replacement_date      = defined $an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date}      ? $an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date}      : 0;
		my $new_apc_ups_battery_health                = defined $an->data->{ups}{$ups_name}{apc_ups_battery_health}                ? $an->data->{ups}{$ups_name}{apc_ups_battery_health}                : 0;
		my $new_apc_ups_battery_model                 = defined $an->data->{ups}{$ups_name}{apc_ups_battery_model}                 ? $an->data->{ups}{$ups_name}{apc_ups_battery_model}                 : 0;
		my $new_apc_ups_battery_percentage_charge     = defined $an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge}     ? $an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge}     : 0;
		my $new_apc_ups_battery_last_replacement_date = defined $an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date} ? $an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date} : 0;
		my $new_apc_ups_battery_state                 = defined $an->data->{ups}{$ups_name}{apc_ups_battery_state}                 ? $an->data->{ups}{$ups_name}{apc_ups_battery_state}                 : 0;
		my $new_apc_ups_battery_temperature           = defined $an->data->{ups}{$ups_name}{apc_ups_battery_temperature}           ? $an->data->{ups}{$ups_name}{apc_ups_battery_temperature}           : 0;
		my $new_apc_ups_battery_alarm_temperature     = defined $an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature}     ? $an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature}     : 0;
		my $new_apc_ups_battery_voltage               = defined $an->data->{ups}{$ups_name}{apc_ups_battery_voltage}               ? $an->data->{ups}{$ups_name}{apc_ups_battery_voltage}               : 0;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
			name1 => "new_apc_ups_battery_replacement_date",      value1 =>  $new_apc_ups_battery_replacement_date, 
			name2 => "new_apc_ups_battery_health",                value2 =>  $new_apc_ups_battery_health, 
			name3 => "new_apc_ups_battery_model",                 value3 =>  $new_apc_ups_battery_model, 
			name4 => "new_apc_ups_battery_percentage_charge",     value4 =>  $new_apc_ups_battery_percentage_charge, 
			name5 => "new_apc_ups_battery_last_replacement_date", value5 =>  $new_apc_ups_battery_last_replacement_date, 
			name6 => "new_apc_ups_battery_state",                 value6 =>  $new_apc_ups_battery_state, 
			name7 => "new_apc_ups_battery_temperature",           value7 =>  $new_apc_ups_battery_temperature, 
			name8 => "new_apc_ups_battery_alarm_temperature",     value8 =>  $new_apc_ups_battery_alarm_temperature, 
			name9 => "new_apc_ups_battery_voltage",               value9 =>  $new_apc_ups_battery_voltage, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### NOTE: We want to record the current battery temperature in all cases for our health file.
		###       We'll handle alerts later.
		# These are thresholds. We'll compare our current temp against these 
		my $alert_temperature = ($new_apc_ups_battery_alarm_temperature - $an->data->{'scan-apc-ups'}{temperature_warning_delta});
		my $sensor_host_key   = "ups:".$new_apc_ups_serial_number.":battery";
		my $variable          = "apc_ups_battery_temperature";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
			name1 => "alert_temperature", value1 => $alert_temperature,
			name2 => "sensor_host_key",   value2 => $sensor_host_key,
			name3 => "variable",          value3 => $variable,
		}, file => $THIS_FILE, line => __LINE__});
		if ($new_apc_ups_battery_temperature > $new_apc_ups_battery_alarm_temperature)
		{
			# Critical
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_apc_ups_battery_temperature;
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = "critical";
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = "high";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
				name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
				name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($new_apc_ups_battery_temperature > $alert_temperature)
		{
			# Warning
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_apc_ups_battery_temperature;
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = "warning";
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = "high";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
				name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
				name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			# Nominal
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius} = $new_apc_ups_battery_temperature;
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}   = "ok";
			$an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}      = "nominal";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "new::temperature::${variable}::${sensor_host_key}::temperature_celsius", value1 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_celsius}, 
				name2 => "new::temperature::${variable}::${sensor_host_key}::temperature_state",   value2 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_state}, 
				name3 => "new::temperature::${variable}::${sensor_host_key}::temperature_is",      value3 => $an->data->{new}{temperature}{$variable}{$sensor_host_key}{temperature_is}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		#############################################################################################
		# Input Information                                                                         #
		#############################################################################################
		
		my $new_apc_ups_input_frequency                = defined $an->data->{ups}{$ups_name}{apc_ups_input_frequency}                ? $an->data->{ups}{$ups_name}{apc_ups_input_frequency}                : 0;
		my $new_apc_ups_input_sensitivity              = defined $an->data->{ups}{$ups_name}{apc_ups_input_sensitivity}              ? $an->data->{ups}{$ups_name}{apc_ups_input_sensitivity}              : 0;
		my $new_apc_ups_input_voltage                  = defined $an->data->{ups}{$ups_name}{apc_ups_input_voltage}                  ? $an->data->{ups}{$ups_name}{apc_ups_input_voltage}                  : 0;
		my $new_apc_ups_input_1m_maximum_input_voltage = defined $an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} ? $an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} : 0;
		my $new_apc_ups_input_1m_minimum_input_voltage = defined $an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} ? $an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} : 0;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
			name1 => "new_apc_ups_input_frequency",                value1 => $new_apc_ups_input_frequency,
			name2 => "new_apc_ups_input_sensitivity",              value2 => $new_apc_ups_input_sensitivity,
			name3 => "new_apc_ups_input_voltage",                  value3 => $new_apc_ups_input_voltage,
			name4 => "new_apc_ups_input_1m_maximum_input_voltage", value4 => $new_apc_ups_input_1m_maximum_input_voltage,
			name5 => "new_apc_ups_input_1m_minimum_input_voltage", value5 => $new_apc_ups_input_1m_minimum_input_voltage,
		}, file => $THIS_FILE, line => __LINE__});
		
		#############################################################################################
		# Output Information                                                                        #
		#############################################################################################
		
		my $new_apc_ups_output_load_percentage   = defined $an->data->{ups}{$ups_name}{apc_ups_output_load_percentage}   ? $an->data->{ups}{$ups_name}{apc_ups_output_load_percentage}   : 0;
		my $new_apc_ups_output_time_on_batteries = defined $an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries} ? $an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries} : 0;
		my $new_apc_ups_output_estimated_runtime = defined $an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime} ? $an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime} : 0;
		my $new_apc_ups_output_frequency         = defined $an->data->{ups}{$ups_name}{apc_ups_output_frequency}         ? $an->data->{ups}{$ups_name}{apc_ups_output_frequency}         : 0;
		my $new_apc_ups_output_voltage           = defined $an->data->{ups}{$ups_name}{apc_ups_output_voltage}           ? $an->data->{ups}{$ups_name}{apc_ups_output_voltage}           : 0;
		my $new_apc_ups_output_total_output      = defined $an->data->{ups}{$ups_name}{apc_ups_output_total_output}      ? $an->data->{ups}{$ups_name}{apc_ups_output_total_output}      : 0;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
			name1 => "new_apc_ups_output_load_percentage",   value1 => $new_apc_ups_output_load_percentage,
			name2 => "new_apc_ups_output_time_on_batteries", value2 => $new_apc_ups_output_time_on_batteries,
			name3 => "new_apc_ups_output_estimated_runtime", value3 => $new_apc_ups_output_estimated_runtime,
			name4 => "new_apc_ups_output_frequency",         value4 => $new_apc_ups_output_frequency,
			name5 => "new_apc_ups_output_voltage",           value5 => $new_apc_ups_output_voltage,
			name6 => "new_apc_ups_output_total_output",      value6 => $new_apc_ups_output_total_output,
		}, file => $THIS_FILE, line => __LINE__});
		
		# This returns the 'apc_ups_uuid' if the UPS is found.
		if (read_last_scan($an, $new_apc_ups_serial_number))
		{
			# The UPS exists. Look for updates. We're using the serial number for referencing the
			# SQL data to catch hostname changes.
			my $ups_serial_number = $new_apc_ups_serial_number;
			
			#####################################################################################
			# Base UPS and NMC information                                                      #
			#####################################################################################
			
			my $apc_ups_uuid                      = $an->data->{sql}{$ups_serial_number}{apc_ups_uuid};
			my $old_apc_ups_name                  = $an->data->{sql}{$ups_serial_number}{apc_ups_name};
			my $old_apc_ups_ip                    = $an->data->{sql}{$ups_serial_number}{apc_ups_ip};
			my $old_apc_ups_ac_restore_delay      = $an->data->{sql}{$ups_serial_number}{apc_ups_ac_restore_delay};
			my $old_apc_ups_shutdown_delay        = $an->data->{sql}{$ups_serial_number}{apc_ups_shutdown_delay};
			my $old_apc_ups_firmware_version      = $an->data->{sql}{$ups_serial_number}{apc_ups_firmware_version};
			my $old_apc_ups_health                = $an->data->{sql}{$ups_serial_number}{apc_ups_health};
			my $old_apc_ups_high_transfer_voltage = $an->data->{sql}{$ups_serial_number}{apc_ups_high_transfer_voltage};
			my $old_apc_ups_low_transfer_voltage  = $an->data->{sql}{$ups_serial_number}{apc_ups_low_transfer_voltage};
			my $old_apc_ups_last_transfer_reason  = $an->data->{sql}{$ups_serial_number}{apc_ups_last_transfer_reason};
			my $old_apc_ups_manufactured_date     = $an->data->{sql}{$ups_serial_number}{apc_ups_manufactured_date};
			my $old_apc_ups_model                 = $an->data->{sql}{$ups_serial_number}{apc_ups_model};
			my $old_apc_ups_temperature_units     = $an->data->{sql}{$ups_serial_number}{apc_ups_temperature_units};
			my $old_apc_ups_nmc_firmware_version  = $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_firmware_version};
			my $old_apc_ups_nmc_serial_number     = $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_serial_number};
			my $old_apc_ups_nmc_mac_address       = $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_mac_address};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0016", message_variables => {
				name1  => "apc_ups_uuid",                      value1  => $apc_ups_uuid, 
				name2  => "old_apc_ups_name",                  value2  => $old_apc_ups_name, 
				name3  => "old_apc_ups_ip",                    value3  => $old_apc_ups_ip, 
				name4  => "old_apc_ups_ac_restore_delay",      value4  => $old_apc_ups_ac_restore_delay, 
				name5  => "old_apc_ups_shutdown_delay",        value5  => $old_apc_ups_shutdown_delay, 
				name6  => "old_apc_ups_firmware_version",      value6  => $old_apc_ups_firmware_version, 
				name7  => "old_apc_ups_health",                value7  => $old_apc_ups_health, 
				name8  => "old_apc_ups_high_transfer_voltage", value8  => $old_apc_ups_high_transfer_voltage, 
				name9  => "old_apc_ups_low_transfer_voltage",  value9  => $old_apc_ups_low_transfer_voltage, 
				name10 => "old_apc_ups_last_transfer_reason",  value10 => $old_apc_ups_last_transfer_reason, 
				name11 => "old_apc_ups_manufactured_date",     value11 => $old_apc_ups_manufactured_date, 
				name12 => "old_apc_ups_model",                 value12 => $old_apc_ups_model, 
				name13 => "old_apc_ups_temperature_units",     value13 => $old_apc_ups_temperature_units, 
				name14 => "old_apc_ups_nmc_firmware_version",  value14 => $old_apc_ups_nmc_firmware_version, 
				name15 => "old_apc_ups_nmc_serial_number",     value15 => $old_apc_ups_nmc_serial_number, 
				name16 => "old_apc_ups_nmc_mac_address",       value16 => $old_apc_ups_nmc_mac_address, 
			}, file => $THIS_FILE, line => __LINE__});
			
			#####################################################################################
			# Battery information                                                               #
			#####################################################################################
			
			my $old_apc_ups_battery_replacement_date      = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_replacement_date};
			my $old_apc_ups_battery_health                = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_health};
			my $old_apc_ups_battery_model                 = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_model};
			my $old_apc_ups_battery_percentage_charge     = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_percentage_charge};
			my $old_apc_ups_battery_last_replacement_date = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_last_replacement_date};
			my $old_apc_ups_battery_state                 = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_state};
			my $old_apc_ups_battery_temperature           = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_temperature};
			my $old_apc_ups_battery_alarm_temperature     = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_alarm_temperature};
			my $old_apc_ups_battery_voltage               = $an->data->{sql}{$ups_serial_number}{apc_ups_battery_voltage};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "old_apc_ups_battery_replacement_date",      value1 => $old_apc_ups_battery_replacement_date, 
				name2 => "old_apc_ups_battery_health",                value2 => $old_apc_ups_battery_health, 
				name3 => "old_apc_ups_battery_model",                 value3 => $old_apc_ups_battery_model, 
				name4 => "old_apc_ups_battery_percentage_charge",     value4 => $old_apc_ups_battery_percentage_charge, 
				name5 => "old_apc_ups_battery_last_replacement_date", value5 => $old_apc_ups_battery_last_replacement_date, 
				name6 => "old_apc_ups_battery_state",                 value6 => $old_apc_ups_battery_state, 
				name7 => "old_apc_ups_battery_temperature",           value7 => $old_apc_ups_battery_temperature, 
				name8 => "old_apc_ups_battery_alarm_temperature",     value8 => $old_apc_ups_battery_alarm_temperature, 
				name9 => "old_apc_ups_battery_voltage",               value9 => $old_apc_ups_battery_voltage, 
			}, file => $THIS_FILE, line => __LINE__});
				
			#####################################################################################
			# Input Information                                                                 #
			#####################################################################################
				
			my $old_apc_ups_input_frequency                = $an->data->{sql}{$ups_serial_number}{apc_ups_input_frequency};
			my $old_apc_ups_input_sensitivity              = $an->data->{sql}{$ups_serial_number}{apc_ups_input_sensitivity};
			my $old_apc_ups_input_voltage                  = $an->data->{sql}{$ups_serial_number}{apc_ups_input_voltage};
			my $old_apc_ups_input_1m_maximum_input_voltage = $an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_maximum_input_voltage};
			my $old_apc_ups_input_1m_minimum_input_voltage = $an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_minimum_input_voltage};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "old_apc_ups_input_frequency",                value1 => $old_apc_ups_input_frequency, 
				name2 => "old_apc_ups_input_sensitivity",              value2 => $old_apc_ups_input_sensitivity, 
				name3 => "old_apc_ups_input_voltage",                  value3 => $old_apc_ups_input_voltage, 
				name4 => "old_apc_ups_input_1m_maximum_input_voltage", value4 => $old_apc_ups_input_1m_maximum_input_voltage, 
				name5 => "old_apc_ups_input_1m_minimum_input_voltage", value5 => $old_apc_ups_input_1m_minimum_input_voltage, 
			}, file => $THIS_FILE, line => __LINE__});
				
			#####################################################################################
			# Output Information                                                                #
			#####################################################################################
				
			my $old_apc_ups_output_load_percentage   = $an->data->{sql}{$ups_serial_number}{apc_ups_output_load_percentage};
			my $old_apc_ups_output_time_on_batteries = $an->data->{sql}{$ups_serial_number}{apc_ups_output_time_on_batteries};
			my $old_apc_ups_output_estimated_runtime = $an->data->{sql}{$ups_serial_number}{apc_ups_output_estimated_runtime};
			my $old_apc_ups_output_frequency         = $an->data->{sql}{$ups_serial_number}{apc_ups_output_frequency};
			my $old_apc_ups_output_voltage           = $an->data->{sql}{$ups_serial_number}{apc_ups_output_voltage};
			my $old_apc_ups_output_total_output      = $an->data->{sql}{$ups_serial_number}{apc_ups_output_total_output};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "old_apc_ups_output_load_percentage",   value1 => $old_apc_ups_output_load_percentage, 
				name2 => "old_apc_ups_output_time_on_batteries", value2 => $old_apc_ups_output_time_on_batteries, 
				name3 => "old_apc_ups_output_estimated_runtime", value3 => $old_apc_ups_output_estimated_runtime, 
				name4 => "old_apc_ups_output_frequency",         value4 => $old_apc_ups_output_frequency, 
				name5 => "old_apc_ups_output_voltage",           value5 => $old_apc_ups_output_voltage, 
				name6 => "old_apc_ups_output_total_output",      value6 => $old_apc_ups_output_total_output, 
			}, file => $THIS_FILE, line => __LINE__});
			
			### Start comparing!
			# Start with the core values;
			if (($new_apc_ups_name                  ne $old_apc_ups_name) or 
			    ($new_apc_ups_ip                    ne $old_apc_ups_ip) or 
			    ($new_apc_ups_ac_restore_delay      ne $old_apc_ups_ac_restore_delay) or 
			    ($new_apc_ups_shutdown_delay        ne $old_apc_ups_shutdown_delay) or 
			    ($new_apc_ups_firmware_version      ne $old_apc_ups_firmware_version) or 
			    ($new_apc_ups_health                ne $old_apc_ups_health) or 
			    ($new_apc_ups_high_transfer_voltage ne $old_apc_ups_high_transfer_voltage) or 
			    ($new_apc_ups_low_transfer_voltage  ne $old_apc_ups_low_transfer_voltage) or 
			    ($new_apc_ups_last_transfer_reason  ne $old_apc_ups_last_transfer_reason) or 
			    ($new_apc_ups_manufactured_date     ne $old_apc_ups_manufactured_date) or 
			    ($new_apc_ups_model                 ne $old_apc_ups_model) or 
			    ($new_apc_ups_temperature_units     ne $old_apc_ups_temperature_units) or 
			    ($new_apc_ups_nmc_firmware_version  ne $old_apc_ups_nmc_firmware_version) or 
			    ($new_apc_ups_nmc_serial_number     ne $old_apc_ups_nmc_serial_number) or 
			    ($new_apc_ups_nmc_mac_address       ne $old_apc_ups_nmc_mac_address))
			{
				# Something in the 'apc_ups' table changed for
				# this UPS.
				$an->Log->entry({log_level => 2, message_key => "scan_apc_ups_log_0001", message_variables => {
					table		=>	"apc_ups", 
					serial_number	=>	$ups_serial_number, 
					ups_name	=>	$ups_name, 
				}, file => $THIS_FILE, line => __LINE__});
				
				### Log the variables to help see what actually changed.
				# Did the domain name change?
				if ($new_apc_ups_name ne $old_apc_ups_name)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_name", value1 => $new_apc_ups_name, 
						name2 => "old_apc_ups_name", value2 => $old_apc_ups_name, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0001",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_name,
							old_value		=>	$old_apc_ups_name,
						},
					});
				}
				
				# See if the IP address has changed.
				if ($new_apc_ups_ip ne $old_apc_ups_ip)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_ip", value1 => $new_apc_ups_ip, 
						name2 => "old_apc_ups_ip", value2 => $old_apc_ups_ip, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0002",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_ip,
							old_value		=>	$old_apc_ups_ip,
						},
					});
				}
				
				# See if the AC restore delay has changed.
				if ($new_apc_ups_ac_restore_delay ne $old_apc_ups_ac_restore_delay)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_ac_restore_delay", value1 => $new_apc_ups_ac_restore_delay, 
						name2 => "old_apc_ups_ac_restore_delay", value2 => $old_apc_ups_ac_restore_delay, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0003",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_ac_restore_delay,
							old_value		=>	$old_apc_ups_ac_restore_delay,
						},
					});
				}
				
				# See if the shutdown delay has changed.
				if ($new_apc_ups_shutdown_delay ne $old_apc_ups_shutdown_delay)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_shutdown_delay", value1 => $new_apc_ups_shutdown_delay, 
						name2 => "old_apc_ups_shutdown_delay", value2 => $old_apc_ups_shutdown_delay, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0004",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_shutdown_delay,
							old_value		=>	$old_apc_ups_shutdown_delay,
						},
					});
				}
				
				# Has the firmware version changed?
				if ($new_apc_ups_firmware_version ne $old_apc_ups_firmware_version)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_firmware_version", value1 => $new_apc_ups_firmware_version, 
						name2 => "old_apc_ups_firmware_version", value2 => $old_apc_ups_firmware_version, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0005",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_firmware_version,
							old_value		=>	$old_apc_ups_firmware_version,
						},
					});
				}
				
				# Has the health changed? This is fairly complex as there are many possible 
				# health values.
				if ($new_apc_ups_health ne $old_apc_ups_health)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_health", value1 => $new_apc_ups_health, 
						name2 => "old_apc_ups_health", value2 => $old_apc_ups_health, 
					}, file => $THIS_FILE, line => __LINE__});
					
					my $level     = "notice";
					my $title_key = "an_alert_title_0003";
					
					### There are 20 possible states 
					### (* == warning, rest are notice):
					# *1 - The UPS's health is in an unknown state.
					#  2 - The UPS is operating normally.
					#  3 - The UPS is running on its batteries. See below for checks if input voltage remains. If not, this will indicate a power loss event.
					#  4 - The UPS is compensating for low input power. This is treated as being on batteries.
					#  5 - The UPS is in a timed sleep. It will power back on when the timer has expired.
					#  6 - The UPS is in bypass-mode and was placed in this mode by software. Power is passing to downstream devices through a radio frequency interference filter, but is not conditioned in any other way. Batter protection is not available.
					# *7 - The UPS is off. No power is being provided to down-stream equipment.
					# *8 - The UPS is currently rebooting.
					#  9 - The UPS is in bypass-mode and was placed in this mode by a hardware switch. Power is passing to downstream devices through a radio frequency interference filter, but is not conditioned in any other way. Batter protection is not available.
					#  10 - The UPS is in bypass-mode because of an internal failure. Power is passing to downstream devices through a radio frequency interference filter, but is not conditioned in any other way. Batter protection is not available.
					# *11 - The UPS has lost input power and is sleeping. It will restore output power once input power has been restored.
					#  12 - The UPS is compensating for high input voltage.
					#  13 - The UPS is operating in low-power mode. In this mode, the UPS is in static bypass mode and it is drawing very little power. If a fault is detected, it will switch to either normal operation or forced static bypass mode.
					#  14 - The UPS is operating in hot-standby mode.
					#  15 - The UPS is performing a test of its batteries.
					# *16 - The UPS has been placed in emergency static bypass mode. Power is passing to downstream devices through a radio frequency interference filter, but is not conditioned in any other way. Batter protection is not available.
					#  17 - The UPS is in static bypass standby mode. It is not currently providing power to downstream devices.
					#  18 - The UPS is in power saving mode. The front panel display will be off but the UPS is operating normally.
					#  19 - The UPS is in SPoT (Self Power Test) operating mode. <!-- http://www.apcmedia.com/salestools/COCR-9TZK8N/COCR-9TZK8N_R0_EN.pdf -->
					#  20 - The UPS is in ECOnversion mode. The UPS is providing power to the downstream devices via the bypass. The UPS's inverter is operational and ready to take over the output load if an input fault occurs. <!-- http://www.apcmedia.com/salestools/MBPN-9HCLNT/MBPN-9HCLNT_R0_EN.pdf -->
					#  ----[ Fake ones ]----
					#  30 - The UPS is running on batteries but there is still input voltage, but it is higher than the high transfer voltage so we're TRIMing
					#  31 - The UPS is running on batteries but there is still input voltage, but it is lower than the low transfer voltage so we're BOOSTing
					#  32 - The UPS is running on batteries but there is still nominal input voltage, so it is likely a self-test.
					
					# Make sure we have a valid health integer
					my $bad_value               = "";
					my $say_new_apc_ups_health = $new_apc_ups_health;
					my $say_old_apc_ups_health = $old_apc_ups_health;
					if (($new_apc_ups_health =~ /\D/) or (($new_apc_ups_health < 0) or ($new_apc_ups_health > 20)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value              = $new_apc_ups_health;
						$say_new_apc_ups_health = 99;
					}
					elsif (($old_apc_ups_health =~ /\D/) or (($old_apc_ups_health < 0) or ($old_apc_ups_health > 20)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value              = $old_apc_ups_health;
						$say_old_apc_ups_health = 99;
					}
		
					# If the UPS is on batteries, check the input voltage. If there is 
					# still power we'll indicate a self-test.
					if ($new_apc_ups_health eq "3")
					{
						if ($new_apc_ups_input_voltage > $new_apc_ups_high_transfer_voltage)
						{
							$new_apc_ups_health = 30;
						}
						elsif ($new_apc_ups_input_voltage < 10)
						{
							# Actual power loss. 
							$new_apc_ups_health = 3;
							$level              = "warning";
							$title_key          = "an_alert_title_0004";
						}
						elsif ($new_apc_ups_input_voltage < $new_apc_ups_low_transfer_voltage)
						{
							$new_apc_ups_health = 31;
						}
						else
						{
							$new_apc_ups_health = 32;
						}
					}
					# Now check if power is back.
					if ($old_apc_ups_health eq "3")
					{
						# Clear the alert.
						$level     = "warning";
						$title_key = "an_alert_title_0006";
					}
					
					# If the old or new level is one worthy of a warning, set the alert 
					# level to warning.
					if (($new_apc_ups_health eq "1") or 
					    ($new_apc_ups_health eq "7") or 
					    ($new_apc_ups_health eq "8") or 
					    ($new_apc_ups_health eq "11") or 
					    ($new_apc_ups_health eq "16"))
					{
						# Entered a warning state.
						$level     = "warning";
						$title_key = "an_alert_title_0004";
					}
					elsif (($old_apc_ups_health eq "1") or 
					       ($old_apc_ups_health eq "7") or 
					       ($old_apc_ups_health eq "8") or 
					       ($old_apc_ups_health eq "11") or 
					       ($old_apc_ups_health eq "16"))
					{
						# Warning state cleared.
						$level     = "warning";
						$title_key = "an_alert_title_0006";
					}
					
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	"scan_apc_ups_note_0006",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	"#!string!scan_apc_ups_health_".sprintf("%04d", $say_new_apc_ups_health)."!#",
							old_value		=>	"#!string!scan_apc_ups_health_".sprintf("%04d", $say_old_apc_ups_health)."!#",
							bad_value		=>	$bad_value,
						},
					});
				}
				
				# See if the high-voltage transfer to battery value has changed.
				if ($new_apc_ups_high_transfer_voltage ne $old_apc_ups_high_transfer_voltage)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_high_transfer_voltage", value1 => $new_apc_ups_high_transfer_voltage, 
						name2 => "old_apc_ups_high_transfer_voltage", value2 => $old_apc_ups_high_transfer_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert. Which message we use will depend on
					# whether the threshold increased or decreased.
					my $message_key = "scan_apc_ups_note_0007";
					if ($new_apc_ups_high_transfer_voltage > $old_apc_ups_high_transfer_voltage)
					{
						$message_key = "scan_apc_ups_note_0008";
					}
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_high_transfer_voltage,
							old_value		=>	$old_apc_ups_high_transfer_voltage,
						},
					});
				}
				
				# See if the low-voltage transfer to battery value has changed.
				if ($new_apc_ups_low_transfer_voltage ne $old_apc_ups_low_transfer_voltage)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_low_transfer_voltage", value1 => $new_apc_ups_low_transfer_voltage, 
						name2 => "old_apc_ups_low_transfer_voltage", value2 => $old_apc_ups_low_transfer_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert. Which message we use will depend on
					# whether the threshold increased or decreased.
					my $message_key = "scan_apc_ups_note_0009";
					if ($new_apc_ups_low_transfer_voltage < $old_apc_ups_low_transfer_voltage)
					{
						$message_key = "scan_apc_ups_note_0010";
					}
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_low_transfer_voltage,
							old_value		=>	$old_apc_ups_low_transfer_voltage,
						},
					});
				}
				
				# Has the last transfer reason changed? There are 10 reasons why this might 
				# happen, some being more critical than others.
				if ($new_apc_ups_last_transfer_reason ne $old_apc_ups_last_transfer_reason)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_last_transfer_reason", value1 => $new_apc_ups_last_transfer_reason, 
						name2 => "old_apc_ups_last_transfer_reason", value2 => $old_apc_ups_last_transfer_reason, 
					}, file => $THIS_FILE, line => __LINE__});
					
					### NOTE: This used to be 'warning' level, but it caused way too many
					###       false alarms. If a serious issue arises, the input voltage
					###       will trigger a 'warning' level alert.
					### There are 10 possible states 
					# 0 -  There is no information on when the UPS last transferred to battery.
					# 1 -  The UPS has not transferred to battery power since the last time it booted.
					# 2 -  The UPS last transferred to batteries because of high input voltage.
					# 3 -  The UPS last transferred to batteries because of a brown out. That is, a prolonged drop in input voltage from the mains circuit.
					# 4 -  The UPS last transferred to batteries because of a black out. That is, a prolonged loss of input voltage from the mains circuit.
					# 5 -  The UPS last transferred to batteries because of a brief, minor reduction of input voltage from the mains circuit.
					# 6 -  The UPS last transferred to batteries because of a brief, significant reduction of input voltage from the mains circuit.
					# 7 -  The UPS last transferred to batteries because of a brief, minor increase of input voltage from the mains circuit.
					# 8 -  The UPS last transferred to batteries because of a brief, significant spike of input voltage from the mains circuit.
					# 9 -  The UPS last transferred to batteries as part of a planned self-test.
					# 10 - The UPS last transferred to batteries because of a significant change of input voltage from the mains circuit.
					
					# Make sure we have a valid health integer
					my $bad_value                            = "";
					my $say_new_apc_ups_last_transfer_reason = $new_apc_ups_last_transfer_reason;
					my $say_old_apc_ups_last_transfer_reason = $old_apc_ups_last_transfer_reason;
					if (($new_apc_ups_last_transfer_reason =~ /\D/) or (($new_apc_ups_last_transfer_reason < 0) or ($new_apc_ups_last_transfer_reason > 10)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                            = $new_apc_ups_last_transfer_reason;
						$say_new_apc_ups_last_transfer_reason = 99;
					}
					elsif (($old_apc_ups_last_transfer_reason =~ /\D/) or (($old_apc_ups_last_transfer_reason < 0) or ($old_apc_ups_last_transfer_reason > 10)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                            = $old_apc_ups_last_transfer_reason;
						$say_old_apc_ups_last_transfer_reason = 99;
					}
					
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0011",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	"#!string!scan_apc_ups_last_xfer_".sprintf("%04d", $say_new_apc_ups_last_transfer_reason)."!#",
							old_value		=>	"#!string!scan_apc_ups_last_xfer_".sprintf("%04d", $say_old_apc_ups_last_transfer_reason)."!#",
							bad_value		=>	$bad_value,
						},
					});
				}
				
				# o_O
				if ($new_apc_ups_manufactured_date ne $old_apc_ups_manufactured_date)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_manufactured_date", value1 => $new_apc_ups_manufactured_date, 
						name2 => "old_apc_ups_manufactured_date", value2 => $old_apc_ups_manufactured_date, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'warning' level alert simply because it should never 
					# happen and it probably a sign of a bigger problem.
					$an->Alert->register_alert({
						alert_level		=>	"warning", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0004",
						alert_message_key	=>	"scan_apc_ups_note_0012",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_manufactured_date,
							old_value		=>	$old_apc_ups_manufactured_date,
						},
					});
				}
				
				# Did a deleted UPS return?
				if ($new_apc_ups_model ne $old_apc_ups_model)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_model", value1 => $new_apc_ups_model, 
						name2 => "old_apc_ups_model", value2 => $old_apc_ups_model, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# Default is a program error.
					my $alert_level   = "warning";
					my $alert_title   = "an_alert_title_0004";
					my $alert_message = "scan_apc_ups_note_0013";
					if ($old_apc_ups_model eq "DELETED")
					{
						# A UPS returned.
						$alert_level   = "notice"; 
						$alert_title   = "an_alert_title_0003";
						$alert_message = "scan_apc_ups_note_0065";
					}
					
					$an->Alert->register_alert({
						alert_level		=>	$alert_level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$alert_title,
						alert_message_key	=>	$alert_message,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_model,
							old_value		=>	$old_apc_ups_model,
						},
					});
				}
				
				# See if the core temperature units has changed.
				if ($new_apc_ups_temperature_units ne $old_apc_ups_temperature_units)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_temperature_units", value1 => $new_apc_ups_temperature_units, 
						name2 => "old_apc_ups_temperature_units", value2 => $old_apc_ups_temperature_units, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This should not impact the user at all.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0014",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_temperature_units eq "F" ? "#!string!tools_suffix_0013!#" : "#!string!tools_suffix_0011!#",
							old_value		=>	$old_apc_ups_temperature_units eq "F" ? "#!string!tools_suffix_0013!#" : "#!string!tools_suffix_0011!#",
						},
					});
				}
				
				# Has the NMC's firmware changed?
				if ($new_apc_ups_nmc_firmware_version ne $old_apc_ups_nmc_firmware_version)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_nmc_firmware_version", value1 => $new_apc_ups_nmc_firmware_version, 
						name2 => "old_apc_ups_nmc_firmware_version", value2 => $old_apc_ups_nmc_firmware_version, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0015",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_nmc_firmware_version,
							old_value		=>	$old_apc_ups_nmc_firmware_version,
						},
					});
				}
				
				# Has the NMC serial number changed? If the user changed the network card, 
				# this could be triggered.
				if ($new_apc_ups_nmc_serial_number ne $old_apc_ups_nmc_serial_number)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_nmc_serial_number", value1 => $new_apc_ups_nmc_serial_number, 
						name2 => "old_apc_ups_nmc_serial_number", value2 => $old_apc_ups_nmc_serial_number, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0016",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_nmc_serial_number,
							old_value		=>	$old_apc_ups_nmc_serial_number,
						},
					});
				}
				
				# As with above, if the MAC address changed, it is probably because the NMC 
				# was replaced.
				if ($new_apc_ups_nmc_mac_address ne $old_apc_ups_nmc_mac_address)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_nmc_mac_address", value1 => $new_apc_ups_nmc_mac_address, 
						name2 => "old_apc_ups_nmc_mac_address", value2 => $old_apc_ups_nmc_mac_address, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0017",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_nmc_mac_address,
							old_value		=>	$old_apc_ups_nmc_mac_address,
						},
					});
				}
			
				# Update the apc_ups record, then we'll handle notifying users.
				my $query = "
UPDATE 
    apc_ups 
SET 
    apc_ups_name                  = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_name).", 
    apc_ups_ip                    = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_ip).", 
    apc_ups_ac_restore_delay      = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_ac_restore_delay).", 
    apc_ups_shutdown_delay        = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_shutdown_delay).", 
    apc_ups_firmware_version      = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_firmware_version).", 
    apc_ups_health                = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_health).", 
    apc_ups_high_transfer_voltage = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_high_transfer_voltage).", 
    apc_ups_low_transfer_voltage  = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_low_transfer_voltage).", 
    apc_ups_last_transfer_reason  = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_last_transfer_reason).", 
    apc_ups_manufactured_date     = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_manufactured_date).", 
    apc_ups_model                 = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_model).", 
    apc_ups_temperature_units     = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_temperature_units).", 
    apc_ups_nmc_firmware_version  = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_firmware_version).", 
    apc_ups_nmc_serial_number     = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_serial_number).", 
    apc_ups_nmc_mac_address       = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_mac_address).", 
    modified_date                 = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid)."
AND 
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			
			# Though we use other tables, this is done to conserve disk space. As such, we're not
			# going to check individually for the existence of each table. This may prove to be a
			# bad decision, so this approach may change later.
			
			# Check for changes in the battery
			if (($new_apc_ups_battery_replacement_date      ne $old_apc_ups_battery_replacement_date)      or 
			    ($new_apc_ups_battery_health                ne $old_apc_ups_battery_health)                or 
			    ($new_apc_ups_battery_model                 ne $old_apc_ups_battery_model)                 or 
			    ($new_apc_ups_battery_percentage_charge     ne $old_apc_ups_battery_percentage_charge)     or 
			    ($new_apc_ups_battery_last_replacement_date ne $old_apc_ups_battery_last_replacement_date) or 
			    ($new_apc_ups_battery_state                 ne $old_apc_ups_battery_state)                 or 
			    ($new_apc_ups_battery_temperature           ne $old_apc_ups_battery_temperature)           or 
			    ($new_apc_ups_battery_alarm_temperature     ne $old_apc_ups_battery_alarm_temperature)     or 
			    ($new_apc_ups_battery_voltage               ne $old_apc_ups_battery_voltage))
			{
				# Something in the 'apc_ups_battery' table changed for this UPS.
				$an->Log->entry({log_level => 3, message_key => "scan_apc_ups_log_0001", message_variables => {
					table         => "apc_ups_battery", 
					serial_number => $ups_serial_number
				}, file => $THIS_FILE, line => __LINE__});
				
				### Log the variables to help see what actually changed.
				
				# Has the estimated replacement date changed?
				if ($new_apc_ups_battery_replacement_date ne $old_apc_ups_battery_replacement_date)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_replacement_date", value1 => $new_apc_ups_battery_replacement_date, 
						name2 => "old_apc_ups_battery_replacement_date", value2 => $old_apc_ups_battery_replacement_date, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'info' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0018",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_battery_replacement_date,
							old_value		=>	$old_apc_ups_battery_replacement_date,
						},
					});
				}
				
				# Has the battery health changed?
				if ($new_apc_ups_battery_health ne $old_apc_ups_battery_health)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_health", value1 => $new_apc_ups_battery_health, 
						name2 => "old_apc_ups_battery_health", value2 => $old_apc_ups_battery_health, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# Make sure we have a valid health integer
					my $bad_value                      = "";
					my $say_new_apc_ups_battery_health = $new_apc_ups_battery_health;
					my $say_old_apc_ups_battery_health = $old_apc_ups_battery_health;
					if (($new_apc_ups_battery_health =~ /\D/) or (($new_apc_ups_battery_health < 0) or ($new_apc_ups_battery_health > 2)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                  = $new_apc_ups_battery_health;
						$new_apc_ups_battery_health = 99;
					}
					elsif (($old_apc_ups_battery_health =~ /\D/) or (($old_apc_ups_battery_health < 0) or ($old_apc_ups_battery_health > 2)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                  = $old_apc_ups_battery_health;
						$old_apc_ups_battery_health = 99;
					}
					
					my $level       = "notice";
					my $title_key   = "an_alert_title_0003";
					my $message_key = "scan_apc_ups_note_0061";
					
					### There are 2 possible states  (* == warning):
					#  1 - The UPS battery is healthy.
					# *2 - The UPS battery has failed and needs to be replaced.
					if ($new_apc_ups_battery_health eq "2")
					{
						# Entered a warning state.
						$level       = "warning";
						$title_key   = "an_alert_title_0004";
						$message_key = "scan_apc_ups_note_0019";
					}
					elsif ($old_apc_ups_battery_health eq "2")
					{
						# Warning state cleared.
						$level       = "warning";
						$title_key   = "an_alert_title_0006";
						$message_key = "scan_apc_ups_note_0020";
					}
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	"#!string!scan_apc_ups_battery_health_".sprintf("%04d", $say_new_apc_ups_battery_health)."!#",
							old_value		=>	"#!string!scan_apc_ups_battery_health_".sprintf("%04d", $say_old_apc_ups_battery_health)."!#",
							battery_model		=>	$new_apc_ups_battery_model,
							bad_value		=>	$bad_value,
						},
					});
				}
				
				# Has the battery model changed?
				if ($new_apc_ups_battery_model ne $old_apc_ups_battery_model)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_model", value1 => $new_apc_ups_battery_model, 
						name2 => "old_apc_ups_battery_model", value2 => $old_apc_ups_battery_model, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0021",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_battery_model,
							old_value		=>	$old_apc_ups_battery_model,
						},
					});
				}
				
				# If the battery charge percentage has changed, it will usually be an 'info'
				# level event, unless it drops below the warning threshold, climbs above the 
				# OK threshold or hits 100%
				if ($new_apc_ups_battery_percentage_charge ne $old_apc_ups_battery_percentage_charge)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_percentage_charge", value1 => $new_apc_ups_battery_percentage_charge, 
						name2 => "old_apc_ups_battery_percentage_charge", value2 => $old_apc_ups_battery_percentage_charge, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# By default, this is a simple 'info' level alert.
					my $level       = "info";
					my $title_key   = "an_alert_title_0002";
					my $message_key = "scan_apc_ups_note_0022";
					my $send_alert  = 0;
					
					# Is the battery charging or discharging?
					if ($new_apc_ups_battery_percentage_charge > $old_apc_ups_battery_percentage_charge)
					{
						# Charging
						if ($new_apc_ups_battery_percentage_charge eq "100")
						{
							# If we say power loss in the last hour, make this a
							# 'notice'. Otherwise, leave it as 'info' as the UPS 
							# frequently fluctuates charge percentage.
							my $low_limit = 50;
							my $query     = "
SELECT 
    round(extract(epoch from b.modified_date)) 
FROM 
    apc_ups a, 
    history.apc_ups_input b 
WHERE 
    a.apc_ups_uuid = b.apc_ups_input_apc_ups_uuid 
AND 
    a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    b.apc_ups_input_1m_minimum_input_voltage < $low_limit 
ORDER BY 
    b.modified_date DESC LIMIT 1;
";
							$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
								name1 => "query", value1 => $query,
							}, file => $THIS_FILE, line => __LINE__});
							
							# Do the query...
							my $last_power_loss = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
							my $current_time    = time;
							my $difference      = ($current_time - $last_power_loss);
							$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
								name1 => "last_power_loss", value1 => $last_power_loss, 
								name2 => "current_time",    value2 => $current_time, 
								name3 => "difference",      value3 => $difference, 
							}, file => $THIS_FILE, line => __LINE__});
							
							# if it's less than six hours, well assume it has finished charging.
							if ($difference < 21600)
							{
								$level       = "notice";
								$title_key   = "an_alert_title_0003";
							}
							else
							{
								$level       = "info";
								$title_key   = "an_alert_title_0002";
							}
							$message_key = "scan_apc_ups_note_0024";
						}
						elsif ($new_apc_ups_battery_percentage_charge > $an->data->{'scan-apc-ups'}{low_charge_percentage_ok})
						{
							# Crossed the "now OK" threshold. Was there an alert?
							# If so, tell the user.
							my $cleared = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_percentage_charge",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($cleared)
							{
								# There was an alert and it has now been 
								# cleared.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0023";
							}
						}
					}
					else
					{
						# Discharging
						$message_key = "scan_apc_ups_note_0025";
						if ($new_apc_ups_battery_percentage_charge < $an->data->{'scan-apc-ups'}{low_charge_percentage_warning})
						{
							# Crossed the "oh crap" threshold. Is this the first
							# time? 'set' is set to 1 if so.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_percentage_charge",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we dropped below the
								# alert threshold.
								$level       = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_apc_ups_note_0026";
							}
						}
						
						### TODO: If there is a sudden drop in charge (ie: 20% drop
						###       in one scan loop), the batteries may be about to 
						###       blow up. Kill the power.
					}
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_battery_percentage_charge}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_battery_percentage_charge}),
						},
					});
				}
				
				# Has the replacement date changed?
				if ($new_apc_ups_battery_last_replacement_date ne $old_apc_ups_battery_last_replacement_date)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_last_replacement_date", value1 => $new_apc_ups_battery_last_replacement_date, 
						name2 => "old_apc_ups_battery_last_replacement_date", value2 => $old_apc_ups_battery_last_replacement_date, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0027",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_battery_last_replacement_date,
							old_value		=>	$old_apc_ups_battery_last_replacement_date,
						},
					});
				}
				
				# Has the battery state changed? There are four possible battery states.
				if ($new_apc_ups_battery_state ne $old_apc_ups_battery_state)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_state", value1 => $new_apc_ups_battery_state, 
						name2 => "old_apc_ups_battery_state", value2 => $old_apc_ups_battery_state, 
					}, file => $THIS_FILE, line => __LINE__});
					
					my $level       = "notice";
					my $title_key   = "an_alert_title_0003";
					my $message_key = "scan_apc_ups_note_0028";
					
					### There are four possible states (* == warning):
					# *1 - The UPS battery is in an unknown state.
					#  2 - The UPS battery is operating normally.
					#  3 - The UPS battery is in a low voltage state.
					# *4 - The UPS battery is in a failed state and needs to be replaced.
					
					# Make sure we have a valid health integer
					my $bad_value                     = "";
					my $say_new_apc_ups_battery_state = $new_apc_ups_battery_state;
					my $say_old_apc_ups_battery_state = $old_apc_ups_battery_state;
					if (($new_apc_ups_battery_state =~ /\D/) or (($new_apc_ups_battery_state < 0) or ($new_apc_ups_battery_state > 4)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                     = $new_apc_ups_battery_state;
						$say_new_apc_ups_battery_state = 99;
					}
					elsif (($old_apc_ups_battery_state =~ /\D/) or (($old_apc_ups_battery_state < 0) or ($old_apc_ups_battery_state > 4)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                     = $old_apc_ups_battery_state;
						$say_old_apc_ups_battery_state = 99;
					}
					
					if (($new_apc_ups_battery_state eq "1") or ($new_apc_ups_battery_state eq "4"))
					{
						# Entered a warning state.
						$level       = "warning";
						$title_key   = "an_alert_title_0004";
					}
					elsif (($old_apc_ups_battery_state eq "1") or ($old_apc_ups_battery_state eq "4"))
					{
						# Warning state cleared.
						$level       = "warning";
						$title_key   = "an_alert_title_0006";
						$message_key = "scan_apc_ups_note_0029";
					}
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	"#!string!scan_apc_ups_battery_state_".sprintf("%04d", $say_new_apc_ups_battery_state)."!#",
							old_value		=>	"#!string!scan_apc_ups_battery_state_".sprintf("%04d", $say_old_apc_ups_battery_state)."!#",
							battery_model		=>	$new_apc_ups_battery_model,
						},
					});
				}
				
				# Has the battery's temperature changed? If so, check to see if it crossed 
				# over the warning threshold. 
				if ($new_apc_ups_battery_temperature ne $old_apc_ups_battery_temperature)
				{
					### TODO: Add/clear to the 'temperature' table.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_temperature", value1 => $new_apc_ups_battery_temperature, 
						name2 => "old_apc_ups_battery_temperature", value2 => $old_apc_ups_battery_temperature, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# By default, this is an info level alert.
					my $level       = "info";
					my $title_key   = "an_alert_title_0002";
					my $message_key = "scan_apc_ups_note_0030";
					my $send_alert  = 0;
					
					# These are thresholds
					my $alert_temperature    = ($new_apc_ups_battery_alarm_temperature - $an->data->{'scan-apc-ups'}{temperature_warning_delta});
					my $critical_temperature = $new_apc_ups_battery_alarm_temperature;
					my $shutdown_temperature = ($new_apc_ups_battery_alarm_temperature + $an->data->{'scan-apc-ups'}{temperature_shutdown_delta});
					my $clear_temperature    = ($new_apc_ups_battery_alarm_temperature - $an->data->{'scan-apc-ups'}{temperature_clear_delta});
					$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
						name1 => "alert_temperature",    value1 => $alert_temperature,
						name2 => "critical_temperature", value2 => $critical_temperature,
						name3 => "shutdown_temperature", value3 => $shutdown_temperature,
						name4 => "clear_temperature",    value4 => $clear_temperature,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Is the battery's temperature climbing or dropping?
					if ($new_apc_ups_battery_temperature > $old_apc_ups_battery_temperature)
					{
						# Rising. Has it crossed the shutdown, critical or alert 
						# thresholds?
						if ($new_apc_ups_battery_temperature > $shutdown_temperature)
						{
							# Crossed the shutdown temperature. Kill the UPS.
							my $variable = 
							my $set      = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_shutdown",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$level       = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_apc_ups_note_0035";
							}
							push @{$shutdown_ups}, $new_apc_ups_ip;
						}
						elsif ($new_apc_ups_battery_temperature > $critical_temperature)
						{
							# Crossed the critical threshold. Is this the first 
							# time? 'set' is set to 1 if so.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# critical threshold.
								$level       = "critical";
								$title_key   = "an_alert_title_0005";
								$message_key = "scan_apc_ups_note_0034";
							}
						}
						elsif ($new_apc_ups_battery_temperature > $alert_temperature)
						{
							# Crossed the "oh crap" threshold. Is this the first 
							# time? 'set' is set to 1 if so.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# This is the first time we rose above the 
								# warning threshold.
								$level       = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_apc_ups_note_0031";
							}
						}
					}
					else
					{
						# Dropping. 
						$message_key = "scan_apc_ups_note_0032";
						
						# If it dropped below the 'clear' threshold, look for and 
						# clear 'shutdown', 'critical' and 'warning' alerts.
						
						# If it dropped below the 'warning' threshold, look for and 
						# clear 'shutdown' and 'critical' alerts.
						if ($new_apc_ups_battery_temperature < $clear_temperature)
						{
							# Clear all alerts, if any exist.
							my $cleared_shutdown = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_shutdown",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							my $cleared_critical = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							my $cleared_warning = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_warning",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if (($cleared_shutdown) or ($cleared_critical) or ($cleared_warning))
							{
								# The temperature has dropped back down to 
								# safe levels.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0033";
							}
						}
						elsif ($new_apc_ups_battery_temperature < $alert_temperature)
						{
							# Clear 'shutdown' and 'critical' alerts.
							my $cleared_shutdown = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_shutdown",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							my $cleared_critical = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_battery_temperature_critical",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if (($cleared_shutdown) or ($cleared_critical))
							{
								# The temperature has dropped back down to 
								# warning levels.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0036";
							}
						}
					}
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_battery_temperature}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_battery_temperature}),
							critical_temperature	=>	$new_apc_ups_battery_alarm_temperature,
							shutdown_temperature	=>	$shutdown_temperature,
						},
					});
				}
				
				# Has the alarm temperature changed?
				if ($new_apc_ups_battery_alarm_temperature ne $old_apc_ups_battery_alarm_temperature)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_alarm_temperature", value1 => $new_apc_ups_battery_alarm_temperature, 
						name2 => "old_apc_ups_battery_alarm_temperature", value2 => $old_apc_ups_battery_alarm_temperature, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a 'notice' level alert because the administrator will most
					# likely already know about it.
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0037",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_battery_alarm_temperature,
							old_value		=>	$old_apc_ups_battery_alarm_temperature,
						},
					});
				}
				
				# Has the UPS battery voltage changed?
				if ($new_apc_ups_battery_voltage ne $old_apc_ups_battery_voltage)
				{
					### TODO: Determine safe voltages and alarm/kill the UPS if needed.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_battery_voltage", value1 => $new_apc_ups_battery_voltage, 
						name2 => "old_apc_ups_battery_voltage", value2 => $old_apc_ups_battery_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an 'info' level alert because the voltage is always 
					# fluctuating.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0038",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_battery_voltage}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_battery_voltage}),
						},
					});
				}
				
				# Update the DB table
				my $query = "
UPDATE 
    apc_ups_battery 
SET 
    apc_ups_battery_replacement_date      = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_replacement_date).", 
    apc_ups_battery_health                = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_health).", 
    apc_ups_battery_model                 = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_model).", 
    apc_ups_battery_percentage_charge     = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_percentage_charge).", 
    apc_ups_battery_last_replacement_date = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_last_replacement_date).", 
    apc_ups_battery_state                 = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_state).", 
    apc_ups_battery_temperature           = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_temperature).", 
    apc_ups_battery_alarm_temperature     = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_alarm_temperature).", 
    apc_ups_battery_voltage               = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_voltage).", 
    modified_date                         = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    apc_ups_battery_id = 
    (
        SELECT 
            b.apc_ups_battery_id 
        FROM 
            apc_ups a, 
            apc_ups_battery b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_battery_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
;";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
				
				# Now figure out what changed and report it to the user.
			}
			
			# Now check for changes in the input power
			if (($new_apc_ups_input_frequency                ne $old_apc_ups_input_frequency) or 
			    ($new_apc_ups_input_sensitivity              ne $old_apc_ups_input_sensitivity) or 
			    ($new_apc_ups_input_voltage                  ne $old_apc_ups_input_voltage) or 
			    ($new_apc_ups_input_1m_maximum_input_voltage ne $old_apc_ups_input_1m_maximum_input_voltage) or 
			    ($new_apc_ups_input_1m_minimum_input_voltage ne $old_apc_ups_input_1m_minimum_input_voltage))
			{
				# Something in the 'apc_ups_input' table changed for this UPS.
				$an->Log->entry({log_level => 3, message_key => "scan_apc_ups_log_0001", message_variables => {
					table         => "apc_ups_input", 
					serial_number => $ups_serial_number
				}, file => $THIS_FILE, line => __LINE__});
				
				# Did the input frequency change?
				if ($new_apc_ups_input_frequency ne $old_apc_ups_input_frequency)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_input_frequency", value1 => $new_apc_ups_input_frequency, 
						name2 => "old_apc_ups_input_frequency", value2 => $old_apc_ups_input_frequency, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an 'info' level alert because the input frequency is always
					# fluctuating.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0039",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_input_frequency}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_input_frequency}),
						},
					});
				}
				
				# Did the input sensitivity change?
				if ($new_apc_ups_input_sensitivity ne $old_apc_ups_input_sensitivity)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_input_sensitivity", value1 => $new_apc_ups_input_sensitivity, 
						name2 => "old_apc_ups_input_sensitivity", value2 => $old_apc_ups_input_sensitivity, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# Make sure we have a valid health integer
					my $bad_value                         = "";
					my $say_new_apc_ups_input_sensitivity = $new_apc_ups_input_sensitivity;
					my $say_old_apc_ups_input_sensitivity = $old_apc_ups_input_sensitivity;
					if (($new_apc_ups_input_sensitivity =~ /\D/) or (($new_apc_ups_input_sensitivity < 0) or ($new_apc_ups_input_sensitivity > 4)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                     = $new_apc_ups_input_sensitivity;
						$say_new_apc_ups_input_sensitivity = 99;
					}
					elsif (($old_apc_ups_input_sensitivity =~ /\D/) or (($old_apc_ups_input_sensitivity < 0) or ($old_apc_ups_input_sensitivity > 4)))
					{
						# We'll use '99' as a generic "this is not known"
						$bad_value                         = $old_apc_ups_input_sensitivity;
						$say_old_apc_ups_input_sensitivity = 99;
					}
					
					# This is an 'notice' level event because the admin probably made the
					# change
					$an->Alert->register_alert({
						alert_level		=>	"notice", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0003",
						alert_message_key	=>	"scan_apc_ups_note_0040",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	"#!string!scan_apc_ups_sensitivity_".sprintf("%04d", $say_new_apc_ups_input_sensitivity)."!#",
							old_value		=>	"#!string!scan_apc_ups_sensitivity_".sprintf("%04d", $say_old_apc_ups_input_sensitivity)."!#",
						},
					});
				}
				
				# Has the input voltage changed?
				if ($new_apc_ups_input_voltage ne $old_apc_ups_input_voltage)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_input_voltage", value1 => $new_apc_ups_input_voltage, 
						name2 => "old_apc_ups_input_voltage", value2 => $old_apc_ups_input_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is always changing, so normally we will use an 'info' level 
					# alert.
					my $level       = "info";
					my $title_key   = "an_alert_title_0002";
					my $message_key = "scan_apc_ups_note_0041";
					my $send_alert  = 0;
					
					# These are thresholds
					my $high_transfer_voltage = $new_apc_ups_high_transfer_voltage;
					my $clear_high_transfer   = ($new_apc_ups_high_transfer_voltage - $an->data->{'scan-apc-ups'}{transfer_voltage_clear_delta});
					my $low_transfer_voltage  = $new_apc_ups_low_transfer_voltage;
					my $clear_low_transfer    = ($new_apc_ups_low_transfer_voltage + $an->data->{'scan-apc-ups'}{transfer_voltage_clear_delta});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0004", message_variables => {
						name1 => "high_transfer_voltage", value1 => $high_transfer_voltage, 
						name2 => "clear_high_transfer",   value2 => $clear_high_transfer, 
						name3 => "low_transfer_voltage",  value3 => $low_transfer_voltage,
						name4 => "clear_low_transfer",    value4 => $clear_low_transfer,
					}, file => $THIS_FILE, line => __LINE__});
					
					# Is the voltage rising or falling?
					if ($new_apc_ups_input_voltage > $old_apc_ups_input_voltage)
					{
						# It is rising. 
						
						# Has it crossed over the high-voltage transfer threshold? 
						# If not, has it crossed over the low-voltage clear level?
						if ($old_apc_ups_input_voltage == 0)
						{
							# Power has been restored.
							my $cleared = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_low",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($cleared)
							{
								# It is over the clear low-transfer level, 
								# clear the alert if needed.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0057";
							}
						}
						elsif ($new_apc_ups_input_voltage > $high_transfer_voltage)
						{
							# See if the alert exists already
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_high",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								# Yup, set the alert if needed.
								$level       = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_apc_ups_note_0043";
							}
						}
						elsif ($new_apc_ups_input_voltage > $clear_low_transfer)
						{
							my $cleared = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_low",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($cleared)
							{
								# It is over the clear low-transfer level, 
								# clear the alert if needed.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0045";
							}
						}
					}
					else
					{
						# It is falling.
						$message_key = "scan_apc_ups_note_0042";
						
						# Has it dropped below the low transfer voltage? If not, has 
						# it dropped below the high-voltage clear level?
						if ($new_apc_ups_input_voltage == 0)
						{
							# Power lost entirely
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_low",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								$level       = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_apc_ups_note_0056";
							}
						}
						elsif ($new_apc_ups_input_voltage < $low_transfer_voltage)
						{
							# It is below the low-transfer limit, set an alert if 
							# needed.
							my $set = $an->Alert->check_alert_sent({
								type			=>	"warning",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_low",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($set)
							{
								$level       = "warning";
								$title_key   = "an_alert_title_0004";
								$message_key = "scan_apc_ups_note_0044";
							}
						}
						elsif ($new_apc_ups_input_voltage < $clear_high_transfer)
						{
							my $cleared = $an->Alert->check_alert_sent({
								type			=>	"clear",
								alert_sent_by		=>	$THIS_FILE,
								alert_record_locator	=>	$ups_serial_number,
								alert_name		=>	"apc_ups_input_voltage_high",
								modified_date		=>	$an->data->{sys}{db_timestamp},
							});
							if ($cleared)
							{
								# Clear the high-voltage transfer warning.
								$level       = "warning";
								$title_key   = "an_alert_title_0006";
								$message_key = "scan_apc_ups_note_0046";
							}
						}
					}
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_input_voltage}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_input_voltage}),
							holdup_time		=>	$an->Readable->time({'time' => $new_apc_ups_output_estimated_runtime}),
						},
					});
				}
				
				# Has the maximum input voltage seen in the last 60 seconds changed?
				if ($new_apc_ups_input_1m_maximum_input_voltage ne $old_apc_ups_input_1m_maximum_input_voltage)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_input_1m_maximum_input_voltage", value1 => $new_apc_ups_input_1m_maximum_input_voltage, 
						name2 => "old_apc_ups_input_1m_maximum_input_voltage", value2 => $old_apc_ups_input_1m_maximum_input_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert as it changes all the time.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0047",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_input_1m_maximum_input_voltage}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_input_1m_maximum_input_voltage}),
						},
					});
				}
				
				# Has the minimum input voltage seen in the last 60 seconds changed?
				if ($new_apc_ups_input_1m_minimum_input_voltage ne $old_apc_ups_input_1m_minimum_input_voltage)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_input_1m_minimum_input_voltage", value1 => $new_apc_ups_input_1m_minimum_input_voltage, 
						name2 => "old_apc_ups_input_1m_minimum_input_voltage", value2 => $old_apc_ups_input_1m_minimum_input_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert as it changes all the time.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0048",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_input_1m_maximum_input_voltage}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_input_1m_maximum_input_voltage}),
						},
					});
				}
				
				# Update the DB table
				my $query = "
UPDATE 
    apc_ups_input 
SET 
    apc_ups_input_frequency                = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_frequency).", 
    apc_ups_input_sensitivity              = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_sensitivity).", 
    apc_ups_input_voltage                  = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_voltage).", 
    apc_ups_input_1m_maximum_input_voltage = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_1m_maximum_input_voltage).", 
    apc_ups_input_1m_minimum_input_voltage = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_1m_minimum_input_voltage).", 
    modified_date                          = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    apc_ups_input_id = 
    (
        SELECT 
            b.apc_ups_input_id 
        FROM 
            apc_ups a, 
            apc_ups_input b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_input_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
				
				# Now figure out what changed and report it to the user.
			}
			
			# Finally, check the output power.
			if (($new_apc_ups_output_load_percentage   ne $old_apc_ups_output_load_percentage) or 
			    ($new_apc_ups_output_time_on_batteries ne $old_apc_ups_output_time_on_batteries) or 
			    ($new_apc_ups_output_estimated_runtime ne $old_apc_ups_output_estimated_runtime) or 
			    ($new_apc_ups_output_frequency         ne $old_apc_ups_output_frequency) or 
			    ($new_apc_ups_output_voltage           ne $old_apc_ups_output_voltage) or 
			    ($new_apc_ups_output_total_output      ne $old_apc_ups_output_total_output))
			{
				# Something in the 'apc_ups_input' table changed for this UPS.
				$an->Log->entry({log_level => 3, message_key => "scan_apc_ups_log_0001", message_variables => {
					table         => "apc_ups_output", 
					serial_number => $ups_serial_number
				}, file => $THIS_FILE, line => __LINE__});
				
				# Did the output load percentage change?
				if ($new_apc_ups_output_load_percentage > $old_apc_ups_output_load_percentage)
				{
					### TODO: Determine an alert threshold for max load
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_load_percentage", value1 => $new_apc_ups_output_load_percentage, 
						name2 => "old_apc_ups_output_load_percentage", value2 => $old_apc_ups_output_load_percentage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert as it changes all the time.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0049",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$new_apc_ups_output_load_percentage,
							old_value		=>	$old_apc_ups_output_load_percentage,
						},
					});
				}
				
				# Has the time on batteries value changed?
				if ($new_apc_ups_output_time_on_batteries > $old_apc_ups_output_time_on_batteries)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_time_on_batteries", value1 => $new_apc_ups_output_time_on_batteries, 
						name2 => "old_apc_ups_output_time_on_batteries", value2 => $old_apc_ups_output_time_on_batteries, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# If the old value was '0', we just switched to batteries. This will 
					# be a 'notice' level event. Likewise if the new time is '0'. 
					# Otherwise, it is 'info'. We don't do 'warning' because that is 
					# caught by the loss of input voltage.
					my $level       = "info";
					my $title_key   = "an_alert_title_0002";
					my $message_key = "scan_apc_ups_note_0052";
					my $send_alert  = 0;
					
					# Is the old time '0'?
					if ($new_apc_ups_output_time_on_batteries eq "0")
					{
						# We're on batteries now.
						$level       = "notice";
						$title_key   = "an_alert_title_0003";
						$message_key = "scan_apc_ups_note_0051";
					}
					elsif ($old_apc_ups_output_time_on_batteries eq "0")
					{
						# We're no longer on batteries.
						$level       = "notice";
						$title_key   = "an_alert_title_0003";
						$message_key = "scan_apc_ups_note_0050";
					}
					else
					{
						# A normal change.
					}
					
					$an->Alert->register_alert({
						alert_level		=>	$level, 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	$title_key,
						alert_message_key	=>	$message_key,
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Readable->time({'time' => $new_apc_ups_output_time_on_batteries}),
							old_value		=>	$an->Readable->time({'time' => $old_apc_ups_output_time_on_batteries}),
						},
					});
				}
				
				# Has the estimated runtime changed?
				if ($new_apc_ups_output_estimated_runtime ne $old_apc_ups_output_estimated_runtime)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_estimated_runtime", value1 => $new_apc_ups_output_estimated_runtime, 
						name2 => "old_apc_ups_output_estimated_runtime", value2 => $old_apc_ups_output_estimated_runtime, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert. Deciding to shutdown is handled by 
					# ScanCore.
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0053",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Readable->time({'time' => $new_apc_ups_output_estimated_runtime}),
							old_value		=>	$an->Readable->time({'time' => $old_apc_ups_output_estimated_runtime}),
						},
					});
				}
				
				# Has the output frequency changed?
				if ($new_apc_ups_output_frequency ne $old_apc_ups_output_frequency)
				{
					### TODO: Determine safe minimum and maximum frequencies
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_frequency", value1 => $new_apc_ups_output_frequency, 
						name2 => "old_apc_ups_output_frequency", value2 => $old_apc_ups_output_frequency, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert as it changes frequently
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0054",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_output_frequency}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_output_frequency}),
						},
					});
				}
				
				# Has the output voltage changed?
				if ($new_apc_ups_output_voltage ne $old_apc_ups_output_voltage)
				{
					### TODO: Determine if we need to worry about safe minimum and 
					###       maximum output voltages
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_voltage", value1 => $new_apc_ups_output_voltage, 
						name2 => "old_apc_ups_output_voltage", value2 => $old_apc_ups_output_voltage, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is an info level alert as it changes frequently
					$an->Alert->register_alert({
						alert_level		=>	"info", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0002",
						alert_message_key	=>	"scan_apc_ups_note_0055",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 1, number => $new_apc_ups_output_voltage}),
							old_value		=>	$an->Math->round({places => 1, number => $old_apc_ups_output_voltage}),
						},
					});
				}
				
				# This is always changing...
				if ($new_apc_ups_output_total_output ne $old_apc_ups_output_total_output)
				{
					$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
						name1 => "new_apc_ups_output_total_output", value1 => $new_apc_ups_output_total_output, 
						name2 => "old_apc_ups_output_total_output", value2 => $old_apc_ups_output_total_output, 
					}, file => $THIS_FILE, line => __LINE__});
					
					# This is a debug level alert as it is going to change on just about
					# every scan...
					$an->Alert->register_alert({
						alert_level		=>	"debug", 
						alert_agent_name	=>	$THIS_FILE,
						alert_title_key		=>	"an_alert_title_0001",
						alert_message_key	=>	"scan_apc_ups_note_0058",
						alert_message_variables	=>	{
							ups_name		=>	$new_apc_ups_name,
							new_value		=>	$an->Math->round({places => 2, number => $new_apc_ups_output_total_output}),
							old_value		=>	$an->Math->round({places => 2, number => $old_apc_ups_output_total_output}),
						},
					});
				}
				
				# Update the DB table
				my $query = "
UPDATE 
    apc_ups_output 
SET 
    apc_ups_output_load_percentage   = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_load_percentage).", 
    apc_ups_output_time_on_batteries = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_time_on_batteries).", 
    apc_ups_output_estimated_runtime = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_estimated_runtime).", 
    apc_ups_output_frequency         = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_frequency).", 
    apc_ups_output_voltage           = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_voltage).", 
    apc_ups_output_total_output      = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_total_output).", 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    apc_ups_output_id = 
    (
        SELECT 
            b.apc_ups_output_id 
        FROM 
            apc_ups a, 
            apc_ups_output b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_output_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query, 
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
				
				# Now figure out what changed and report it to the user.
			}
		}
		else
		{
			### No record found, INSERT everything.
			# I'll need a new UUID
			#die "$THIS_FILE ".__LINE__."; UPS: [$new_apc_ups_name] has no serial number and I was about to INSERT..." if $new_apc_ups_nmc_serial_number eq "--";
			my $apc_ups_uuid = $an->Get->uuid() or $an->Alert->error({title_key => "error_title_0020", message_key => "error_message_0024", code => 2, file => $THIS_FILE, line => __LINE__});;
			my $query = "
INSERT INTO 
    apc_ups 
(
    apc_ups_uuid, 
    apc_ups_host_uuid, 
    apc_ups_name, 
    apc_ups_ip, 
    apc_ups_ac_restore_delay, 
    apc_ups_shutdown_delay, 
    apc_ups_firmware_version, 
    apc_ups_health, 
    apc_ups_high_transfer_voltage, 
    apc_ups_low_transfer_voltage, 
    apc_ups_last_transfer_reason, 
    apc_ups_manufactured_date, 
    apc_ups_model, 
    apc_ups_temperature_units, 
    apc_ups_serial_number, 
    apc_ups_nmc_firmware_version, 
    apc_ups_nmc_serial_number, 
    apc_ups_nmc_mac_address, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_ip).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_ac_restore_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_shutdown_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_health).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_high_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_low_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_last_transfer_reason).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_manufactured_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_temperature_units).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_nmc_mac_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
			
			# Now INSERT the battery info.
			$query = "
INSERT INTO 
    apc_ups_battery 
(
    apc_ups_battery_apc_ups_uuid, 
    apc_ups_battery_replacement_date, 
    apc_ups_battery_health, 
    apc_ups_battery_model, 
    apc_ups_battery_percentage_charge, 
    apc_ups_battery_last_replacement_date, 
    apc_ups_battery_state, 
    apc_ups_battery_temperature, 
    apc_ups_battery_alarm_temperature, 
    apc_ups_battery_voltage, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_replacement_date).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_health).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_model).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_percentage_charge).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_last_replacement_date).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_state).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_temperature).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_alarm_temperature).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_battery_voltage).",  
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
			
			# Next, INSERT the input info.
			$query = "
INSERT INTO 
    apc_ups_input 
(
    apc_ups_input_apc_ups_uuid, 
    apc_ups_input_frequency, 
    apc_ups_input_sensitivity, 
    apc_ups_input_voltage, 
    apc_ups_input_1m_maximum_input_voltage, 
    apc_ups_input_1m_minimum_input_voltage, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_frequency).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_sensitivity).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_voltage).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_1m_maximum_input_voltage).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_input_1m_minimum_input_voltage).",  
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
			
			# And finally, INSERT the output info.
			$query = "
INSERT INTO 
    apc_ups_output 
(
    apc_ups_output_apc_ups_uuid, 
    apc_ups_output_load_percentage, 
    apc_ups_output_time_on_batteries, 
    apc_ups_output_estimated_runtime, 
    apc_ups_output_frequency, 
    apc_ups_output_voltage, 
    apc_ups_output_total_output, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_load_percentage).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_time_on_batteries).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_estimated_runtime).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_frequency).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_voltage).",  
    ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_output_total_output).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query, 
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
			
			### TODO: Send an email/alert notifying of this new UPS being found.
			my $say_time_on_batteries = $new_apc_ups_output_time_on_batteries ? "#!string!scan_apc_ups_message_0007!#" : "#!string!scan_apc_ups_message_0006!#";
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"scan_apc_ups_message_0004",
				alert_title_variables	=>	{
					name			=>	$new_apc_ups_name,
				},
				alert_message_key	=>	"scan_apc_ups_message_0005",
				alert_message_variables	=>	{
					model				=>	$new_apc_ups_model,
					serial_number			=>	$new_apc_ups_serial_number,
					manufactured_date		=>	$new_apc_ups_manufactured_date,
					name				=>	$new_apc_ups_name,
					ip				=>	$new_apc_ups_ip,
					firmware_version		=>	$new_apc_ups_firmware_version,
					nmc_serial_number		=>	$new_apc_ups_nmc_serial_number,
					nmc_firmware_version		=>	$new_apc_ups_nmc_firmware_version,
					nmc_mac_address			=>	$new_apc_ups_nmc_mac_address,
					battery_model			=>	$new_apc_ups_battery_model,
					battery_last_replacement_date	=>	$new_apc_ups_battery_last_replacement_date,
					battery_replacement_date	=>	$new_apc_ups_battery_replacement_date,
					ac_restore_delay		=>	$new_apc_ups_ac_restore_delay,
					shutdown_delay			=>	$new_apc_ups_shutdown_delay,
					low_transfer_voltage		=>	$new_apc_ups_low_transfer_voltage,
					high_transfer_voltage		=>	$new_apc_ups_high_transfer_voltage,
					input_sensitivity		=>	"#!string!scan_apc_ups_sensitivity_".sprintf("%04d", $new_apc_ups_input_sensitivity)."!#",
					battery_temperature		=>	$an->Math->round({number => $new_apc_ups_battery_temperature, places => 1}),
					battery_alarm_temperature	=>	$new_apc_ups_battery_alarm_temperature,
					battery_voltage			=>	$an->Math->round({number => $new_apc_ups_battery_voltage, places => 1}),
					input_frequency			=>	$an->Math->round({number => $new_apc_ups_input_frequency, places => 1}),
					input_voltage			=>	$an->Math->round({number => $new_apc_ups_input_voltage, places => 1}),
					input_1m_maximum_input_voltage	=>	$an->Math->round({number => $new_apc_ups_input_1m_maximum_input_voltage, places => 1}),
					input_1m_minimum_input_voltage	=>	$an->Math->round({number => $new_apc_ups_input_1m_minimum_input_voltage, places => 1}),
					say_estimated_runtime		=>	$an->Readable->time({'time' => $new_apc_ups_output_estimated_runtime}),
					output_load_percentage		=>	$an->Math->round({number => $new_apc_ups_output_load_percentage, places => 1}),
					output_frequency		=>	$an->Math->round({number => $new_apc_ups_output_frequency, places => 1}),
					output_voltage			=>	$an->Math->round({number => $new_apc_ups_output_voltage, places => 1}),
					output_total_output		=>	$an->Math->round({number => $new_apc_ups_output_total_output, places => 2}),
					health				=>	"#!string!scan_apc_ups_health_".sprintf("%04d", $new_apc_ups_health)."!#",
					last_transfer_reason		=>	"#!string!scan_apc_ups_last_xfer_".sprintf("%04d", $new_apc_ups_last_transfer_reason)."!#",
					battery_health			=>	"#!string!scan_apc_ups_battery_health_".sprintf("%04d", $new_apc_ups_battery_health)."!#",
					battery_state			=>	"#!string!scan_apc_ups_battery_state_".sprintf("%04d", $new_apc_ups_battery_state)."!#",
					say_time_on_batteries		=>	$say_time_on_batteries,
					# This is only used when actually running on batteries.
					output_time_on_batteries	=>	$an->Readable->time({'time' => $new_apc_ups_output_time_on_batteries}),
				},
			});
		}
	}
	
	### TODO: Redo this, it feels stupid...
	
	# Now look for any old UPSes that weren't seen this time.
	my $query = "
SELECT 
    apc_ups_uuid, 
    apc_ups_serial_number, 
    apc_ups_ip 
FROM 
    apc_ups
WHERE
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
AND 
    apc_ups_health != 0
";
	foreach my $serial_number (sort {$a cmp $b} @{$seen_upses})
	{
		$query .= "
AND 
    apc_ups_serial_number != ".$an->data->{sys}{use_db_fh}->quote($serial_number)."
";
	}
	$query .= ";";
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
		name1 => "query",        value1 => $query, 
		name2 => "results->[0]", value2 => $results->[0], 
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $this_apc_ups_uuid          = $row->[0];
		my $this_apc_ups_serial_number = $row->[1];
		my $this_apc_ups_ip            = $row->[2];
		$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
			name1 => "this_apc_ups_uuid",          value1 => $this_apc_ups_uuid, 
			name2 => "this_apc_ups_serial_number", value2 => $this_apc_ups_serial_number, 
			name3 => "this_apc_ups_ip",            value3 => $this_apc_ups_ip, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Skip a UPSes that just recently went missing 
		next if $an->data->{dont_delete}{$this_apc_ups_ip};
		
		# Change the 'apc_ups_health' to '0'.
		my $query .= "
UPDATE 
    apc_ups
SET
    apc_ups_health = 0, 
    modified_date  = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
AND
    apc_ups_serial_number = ".$an->data->{sys}{use_db_fh}->quote($this_apc_ups_serial_number).";
";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		push @{$an->data->{sys}{sql}}, $query;
		
		# TODO: Send an alert...
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	# If one or more UPSed need to be shutdown, do it now.
	foreach my $ups (@{$shutdown_ups})
	{
		# WARNING: If the user has two different brands of UPSes and both have gone critical, the 
		#          cluster will lose power without gracefully shutting down. This is unavoidable 
		#          because scancore can't (yet) know how to power off a given brand/model of a UPS.
		# TODO: If both/all UPSes are to be shutdown, stop servers and withdraw both nodes from the 
		#       cluster before terminating the UPS.
		#...
		shutdown_ups($an, $ups);
	}
	
	### Now add entries to the 'power' table.
	process_power($an);
	
	# If the power is on, record the charge percentage if needed. 
	
	return(0);
}

# This adds, updates or removes entries in the 'power' table that ScanCore will use to decide if a given node
# needs to be shutdown.
sub process_power
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_power" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# UPSes we found on this scan
	foreach my $ups_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-ups'}{ups}})
	{
		my $ip = $an->data->{'scan-apc-ups'}{ups}{$ups_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "ups_name", value1 => $ups_name, 
			name2 => "ip",       value2 => $ip, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	# The main bits we need to know is, for each UPS, is there input power?
	my $query = "
SELECT 
    a.apc_ups_uuid, 
    a.apc_ups_serial_number, 
    a.apc_ups_name, 
    a.apc_ups_health, 
    c.apc_ups_input_voltage, 
    d.apc_ups_output_estimated_runtime, 
    b.apc_ups_battery_percentage_charge, 
    a.apc_ups_model
FROM     
    apc_ups         a, 
    apc_ups_battery b, 
    apc_ups_input   c, 
    apc_ups_output  d 
WHERE 
    a.apc_ups_host_uuid =  ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    a.apc_ups_uuid      = b.apc_ups_battery_apc_ups_uuid 
AND 
    a.apc_ups_uuid      = c.apc_ups_input_apc_ups_uuid 
AND 
    a.apc_ups_uuid      = d.apc_ups_output_apc_ups_uuid 
;";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query
	}, file => $THIS_FILE, line => __LINE__});
	my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "results", value1 => $results
	}, file => $THIS_FILE, line => __LINE__});
	foreach my $row (@{$results})
	{
		my $apc_ups_uuid                      = $row->[0];
		my $apc_ups_serial_number             = $row->[1];
		my $apc_ups_name                      = $row->[2];
		my $apc_ups_health                    = $row->[3];
		my $apc_ups_input_voltage             = $row->[4];
		my $apc_ups_output_estimated_runtime  = $row->[5];
		my $apc_ups_battery_percentage_charge = $row->[6];
		my $apc_ups_model                     = $row->[7];
		$an->Log->entry({log_level => 2, message_key => "an_variables_0008", message_variables => {
			name1 => "apc_ups_uuid",                      value1 => $apc_ups_serial_number,
			name2 => "apc_ups_serial_number",             value2 => $apc_ups_serial_number,
			name3 => "apc_ups_name",                      value3 => $apc_ups_name,
			name4 => "apc_ups_health",                    value4 => $apc_ups_health,
			name5 => "apc_ups_input_voltage",             value5 => $apc_ups_input_voltage,
			name6 => "apc_ups_output_estimated_runtime",  value6 => $apc_ups_output_estimated_runtime,
			name7 => "apc_ups_battery_percentage_charge", value7 => $apc_ups_battery_percentage_charge,
			name8 => "apc_ups_model",                     value8 => $apc_ups_model,
		}, file => $THIS_FILE, line => __LINE__});
		
		# If the UPS no longer exists under this node, remove it.
		if ((not exists $an->data->{'scan-apc-ups'}{ups}{$apc_ups_name}) && ($apc_ups_model ne "DELETED"))
		{
			# Remove it from the apc_ups table and send a notice.
			$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_note_0063", message_variables => { ups_name => $apc_ups_name }, file => $THIS_FILE, line => __LINE__});
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"scan_apc_ups_note_0063",
				alert_message_variables	=>	{
					ups_name		=>	$apc_ups_name,
				},
			});
			
			my $query = "UPDATE apc_ups SET apc_ups_model = 'DELETED' WHERE apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).";";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
		}
		
		# If the UPS health is '4' (boosting for low input voltage), or if there is no input voltage,
		# we'll set that we're on batteries.
		my $apc_ups_on_battery = 0;
		if (($apc_ups_input_voltage eq "0") or ($apc_ups_health eq "4"))
		{
			$apc_ups_on_battery = 1;
			$an->Log->entry({log_level => 1, message_key => "an_variables_0003", message_variables => {
				name1 => "apc_ups_health",        value1 => $apc_ups_health,
				name2 => "apc_ups_input_voltage", value2 => $apc_ups_input_voltage,
				name3 => "apc_ups_on_battery",    value3 => $apc_ups_on_battery,
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# For each UPS, see if there is an existing entry in the 'power' table.
		my $query = "
SELECT 
    power_uuid, 
    power_ups_name, 
    power_on_battery, 
    power_seconds_left, 
    power_charge_percentage 
FROM 
    power 
WHERE 
    power_host_uuid      = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    power_agent_name     = ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE)." 
AND 
    power_record_locator = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_serial_number).";";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query
		}, file => $THIS_FILE, line => __LINE__});
		my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
		
		my $array_count = @{$results};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "results",     value1 => $results, 
			name2 => "array_count", value2 => $array_count
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($array_count)
		{
			# I'm not doing the usual 'foreach my $row (@{$results})', so this is a short-cut to 
			# pull the variables out directly.
			my $power_uuid              = $results->[0]->[0];
			my $power_ups_name          = $results->[0]->[1];
			my $power_on_battery        = $results->[0]->[2];
			my $power_seconds_left      = $results->[0]->[3];
			my $power_charge_percentage = $results->[0]->[4];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
				name1 => "power_uuid",              value1 => $power_uuid,
				name2 => "power_ups_name",          value2 => $power_ups_name,
				name3 => "power_on_battery",        value3 => $power_on_battery,
				name4 => "power_seconds_left",      value4 => $power_seconds_left,
				name5 => "power_charge_percentage", value5 => $power_charge_percentage,
			}, file => $THIS_FILE, line => __LINE__});
				
			if (not exists $an->data->{'scan-apc-ups'}{ups}{$power_ups_name})
			{
				# Remove it from the apc_ups table.
				$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_note_0064", message_variables => { ups_name => $power_ups_name }, file => $THIS_FILE, line => __LINE__});
				
				my $query = "DELETE FROM power WHERE power_uuid = ".$an->data->{sys}{use_db_fh}->quote($power_uuid).";";
				$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
				next;
			}
			
			# Existing record; If load shedding is disabled, see if anything changed. If load 
			# shedding is NOT disabled, we'll update always.
			if ((not $an->data->{scancore}{disable}{load_shedding}) or 
			    (($power_ups_name          ne $apc_ups_name)                     or 
			     ($power_on_battery        ne $apc_ups_on_battery)               or 
			     ($power_seconds_left      ne $apc_ups_output_estimated_runtime) or 
			     ($power_charge_percentage ne $apc_ups_battery_percentage_charge)))
			{
				# Something changed if load shedding is disabled.
				if ($an->data->{scancore}{disable}{load_shedding})
				{
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "power_ups_name", value1 => $power_ups_name,
						name2 => "apc_ups_name",   value2 => $apc_ups_name,
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "power_on_battery",   value1 => $power_on_battery,
						name2 => "apc_ups_on_battery", value2 => $apc_ups_on_battery,
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "power_seconds_left",               value1 => $power_seconds_left,
						name2 => "apc_ups_output_estimated_runtime", value2 => $apc_ups_output_estimated_runtime,
					}, file => $THIS_FILE, line => __LINE__});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "power_charge_percentage",           value1 => $power_charge_percentage,
						name2 => "apc_ups_battery_percentage_charge", value2 => $apc_ups_battery_percentage_charge,
					}, file => $THIS_FILE, line => __LINE__});
				}
				else
				{
					# Load shedding is enabled, so we'll always update.
					$an->Log->entry({log_level => 3, message_key => "scan_apc_ups_log_0005", message_variables => { ups_name => $apc_ups_name }, file => $THIS_FILE, line => __LINE__});
				}
				my $query = "
UPDATE 
    power 
SET 
    power_ups_name          = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_name).", 
    power_on_battery        = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_on_battery).", 
    power_seconds_left      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_estimated_runtime).", 
    power_charge_percentage = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_percentage_charge).", 
    modified_date           = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
WHERE 
    power_uuid              = ".$an->data->{sys}{use_db_fh}->quote($power_uuid)."
;";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "query", value1 => $query
				}, file => $THIS_FILE, line => __LINE__});
				push @{$an->data->{sys}{sql}}, $query;
			}
			else
			{
				# No change found, update not needed.
				$an->Log->entry({log_level => 3, message_key => "scan_apc_ups_log_0004", message_variables => { ups_name => $apc_ups_name }, file => $THIS_FILE, line => __LINE__});
			}
		}
		else
		{
			# No existing entry, do an INSERT.
			my $power_uuid = $an->Get->uuid() or $an->Alert->error({title_key => "error_title_0020", message_key => "error_message_0024", code => 2, file => $THIS_FILE, line => __LINE__});
			my $query      = "
INSERT INTO  
    power 
(
    power_uuid, 
    power_host_uuid, 
    power_agent_name, 
    power_record_locator, 
    power_ups_name, 
    power_on_battery, 
    power_seconds_left, 
    power_charge_percentage, 
    modified_date
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($power_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($THIS_FILE).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_on_battery).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_estimated_runtime).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_percentage_charge).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);
";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "query", value1 => $query
			}, file => $THIS_FILE, line => __LINE__});
			push @{$an->data->{sys}{sql}}, $query;
		}
	}
	
	# Now commit the changes.
	$an->DB->commit_sql({source => $THIS_FILE, line => __LINE__});
	
	return(0);
}

# This sends a command to immediately terminate the UPS.
sub shutdown_ups
{
	my ($an, $ups) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "shutdown_ups" }, message_key => "tools_log_0003", message_variables => { 
		name1 => "ups", value1 => "$ups" 
	}, file => $THIS_FILE, line => __LINE__});
	
	# There are two possible reasons (at least) for why a UPS's batteries could be hot;
	# 1. High load while on battery
	# 2. Bad charging circuit
	# In theory, switching to Bypass would solve #1 but not #2. For now, determining which case it is 
	# though is not so easy. Also, given that all Anvil! systems have two UPSes and given the consequence
	# getting it is a fire, we'll play it safe and always turn off the UPS.
	#
	# 2 == Power off without delay
	set_oid_integer($an, $ups, $an->data->{'default'}{ups}{power_off}, 2);
	
	return(0);
}

# This sets an OID with to an integer value.
sub set_oid_integer
{
	my ($an, $ups, $oid, $value) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "set_oid_integer" }, message_key => "an_variables_0003", message_variables => { 
		name1 => "ups",   value1 => "$ups", 
		name2 => "oid",   value2 => "$oid", 
		name3 => "value", value3 => "$value", 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $shell_call = $an->data->{path}{snmpset}." -v 2c -c ".$an->data->{snmp}{community}{'write'}." $ups $oid i $value";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or die "$THIS_FILE ".__LINE__."; Failed to call: [$shell_call], error was: $!\n";
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($line =~ /INTEGER: (\d+)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "value", value1 => $value, 
	}, file => $THIS_FILE, line => __LINE__});
	return($value);
}

# This reads in the last scan's data.
sub read_last_scan
{
	my ($an, $new_apc_ups_serial_number) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "read_last_scan" }, message_key => "tools_log_0003", message_variables => { 
		name1 => "new_apc_ups_serial_number", value1 => "$new_apc_ups_serial_number" 
	}, file => $THIS_FILE, line => __LINE__});
	
	# We want to look up the apc_ups_uuid for the given serial number.
	my $query = "
SELECT 
    apc_ups_uuid 
FROM 
    apc_ups 
WHERE 
    apc_ups_serial_number = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_serial_number)." 
AND 
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "query", value1 => $query,
	}, file => $THIS_FILE, line => __LINE__});
	
	# Do the query...
	my $apc_ups_uuid = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];	# Row -> Column
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "apc_ups_uuid", value1 => $apc_ups_uuid, 
	}, file => $THIS_FILE, line => __LINE__});
	
	if ($apc_ups_uuid)
	{
		# Read in existing data.
		my $query = "
SELECT 
    a.apc_ups_name, 
    a.apc_ups_ip, 
    a.apc_ups_ac_restore_delay, 
    a.apc_ups_shutdown_delay, 
    a.apc_ups_firmware_version, 
    a.apc_ups_health, 
    a.apc_ups_high_transfer_voltage, 
    a.apc_ups_low_transfer_voltage, 
    a.apc_ups_last_transfer_reason, 
    a.apc_ups_manufactured_date, 
    a.apc_ups_model, 
    a.apc_ups_temperature_units, 
    a.apc_ups_serial_number, 
    a.apc_ups_nmc_firmware_version, 
    a.apc_ups_nmc_serial_number, 
    a.apc_ups_nmc_mac_address, 
    b.apc_ups_battery_replacement_date, 
    b.apc_ups_battery_health, 
    b.apc_ups_battery_model, 
    b.apc_ups_battery_percentage_charge, 
    b.apc_ups_battery_last_replacement_date, 
    b.apc_ups_battery_state, 
    b.apc_ups_battery_temperature, 
    b.apc_ups_battery_alarm_temperature, 
    b.apc_ups_battery_voltage, 
    c.apc_ups_input_frequency, 
    c.apc_ups_input_sensitivity, 
    c.apc_ups_input_voltage, 
    c.apc_ups_input_1m_maximum_input_voltage, 
    c.apc_ups_input_1m_minimum_input_voltage, 
    d.apc_ups_output_load_percentage, 
    d.apc_ups_output_time_on_batteries, 
    d.apc_ups_output_estimated_runtime, 
    d.apc_ups_output_frequency, 
    d.apc_ups_output_voltage, 
    d.apc_ups_output_total_output 
FROM     
    apc_ups a, 
    apc_ups_battery b, 
    apc_ups_input c, 
    apc_ups_output d 
WHERE 
    a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND
    a.apc_ups_serial_number = ".$an->data->{sys}{use_db_fh}->quote($new_apc_ups_serial_number)." 
AND 
    a.apc_ups_uuid = b.apc_ups_battery_apc_ups_uuid 
AND 
    a.apc_ups_uuid = c.apc_ups_input_apc_ups_uuid 
AND 
    a.apc_ups_uuid = d.apc_ups_output_apc_ups_uuid;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		my $results = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		# One or more records were found.
		foreach my $row (@{$results})
		{
			my $apc_ups_name                           = defined $row->[0]  ? $row->[0]  : 0;
			my $apc_ups_ip                             = defined $row->[1]  ? $row->[1]  : 0;
			my $apc_ups_ac_restore_delay               = defined $row->[2]  ? $row->[2]  : 0;
			my $apc_ups_shutdown_delay                 = defined $row->[3]  ? $row->[3]  : 0;
			my $apc_ups_firmware_version               = defined $row->[4]  ? $row->[4]  : 0;
			my $apc_ups_health                         = defined $row->[5]  ? $row->[5]  : 0;
			my $apc_ups_high_transfer_voltage          = defined $row->[6]  ? $row->[6]  : 0;
			my $apc_ups_low_transfer_voltage           = defined $row->[7]  ? $row->[7]  : 0;
			my $apc_ups_last_transfer_reason           = defined $row->[8]  ? $row->[8]  : 0;
			my $apc_ups_manufactured_date              = defined $row->[9]  ? $row->[9]  : 0;
			my $apc_ups_model                          = defined $row->[10] ? $row->[10] : 0;
			my $apc_ups_temperature_units              = defined $row->[11] ? $row->[11] : 0;
			my $apc_ups_serial_number                  = defined $row->[12] ? $row->[12] : 0;
			my $apc_ups_nmc_firmware_version           = defined $row->[13] ? $row->[13] : 0;
			my $apc_ups_nmc_serial_number              = defined $row->[14] ? $row->[14] : 0;
			my $apc_ups_nmc_mac_address                = defined $row->[15] ? $row->[15] : 0;
			my $apc_ups_battery_replacement_date       = defined $row->[16] ? $row->[16] : 0;
			my $apc_ups_battery_health                 = defined $row->[17] ? $row->[17] : 0;
			my $apc_ups_battery_model                  = defined $row->[18] ? $row->[18] : 0;
			my $apc_ups_battery_percentage_charge      = defined $row->[19] ? $row->[19] : 0;
			my $apc_ups_battery_last_replacement_date  = defined $row->[20] ? $row->[20] : 0;
			my $apc_ups_battery_state                  = defined $row->[21] ? $row->[21] : 0;
			my $apc_ups_battery_temperature            = defined $row->[22] ? $row->[22] : 0;
			my $apc_ups_battery_alarm_temperature      = defined $row->[23] ? $row->[23] : 0;
			my $apc_ups_battery_voltage                = defined $row->[24] ? $row->[24] : 0;
			my $apc_ups_input_frequency                = defined $row->[25] ? $row->[25] : 0;
			my $apc_ups_input_sensitivity              = defined $row->[26] ? $row->[26] : 0;
			my $apc_ups_input_voltage                  = defined $row->[27] ? $row->[27] : 0;
			my $apc_ups_input_1m_maximum_input_voltage = defined $row->[28] ? $row->[28] : 0;
			my $apc_ups_input_1m_minimum_input_voltage = defined $row->[29] ? $row->[29] : 0;
			my $apc_ups_output_load_percentage         = defined $row->[30] ? $row->[30] : 0;
			my $apc_ups_output_time_on_batteries       = defined $row->[31] ? $row->[31] : 0;
			my $apc_ups_output_estimated_runtime       = defined $row->[32] ? $row->[32] : 0;
			my $apc_ups_output_frequency               = defined $row->[33] ? $row->[33] : 0;
			my $apc_ups_output_voltage                 = defined $row->[34] ? $row->[34] : 0;
			my $apc_ups_output_total_output            = defined $row->[35] ? $row->[35] : 0;
			
			# When I scan the UPS, I use the FQDN as the hash key. Here though, we use the serial
			# number. When we do the comparison, we'll maps them so that host name changes won't
			# cause a problem.
			my $ups_serial_number = $apc_ups_serial_number;
			
			#####################################################################################
			# Base UPS and NMC information                                                      #
			#####################################################################################
			
			$an->data->{sql}{$ups_serial_number}{apc_ups_uuid}                  = $apc_ups_uuid;
			$an->data->{sql}{$ups_serial_number}{apc_ups_name}                  = $apc_ups_name;
			$an->data->{sql}{$ups_serial_number}{apc_ups_ip}                    = $apc_ups_ip;
			$an->data->{sql}{$ups_serial_number}{apc_ups_ac_restore_delay}      = $apc_ups_ac_restore_delay;
			$an->data->{sql}{$ups_serial_number}{apc_ups_shutdown_delay}        = $apc_ups_shutdown_delay;
			$an->data->{sql}{$ups_serial_number}{apc_ups_firmware_version}      = $apc_ups_firmware_version;
			$an->data->{sql}{$ups_serial_number}{apc_ups_health}                = $apc_ups_health;
			$an->data->{sql}{$ups_serial_number}{apc_ups_high_transfer_voltage} = $apc_ups_high_transfer_voltage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_low_transfer_voltage}  = $apc_ups_low_transfer_voltage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_last_transfer_reason}  = $apc_ups_last_transfer_reason;
			$an->data->{sql}{$ups_serial_number}{apc_ups_manufactured_date}     = $apc_ups_manufactured_date;
			$an->data->{sql}{$ups_serial_number}{apc_ups_model}                 = $apc_ups_model;
			$an->data->{sql}{$ups_serial_number}{apc_ups_temperature_units}     = $apc_ups_temperature_units;
			$an->data->{sql}{$ups_serial_number}{apc_ups_nmc_firmware_version}  = $apc_ups_nmc_firmware_version;
			$an->data->{sql}{$ups_serial_number}{apc_ups_nmc_serial_number}     = $apc_ups_nmc_serial_number;
			$an->data->{sql}{$ups_serial_number}{apc_ups_nmc_mac_address}       = $apc_ups_nmc_mac_address;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0016", message_variables => {
				name1  => "sql::${ups_serial_number}::apc_ups_uuid",                  value1  => $an->data->{sql}{$ups_serial_number}{apc_ups_uuid}, 
				name2  => "sql::${ups_serial_number}::apc_ups_name",                  value2  => $an->data->{sql}{$ups_serial_number}{apc_ups_name}, 
				name3  => "sql::${ups_serial_number}::apc_ups_ip",                    value3  => $an->data->{sql}{$ups_serial_number}{apc_ups_ip}, 
				name4  => "sql::${ups_serial_number}::apc_ups_ac_restore_delay",      value4  => $an->data->{sql}{$ups_serial_number}{apc_ups_ac_restore_delay}, 
				name5  => "sql::${ups_serial_number}::apc_ups_shutdown_delay",        value5  => $an->data->{sql}{$ups_serial_number}{apc_ups_shutdown_delay}, 
				name6  => "sql::${ups_serial_number}::apc_ups_firmware_version",      value6  => $an->data->{sql}{$ups_serial_number}{apc_ups_firmware_version}, 
				name7  => "sql::${ups_serial_number}::apc_ups_health",                value7  => $an->data->{sql}{$ups_serial_number}{apc_ups_health}, 
				name8  => "sql::${ups_serial_number}::apc_ups_high_transfer_voltage", value8  => $an->data->{sql}{$ups_serial_number}{apc_ups_high_transfer_voltage}, 
				name9  => "sql::${ups_serial_number}::apc_ups_low_transfer_voltage",  value9  => $an->data->{sql}{$ups_serial_number}{apc_ups_low_transfer_voltage}, 
				name10 => "sql::${ups_serial_number}::apc_ups_last_transfer_reason",  value10  => $an->data->{sql}{$ups_serial_number}{apc_ups_last_transfer_reason}, 
				name11 => "sql::${ups_serial_number}::apc_ups_manufactured_date",     value11 => $an->data->{sql}{$ups_serial_number}{apc_ups_manufactured_date}, 
				name12 => "sql::${ups_serial_number}::apc_ups_model",                 value12 => $an->data->{sql}{$ups_serial_number}{apc_ups_model}, 
				name13 => "sql::${ups_serial_number}::apc_ups_temperature_units",     value13 => $an->data->{sql}{$ups_serial_number}{apc_ups_temperature_units}, 
				name14 => "sql::${ups_serial_number}::apc_ups_nmc_firmware_version",  value14 => $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_firmware_version}, 
				name15 => "sql::${ups_serial_number}::apc_ups_nmc_serial_number",     value15 => $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_serial_number}, 
				name16 => "sql::${ups_serial_number}::apc_ups_nmc_mac_address",       value16 => $an->data->{sql}{$ups_serial_number}{apc_ups_nmc_mac_address}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			#####################################################################################
			# Battery information                                                               #
			#####################################################################################
			
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_replacement_date}      = $apc_ups_battery_replacement_date;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_health}                = $apc_ups_battery_health;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_model}                 = $apc_ups_battery_model;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_percentage_charge}     = $apc_ups_battery_percentage_charge;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_last_replacement_date} = $apc_ups_battery_last_replacement_date;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_state}                 = $apc_ups_battery_state;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_temperature}           = $apc_ups_battery_temperature;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_alarm_temperature}     = $apc_ups_battery_alarm_temperature;
			$an->data->{sql}{$ups_serial_number}{apc_ups_battery_voltage}               = $apc_ups_battery_voltage;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0009", message_variables => {
				name1 => "sql::${ups_serial_number}::apc_ups_battery_replacement_date",      value1 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_replacement_date}, 
				name2 => "sql::${ups_serial_number}::apc_ups_battery_health",                value2 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_health}, 
				name3 => "sql::${ups_serial_number}::apc_ups_battery_model",                 value3 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_model}, 
				name4 => "sql::${ups_serial_number}::apc_ups_battery_percentage_charge",     value4 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_percentage_charge}, 
				name5 => "sql::${ups_serial_number}::apc_ups_battery_last_replacement_date", value5 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_last_replacement_date}, 
				name6 => "sql::${ups_serial_number}::apc_ups_battery_state",                 value6 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_state}, 
				name7 => "sql::${ups_serial_number}::apc_ups_battery_temperature",           value7 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_temperature}, 
				name8 => "sql::${ups_serial_number}::apc_ups_battery_alarm_temperature",     value8 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_alarm_temperature}, 
				name9 => "sql::${ups_serial_number}::apc_ups_battery_voltage",               value9 => $an->data->{sql}{$ups_serial_number}{apc_ups_battery_voltage}, 
			}, file => $THIS_FILE, line => __LINE__});
				
			#####################################################################################
			# Input Information                                                                 #
			#####################################################################################
				
			$an->data->{sql}{$ups_serial_number}{apc_ups_input_frequency}                = $apc_ups_input_frequency;
			$an->data->{sql}{$ups_serial_number}{apc_ups_input_sensitivity}              = $apc_ups_input_sensitivity;
			$an->data->{sql}{$ups_serial_number}{apc_ups_input_voltage}                  = $apc_ups_input_voltage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_maximum_input_voltage} = $apc_ups_input_1m_maximum_input_voltage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_minimum_input_voltage} = $apc_ups_input_1m_minimum_input_voltage;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "sql::${ups_serial_number}::apc_ups_input_frequency",                value1 => $an->data->{sql}{$ups_serial_number}{apc_ups_input_frequency}, 
				name2 => "sql::${ups_serial_number}::apc_ups_input_sensitivity",              value2 => $an->data->{sql}{$ups_serial_number}{apc_ups_input_sensitivity}, 
				name3 => "sql::${ups_serial_number}::apc_ups_input_voltage",                  value3 => $an->data->{sql}{$ups_serial_number}{apc_ups_input_voltage}, 
				name4 => "sql::${ups_serial_number}::apc_ups_input_1m_maximum_input_voltage", value4 => $an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_maximum_input_voltage}, 
				name5 => "sql::${ups_serial_number}::apc_ups_input_1m_minimum_input_voltage", value5 => $an->data->{sql}{$ups_serial_number}{apc_ups_input_1m_minimum_input_voltage}, 
			}, file => $THIS_FILE, line => __LINE__});
				
			#####################################################################################
			# Output Information                                                                #
			#####################################################################################
				
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_load_percentage}         = $apc_ups_output_load_percentage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_time_on_batteries}       = $apc_ups_output_time_on_batteries;
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_estimated_runtime}       = $apc_ups_output_estimated_runtime;
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_frequency}               = $apc_ups_output_frequency;
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_voltage}                 = $apc_ups_output_voltage;
			$an->data->{sql}{$ups_serial_number}{apc_ups_output_total_output}            = $apc_ups_output_total_output;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "sql::${ups_serial_number}::apc_ups_output_load_percentage",   value1 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_load_percentage}, 
				name2 => "sql::${ups_serial_number}::apc_ups_output_time_on_batteries", value2 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_time_on_batteries}, 
				name3 => "sql::${ups_serial_number}::apc_ups_output_estimated_runtime", value3 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_estimated_runtime}, 
				name4 => "sql::${ups_serial_number}::apc_ups_output_frequency",         value4 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_frequency}, 
				name5 => "sql::${ups_serial_number}::apc_ups_output_voltage",           value5 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_voltage}, 
				name6 => "sql::${ups_serial_number}::apc_ups_output_total_output",      value6 => $an->data->{sql}{$ups_serial_number}{apc_ups_output_total_output}, 
			}, file => $THIS_FILE, line => __LINE__});
			
		}
	}
	
	return($apc_ups_uuid);
}

# This looks at each DB's 'updated' table entry to see if any tables are behind. If any are, it will update
# the tables based on the time the last entry was made for a given host.
sub update_db
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "scancore::db_resync_needed", value1 => $an->data->{scancore}{db_resync_needed}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{db_resync_needed})
	{
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Make a note in the databases that we're starting an update and ask it to wait 10 seconds 
		# before returning to give other instances time to finish their scans. (our scans end quickly
		# enough).
		#$an->DB->set_update_db_flag({set => time, 'wait' => 10});
		
		# Update apc_ups and interfaces
		update_db_apc_ups($an);
		update_db_apc_ups_battery($an);
		update_db_apc_ups_input($an);
		update_db_apc_ups_output($an);
		
		# Release the lock
		$an->DB->locking({release => 1});
		
		# Clear the update flag.
		#$an->DB->set_update_db_flag({set => 0});
	}
	
	return(0);
}

# Update the 'update_db_apc_ups_battery' table.
sub update_db_apc_ups_battery
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_ups_battery" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_ups_battery' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    b.apc_ups_battery_apc_ups_uuid, 
    b.apc_ups_battery_replacement_date, 
    b.apc_ups_battery_health, 
    b.apc_ups_battery_model, 
    b.apc_ups_battery_percentage_charge, 
    b.apc_ups_battery_last_replacement_date, 
    b.apc_ups_battery_state, 
    b.apc_ups_battery_temperature, 
    b.apc_ups_battery_alarm_temperature, 
    b.apc_ups_battery_voltage, 
    b.modified_date 
FROM 
    apc_ups a, 
    history.apc_ups_battery b 
WHERE 
    a.apc_ups_uuid = b.apc_ups_battery_apc_ups_uuid 
AND 
    a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_ups_battery_apc_ups_uuid          = $row->[0]; 
			my $apc_ups_battery_replacement_date      = $row->[1]; 
			my $apc_ups_battery_health                = $row->[2]; 
			my $apc_ups_battery_model                 = $row->[3]; 
			my $apc_ups_battery_percentage_charge     = $row->[4]; 
			my $apc_ups_battery_last_replacement_date = $row->[5]; 
			my $apc_ups_battery_state                 = $row->[6]; 
			my $apc_ups_battery_temperature           = $row->[7]; 
			my $apc_ups_battery_alarm_temperature     = $row->[8]; 
			my $apc_ups_battery_voltage               = $row->[9]; 
			my $modified_date                         = $row->[10];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0011", message_variables => {
				name1  => "apc_ups_battery_apc_ups_uuid",          value1  => $apc_ups_battery_apc_ups_uuid, 
				name2  => "apc_ups_battery_replacement_date",      value2  => $apc_ups_battery_replacement_date, 
				name3  => "apc_ups_battery_health",                value3  => $apc_ups_battery_health, 
				name4  => "apc_ups_battery_model",                 value4  => $apc_ups_battery_model, 
				name5  => "apc_ups_battery_percentage_charge",     value5  => $apc_ups_battery_percentage_charge, 
				name6  => "apc_ups_battery_last_replacement_date", value6  => $apc_ups_battery_last_replacement_date, 
				name7  => "apc_ups_battery_state",                 value7  => $apc_ups_battery_state, 
				name8  => "apc_ups_battery_temperature",           value8  => $apc_ups_battery_temperature, 
				name9  => "apc_ups_battery_alarm_temperature",     value9  => $apc_ups_battery_alarm_temperature, 
				name10 => "apc_ups_battery_voltage",               value10 => $apc_ups_battery_voltage, 
				name11 => "modified_date",                         value11 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid} = {
				apc_ups_battery_replacement_date	=>	$apc_ups_battery_replacement_date, 
				apc_ups_battery_health			=>	$apc_ups_battery_health, 
				apc_ups_battery_model			=>	$apc_ups_battery_model, 
				apc_ups_battery_percentage_charge	=>	$apc_ups_battery_percentage_charge, 
				apc_ups_battery_last_replacement_date	=>	$apc_ups_battery_last_replacement_date, 
				apc_ups_battery_state			=>	$apc_ups_battery_state, 
				apc_ups_battery_temperature		=>	$apc_ups_battery_temperature, 
				apc_ups_battery_alarm_temperature	=>	$apc_ups_battery_alarm_temperature, 
				apc_ups_battery_voltage			=>	$apc_ups_battery_voltage, 
			};
			$an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid} = {
				apc_ups_battery_replacement_date	=>	$apc_ups_battery_replacement_date, 
				apc_ups_battery_health			=>	$apc_ups_battery_health, 
				apc_ups_battery_model			=>	$apc_ups_battery_model, 
				apc_ups_battery_percentage_charge	=>	$apc_ups_battery_percentage_charge, 
				apc_ups_battery_last_replacement_date	=>	$apc_ups_battery_last_replacement_date, 
				apc_ups_battery_state			=>	$apc_ups_battery_state, 
				apc_ups_battery_temperature		=>	$apc_ups_battery_temperature, 
				apc_ups_battery_alarm_temperature	=>	$apc_ups_battery_alarm_temperature, 
				apc_ups_battery_voltage			=>	$apc_ups_battery_voltage, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_ups_battery}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_ups_battery_apc_ups_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}})
		{
			my $apc_ups_battery_replacement_date      = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_replacement_date};
			my $apc_ups_battery_health                = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_health};
			my $apc_ups_battery_model                 = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_model};
			my $apc_ups_battery_percentage_charge     = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_percentage_charge};
			my $apc_ups_battery_last_replacement_date = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_last_replacement_date};
			my $apc_ups_battery_state                 = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_state};
			my $apc_ups_battery_temperature           = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_temperature};
			my $apc_ups_battery_alarm_temperature     = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_alarm_temperature};
			my $apc_ups_battery_voltage               = $an->data->{db_data}{unified}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{apc_ups_battery_voltage};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0010", message_variables => {
				name1  => "apc_ups_battery_apc_ups_uuid",          value1  => $apc_ups_battery_apc_ups_uuid, 
				name2  => "apc_ups_battery_replacement_date",      value2  => $apc_ups_battery_replacement_date, 
				name3  => "apc_ups_battery_health",                value3  => $apc_ups_battery_health, 
				name4  => "apc_ups_battery_model",                 value4  => $apc_ups_battery_model, 
				name5  => "apc_ups_battery_percentage_charge",     value5  => $apc_ups_battery_percentage_charge, 
				name6  => "apc_ups_battery_last_replacement_date", value6  => $apc_ups_battery_last_replacement_date, 
				name7  => "apc_ups_battery_state",                 value7  => $apc_ups_battery_state, 
				name8  => "apc_ups_battery_temperature",           value8  => $apc_ups_battery_temperature, 
				name9  => "apc_ups_battery_alarm_temperature",     value9  => $apc_ups_battery_alarm_temperature, 
				name10 => "apc_ups_battery_voltage",               value10 => $apc_ups_battery_voltage, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_ups_battery_apc_ups_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_ups_battery::apc_ups_battery_apc_ups_uuid::${apc_ups_battery_apc_ups_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_ups_battery::apc_ups_battery_apc_ups_uuid::${apc_ups_battery_apc_ups_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_ups_battery}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_ups_battery::modified_date::${modified_date}::apc_ups_battery_apc_ups_uuid::${apc_ups_battery_apc_ups_uuid}", value1 => $an->data->{db_data}{$id}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_ups_battery
SET
    apc_ups_battery_replacement_date      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_replacement_date).", 
    apc_ups_battery_health                = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_health).", 
    apc_ups_battery_model                 = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_model).", 
    apc_ups_battery_percentage_charge     = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_percentage_charge).", 
    apc_ups_battery_last_replacement_date = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_last_replacement_date).", 
    apc_ups_battery_state                 = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_state).", 
    apc_ups_battery_temperature           = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_temperature).", 
    apc_ups_battery_alarm_temperature     = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_alarm_temperature).", 
    apc_ups_battery_voltage               = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_voltage).", 
    modified_date                         = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_ups_battery_id = 
    (
        SELECT 
            b.apc_ups_battery_id 
        FROM 
            apc_ups a, 
            apc_ups_battery b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_battery_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_ups_battery
(
    apc_ups_battery_apc_ups_uuid, 
    apc_ups_battery_replacement_date, 
    apc_ups_battery_health, 
    apc_ups_battery_model, 
    apc_ups_battery_percentage_charge, 
    apc_ups_battery_last_replacement_date, 
    apc_ups_battery_state, 
    apc_ups_battery_temperature, 
    apc_ups_battery_alarm_temperature, 
    apc_ups_battery_voltage, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_replacement_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_health).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_percentage_charge).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_last_replacement_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_alarm_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_ups_battery_apc_ups_uuid' before, so it is just
					# a question of whether the entry for the current timestamp exists in
					# the history schema.
					if (not $an->data->{db_data}{$id}{apc_ups_battery}{modified_date}{$modified_date}{apc_ups_battery_apc_ups_uuid}{$apc_ups_battery_apc_ups_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_ups_battery
(
    apc_ups_battery_id, 
    apc_ups_battery_apc_ups_uuid, 
    apc_ups_battery_replacement_date, 
    apc_ups_battery_health, 
    apc_ups_battery_model, 
    apc_ups_battery_percentage_charge, 
    apc_ups_battery_last_replacement_date, 
    apc_ups_battery_state, 
    apc_ups_battery_temperature, 
    apc_ups_battery_alarm_temperature, 
    apc_ups_battery_voltage, 
    modified_date 
) VALUES (
    (
        SELECT 
            apc_ups_battery_id 
        FROM 
            public.apc_ups_battery 
        WHERE 
            apc_ups_battery_apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_apc_ups_uuid)." 
    ), 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_replacement_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_health).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_percentage_charge).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_last_replacement_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_alarm_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_battery_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_ups_battery_apc_ups_uuid?
			} # foreach my $id 
		} # foreach my $apc_ups_battery_apc_ups_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_ups_output' table.
sub update_db_apc_ups_output
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_ups_output" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_ups_output' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    b.apc_ups_output_apc_ups_uuid, 
    b.apc_ups_output_load_percentage, 
    b.apc_ups_output_time_on_batteries, 
    b.apc_ups_output_estimated_runtime, 
    b.apc_ups_output_frequency, 
    b.apc_ups_output_voltage, 
    b.apc_ups_output_total_output, 
    b.modified_date 
FROM 
    apc_ups a, 
    history.apc_ups_output b 
WHERE 
    a.apc_ups_uuid = b.apc_ups_output_apc_ups_uuid 
AND 
    a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_ups_output_apc_ups_uuid      = $row->[0];
			my $apc_ups_output_load_percentage   = $row->[1];
			my $apc_ups_output_time_on_batteries = $row->[2];
			my $apc_ups_output_estimated_runtime = $row->[3];
			my $apc_ups_output_frequency         = $row->[4];
			my $apc_ups_output_voltage           = $row->[5];
			my $apc_ups_output_total_output      = $row->[6];
			my $modified_date                    = $row->[7];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0008", message_variables => {
				name1 => "apc_ups_output_apc_ups_uuid",      value1 => $apc_ups_output_apc_ups_uuid, 
				name2 => "apc_ups_output_load_percentage",   value2 => $apc_ups_output_load_percentage, 
				name3 => "apc_ups_output_time_on_batteries", value3 => $apc_ups_output_time_on_batteries, 
				name4 => "apc_ups_output_estimated_runtime", value4 => $apc_ups_output_estimated_runtime, 
				name5 => "apc_ups_output_frequency",         value5 => $apc_ups_output_frequency, 
				name6 => "apc_ups_output_voltage",           value6 => $apc_ups_output_voltage, 
				name7 => "apc_ups_output_total_output",      value7 => $apc_ups_output_total_output, 
				name8 => "modified_date",                    value8 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid} = {
				apc_ups_output_apc_ups_uuid		=>	$apc_ups_output_apc_ups_uuid, 
				apc_ups_output_load_percentage		=>	$apc_ups_output_load_percentage, 
				apc_ups_output_time_on_batteries	=>	$apc_ups_output_time_on_batteries, 
				apc_ups_output_estimated_runtime	=>	$apc_ups_output_estimated_runtime, 
				apc_ups_output_frequency		=>	$apc_ups_output_frequency, 
				apc_ups_output_voltage			=>	$apc_ups_output_voltage, 
				apc_ups_output_total_output		=>	$apc_ups_output_total_output, 
			};
			$an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid} = {
				apc_ups_output_apc_ups_uuid		=>	$apc_ups_output_apc_ups_uuid, 
				apc_ups_output_load_percentage		=>	$apc_ups_output_load_percentage, 
				apc_ups_output_time_on_batteries	=>	$apc_ups_output_time_on_batteries, 
				apc_ups_output_estimated_runtime	=>	$apc_ups_output_estimated_runtime, 
				apc_ups_output_frequency		=>	$apc_ups_output_frequency, 
				apc_ups_output_voltage			=>	$apc_ups_output_voltage, 
				apc_ups_output_total_output		=>	$apc_ups_output_total_output, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_ups_output}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_ups_output_apc_ups_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}})
		{
			my $apc_ups_output_load_percentage   = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_load_percentage};
			my $apc_ups_output_time_on_batteries = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_time_on_batteries};
			my $apc_ups_output_estimated_runtime = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_estimated_runtime};
			my $apc_ups_output_frequency         = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_frequency};
			my $apc_ups_output_voltage           = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_voltage};
			my $apc_ups_output_total_output      = $an->data->{db_data}{unified}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{apc_ups_output_total_output};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0007", message_variables => {
				name1 => "apc_ups_output_apc_ups_uuid",      value1 => $apc_ups_output_apc_ups_uuid, 
				name2 => "apc_ups_output_load_percentage",   value2 => $apc_ups_output_load_percentage, 
				name3 => "apc_ups_output_time_on_batteries", value3 => $apc_ups_output_time_on_batteries, 
				name4 => "apc_ups_output_estimated_runtime", value4 => $apc_ups_output_estimated_runtime, 
				name5 => "apc_ups_output_frequency",         value5 => $apc_ups_output_frequency, 
				name6 => "apc_ups_output_voltage",           value6 => $apc_ups_output_voltage, 
				name7 => "apc_ups_output_total_output",      value7 => $apc_ups_output_total_output, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_ups_output_apc_ups_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_ups_output::apc_ups_output_apc_ups_uuid::${apc_ups_output_apc_ups_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_ups_output::apc_ups_output_apc_ups_uuid::${apc_ups_output_apc_ups_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_ups_output}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_ups_output::modified_date::${modified_date}::apc_ups_output_apc_ups_uuid::${apc_ups_output_apc_ups_uuid}", value1 => $an->data->{db_data}{$id}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_ups_output
SET
    apc_ups_output_apc_ups_uuid      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_apc_ups_uuid).", 
    apc_ups_output_load_percentage   = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_load_percentage).", 
    apc_ups_output_time_on_batteries = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_time_on_batteries).", 
    apc_ups_output_estimated_runtime = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_estimated_runtime).", 
    apc_ups_output_frequency         = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_frequency).", 
    apc_ups_output_voltage           = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_voltage).", 
    apc_ups_output_total_output      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_total_output).", 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_ups_output_id = 
    (
        SELECT 
            b.apc_ups_output_id 
        FROM 
            apc_ups a, 
            apc_ups_output b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_output_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_ups_output
(
    apc_ups_output_apc_ups_uuid, 
    apc_ups_output_load_percentage, 
    apc_ups_output_time_on_batteries, 
    apc_ups_output_estimated_runtime, 
    apc_ups_output_frequency, 
    apc_ups_output_voltage, 
    apc_ups_output_total_output, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_load_percentage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_time_on_batteries).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_estimated_runtime).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_frequency).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_total_output).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_ups_output_apc_ups_uuid' before, so it is just 
					# a question of whether the entry for the current timestamp exists in
					# the history schema.
					if (not $an->data->{db_data}{$id}{apc_ups_output}{modified_date}{$modified_date}{apc_ups_output_apc_ups_uuid}{$apc_ups_output_apc_ups_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_ups_output
(
    apc_ups_output_id, 
    apc_ups_output_apc_ups_uuid, 
    apc_ups_output_load_percentage, 
    apc_ups_output_time_on_batteries, 
    apc_ups_output_estimated_runtime, 
    apc_ups_output_frequency, 
    apc_ups_output_voltage, 
    apc_ups_output_total_output, 
    modified_date 
) VALUES (
    (
        SELECT 
            apc_ups_output_id 
        FROM 
            public.apc_ups_output 
        WHERE 
            apc_ups_output_apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_apc_ups_uuid)." 
    ), 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_load_percentage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_time_on_batteries).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_estimated_runtime).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_frequency).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_output_total_output).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_ups_output_apc_ups_uuid?
			} # foreach my $id 
		} # foreach my $apc_ups_output_apc_ups_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_ups_input' table.
sub update_db_apc_ups_input
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_ups_output" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_ups_input' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    b.apc_ups_input_apc_ups_uuid, 
    b.apc_ups_input_frequency, 
    b.apc_ups_input_sensitivity, 
    b.apc_ups_input_voltage, 
    b.apc_ups_input_1m_maximum_input_voltage, 
    b.apc_ups_input_1m_minimum_input_voltage, 
    b.modified_date 
FROM 
    apc_ups a, 
    history.apc_ups_input b 
WHERE 
    a.apc_ups_uuid = b.apc_ups_input_apc_ups_uuid 
AND 
    a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_ups_input_apc_ups_uuid             = $row->[0];
			my $apc_ups_input_frequency                = $row->[1]; 
			my $apc_ups_input_sensitivity              = $row->[2]; 
			my $apc_ups_input_voltage                  = $row->[3]; 
			my $apc_ups_input_1m_maximum_input_voltage = $row->[4]; 
			my $apc_ups_input_1m_minimum_input_voltage = $row->[5]; 
			my $modified_date                          = $row->[6];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0007", message_variables => {
				name1 => "apc_ups_input_apc_ups_uuid",             value1 => $apc_ups_input_apc_ups_uuid, 
				name2 => "apc_ups_input_frequency",                value2 => $apc_ups_input_frequency, 
				name3 => "apc_ups_input_sensitivity",              value3 => $apc_ups_input_sensitivity, 
				name4 => "apc_ups_input_voltage",                  value4 => $apc_ups_input_voltage, 
				name5 => "apc_ups_input_1m_maximum_input_voltage", value5 => $apc_ups_input_1m_maximum_input_voltage, 
				name6 => "apc_ups_input_1m_minimum_input_voltage", value6 => $apc_ups_input_1m_minimum_input_voltage, 
				name7 => "modified_date",                          value7 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid} = {
				apc_ups_input_frequency			=>	$apc_ups_input_frequency, 
				apc_ups_input_sensitivity		=>	$apc_ups_input_sensitivity, 
				apc_ups_input_voltage			=>	$apc_ups_input_voltage, 
				apc_ups_input_1m_maximum_input_voltage	=>	$apc_ups_input_1m_maximum_input_voltage, 
				apc_ups_input_1m_minimum_input_voltage	=>	$apc_ups_input_1m_minimum_input_voltage, 
			};
			$an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid} = {
				apc_ups_input_frequency			=>	$apc_ups_input_frequency, 
				apc_ups_input_sensitivity		=>	$apc_ups_input_sensitivity, 
				apc_ups_input_voltage			=>	$apc_ups_input_voltage, 
				apc_ups_input_1m_maximum_input_voltage	=>	$apc_ups_input_1m_maximum_input_voltage, 
				apc_ups_input_1m_minimum_input_voltage	=>	$apc_ups_input_1m_minimum_input_voltage, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_ups_input}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_ups_input_apc_ups_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}})
		{
			my $apc_ups_input_frequency                = $an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{apc_ups_input_frequency};
			my $apc_ups_input_sensitivity              = $an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{apc_ups_input_sensitivity};
			my $apc_ups_input_voltage                  = $an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{apc_ups_input_voltage};
			my $apc_ups_input_1m_maximum_input_voltage = $an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{apc_ups_input_1m_maximum_input_voltage};
			my $apc_ups_input_1m_minimum_input_voltage = $an->data->{db_data}{unified}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{apc_ups_input_1m_minimum_input_voltage};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
				name1 => "apc_ups_input_apc_ups_uuid",             value1 => $apc_ups_input_apc_ups_uuid, 
				name2 => "apc_ups_input_frequency",                value2 => $apc_ups_input_frequency, 
				name3 => "apc_ups_input_sensitivity",              value3 => $apc_ups_input_sensitivity, 
				name4 => "apc_ups_input_voltage",                  value4 => $apc_ups_input_voltage, 
				name5 => "apc_ups_input_1m_maximum_input_voltage", value5 => $apc_ups_input_1m_maximum_input_voltage, 
				name6 => "apc_ups_input_1m_minimum_input_voltage", value6 => $apc_ups_input_1m_minimum_input_voltage, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_ups_input_apc_ups_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_ups_input::apc_ups_input_apc_ups_uuid::${apc_ups_input_apc_ups_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_ups_input::apc_ups_input_apc_ups_uuid::${apc_ups_input_apc_ups_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_ups_input}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_ups_input::modified_date::${modified_date}::apc_ups_input_apc_ups_uuid::${apc_ups_input_apc_ups_uuid}", value1 => $an->data->{db_data}{$id}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_ups_input
SET
    apc_ups_input_apc_ups_uuid             = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_apc_ups_uuid).", 
    apc_ups_input_frequency                = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_frequency).", 
    apc_ups_input_sensitivity              = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_sensitivity).", 
    apc_ups_input_voltage                  = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_voltage).", 
    apc_ups_input_1m_maximum_input_voltage = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_maximum_input_voltage).", 
    apc_ups_input_1m_minimum_input_voltage = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_minimum_input_voltage).", 
    modified_date                          = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_ups_input_id = 
    (
        SELECT 
            b.apc_ups_input_id 
        FROM 
            apc_ups a, 
            apc_ups_input b
        WHERE 
            a.apc_ups_uuid = b.apc_ups_input_apc_ups_uuid
        AND
            a.apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_apc_ups_uuid)."
        AND 
            a.apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
    )
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_ups_input
(
    apc_ups_input_apc_ups_uuid, 
    apc_ups_input_frequency, 
    apc_ups_input_sensitivity, 
    apc_ups_input_voltage, 
    apc_ups_input_1m_maximum_input_voltage, 
    apc_ups_input_1m_minimum_input_voltage, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_frequency).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_sensitivity).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_maximum_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_minimum_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_ups_input_apc_ups_uuid' before, so it is just a
					# question of whether the entry for the current timestamp exists in 
					# the history schema.
					if (not $an->data->{db_data}{$id}{apc_ups_input}{modified_date}{$modified_date}{apc_ups_input_apc_ups_uuid}{$apc_ups_input_apc_ups_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_ups_input
(
    apc_ups_input_id, 
    apc_ups_input_apc_ups_uuid, 
    apc_ups_input_frequency, 
    apc_ups_input_sensitivity, 
    apc_ups_input_voltage, 
    apc_ups_input_1m_maximum_input_voltage, 
    apc_ups_input_1m_minimum_input_voltage, 
    modified_date 
) VALUES (
    (
        SELECT 
            apc_ups_input_id 
        FROM 
            public.apc_ups_input 
        WHERE 
            apc_ups_input_apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_apc_ups_uuid)." 
    ), 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_frequency).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_sensitivity).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_maximum_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_input_1m_minimum_input_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_ups_input_apc_ups_uuid?
			} # foreach my $id 
		} # foreach my $apc_ups_input_apc_ups_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_ups' table.
sub update_db_apc_ups
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_ups" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_ups' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    apc_ups_uuid, 
    apc_ups_name, 
    apc_ups_serial_number, 
    apc_ups_ip, 
    apc_ups_ac_restore_delay, 
    apc_ups_shutdown_delay, 
    apc_ups_firmware_version, 
    apc_ups_health, 
    apc_ups_high_transfer_voltage, 
    apc_ups_low_transfer_voltage, 
    apc_ups_last_transfer_reason, 
    apc_ups_manufactured_date, 
    apc_ups_model, 
    apc_ups_temperature_units, 
    apc_ups_nmc_firmware_version, 
    apc_ups_nmc_serial_number, 
    apc_ups_nmc_mac_address, 
    modified_date 
FROM 
    history.apc_ups 
WHERE 
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
;";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_ups_uuid                  = $row->[0];
			my $apc_ups_name                  = $row->[1];
			my $apc_ups_serial_number         = $row->[2];
			my $apc_ups_ip                    = $row->[3];
			my $apc_ups_ac_restore_delay      = $row->[4];
			my $apc_ups_shutdown_delay        = $row->[5];
			my $apc_ups_firmware_version      = $row->[6];
			my $apc_ups_health                = $row->[7];
			my $apc_ups_high_transfer_voltage = $row->[8];
			my $apc_ups_low_transfer_voltage  = $row->[9];
			my $apc_ups_last_transfer_reason  = $row->[10];
			my $apc_ups_manufactured_date     = $row->[11];
			my $apc_ups_model                 = $row->[12];
			my $apc_ups_temperature_units     = $row->[13];
			my $apc_ups_nmc_firmware_version  = $row->[14];
			my $apc_ups_nmc_serial_number     = $row->[15];
			my $apc_ups_nmc_mac_address       = $row->[16];
			my $modified_date                 = $row->[17];
			$an->Log->entry({log_level => 3, message_key => "an_variables_0018", message_variables => {
				name1  => "apc_ups_uuid",                  value1  => $apc_ups_uuid, 
				name2  => "apc_ups_name",                  value2  => $apc_ups_name, 
				name3  => "apc_ups_serial_number",         value3  => $apc_ups_serial_number, 
				name4  => "apc_ups_ip",                    value4  => $apc_ups_ip, 
				name5  => "apc_ups_ac_restore_delay",      value5  => $apc_ups_ac_restore_delay, 
				name6  => "apc_ups_shutdown_delay",        value6  => $apc_ups_shutdown_delay, 
				name7  => "apc_ups_firmware_version",      value7  => $apc_ups_firmware_version, 
				name8  => "apc_ups_health",                value8  => $apc_ups_health, 
				name9  => "apc_ups_high_transfer_voltage", value9  => $apc_ups_high_transfer_voltage, 
				name10 => "apc_ups_low_transfer_voltage",  value10 => $apc_ups_low_transfer_voltage, 
				name11 => "apc_ups_last_transfer_reason",  value11 => $apc_ups_last_transfer_reason, 
				name12 => "apc_ups_manufactured_date",     value12 => $apc_ups_manufactured_date, 
				name13 => "apc_ups_model",                 value13 => $apc_ups_model, 
				name14 => "apc_ups_temperature_units",     value14 => $apc_ups_temperature_units, 
				name15 => "apc_ups_nmc_firmware_version",  value15 => $apc_ups_nmc_firmware_version, 
				name16 => "apc_ups_nmc_serial_number",     value16 => $apc_ups_nmc_serial_number, 
				name17 => "apc_ups_nmc_mac_address",       value17 => $apc_ups_nmc_mac_address, 
				name18 => "modified_date",                 value18 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid} = {
				apc_ups_name			=>	$apc_ups_name, 
				apc_ups_serial_number		=>	$apc_ups_serial_number, 
				apc_ups_ip			=>	$apc_ups_ip, 
				apc_ups_ac_restore_delay	=>	$apc_ups_ac_restore_delay, 
				apc_ups_shutdown_delay		=>	$apc_ups_shutdown_delay, 
				apc_ups_firmware_version	=>	$apc_ups_firmware_version, 
				apc_ups_health			=>	$apc_ups_health, 
				apc_ups_high_transfer_voltage	=>	$apc_ups_high_transfer_voltage, 
				apc_ups_low_transfer_voltage	=>	$apc_ups_low_transfer_voltage, 
				apc_ups_last_transfer_reason	=>	$apc_ups_last_transfer_reason, 
				apc_ups_manufactured_date	=>	$apc_ups_manufactured_date, 
				apc_ups_model			=>	$apc_ups_model, 
				apc_ups_temperature_units	=>	$apc_ups_temperature_units, 
				apc_ups_nmc_firmware_version	=>	$apc_ups_nmc_firmware_version, 
				apc_ups_nmc_serial_number	=>	$apc_ups_nmc_serial_number, 
				apc_ups_nmc_mac_address		=>	$apc_ups_nmc_mac_address, 
			};
			$an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid} = {
				apc_ups_name			=>	$apc_ups_name, 
				apc_ups_serial_number		=>	$apc_ups_serial_number, 
				apc_ups_ip			=>	$apc_ups_ip, 
				apc_ups_ac_restore_delay	=>	$apc_ups_ac_restore_delay, 
				apc_ups_shutdown_delay		=>	$apc_ups_shutdown_delay, 
				apc_ups_firmware_version	=>	$apc_ups_firmware_version, 
				apc_ups_health			=>	$apc_ups_health, 
				apc_ups_high_transfer_voltage	=>	$apc_ups_high_transfer_voltage, 
				apc_ups_low_transfer_voltage	=>	$apc_ups_low_transfer_voltage, 
				apc_ups_last_transfer_reason	=>	$apc_ups_last_transfer_reason, 
				apc_ups_manufactured_date	=>	$apc_ups_manufactured_date, 
				apc_ups_model			=>	$apc_ups_model, 
				apc_ups_temperature_units	=>	$apc_ups_temperature_units, 
				apc_ups_nmc_firmware_version	=>	$apc_ups_nmc_firmware_version, 
				apc_ups_nmc_serial_number	=>	$apc_ups_nmc_serial_number, 
				apc_ups_nmc_mac_address		=>	$apc_ups_nmc_mac_address, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_ups}{modified_date}})
	{
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_ups_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}})
		{
			my $apc_ups_name                  = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_name};
			my $apc_ups_serial_number         = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_serial_number};
			my $apc_ups_ip                    = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_ip};
			my $apc_ups_ac_restore_delay      = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_ac_restore_delay};
			my $apc_ups_shutdown_delay        = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_shutdown_delay};
			my $apc_ups_firmware_version      = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_firmware_version};
			my $apc_ups_health                = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_health};
			my $apc_ups_high_transfer_voltage = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_high_transfer_voltage};
			my $apc_ups_low_transfer_voltage  = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_low_transfer_voltage};
			my $apc_ups_last_transfer_reason  = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_last_transfer_reason};
			my $apc_ups_manufactured_date     = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_manufactured_date};
			my $apc_ups_model                 = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_model};
			my $apc_ups_temperature_units     = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_temperature_units};
			my $apc_ups_nmc_firmware_version  = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_nmc_firmware_version};
			my $apc_ups_nmc_serial_number     = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_nmc_serial_number};
			my $apc_ups_nmc_mac_address       = $an->data->{db_data}{unified}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}{apc_ups_nmc_mac_address};
			$an->Log->entry({log_level => 3, message_key => "an_variables_0017", message_variables => {
				name1  => "apc_ups_uuid",                  value1  => $apc_ups_uuid, 
				name2  => "apc_ups_name",                  value2  => $apc_ups_name, 
				name3  => "apc_ups_serial_number",         value3  => $apc_ups_serial_number, 
				name4  => "apc_ups_ip",                    value4  => $apc_ups_ip, 
				name5  => "apc_ups_ac_restore_delay",      value5  => $apc_ups_ac_restore_delay, 
				name6  => "apc_ups_shutdown_delay",        value6  => $apc_ups_shutdown_delay, 
				name7  => "apc_ups_firmware_version",      value7  => $apc_ups_firmware_version, 
				name8  => "apc_ups_health",                value8  => $apc_ups_health, 
				name9  => "apc_ups_high_transfer_voltage", value9  => $apc_ups_high_transfer_voltage, 
				name10 => "apc_ups_low_transfer_voltage",  value10 => $apc_ups_low_transfer_voltage, 
				name11 => "apc_ups_last_transfer_reason",  value11 => $apc_ups_last_transfer_reason, 
				name12 => "apc_ups_manufactured_date",     value12 => $apc_ups_manufactured_date, 
				name13 => "apc_ups_model",                 value13 => $apc_ups_model, 
				name14 => "apc_ups_temperature_units",     value14 => $apc_ups_temperature_units, 
				name15 => "apc_ups_nmc_firmware_version",  value15 => $apc_ups_nmc_firmware_version, 
				name16 => "apc_ups_nmc_serial_number",     value16 => $apc_ups_nmc_serial_number, 
				name17 => "apc_ups_nmc_mac_address",       value17 => $apc_ups_nmc_mac_address, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_ups_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_ups::apc_ups_uuid::${apc_ups_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_ups::apc_ups_uuid::${apc_ups_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_ups}{apc_ups_uuid}{$apc_ups_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_ups::modified_date::${modified_date}::apc_ups_uuid::${apc_ups_uuid}", value1 => $an->data->{db_data}{$id}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_ups
SET
    apc_ups_name                  = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_name).", 
    apc_ups_serial_number         = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_serial_number).", 
    apc_ups_ip                    = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ip).", 
    apc_ups_ac_restore_delay      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ac_restore_delay).", 
    apc_ups_shutdown_delay        = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_shutdown_delay).", 
    apc_ups_firmware_version      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_firmware_version).", 
    apc_ups_health                = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_health).", 
    apc_ups_high_transfer_voltage = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_high_transfer_voltage).", 
    apc_ups_low_transfer_voltage  = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_low_transfer_voltage).", 
    apc_ups_last_transfer_reason  = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_last_transfer_reason).", 
    apc_ups_manufactured_date     = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_manufactured_date).", 
    apc_ups_model                 = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_model).", 
    apc_ups_temperature_units     = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_temperature_units).", 
    apc_ups_nmc_firmware_version  = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_firmware_version).", 
    apc_ups_nmc_serial_number     = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_serial_number).", 
    apc_ups_nmc_mac_address       = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_mac_address).", 
    modified_date                 = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_ups_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    apc_ups_uuid      = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_ups
(
    apc_ups_host_uuid, 
    apc_ups_uuid, 
    apc_ups_name, 
    apc_ups_serial_number, 
    apc_ups_ip, 
    apc_ups_ac_restore_delay, 
    apc_ups_shutdown_delay, 
    apc_ups_firmware_version, 
    apc_ups_health, 
    apc_ups_high_transfer_voltage, 
    apc_ups_low_transfer_voltage, 
    apc_ups_last_transfer_reason, 
    apc_ups_manufactured_date, 
    apc_ups_model, 
    apc_ups_temperature_units, 
    apc_ups_nmc_firmware_version, 
    apc_ups_nmc_serial_number, 
    apc_ups_nmc_mac_address, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ip).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ac_restore_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_shutdown_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_health).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_high_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_low_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_last_transfer_reason).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_manufactured_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_temperature_units).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_mac_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						
						### NOTE: On some occasions, for as-yet unknown reasons, a 
						###       record can end up in the public schema while 
						###       nothing exists in the history schema (which is what
						###       we read during a resync). To deal with this, we'll 
						###       do an explicit check before confirming the INSERT).
						my $count_query = "SELECT COUNT(*) FROM public.apc_ups WHERE apc_ups_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).";";
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count_query", value1 => $count_query, 
						}, file => $THIS_FILE, line => __LINE__});
						my $count = $an->DB->do_db_query({id => $id, query => $count_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1  => "count", value1 => $count, 
						}, file => $THIS_FILE, line => __LINE__});
						if ($count)
						{
							# Already in, redirect to the history schema.
							$an->Log->entry({log_level => 1, message_key => "scancore_warning_0003", message_variables => {
								table  => "apc_ups", 
								id     => $id, 
								query  => $query, 
							}, file => $THIS_FILE, line => __LINE__});
							$query =~ s/ public.apc_ups/ history.apc_ups/gs;
							push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
						}
						else
						{
							# No problem, record the query in the array
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
				}
				else
				{
					# We've seen this 'apc_ups_uuid' before, so it is just a question of 
					# whether the entry for the current timestamp exists in the history 
					# schema.
					if (not $an->data->{db_data}{$id}{apc_ups}{modified_date}{$modified_date}{apc_ups_uuid}{$apc_ups_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_ups
(
    apc_ups_host_uuid, 
    apc_ups_uuid, 
    apc_ups_name, 
    apc_ups_serial_number, 
    apc_ups_ip, 
    apc_ups_ac_restore_delay, 
    apc_ups_shutdown_delay, 
    apc_ups_firmware_version, 
    apc_ups_health, 
    apc_ups_high_transfer_voltage, 
    apc_ups_low_transfer_voltage, 
    apc_ups_last_transfer_reason, 
    apc_ups_manufactured_date, 
    apc_ups_model, 
    apc_ups_temperature_units, 
    apc_ups_nmc_firmware_version, 
    apc_ups_nmc_serial_number, 
    apc_ups_nmc_mac_address, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ip).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_ac_restore_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_shutdown_delay).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_health).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_high_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_low_transfer_voltage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_last_transfer_reason).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_manufactured_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_temperature_units).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_ups_nmc_mac_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_ups_uuid?
			} # foreach my $id 
		} # foreach my $apc_ups_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# This checks to see if this agent's databases tables exist and, if not, load the schema. If the schema gets
# loaded, we'll check other databases for older information and load it.
sub prep_databases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "prep_databases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 3, message_key => "scancore_log_0016", message_variables => { agent => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		my $query = "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE tablename='apc_ups' AND schemaname='public';";
		#                     The actual query -----------------.        .------- Row 0
		#                        Query this DB --.              |        |    .-- Columns 0
		my $count = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "count", value1 => $count
		}, file => $THIS_FILE, line => __LINE__});
		if ($count < 1)
		{
			# Need to load the database schema.
			$an->Log->entry({log_level => 1, message_key => "scancore_log_0017", file => $THIS_FILE, line => __LINE__});
			$an->DB->load_schema({id => $id, file => $an->data->{path}{sql}});
			
			# Send an alert telling the user that we've initialized this database.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"notice_message_0002",
				alert_message_variables	=>	{
					name			=>	$an->data->{scancore}{db}{$id}{name},
					host			=>	$an->data->{scancore}{db}{$id}{host},
					agent			=>	$THIS_FILE,
				},
			});
		}
		else
		{
			# Table exists, schema load is not needed.
			$an->Log->entry({log_level => 3, message_key => "scancore_log_0018", file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# This calls each UPS, first to get the model number and update the OIDs to use if needed, then gathers the 
# information from the UPS.
sub gather_ups_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "gather_ups_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: If the network with the UPS is congested, it is possible that, despite connecting to the 
	###       UPS, some OID reads may fail with '#!no_connection!#'. Try to read them a second time in
	###       these cases. Regardless, be sure to check all returned OID values for 'no connection' and
	###       handle such cases more gracefully.
	
	my $no_ups_found = 1;
	foreach my $ups_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-ups'}{ups}})
	{
		my $ups_ip = $an->data->{'scan-apc-ups'}{ups}{$ups_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "ups_name", value1 => $ups_name,
			name2 => "ups_ip",   value2 => $ups_ip,
		}, file => $THIS_FILE, line => __LINE__});
		
		# This will get set to '1' if the UPS doesn't respond but hasn't been missing for 
		# 'scan-apc-ups::sensor_loss_count_to_alarm' scans yet.
		$an->data->{dont_delete}{$ups_ip} = 0;
		
		# This is used to determine if we need to set or clear a comms-lost alert.
		my $variable_name = "apc_ups_communication_lost:$ups_name";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "variable_name", value1 => $variable_name, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my ($ups_missing, $variable_uuid, $modified_date) = $an->ScanCore->read_variable({
				variable_name         => $variable_name,
				variable_source_uuid  => $an->data->{sys}{host_uuid},
				variable_source_table => "apc_ups",
			});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "ups_missing",                              value1 => $ups_missing, 
			name2 => "variable_uuid",                            value2 => $variable_uuid, 
			name3 => "modified_date",                            value3 => $modified_date, 
			name4 => "scan-apc-ups::sensor_loss_count_to_alarm", value4 => $an->data->{'scan-apc-ups'}{sensor_loss_count_to_alarm}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Can I ping it?
		$an->data->{ups}{$ups_name}{ip} = $ups_ip;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::ip", value1 => $an->data->{ups}{$ups_name}{ip}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# This returns '1' if it was pingable, '0' if not.
		my ($pinged) = $an->Check->ping({ping => $ups_ip});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "pinged", value1 => $pinged, 
		}, file => $THIS_FILE, line => __LINE__});
		if (not $pinged)
		{
			# Nope. 
			$an->data->{ups}{$ups_name}{model} = "#!no_connection!#";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "ups::${ups_name}::model", value1 => $an->data->{ups}{$ups_name}{model}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Alert the user, if this is the UPS has been missing long enough.
			if ((($ups_missing =~ /^\d+$/) && ($ups_missing > 0)) or ($an->data->{'scan-apc-ups'}{sensor_loss_count_to_alarm} == 1))
			{
				# Bump the missing count to account for this scan.
				$ups_missing++;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "ups_missing", value1 => $ups_missing, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# This isn't the first time it was lost. has it passed the threshold?
				if ($ups_missing >= $an->data->{'scan-apc-ups'}{sensor_loss_count_to_alarm})
				{
					# Nope. Alert the user, if this is the first time it was lost.
					my $set = $an->Alert->check_alert_sent({
						type			=>	"warning",
						alert_sent_by		=>	$THIS_FILE,
						alert_record_locator	=>	$ups_name,
						alert_name		=>	"apc_ups_communication_lost",
						modified_date		=>	$an->data->{sys}{db_timestamp},
					});
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "set", value1 => $set, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($set)
					{
						# This is a new loss of comms.
						$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_message_0008", message_variables => { ups_name => $ups_name }, file => $THIS_FILE, line => __LINE__});
						my $message_key = "scan_apc_ups_note_0059";
						if ($an->data->{tools}{'anvil-kick-apc-ups'}{enabled})
						{
							# The UPS watchdog feature is enabled...
							$message_key = "scan_apc_ups_note_0062";
						}
						$an->Alert->register_alert({
							alert_level		=>	"warning", 
							alert_agent_name	=>	$THIS_FILE,
							alert_title_key		=>	"an_alert_title_0004",
							alert_message_key	=>	$message_key,
							alert_message_variables	=>	{
								ups_name		=>	$ups_name,
							},
						});
					}
				}
				else
				{
					# It is gone, but it's not the first time and we've not 
					# passed the alert threshold. 
					$an->data->{dont_delete}{$ups_ip} = 1;
					$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_message_0009", message_variables => { 
						ups_name => $ups_name,
						scans    => $ups_missing,
					}, file => $THIS_FILE, line => __LINE__});
					$an->ScanCore->insert_or_update_variables({
						variable_uuid         => $variable_uuid, 
						variable_name         => $variable_name,
						variable_value        => $ups_missing,
						variable_source_uuid  => $an->data->{sys}{host_uuid}, 
						variable_source_table => "apc_ups", 
						update_value_only     => 1,
					});
				}
			}
			else
			{
				# It is. Set the loss count to 1
				$an->data->{dont_delete}{$ups_ip} = 1;
				$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_message_0010", message_variables => { ups_name => $ups_name }, file => $THIS_FILE, line => __LINE__});
				$an->ScanCore->insert_or_update_variables({
					variable_uuid         => $variable_uuid, 
					variable_name         => $variable_name,
					variable_value        => 1,
					variable_source_uuid  => $an->data->{sys}{host_uuid}, 
					variable_source_table => "apc_ups", 
					update_value_only     => 1,
				});
			}
		}
		else
		{
			# Yup!
			$an->data->{ups}{$ups_name}{model} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{model});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "ups::${ups_name}::model", value1 => $an->data->{ups}{$ups_name}{model}
			}, file => $THIS_FILE, line => __LINE__});
			
			# If I had previously lost this UPS, clear the alert and let the user know we're 
			# back.
			my $cleared = $an->Alert->check_alert_sent({
				type			=>	"clear",
				alert_sent_by		=>	$THIS_FILE,
				alert_record_locator	=>	$ups_name,
				alert_name		=>	"apc_ups_communication_lost",
				modified_date		=>	$an->data->{sys}{db_timestamp},
			});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cleared", value1 => $cleared, 
			}, file => $THIS_FILE, line => __LINE__});
			if ($cleared)
			{
				# There was an alert and it has now been cleared.
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_title_key		=>	"an_alert_title_0006",
					alert_message_key	=>	"scan_apc_ups_note_0060",
					alert_message_variables	=>	{
						ups_name		=>	$ups_name,
					},
				});
			}
			
			# If the UPS was missing before, clear it.
			if (($ups_missing =~ /^\d+$/) && ($ups_missing > 0))
			{
				# It disappeared in a previous sweep. Set the variable to 0.
				$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_message_0011", message_variables => { ups_name => $ups_name }, file => $THIS_FILE, line => __LINE__});
				$an->ScanCore->insert_or_update_variables({
					variable_uuid         => $variable_uuid, 
					variable_name         => $variable_name,
					variable_value        => 0,
					variable_source_uuid  => $an->data->{sys}{host_uuid}, 
					variable_source_table => "apc_ups", 
					update_value_only     => 1,
				});
			}
		}
		
		# If I got a model, I found a UPS.
		if ($an->data->{ups}{$ups_name}{model} =~ /no_connection/)
		{
			delete $an->data->{ups}{$ups_name};
			delete $an->data->{'scan-apc-ups'}{ups}{$ups_name};
			next;
		}
		$no_ups_found = 0;
		
		# Now that I can trust my OIDs, lets start gathering data! Keep track of how long it took to
		# query the OIDs.
		my $read_start_time = time;
		$an->Log->entry({log_level => 2, message_key => "scan_apc_ups_log_0002", message_variables => { ups => $ups_name }, file => $THIS_FILE, line => __LINE__});
		
		#############################################################################################
		# Base UPS and NMC information                                                              #
		#############################################################################################
		
		# Get the AC restore delay, if set. (High-precision, divide by 10 to get seconds).
		$an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{ac_restore_delay});
		$an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay} = 0 if $an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay} eq "--";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_ac_restore_delay", value1 => $an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay}, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_ac_restore_delay", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_total_output}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_ac_restore_delay", value1 => $an->data->{ups}{$ups_name}{apc_ups_ac_restore_delay}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the shut down delay, if set. (in ticks, divide by 100).
		$an->data->{ups}{$ups_name}{apc_ups_shutdown_delay} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{shutdown_delay});
		$an->data->{ups}{$ups_name}{apc_ups_shutdown_delay} = 0 if $an->data->{ups}{$ups_name}{apc_ups_shutdown_delay} eq "--";
		if ($an->data->{ups}{$ups_name}{apc_ups_shutdown_delay} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_shutdown_delay", 
				value => $an->data->{ups}{$ups_name}{apc_ups_shutdown_delay}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_shutdown_delay} /= 100;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_shutdown_delay", value1 => $an->data->{ups}{$ups_name}{apc_ups_shutdown_delay}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the UPS's firmware version.
		$an->data->{ups}{$ups_name}{apc_ups_firmware_version} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{firmware_version});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_firmware_version", value1 => $an->data->{ups}{$ups_name}{apc_ups_firmware_version}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### Gather the main UPS data. The returned integer value maps to the appropriate 
		### 'scan_apc_ups_health_00xx' string.
		# 1 => Unknown, 		2 => Online, 			3 => On Battery, 
		# 4 => onSmartBoost,		5 => timedSleeping,		6 => softwareBypass,
		# 7 => off, 			8 => rebooting,			9 => switchedBypass,
		# 10 => hardwareFailureBypass,	11 => sleepingUntilPowerReturn, 
		# 12 => onSmartTrim,		13 => ecoMode, 			14 => hotStandby, 
		# 15 => onBatteryTest,		15 => emergencyStaticBypass, 
		# 17 => staticBypassStandby,	18 => powerSavingMode,
		# 19 => spotMode,		20 => eConversion
		$an->data->{ups}{$ups_name}{apc_ups_health} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{health});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_health", value1 => $an->data->{ups}{$ups_name}{apc_ups_health}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the high and low transfer voltages.
		$an->data->{ups}{$ups_name}{apc_ups_high_transfer_voltage} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{high_transfer_voltage});
		$an->data->{ups}{$ups_name}{apc_ups_low_transfer_voltage}  = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{low_transfer_voltage});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_high_transfer_voltage", value1 => $an->data->{ups}{$ups_name}{apc_ups_high_transfer_voltage},
			name2 => "ups::${ups_name}::apc_ups_low_transfer_voltage",  value2 => $an->data->{ups}{$ups_name}{apc_ups_low_transfer_voltage}
		}, file => $THIS_FILE, line => __LINE__});
		
		### Get the last transfer reason. The returned integer maps to the appropriate 
		### 'scan_apc_ups_last_xfer_00xx' string.
		# 1 => noTransfer, 		2 => highLineVoltage,		3 => brownout,
		# 4 => blackout,		5 => smallMomentarySag,		6 => deepMomentarySag,
		# 7 => smallMomentarySpike,	8 => largeMomentarySpike,
		# 9 => selfTest,		10 => rateOfVoltageChange
		$an->data->{ups}{$ups_name}{apc_ups_last_transfer_reason} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{last_transfer_reason});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_last_transfer_reason", value1 => $an->data->{ups}{$ups_name}{apc_ups_last_transfer_reason}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the manufacture date of the UPS. This really should never change, but we need to record
		# it at least once.
		$an->data->{ups}{$ups_name}{apc_ups_manufactured_date} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{manufactured_date});
		$an->data->{ups}{$ups_name}{apc_ups_manufactured_date} = $an->Convert->convert_format_mmddyy_to_yymmdd({date => $an->data->{ups}{$ups_name}{apc_ups_manufactured_date}});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_manufactured_date", value1 => $an->data->{ups}{$ups_name}{apc_ups_manufactured_date}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the temperature units. 1 == C, 2 == F
		$an->data->{ups}{$ups_name}{apc_ups_temperature_units} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{temperature_units});
		$an->data->{ups}{$ups_name}{apc_ups_temperature_units} = $an->data->{ups}{$ups_name}{apc_ups_temperature_units} eq "2" ? "F" : "C";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_temperature_units", value1 => $an->data->{ups}{$ups_name}{apc_ups_temperature_units}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### This should never change, and thus is used for looking up the UPS.
		# As with the manufacturing date, this should never change.
		$an->data->{ups}{$ups_name}{apc_ups_serial_number} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{ups}{serial_number});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_serial_number", value1 => $an->data->{ups}{$ups_name}{apc_ups_serial_number}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### Now we get the NMC details. This will change *if* the network card ever needs to be 
		### replaced.
		# Get the NMC firmware.
		$an->data->{ups}{$ups_name}{apc_ups_nmc_firmware_version} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{nmc}{firmware_version});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_nmc_firmware_version", value1 => $an->data->{ups}{$ups_name}{apc_ups_nmc_firmware_version}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the NMC serial number.
		$an->data->{ups}{$ups_name}{apc_ups_nmc_serial_number} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{nmc}{serial_number});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_nmc_serial_number", value1 => $an->data->{ups}{$ups_name}{apc_ups_nmc_serial_number}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Now the MAC address.
		$an->data->{ups}{$ups_name}{apc_ups_nmc_mac_address} =  read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{nmc}{mac_address});
		$an->data->{ups}{$ups_name}{apc_ups_nmc_mac_address} =~ s/([0-9a-fA-F]{2}) ([0-9a-fA-F]{2}) ([0-9a-fA-F]{2}) ([0-9a-fA-F]{2}) ([0-9a-fA-F]{2}) ([0-9a-fA-F]{2})/$1:$2:$3:$4:$5:$6/g;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_nmc_mac_address", value1 => $an->data->{ups}{$ups_name}{apc_ups_nmc_mac_address}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		
		#############################################################################################
		# Battery information                                                                       #
		#############################################################################################
		
		# Read the estimated battery replacement date. This only has value if the user remembered to
		# mark the date the battery was replaced.
		$an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{replacement_date});
		$an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date} = $an->Convert->convert_format_mmddyy_to_yymmdd({date => $an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date}});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_replacement_date", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_replacement_date}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read the battery's health. 1 == OK, 2 == Failed, replace.
		$an->data->{ups}{$ups_name}{apc_ups_battery_health} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{health});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_health", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_health}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read the battery's model number.
		$an->data->{ups}{$ups_name}{apc_ups_battery_model} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{model});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_model", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_model}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read the percentage charge. This is high-precision, so divide by 10 to get the actual 
		# percentage (ie: 1000 == 100.0%).
		$an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{percentage_charge_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_battery_percentage_charge", 
				value => $an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_percentage_charge", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_percentage_charge}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the date that the UPS was last replaced. (mm/dd/yy or yyyy format)
		$an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{last_replacement_date});
		$an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date} = $an->Convert->convert_format_mmddyy_to_yymmdd({date => $an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date}});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_last_replacement_date", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_last_replacement_date}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### The battery state is expressed as an integer and maps to 'scan_apc_ups_battery_000x'.
		# 1 => unknown,			2 => batteryNormal,	3 => batteryLow, 
		# 4 => batteryInFaultCondition
		$an->data->{ups}{$ups_name}{apc_ups_battery_state} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{'state'});
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_state", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_state}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# This is the temperature of the UPS battery. It is high-precision, so divide by 10 to get 
		# the actual temperature. It is always celsius, so don't convert it.
		$an->data->{ups}{$ups_name}{apc_ups_battery_temperature} =  read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{temperature_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_battery_temperature} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_battery_temperature", 
				value => $an->data->{ups}{$ups_name}{apc_ups_battery_temperature}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_battery_temperature} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_temperature", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_temperature}
		}, file => $THIS_FILE, line => __LINE__});
		
		# Get the temperature at which the system throws a fit. This is stated as a standard integer,
		# no need to divide by 10.
		$an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{alarm_temperature});
		if ($an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature} eq "--")
		{
			$an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature} = 40 ;
			$an->data->{ups}{$ups_name}{apc_ups_temperature_units}         = "C";
		}
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_temperature_units",         value1 => $an->data->{ups}{$ups_name}{apc_ups_temperature_units},
			name2 => "ups::${ups_name}::apc_ups_battery_alarm_temperature", value2 => $an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature}
		}, file => $THIS_FILE, line => __LINE__});
		if ($an->data->{ups}{$ups_name}{apc_ups_temperature_units} eq "F")
		{
			# We live in a metric world!
			$an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature} = $an->Convert->convert_to_celsius({temperature => $an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature}});
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "<set>",                                                  value1 => "C",
				name2 => "ups::${ups_name}::<< apc_ups_battery_alarm_temperature", value2 => $an->data->{ups}{$ups_name}{apc_ups_battery_alarm_temperature}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Read the current battery voltage (vDC). It is a high-precision value, so divide by 10.
		$an->data->{ups}{$ups_name}{apc_ups_battery_voltage} =  read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{battery}{voltage_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_battery_voltage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_battery_voltage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_battery_voltage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_battery_voltage} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_battery_voltage", value1 => $an->data->{ups}{$ups_name}{apc_ups_battery_voltage}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		
		#############################################################################################
		# Input Information                                                                         #
		#############################################################################################
		
		# This is the current input frequency. It is high-precision, so divide by 10.
		$an->data->{ups}{$ups_name}{apc_ups_input_frequency}  = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{input}{frequency_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_input_frequency} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_input_frequency", 
				value => $an->data->{ups}{$ups_name}{apc_ups_input_frequency}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_input_frequency} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_input_frequency", value1 => $an->data->{ups}{$ups_name}{apc_ups_input_frequency}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### The input sensitivity is an integer that maps to 'scan_apc_ups_sensitivity_000x'. If the
		### UPS is an 'online' (dual-conversion model), this will return '0'.
		# 1 => Auto,	2 => Low,	3 => Medium,	4 => High
		# We set this to '0' if no value was returned to indicate an 'Online' UPS.
		$an->data->{ups}{$ups_name}{apc_ups_input_sensitivity} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{input}{sensitivity});
		$an->data->{ups}{$ups_name}{apc_ups_input_sensitivity} = 0 if $an->data->{ups}{$ups_name}{apc_ups_input_sensitivity} eq "--";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_input_sensitivity", value1 => $an->data->{ups}{$ups_name}{apc_ups_input_sensitivity}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# High-precision input voltage (vAC), divide by 10.
		$an->data->{ups}{$ups_name}{apc_ups_input_voltage}  = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{input}{voltage_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_input_voltage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_input_voltage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_input_voltage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_input_voltage} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_input_voltage", value1 => $an->data->{ups}{$ups_name}{apc_ups_input_voltage}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# High-precision maximum and minimum input voltages (vAC) over the last 60 seconds.
		$an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{input}{'1m_maximum_input_voltage_hp'});
		$an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} = -1 if $an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} eq "--";
		if ($an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_input_1m_maximum_input_voltage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage} /= 10;
		}
		$an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{input}{'1m_minimum_input_voltage_hp'});
		$an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} = -1 if $an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} eq "--";
		if ($an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_input_1m_minimum_input_voltage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_input_1m_maximum_input_voltage", value1 => $an->data->{ups}{$ups_name}{apc_ups_input_1m_maximum_input_voltage}, 
			name2 => "ups::${ups_name}::apc_ups_input_1m_minimum_input_voltage", value2 => $an->data->{ups}{$ups_name}{apc_ups_input_1m_minimum_input_voltage}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		
		#############################################################################################
		# Output Information                                                                        #
		#############################################################################################
		
		# High-precision output load percentage, divide by 10.
		$an->data->{ups}{$ups_name}{apc_ups_output_load_percentage} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{load_percentage_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_load_percentage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_output_load_percentage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_load_percentage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_load_percentage} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_load_percentage", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_load_percentage}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# The time (in ticks, divide by 100) that the UPS has been running on batteries. '0' 
		# indicates that it is not on batteries.
		$an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{time_on_batteries});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_output_time_on_batteries", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries} /= 100;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_time_on_batteries", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_time_on_batteries}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Estimated remaining runtime (in ticks, divide by 100).
		$an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{estimated_runtime});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_output_estimated_runtime", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime} /= 100;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_estimated_runtime", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_estimated_runtime}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# This is the high-precision output frequency in Hz (divide by 10).
		$an->data->{ups}{$ups_name}{apc_ups_output_frequency} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{frequency_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_frequency} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_output_frequency", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_frequency}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_frequency} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_frequency", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_frequency}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# High-precision output voltage (vAC, divide by 10).
		$an->data->{ups}{$ups_name}{apc_ups_output_voltage} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{voltage_hp});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_voltage} =~ /\D/)
		{
			# This should have been an integer...
			$an->Alert->error({title_key => "an_0003", message_key => "scan_apc_ups_error_0001", message_variables => { 
				name  => "ups::${ups_name}::apc_ups_output_voltage", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_voltage}
			}, code => 2, file => $THIS_FILE, line => __LINE__});
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_voltage} /= 10;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_voltage", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_voltage}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# This is the total power outputted since the UPS was created. It is measured in tens of 
		# watt-hours, so divide be 100 to get kW/hr.
		$an->data->{ups}{$ups_name}{apc_ups_output_total_output} = read_oid($an, $an->data->{ups}{$ups_name}{ip}, $an->data->{'default'}{output}{total_output});
		if ($an->data->{ups}{$ups_name}{apc_ups_output_total_output} eq "--")
		{
			# This model of UPS doesn't report the total output power.
			$an->data->{ups}{$ups_name}{apc_ups_output_total_output} = 0;
		}
		elsif ($an->data->{ups}{$ups_name}{apc_ups_output_total_output} =~ /\D/)
		{
			# This should have been an integer...
			$an->Log->entry({log_level => 1, message_key => "scan_apc_ups_error_0001", message_variables => {
				name  => "ups::${ups_name}::apc_ups_output_total_output", 
				value => $an->data->{ups}{$ups_name}{apc_ups_output_total_output}, 
			}, file => $THIS_FILE, line => __LINE__});
			$an->data->{ups}{$ups_name}{apc_ups_output_total_output} = 0;
		}
		else
		{
			$an->data->{ups}{$ups_name}{apc_ups_output_total_output} /= 100;
		}
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "ups::${ups_name}::apc_ups_output_total_output", value1 => $an->data->{ups}{$ups_name}{apc_ups_output_total_output}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Record how long it took.
		my $oid_read_time = $an->Readable->time({'time' => (time - $read_start_time)});
		$an->Log->entry({log_level => 2, message_key => "scan_apc_ups_log_0003", message_variables => {
			ups    => $ups_name, 
			'time' => $oid_read_time
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "no_ups_found", value1 => $no_ups_found, 
	}, file => $THIS_FILE, line => __LINE__});
	return($no_ups_found);
}

# This reads an OID and returns the results.
sub read_oid
{
	my ($an, $ups, $oid) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "read_oid" }, message_key => "an_variables_0002", message_variables => { 
		name1 => "ups", value1 => $ups, 
		name2 => "oid", value2 => $oid, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $value      = "#!no_value!#";
	my $shell_call = $an->data->{path}{snmpget}." -v 2c -c ".$an->data->{snmp}{community}{'read'}." $ups $oid";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => "$shell_call"
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => "$line"
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /No Response/i)
		{
			$value = "#!no_connection!#";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /STRING: "(.*)"$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /INTEGER: (\d+)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Hex-STRING: (.*)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Gauge32: (.*)$/i)
		{
			$value =  $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Timeticks: \((\d+)\) /i)
		{
			$value =  $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /No Such Instance/i)
		{
			$value = "--";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	# Strip leading and trailing white spaces
	$value =~ s/^\s+//;
	$value =~ s/\s+$//;
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "value", value1 => $value, 
	}, file => $THIS_FILE, line => __LINE__});
	return($value);
}

# This looks for APC UPSes.
sub find_upses
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_upses" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->data->{'scan-apc-ups'}{upses} = $an->data->{switches}{upses} if $an->data->{switches}{upses};
	if ($an->data->{'scan-apc-ups'}{upses})
	{
		# User has specified the UPSes to query. We'll resolve them to IPs.
		foreach my $ups_name (split/,/, $an->data->{'scan-apc-ups'}{ups})
		{
			next if not $ups_name;
			
			my $ip        = "";
			my $packed_ip = gethostbyname($ups_name);
			if ($packed_ip)
			{
				$ip = inet_ntoa($packed_ip);
				$an->data->{'scan-apc-ups'}{ups}{$ups_name} = $ip;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "scan-apc-ups::ups::$ups_name", value1 => $an->data->{'scan-apc-ups'}{ups}{$ups_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Failed to get IP
				die "$THIS_FILE ".__LINE__."; No IP found for UPS name: [$ups_name].\n";
			}
		}
	}
	else
	{
		# Read in /etc/hosts and look for anything with 'ups' in the name.
		my $shell_call = "<".$an->data->{path}{etc_hosts};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, $shell_call) or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => ">> line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Clear out comments, knock out white spaces and then skip anything without 'ups' in
			# the name.
			$line =~ s/#.*$//;
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;
			$line =~ s/\s+/ /g;
			next if not $line;
			next if $line !~ /ups/;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "<< line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# This should be a UPS entry.
			my ($ip, $names) = ($line =~ /^(\d+\.\d+\.\d+\.\d+) (.*)/);
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "ip",    value1 => $ip, 
				name2 => "names", value2 => $names,
			}, file => $THIS_FILE, line => __LINE__});
			
			# It is crude, but we'll use the longest host name.
			my $ups_name = "";
			foreach my $name (split/ /, $names)
			{
				if (length($name) > length($ups_name))
				{
					$ups_name = $name;
				}
			}
			if (($ups_name) && ($ip))
			{
				$an->data->{'scan-apc-ups'}{ups}{$ups_name} = $ip;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "scan-apc-ups::ups::$ups_name", value1 => $an->data->{'scan-apc-ups'}{ups}{$ups_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Bad name or IP.
				die "$THIS_FILE ".__LINE__."; Bad name: [$ups_name] or IP: [$ip]\n";
			}
		}
		close $file_handle;
		
		# If I am a dashboard, read in the cache files for the UPSes that nodes know about and see if
		# we can ping them. If we can, we'll scan them. This will be important for dashboards to 
		# determine if/when it is safe to boot a node.
		my $host_type = $an->Get->what_am_i();
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "host_type", value1 => $host_type, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($host_type eq "dashboard")
		{
			# Loop through all Anvil! systems.
			my $all_upses  = {};
			my $anvil_data = $an->ScanCore->get_anvils();
			foreach my $hash_ref (@{$anvil_data})
			{
				my $anvil_uuid = $hash_ref->{anvil_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "anvil_uuid", value1 => $anvil_uuid, 
				}, file => $THIS_FILE, line => __LINE__});
				
				my ($upses) = $an->Get->node_upses({
						anvil_uuid => $anvil_uuid,
						node_name  => "both",
					});
				
				# Record 
				foreach my $ip (sort {$a cmp $b} keys %{$upses})
				{
					my $ups_name = $upses->{$ip}{name};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "ups_name", value1 => $ups_name, 
					}, file => $THIS_FILE, line => __LINE__});
					
					if (not exists $an->data->{'scan-apc-ups'}{ups}{$ups_name})
					{
						$an->data->{'scan-apc-ups'}{ups}{$ups_name} = $ip;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "scan-apc-ups::ups::$ups_name", value1 => $an->data->{'scan-apc-ups'}{ups}{$ups_name}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
			}
		}
	}
	
	# Here is what I found;
	foreach my $ups_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-ups'}{ups}})
	{
		my $ip = $an->data->{'scan-apc-ups'}{ups}{$ups_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "ups_name", value1 => $ups_name, 
			name2 => "ip",       value2 => $ip, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "scan_apc_ups_message_0002"})."\n";

	return(0);
}
