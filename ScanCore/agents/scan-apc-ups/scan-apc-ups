#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# https://alteeve.ca
# 
# Exit Codes:
# 0  - Success
# 1  - Passed in host name was not found in the database.
# 
# 

=pod
OIDs to interest:

Temps:
Battery temp: 
OID:		.1.3.6.1.4.1.318.1.1.1.2.2.2.0
Type:		guage32, value is *C
example:	snmpget -v 2c -c private ups1 .1.3.6.1.4.1.318.1.1.1.2.2.2.0
		SNMPv2-SMI::enterprises.318.1.1.1.2.2.2.0 = Gauge32: 24 (24*C)

High-precision battery temp:
OID:		.1.3.6.1.4.1.318.1.1.1.2.3.2.0
Type:		guage32, value is 1/10*C
example:	snmpget -v 2c -c private ups1 .1.3.6.1.4.1.318.1.1.1.2.3.2.0
		SNMPv2-SMI::enterprises.318.1.1.1.2.3.2.0 = Gauge32: 242 (24.2*C)


UPS Serial number:	.1.3.6.1.4.1.318.1.1.1.1.2.3.0		ie: AS1038232403
UPS Part number:	.1.3.6.1.4.1.318.1.1.1.1.2.5.0		ie: SMT1500
UPS Basic type:		.1.3.6.1.4.1.318.1.1.1.1.1.1.0		ie: SmartUPS 1500
UPS Firmware:		.1.3.6.1.4.1.318.1.4.2.4.1.4.1
NMC Serial number:	.1.3.6.1.4.1.318.1.4.2.4.1.2.1
Battery Part Number:	.1.3.6.1.4.1.318.1.1.1.2.2.19.0		ie: RBC7

Estimated runtime:	.1.3.6.1.4.1.318.1.1.1.2.2.3.0		(in ticks [10ms])

UPS Basic State:	.1.3.6.1.4.1.318.1.1.1.4.1.1.0		1'	=>	"Unknown, 2'	=>	"Online, 3'	=>	"On Battery, 4'	=>	"onSmartBoost, 5'	=>	"timedSleeping, 6'	=>	"softwareBypass, 7'	=>	"off, 8'	=>	"rebooting, 9'	=>	"switchedBypass, 10'	=>	"hardwareFailureBypass, 11'	=>	"sleepingUntilPowerReturn, 12'	=>	"onSmartTrim, 13'	=>	"ecoMode, 14'	=>	"hotStandby, 15'	=>	"onBatteryTest, 15'	=>	"emergencyStaticBypass, 17'	=>	"staticBypassStandby, 18'	=>	"powerSavingMode, 19'	=>	"spotMode, 20'	=>	"eConversion
Main UPS outlet state:	.1.3.6.1.4.1.318.1.1.1.12.1.2.1.3.1	1'	=>	"On, 2'	=>	"Off, 3'	=>	"Unknown
Outlet group 1 state:	.1.3.6.1.4.1.318.1.1.1.12.1.2.1.3.2	1'	=>	"On, 2'	=>	"Off, 3'	=>	"Unknown
Battery health:		.1.3.6.1.4.1.318.1.1.1.2.2.4.0		1'	=>	"OK, 2'	=>	"Replacement needed

Last transfer reason:	.1.3.6.1.4.1.318.1.1.1.3.2.5.0		1'	=>	"noTransfer, 2'	=>	"highLineVoltage, 3'	=>	"brownout, 4'	=>	"blackout, 5 = smallMomentarySag, 6'	=>	"deepMomentarySag, 7 = smallMomentarySpike, 8'	=>	"largeMomentarySpike, 9'	=>	"selfTest, 10'	=>	"rateOfVoltageChange
UPS Input Sensitivity:	.1.3.6.1.4.1.318.1.1.1.5.2.7.0		1'	=>	"Auto, 2'	=>	"Low, 3'	=>	"Medium, 4'	=>	"High
Battery state:		.1.3.6.1.4.1.318.1.1.1.2.1.1.0		1'	=>	"unknown, 2'	=>	"batteryNormal, 3'	=>	"batteryLow, 4'	=>	"batteryInFaultCondition

User-set name:		.1.3.6.1.4.1.318.1.1.1.1.1.2.0		8-byte ID string set by the user.
Input Hz in 1/10ths	.1.3.6.1.4.1.318.1.1.1.3.3.4.0		ie: 600'	=>	"60Hz
Input Hz is 1Hz:	.1.3.6.1.4.1.318.1.1.1.3.2.4.0		ie: 60 (Hz)
Output Hz in 1/10ths:	.1.3.6.1.4.1.318.1.1.1.4.2.2.0		ie: 600'	=>	"60Hz
Output Hz is 1Hz:	.1.3.6.1.4.1.318.1.1.1.4.2.2.0		ie: 60 (Hz)
Output in 10 Wh		.1.3.6.1.4.1.318.1.1.1.4.3.6.0		?? guage
High Xfer Volt:		.1.3.6.1.4.1.318.1.1.1.5.2.2.0		127 (vAC)
Low Xfer Volt:		.1.3.6.1.4.1.318.1.1.1.5.2.3.0		106 (vAC)
Input Volt in 1/10v:	.1.3.6.1.4.1.318.1.1.1.3.3.1.0		ie: 1245'	=>	"124.5 vAC
Input Volt:		.1.3.6.1.4.1.318.1.1.1.3.2.1.0		ie: 124 (vAC)
60s Max input in 1/10v:	.1.3.6.1.4.1.318.1.1.1.3.3.2.0		ie: 1245'	=>	"124.5 vAC max seen in last 60sec
60s Max input:		.1.3.6.1.4.1.318.1.1.1.3.2.2.0		ie: 124 (vAC)
60s Min input in 1/10v:	.1.3.6.1.4.1.318.1.1.1.3.3.3.0		ie: 1245'	=>	"124.5 vAC min seen in last 60sec
60s Min input:		.1.3.6.1.4.1.318.1.1.1.3.2.3.0		ie: 124 (vAC)
Output Volt in 1/10v:	.1.3.6.1.4.1.318.1.1.1.4.3.1.0		ie: 1245'	=>	"124.5 vAC
Output Volt:		.1.3.6.1.4.1.318.1.1.1.4.2.1.0		ie: 124 (vAC)
Nominal output volt:	.1.3.6.1.4.1.318.1.1.1.5.2.1.0		ie: 120 (vAC)
Remaining batt 1/10%:	.1.3.6.1.4.1.318.1.1.1.2.3.1.0		ie: 1000'	=>	"100.0% charge
Remaining battery %:	.1.3.6.1.4.1.318.1.1.1.2.2.1.0		ie: 100 (%) charge
AC restore boot delay:	.1.3.6.1.2.1.33.1.2.4.0			Ticks after AC restore before UPS powers on (ie: 1000'	=>	"10 seconds)
UPS Manufacture date:	.1.3.6.1.4.1.318.1.1.1.1.2.2.0		in 'mm/dd/yy' or 'mm/dd/yyyy' format.
Battery replaced date:	.1.3.6.1.4.1.318.1.1.1.2.1.3.0		in 'mm/dd/yy' or 'mm/dd/yyyy' format.
Est. next replace date:	.1.3.6.1.4.1.318.1.1.1.2.2.21.0		in 'mm/dd/yy' or 'mm/dd/yyyy' format.
ASCII state string:	.1.3.6.1.4.1.318.1.1.1.11.1.1.0		64 values; See MIB for values.
Time on batteries:	.1.3.6.1.4.1.318.1.1.1.2.1.2.0		Time in ticks since transfer to batteries (0 if on AC)
Current load in 1/10%:	.1.3.6.1.4.1.318.1.1.1.4.3.3.0		(guage) ie: 58'	=>	"5.8%
Current load in %:	.1.3.6.1.4.1.318.1.1.1.4.2.3.0		(guage) ie: 5 (%)

Temperature units 1:	.1.3.6.1.4.1.318.1.1.10.1.2.2.1.5.1	1'	=>	"C, 2'	=>	"F
Temperature units 2:	.1.3.6.1.4.1.318.1.1.10.1.2.2.1.5.2	1'	=>	"C, 2'	=>	"F
High Temp probe 1:	.1.3.6.1.4.1.318.1.1.10.1.2.2.1.3.1	integer of alarm threshold of UPS probe 1 (C or F set above)
High Temp probe 2:	.1.3.6.1.4.1.318.1.1.10.1.2.2.1.3.2	integer of alarm threshold of UPS probe 2 (C or F set above)
Battery Temp in 1/10*C:	.1.3.6.1.4.1.318.1.1.1.2.3.2.0		ie: 333'	=>	"33.3 *C
Battery Temp in *C	.1.3.6.1.4.1.318.1.1.1.2.2.2.0		ie: 33'	=>	"33 *C
Battery Volt in 1/10v:	.1.3.6.1.4.1.318.1.1.1.2.3.4.0		ie: 271'	=>	"27.1 vDC
Battery Volt:		.1.3.6.1.4.1.318.1.1.1.2.2.8.0		ie: 27 (vDC)

Read lower transfer voltage:
snmpget -v 2c -c private ups1 .1.3.6.1.4.1.318.1.1.1.5.2.3.0
SNMPv2-SMI::enterprises.318.1.1.1.5.2.3.0 = INTEGER: 160

Read upper transfer voltage:
snmpget -v 2c -c private ups1 .1.3.6.1.4.1.318.1.1.1.5.2.2.0
SNMPv2-SMI::enterprises.318.1.1.1.5.2.2.0 = INTEGER: 255



=cut

# NOTE: This is temporary. When the AN::Tools module moves into a standard @INC
#       directory, this will be removed.
BEGIN {
   push @INC, "/var/www/";
};

# Determine this file name.
my $THIS_FILE =  $0;
   $THIS_FILE =~ s/^.*\///;

# Use my modules.
use strict;
use warnings;
use AN::Tools;

# Exit with 1 until this is done
exit(1);

# Disable buffering.
$| = 1;

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		path		=>	{
			log_file		=>	"/var/log/scan_apc_ups.log",
			#log_file		=>	"",
			strings			=>	"/var/www/ScanCore/agents/scan_apc_ups.xml",
			sql			=>	"/var/www/ScanCore/agents/scan_apc_ups.sql",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/var/www/cgi-bin/Data/strings.xml",
		},
		sys		=>	{
			log_level		=>	2,
			log_language		=>	"en_CA",
		},
	}
});

# Read my stuff
$an->Log->level($an->data->{sys}{log_level});
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});
$an->String->read_words({file => $an->data->{path}{strings}});
$an->String->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for
# help.
get_switches($an);
print $an->String->get({key => "scan_apc_ups_message_0001"}), "\n";

# Connect to the database(s).
my $connections = $an->DB->connect_to_databases();
$an->Log->entry({
	log_level	=>	3,
	title_key	=>	"scan_apc_ups_title_0001",
	message_key	=>	"scan_apc_ups_log_0005",
	message_vars	=>	{
		connections	=>	$connections,
	},
	file		=>	$THIS_FILE,
	line		=>	__LINE__,
	language	=>	$an->data->{sys}{log_language},
	log_to		=>	$an->data->{path}{log_file},
});

# Find the UPSes.
find_upses($an);



# Clean up and go away.
nice_exit($an);

###############################################################################
# Functions                                                                   #
###############################################################################

# This looks for APC UPSes.
sub find_upses
{
	my ($an) = @_;
	
	if ($an->data->{switches}{ups})
	{
		# User has specified the UPSes to query.
		foreach my $ups (split/,/, $an->data->{switches}{ups})
		{
			next if not $ups;
		}
	}
	else
	{
		# Read in /etc/hosts and look for anything with 'ups' in the
		# name.
		my $shell_call = "</etc/hosts";
		open (my $file_handle, $shell_call) or 
	}
}

### TODO: Make this a method
# Nicely exits the program.
sub nice_exit
{
	# Close database connections
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		$an->data->{dbh}{$id}->disconnect;
	}
	
	exit(0);
}

### TODO: Move this into AN::Tools
# This collects the command line switches
sub get_switches
{
	my ($an) = @_;
	
	my $last_argument = "";
	foreach my $argument (@ARGV)
	{
		if ($last_argument eq "raw")
		{
			# Don't process anything.
			$an->data->{switches}{raw} .= " $argument";
		}
		elsif ($argument =~ /^-/)
		{
			# If the argument is just '--', appeand everything
			# after it to 'raw'.
			$an->data->{sys}{switch_count}++;
			if ($argument eq "--")
			{
				$last_argument         = "raw";
				$an->data->{switches}{raw} = "";
			}
			else
			{
				($last_argument) = ($argument =~ /^-{1,2}(.*)/)[0];
				if ($last_argument =~ /=/)
				{
					# Break up the variable/value.
					($last_argument, my $value) = (split /=/, $last_argument, 2);
					$an->data->{switches}{$last_argument} = $value;
				}
				else
				{
					$an->data->{switches}{$last_argument} = "#!SET!#";
				}
			}
		}
		else
		{
			if ($last_argument)
			{
				$an->data->{switches}{$last_argument} = $argument;
				$last_argument                    = "";
			}
			else
			{
				# Got a value without an argument.
				$an->data->{switches}{error} = 1;
			}
		}
	}
	# Clean up the initial space added to 'raw'.
	if ($an->data->{switches}{raw})
	{
		$an->data->{switches}{raw} =~ s/^ //;
	}
	
	# Debug
	foreach my $variable (sort {$a cmp $b} keys %{$an->data->{switches}})
	{
		$an->Log->entry({
			log_level	=>	2,
			title_key	=>	"scancore_title_0001",
			message_key	=>	"scancore_log_0010",
			message_vars	=>	{
				variable	=>	$variable,
				value		=>	$an->data->{switches}{$variable},
			},
			file		=>	$THIS_FILE,
			line		=>	__LINE__,
			language	=>	$an->data->{sys}{log_language},
			log_to		=>	$an->data->{path}{log_file},
		});
	}
	
	# If the user has asked for help, print the usage info.
	if (($conf->{switches}{h}) or ($conf->{switches}{help}) or ($conf->{switches}{'?'}))
	{
		print_usage($conf);
		exit(0);
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	
	print $an->String->get({key => "scan_apc_ups_message_0002"}), "\n";

	return(0);
}
