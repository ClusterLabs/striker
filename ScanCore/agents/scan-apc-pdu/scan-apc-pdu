#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released under the terms of the GNU GPL 
# version 2.
#
# ScanCore Scan Agent for APC/Schneider network connected switched PDUs (AP7900* type).
#
# https://alteeve.ca
# 
# Exit Codes:
# 0   - Success
# 1   - Failed to read the number of phases on the PDU.
# 2   - Failed to read the number of outlets on the PDU.
# 
# 255 - The host's UUID isn't in the hosts table yet, ScanCore itself hasn't been run.
# 

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;
use Socket;
no warnings 'recursion';

=cut

OIDs of interest;

State data
.1.3.6.1.4.1.318.1.1.4.1.5.0         = Serial Number							<- Global ID
.1.3.6.1.4.1.318.1.1.4.1.4.0         = Model Number
.1.3.6.1.4.1.318.1.1.4.1.3.0         = Date of manufacture (mm/dd/yyyy, if 'yy' year 2000 = '00')
.1.3.6.1.4.1.318.1.1.4.1.2.0         = Firmware version
.1.3.6.1.4.1.318.1.1.4.1.1.0         = Hardware version (never changes)

Variables
.1.3.6.1.2.1.1.3.0                   = Uptime (in timeticks, 900 = 9 seconds)
.1.3.6.1.4.1.318.1.1.12.1.16.0       = Wattage draw (seems to be for the full device, not per phase)

# Phase info
.1.3.6.1.4.1.318.1.1.12.2.1.1.0      = Max Amperage out per phase
.1.3.6.1.4.1.318.1.1.12.2.1.2.0      = Number of phases on the PDU
.1.3.6.1.4.1.318.1.1.12.2.2.1.1.2.1  = Low amp threshold. (0 = Disabled; No alarm on low power. Any digit is the minimum amperage under which we throw an alert)  (NOTE: last digit is phase number, so .1 == phase 1) 
.1.3.6.1.4.1.318.1.1.12.2.2.1.1.3.1  = High amperage warning threshold. If the power draw exceeds this, throw a warning alert, warn on equal or greater
.1.3.6.1.4.1.318.1.1.12.2.2.1.1.4.1  = High amperage critical threshold. If the power draw exceeds this, throw a critical alert (breaker is about to pop), warn on equal or greater	(NOTE: Default == max amp per phase, we should set it lower, Max - 2?)
.1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.1  = Current Amperage on the phase, in 1/10 Amp (x10 to get Amp)

Port information
.1.3.6.1.4.1.318.1.1.4.4.1.0         = Number of outlets (ie: 8)
.1.3.6.1.4.1.318.1.1.4.4.2.1.2.n     = Pending action on state? (1 = command pending, 2 = no command pending, 3 = unknown. If all ports are '3', power cycle is required. If the all devices on the peer report Power is OK, do so immediately)
.1.3.6.1.4.1.318.1.1.4.4.2.1.3.n     = Current state (read: 1 = on, 2 = off, 4 = unknown --- write: 1 = turn on, 2 = turn off, 3 = cycle (~5s), 5 = on after 'sPDUOutletPowerOnTime' delay, 6 = off after sPDUOutletPowerOffTime delay, 7 = off after sPDUOutletPowerOffTime delay, wait sPDUOutletRebootDuration time, then back on.)
.1.3.6.1.4.1.318.1.1.4.5.2.1.3.n     = Outlet name (default is 'Outlet N'), Can be read or set, max 20 chars.		<- Set this when we map the Anvil! 
.1.3.6.1.4.1.318.1.1.4.5.2.1.2.n     = Power on delay (in seconds), default is '0' seconds.  (-1 = stay off, 0 = on with PDU,  X = number of seconds to wait before powering on)
.1.3.6.1.4.1.318.1.1.4.5.2.1.4.n     = Power off delay (in seconds)                          (-1 = stay on,  0 = off with PDU, X = number of seconds to wait before powering off)
.1.3.6.1.4.1.318.1.1.4.5.2.1.5.n     = Reboot delay (sleep time), default is '5' seconds.
.1.3.6.1.4.1.318.1.1.12.3.5.1.1.3.n  = Phase that this outlet is in

Network data  (NOTE: .1 is the loopback interface, .2 is the physical interface)
.1.3.6.1.2.1.2.2.1.4.2 = MTU size
.1.3.6.1.2.1.2.2.1.5.2 = Link speed (in bps)
.1.3.6.1.2.1.2.2.1.6.2 = MAC address	- This is losing the first nibble... It returns type STRING instead of Hex-STRING, even if -Ox is used. If I point to the APC MIB, it returns OK. This is what we should be using.
.1.3.6.1.6.3.10.2.1.1.0 = MAC address (with some prefix) in hex. Not sure if this is supported on other PDUs though...

=cut

# Disable buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $scancore_directory = ($running_directory =~ /^(.*?)\/agents\/$THIS_FILE$/)[0];

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		path			=>	{
			core_strings		=>	"$scancore_directory/ScanCore.xml",
			# This stores this node's UUID. It is used to track all our sensor data in the 
			# database. If you change this here, change it ScanCore, too.
			host_uuid		=>	"/etc/striker/host.uuid",
			snmpget			=>	"/usr/bin/snmpget",
			snmpset			=>	"/usr/bin/snmpset",
			strings			=>	"$running_directory/$THIS_FILE.xml",
			sql			=>	"$running_directory/$THIS_FILE.sql",
			striker_config		=>	"/etc/striker/striker.conf",
			striker_strings		=>	"/sbin/striker/Data/strings.xml",
			striker_mib		=>	"/sbin/striker/ScanCore/agents/$THIS_FILE/Striker-MIB.txt",
		},
		sys			=>	{
			# This will get set by AN::Tools::DB->connect_to_databases()
			host_uuid_query		=>	"",
			# When a lock is requested, this is set to the time the lock was set. 
			# DB->do_db_write() and DB->do_db_read() will check this and if its age is >50% of
			# scancore::locking::reap_age, it will renew the lock.
			local_lock_active	=>	0,
			sql			=>	[],
		},
		scancore		=>	{
			archive			=>	{
				directory		=>	"/var/ScanCore/archives/",
				division		=>	60000,
				trigger			=>	100000,
				count			=>	50000,
				dump_file_header	=>	"
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = history, pg_catalog;
",
			},
		},
		# These are values the user might set in striker.conf
		'scan-apc-pdu'		=>	{
			disable			=>	0,
			language		=>	"en_CA",
			log_file		=>	"/var/log/ScanCore.log",
			log_level		=>	1,
			log_language		=>	"en_CA",
			log_db_transactions	=>	0,
			# CSV of PDUs to scan. If set, /etc/hosts will not be processed. If not set, hosts
			# will be searched for any entry with 'pdu' in its name and added to this.
			pdus			=>	"",
			# Once parsed, the PDUs will be scanned using this hash where the key is the UPS 
			# name and the value is the IP address.
			pdu			=>	{},
			# Ticks are generally in 10ms increments
			ticks_per_second	=>	100,
			# By default, the critical amperage is the same as the max amperage. If that is the
			# case here, we will subtract this number of amps from the max and use that as our
			# critical warning threshold. So if the max threshold is 12, and the critical 
			# threshold is also 11 or 12, we will drop it to 10. If the critical is set below 10,
			# we won't adjust it at all.
			critical_amps_below_max	=>	2,	
		},
		'oids'		=>	{
			apc_pdu			=>	{
				apc_pdu_serial_number		=>	".1.3.6.1.4.1.318.1.1.4.1.5.0", 
				apc_pdu_model_number		=>	".1.3.6.1.4.1.318.1.1.4.1.4.0", 
				apc_pdu_manufacture_date	=>	".1.3.6.1.4.1.318.1.1.4.1.3.0", 
				apc_pdu_firmware_version	=>	".1.3.6.1.4.1.318.1.1.4.1.2.0", 
				apc_pdu_hardware_version	=>	".1.3.6.1.4.1.318.1.1.4.1.1.0", 
				apc_pdu_mac_address		=>	".1.3.6.1.2.1.2.2.1.6.2", 
				apc_pdu_mtu_size		=>	".1.3.6.1.2.1.2.2.1.4.2", 
				apc_pdu_link_speed		=>	".1.3.6.1.2.1.2.2.1.5.2", 
				apc_pdu_phase_count		=>	".1.3.6.1.4.1.318.1.1.12.2.1.2.0", 
				apc_pdu_outlet_count		=>	".1.3.6.1.4.1.318.1.1.4.4.1.0", 
			},
			apc_pdu_phases		=>	{
				# The phase number will be appended to the OID
				apc_pdu_phase_current_amperage	=>	".1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.", 
				apc_pdu_phase_max_amperage	=>	".1.3.6.1.4.1.318.1.1.12.2.1.1.0",
				### NOTE: These aren't recorded, but they are used for alert triggers.
				phase_low_amp_warning		=>	".1.3.6.1.4.1.318.1.1.12.2.2.1.1.2.1",
				# We'll drop these to be at least 2 Amps below max.
				phase_high_amp_warning		=>	".1.3.6.1.4.1.318.1.1.12.2.2.1.1.3.1",
				# If this is less than 'scan-apc-pdu::critical_amps_below_max' below max, it 
				# will be automatically dropped.
				phase_high_amp_critical		=>	".1.3.6.1.4.1.318.1.1.12.2.2.1.1.4.1",
			},
			apc_pdu_outlets		=>	{
				### The outlet number will be appended to all of these OIDs.
				apc_pdu_outlet_name		=>	".1.3.6.1.4.1.318.1.1.4.5.2.1.3.", 
				apc_pdu_outlet_on_phase		=>	".1.3.6.1.4.1.318.1.1.12.3.5.1.1.3.", 
				# read:  1 = on, 2 = off, 4 = unknown
				# write: 1 = on, 2 = off, 3 = cycle
				apc_pdu_outlet_state		=>	".1.3.6.1.4.1.318.1.1.4.4.2.1.3.", 
			},
			apc_pdu_variables	=>	{
				# This is in ticks, so divide the value by 'scan-apc-pdu::ticks_per_second'
				uptime				=>	".1.3.6.1.2.1.1.3.0",
				total_wattage_draw		=>	".1.3.6.1.4.1.318.1.1.12.1.16.0",
			},
		},
		snmp			=>	{
			community		=>	{
				'read'			=>	"public",
				'write'			=>	"private",
			},
		},
	},
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{'scan-apc-pdu'}{language});
$an->default_log_language($an->data->{'scan-apc-pdu'}{log_language});
$an->default_log_file    ($an->data->{'scan-apc-pdu'}{log_file});

# Set the log level.
$an->Log->level($an->data->{'scan-apc-pdu'}{log_level});
$an->Log->db_transactions(1) if $an->data->{'scan-apc-pdu'}{log_db_transactions};

# Read in the language strings.
$an->Storage->read_words({file => $an->data->{path}{strings}});
$an->Storage->read_words({file => $an->data->{path}{core_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for help.
$an->Get->switches();
$an->Log->adjust_log_level({key => $THIS_FILE});

# Help?
if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	# Help!
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Exit if we're disabled.
if ($an->data->{'scan-apc-pdu'}{disable})
{
	$an->nice_exit({exit_code => 1});
}

print $an->String->get({key => "scan_apc_pdu_message_0001"})."\n";

# I'll need to loop through the DBs and ensure our schema is loaded for each one.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({ log_level => 2, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});

# Make sure this host's UUID is in the 'hosts' table. If the user is running this directly without first
# running ScanCore, it won't be.
if (not $an->DB->verify_host_uuid())
{
	# ScanCore hasn't run, this host isn't in the 'hosts' table.
	$an->Alert->error({title_key => "an_0003", message_key => "scancore_error_0020", message_variables => { uuid => $an->data->{sys}{host_uuid} }, code => 255, file => $THIS_FILE, line => __LINE__});
}

# If we were called with '--prep-db', we'll prep the database schema regardless of whether any pdus are
# found.
if ($an->data->{switches}{'prep-db'})
{
	if ($connections)
	{
		prep_databases($an);
	}
	else
	{
		# Failed
		$an->Log->entry({log_level => 1, message_key => "scancore_warning_0031", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scancore_warning_0031"})."\n";
	}
}

# Find the PDUs.
find_pdus($an);

# Gather details on PDUs. Returns '1' if no PDUs were found.
if (gather_pdu_data($an))
{
	# No PDUs found.
	$an->Log->entry({log_level => 2, message_key => "scan_apc_pdu_message_0003", file => $THIS_FILE, line => __LINE__});
	$an->nice_exit({exit_code => 1});
}

# Do the loading of the schemas and copying data from more up to date DBs if the DB was loaded.
prep_databases($an);

# Archive, if needed.
archive_if_needed($an);

# Look to see if any databases need to be updated.
update_db($an);

die;

# Look for changes.
find_changes($an);

# Process temperatures!
process_temperatures($an);

# Update the database
$an->DB->update_time({file => $THIS_FILE});

# Clean up and go away.
$an->nice_exit({exit_code => 0});

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################


# This looks at each DB's 'updated' table entry to see if any tables are behind. If any are, it will update
# the tables based on the time the last entry was made for a given host.
sub update_db
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "scancore::db_resync_needed", value1 => $an->data->{scancore}{db_resync_needed}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{db_resync_needed})
	{
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Make a note in the databases that we're starting an update and ask it to wait 10 seconds 
		# before returning to give other instances time to finish their scans. (our scans end quickly
		# enough).
		#$an->DB->set_update_db_flag({set => time, 'wait' => 10});
		
		# Update apc_pdu and outlet/phases/variables
		update_db_apc_pdu($an);
		update_db_apc_pdu_outlets($an);
		update_db_apc_pdu_phases($an);
		update_db_apc_pdu_variables($an);
		
		# Release the lock
		$an->DB->locking({release => 1});
		
		# Clear the update flag.
		#$an->DB->set_update_db_flag({set => 0});
	}
	
	return(0);
}

# Update the 'apc_pdu_variables' table.
sub update_db_apc_pdu_variables
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_pdu_variables" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_pdu' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    apc_pdu_variable_uuid, 
    apc_pdu_variable_source_table,
    apc_pdu_variable_source_uuid, 
    apc_pdu_variable_is_temperature, 
    apc_pdu_variable_name, 
    apc_pdu_variable_value, 
    modified_date 
FROM 
    history.apc_pdu_variables 
WHERE 
    apc_pdu_variable_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_pdu_variable_uuid           =         $row->[0];
			my $apc_pdu_variable_source_table   =         $row->[1];
			my $apc_pdu_variable_source_uuid    =         $row->[2];
			my $apc_pdu_variable_is_temperature =         $row->[3];
			my $apc_pdu_variable_name           =         $row->[4];
			my $apc_pdu_variable_value          = defined $row->[5] ? $row->[5] : "NULL";
			my $modified_date                   =         $row->[6];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "apc_pdu_variable_uuid",           value1 => $apc_pdu_variable_uuid, 
				name2 => "apc_pdu_variable_source_table",   value2 => $apc_pdu_variable_source_table, 
				name3 => "apc_pdu_variable_source_uuid",    value3 => $apc_pdu_variable_source_uuid, 
				name4 => "apc_pdu_variable_is_temperature", value4 => $apc_pdu_variable_is_temperature, 
				name5 => "apc_pdu_variable_name",           value5 => $apc_pdu_variable_name, 
				name6 => "apc_pdu_variable_value",          value6 => $apc_pdu_variable_value, 
				name7 => "modified_date",                   value7 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid} = {
				apc_pdu_variable_source_table	=>	$apc_pdu_variable_source_table, 
				apc_pdu_variable_source_uuid	=>	$apc_pdu_variable_source_uuid, 
				apc_pdu_variable_is_temperature	=>	$apc_pdu_variable_is_temperature, 
				apc_pdu_variable_name		=>	$apc_pdu_variable_name, 
				apc_pdu_variable_value		=>	$apc_pdu_variable_value, 
			};
			$an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid} = {
				apc_pdu_variable_source_table	=>	$apc_pdu_variable_source_table, 
				apc_pdu_variable_source_uuid	=>	$apc_pdu_variable_source_uuid, 
				apc_pdu_variable_is_temperature	=>	$apc_pdu_variable_is_temperature, 
				apc_pdu_variable_name		=>	$apc_pdu_variable_name, 
				apc_pdu_variable_value		=>	$apc_pdu_variable_value, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_pdu_variable_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}})
		{
			my $apc_pdu_variable_source_table   = $an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{apc_pdu_variable_source_table};
			my $apc_pdu_variable_source_uuid    = $an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{apc_pdu_variable_source_uuid};
			my $apc_pdu_variable_is_temperature = $an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{apc_pdu_variable_is_temperature};
			my $apc_pdu_variable_name           = $an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{apc_pdu_variable_name};
			my $apc_pdu_variable_value          = $an->data->{db_data}{unified}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{apc_pdu_variable_value};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "apc_pdu_variable_uuid",           value1 => $apc_pdu_variable_uuid, 
				name2 => "apc_pdu_variable_source_table",   value2 => $apc_pdu_variable_source_table, 
				name3 => "apc_pdu_variable_source_uuid",    value3 => $apc_pdu_variable_source_uuid, 
				name4 => "apc_pdu_variable_is_temperature", value4 => $apc_pdu_variable_is_temperature, 
				name5 => "apc_pdu_variable_name",           value5 => $apc_pdu_variable_name, 
				name6 => "apc_pdu_variable_value",          value6 => $apc_pdu_variable_value, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_pdu_variable_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_pdu_variables::apc_pdu_variable_uuid::${apc_pdu_variable_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_pdu_variables::apc_pdu_variable_uuid::${apc_pdu_variable_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_pdu_variables}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_pdu_variables::modified_date::${modified_date}::apc_pdu_variable_uuid::${apc_pdu_variable_uuid}", value1 => $an->data->{db_data}{$id}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_pdu_variables 
SET
    apc_pdu_variable_source_table   = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_table).",
    apc_pdu_variable_source_uuid    = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_uuid).", 
    apc_pdu_variable_is_temperature = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_is_temperature).", 
    apc_pdu_variable_name           = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_name).", 
    apc_pdu_variable_value          = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_value).", 
    modified_date                   = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_pdu_variable_host_uuid      = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    apc_pdu_variable_uuid           = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_pdu_variables 
(
    apc_pdu_variable_host_uuid, 
    apc_pdu_variable_uuid, 
    apc_pdu_variable_source_table, 
    apc_pdu_variable_source_uuid, 
    apc_pdu_variable_is_temperature, 
    apc_pdu_variable_name, 
    apc_pdu_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_pdu_variable_uuid' before, so it is just a question of 
					# whether the entry for the current timestamp exists in the history 
					# schema.
					if (not $an->data->{db_data}{$id}{apc_pdu_variables}{modified_date}{$modified_date}{apc_pdu_variable_uuid}{$apc_pdu_variable_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_pdu_variables 
(
    apc_pdu_variable_host_uuid, 
    apc_pdu_variable_uuid, 
    apc_pdu_variable_source_table, 
    apc_pdu_variable_source_uuid, 
    apc_pdu_variable_is_temperature, 
    apc_pdu_variable_name, 
    apc_pdu_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_pdu_variable_uuid?
			} # foreach my $id 
		} # foreach my $apc_pdu_variable_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_pdu_phases' table.
sub update_db_apc_pdu_phases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_pdu_phases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_pdu' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    apc_pdu_phase_uuid, 
    apc_pdu_phase_apc_pdu_uuid,
    apc_pdu_phase_number, 
    apc_pdu_phase_current_amperage, 
    apc_pdu_phase_max_amperage, 
    apc_pdu_phase_note, 
    modified_date 
FROM 
    history.apc_pdu_phases 
WHERE 
    apc_pdu_phase_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_pdu_phase_uuid             =         $row->[0];
			my $apc_pdu_phase_apc_pdu_uuid     =         $row->[1];
			my $apc_pdu_phase_number           =         $row->[2];
			my $apc_pdu_phase_current_amperage =         $row->[3];
			my $apc_pdu_phase_max_amperage     = defined $row->[4] ? $row->[4] : "NULL";
			my $apc_pdu_phase_note             = defined $row->[5] ? $row->[5] : "NULL";
			my $modified_date                  =         $row->[6];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "apc_pdu_phase_uuid",             value1 => $apc_pdu_phase_uuid, 
				name2 => "apc_pdu_phase_apc_pdu_uuid",     value2 => $apc_pdu_phase_apc_pdu_uuid, 
				name3 => "apc_pdu_phase_number",           value3 => $apc_pdu_phase_number, 
				name4 => "apc_pdu_phase_current_amperage", value4 => $apc_pdu_phase_current_amperage, 
				name5 => "apc_pdu_phase_max_amperage",     value5 => $apc_pdu_phase_max_amperage, 
				name6 => "apc_pdu_phase_note",             value6 => $apc_pdu_phase_note, 
				name7 => "modified_date",                  value7 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid} = {
				apc_pdu_phase_apc_pdu_uuid	=>	$apc_pdu_phase_apc_pdu_uuid, 
				apc_pdu_phase_number		=>	$apc_pdu_phase_number, 
				apc_pdu_phase_current_amperage	=>	$apc_pdu_phase_current_amperage, 
				apc_pdu_phase_max_amperage	=>	$apc_pdu_phase_max_amperage, 
				apc_pdu_phase_note		=>	$apc_pdu_phase_note, 
			};
			$an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid} = {
				apc_pdu_phase_apc_pdu_uuid	=>	$apc_pdu_phase_apc_pdu_uuid, 
				apc_pdu_phase_number		=>	$apc_pdu_phase_number, 
				apc_pdu_phase_current_amperage	=>	$apc_pdu_phase_current_amperage, 
				apc_pdu_phase_max_amperage	=>	$apc_pdu_phase_max_amperage, 
				apc_pdu_phase_note		=>	$apc_pdu_phase_note, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_pdu_phase_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}})
		{
			my $apc_pdu_phase_apc_pdu_uuid     = $an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{apc_pdu_phase_apc_pdu_uuid};
			my $apc_pdu_phase_number           = $an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{apc_pdu_phase_number};
			my $apc_pdu_phase_current_amperage = $an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{apc_pdu_phase_current_amperage};
			my $apc_pdu_phase_max_amperage     = $an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{apc_pdu_phase_max_amperage};
			my $apc_pdu_phase_note             = $an->data->{db_data}{unified}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{apc_pdu_phase_note};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "apc_pdu_phase_uuid",             value1 => $apc_pdu_phase_uuid, 
				name2 => "apc_pdu_phase_apc_pdu_uuid",     value2 => $apc_pdu_phase_apc_pdu_uuid, 
				name3 => "apc_pdu_phase_number",           value3 => $apc_pdu_phase_number, 
				name4 => "apc_pdu_phase_current_amperage", value4 => $apc_pdu_phase_current_amperage, 
				name5 => "apc_pdu_phase_max_amperage",     value5 => $apc_pdu_phase_max_amperage, 
				name6 => "apc_pdu_phase_note",             value6 => $apc_pdu_phase_note, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_pdu_phase_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_pdu_phases::apc_pdu_phase_uuid::${apc_pdu_phase_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_pdu_phases::apc_pdu_phase_uuid::${apc_pdu_phase_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_pdu_phases}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_pdu_phases::modified_date::${modified_date}::apc_pdu_phase_uuid::${apc_pdu_phase_uuid}", value1 => $an->data->{db_data}{$id}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_pdu_phases 
SET
    apc_pdu_phase_apc_pdu_uuid     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_apc_pdu_uuid).",
    apc_pdu_phase_number           = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_number).", 
    apc_pdu_phase_current_amperage = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_current_amperage).", 
    apc_pdu_phase_max_amperage     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_max_amperage).", 
    apc_pdu_phase_note             = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_note).", 
    modified_date                  = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_pdu_phase_host_uuid        = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    apc_pdu_phase_uuid             = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_pdu_phases 
(
    apc_pdu_phase_host_uuid, 
    apc_pdu_phase_uuid, 
    apc_pdu_phase_apc_pdu_uuid, 
    apc_pdu_phase_number, 
    apc_pdu_phase_current_amperage, 
    apc_pdu_phase_max_amperage, 
    apc_pdu_phase_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_current_amperage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_max_amperage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_pdu_phase_uuid' before, so it is just a question of 
					# whether the entry for the current timestamp exists in the history 
					# schema.
					if (not $an->data->{db_data}{$id}{apc_pdu_phases}{modified_date}{$modified_date}{apc_pdu_phase_uuid}{$apc_pdu_phase_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_pdu_phases 
(
    apc_pdu_phase_host_uuid, 
    apc_pdu_phase_uuid, 
    apc_pdu_phase_apc_pdu_uuid, 
    apc_pdu_phase_number, 
    apc_pdu_phase_current_amperage, 
    apc_pdu_phase_max_amperage, 
    apc_pdu_phase_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_current_amperage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_max_amperage).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_pdu_phase_uuid?
			} # foreach my $id 
		} # foreach my $apc_pdu_phase_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_pdu_outlets' table.
sub update_db_apc_pdu_outlets
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_pdu_outlets" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_pdu' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    apc_pdu_outlet_uuid, 
    apc_pdu_outlet_apc_pdu_uuid,
    apc_pdu_outlet_number, 
    apc_pdu_outlet_name, 
    apc_pdu_outlet_on_phase, 
    apc_pdu_outlet_state, 
    apc_pdu_outlet_note, 
    modified_date 
FROM 
    history.apc_pdu_outlets 
WHERE 
    apc_pdu_outlet_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_pdu_outlet_uuid         =         $row->[0];
			my $apc_pdu_outlet_apc_pdu_uuid =         $row->[1];
			my $apc_pdu_outlet_number       =         $row->[2];
			my $apc_pdu_outlet_name         = defined $row->[3] ? $row->[3] : "NULL";
			my $apc_pdu_outlet_on_phase     =         $row->[4];
			my $apc_pdu_outlet_state        =         $row->[5];
			my $apc_pdu_outlet_note         = defined $row->[6] ? $row->[6] : "NULL";
			my $modified_date               =         $row->[7];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0008", message_variables => {
				name1 => "apc_pdu_outlet_uuid",         value1 => $apc_pdu_outlet_uuid, 
				name2 => "apc_pdu_outlet_apc_pdu_uuid", value2 => $apc_pdu_outlet_apc_pdu_uuid, 
				name3 => "apc_pdu_outlet_number",       value3 => $apc_pdu_outlet_number, 
				name4 => "apc_pdu_outlet_name",         value4 => $apc_pdu_outlet_name, 
				name5 => "apc_pdu_outlet_on_phase",     value5 => $apc_pdu_outlet_on_phase, 
				name6 => "apc_pdu_outlet_state",        value6 => $apc_pdu_outlet_state, 
				name7 => "apc_pdu_outlet_note",         value7 => $apc_pdu_outlet_note, 
				name8 => "modified_date",               value8 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid} = {
				apc_pdu_outlet_apc_pdu_uuid	=>	$apc_pdu_outlet_apc_pdu_uuid, 
				apc_pdu_outlet_number		=>	$apc_pdu_outlet_number, 
				apc_pdu_outlet_name		=>	$apc_pdu_outlet_name, 
				apc_pdu_outlet_on_phase		=>	$apc_pdu_outlet_on_phase, 
				apc_pdu_outlet_state		=>	$apc_pdu_outlet_state, 
				apc_pdu_outlet_note		=>	$apc_pdu_outlet_note, 
			};
			$an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid} = {
				apc_pdu_outlet_apc_pdu_uuid	=>	$apc_pdu_outlet_apc_pdu_uuid, 
				apc_pdu_outlet_number		=>	$apc_pdu_outlet_number, 
				apc_pdu_outlet_name		=>	$apc_pdu_outlet_name, 
				apc_pdu_outlet_on_phase		=>	$apc_pdu_outlet_on_phase, 
				apc_pdu_outlet_state		=>	$apc_pdu_outlet_state, 
				apc_pdu_outlet_note		=>	$apc_pdu_outlet_note, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_pdu_outlet_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}})
		{
			my $apc_pdu_outlet_apc_pdu_uuid = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_apc_pdu_uuid};
			my $apc_pdu_outlet_number       = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_number};
			my $apc_pdu_outlet_name         = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_name};
			my $apc_pdu_outlet_on_phase     = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_on_phase};
			my $apc_pdu_outlet_state        = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_state};
			my $apc_pdu_outlet_note         = $an->data->{db_data}{unified}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{apc_pdu_outlet_note};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "apc_pdu_outlet_uuid",         value1 => $apc_pdu_outlet_uuid, 
				name2 => "apc_pdu_outlet_apc_pdu_uuid", value2 => $apc_pdu_outlet_apc_pdu_uuid, 
				name3 => "apc_pdu_outlet_number",       value3 => $apc_pdu_outlet_number, 
				name4 => "apc_pdu_outlet_name",         value4 => $apc_pdu_outlet_name, 
				name5 => "apc_pdu_outlet_on_phase",     value5 => $apc_pdu_outlet_on_phase, 
				name6 => "apc_pdu_outlet_state",        value6 => $apc_pdu_outlet_state, 
				name7 => "apc_pdu_outlet_note",         value7 => $apc_pdu_outlet_note, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_pdu_outlet_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_pdu_outlets::apc_pdu_outlet_uuid::${apc_pdu_outlet_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_pdu_outlets::apc_pdu_outlet_uuid::${apc_pdu_outlet_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_pdu_outlets}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_pdu_outlets::modified_date::${modified_date}::apc_pdu_outlet_uuid::${apc_pdu_outlet_uuid}", value1 => $an->data->{db_data}{$id}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_pdu_outlets 
SET
    apc_pdu_outlet_apc_pdu_uuid = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_apc_pdu_uuid).",
    apc_pdu_outlet_number       = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_number).", 
    apc_pdu_outlet_name         = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_name).", 
    apc_pdu_outlet_on_phase     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_on_phase).", 
    apc_pdu_outlet_state        = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_state).", 
    apc_pdu_outlet_note         = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_note).", 
    modified_date               = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_pdu_outlet_host_uuid    = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    apc_pdu_outlet_uuid         = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_pdu_outlets 
(
    apc_pdu_outlet_host_uuid, 
    apc_pdu_outlet_uuid, 
    apc_pdu_outlet_apc_pdu_uuid, 
    apc_pdu_outlet_number, 
    apc_pdu_outlet_name, 
    apc_pdu_outlet_on_phase, 
    apc_pdu_outlet_state, 
    apc_pdu_outlet_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_on_phase).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_pdu_outlet_uuid' before, so it is just a question of 
					# whether the entry for the current timestamp exists in the history 
					# schema.
					if (not $an->data->{db_data}{$id}{apc_pdu_outlets}{modified_date}{$modified_date}{apc_pdu_outlet_uuid}{$apc_pdu_outlet_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_pdu_outlets 
(
    apc_pdu_outlet_host_uuid, 
    apc_pdu_outlet_uuid, 
    apc_pdu_outlet_apc_pdu_uuid, 
    apc_pdu_outlet_number, 
    apc_pdu_outlet_name, 
    apc_pdu_outlet_on_phase, 
    apc_pdu_outlet_state, 
    apc_pdu_outlet_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_on_phase).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_state).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_pdu_outlet_uuid?
			} # foreach my $id 
		} # foreach my $apc_pdu_outlet_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'apc_pdu' table.
sub update_db_apc_pdu
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_apc_pdu" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'apc_pdu' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    apc_pdu_uuid, 
    apc_pdu_serial_number, 
    apc_pdu_model_number, 
    apc_pdu_manufacture_date, 
    apc_pdu_firmware_version, 
    apc_pdu_hardware_version, 
    apc_pdu_ipv4_address, 
    apc_pdu_mac_address, 
    apc_pdu_mtu_size, 
    apc_pdu_link_speed, 
    apc_pdu_phase_count, 
    apc_pdu_outlet_count, 
    apc_pdu_note, 
    modified_date 
FROM 
    history.apc_pdu 
WHERE 
    apc_pdu_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $apc_pdu_uuid             =         $row->[0];
			my $apc_pdu_serial_number    =         $row->[1];
			my $apc_pdu_model_number     =         $row->[2];
			my $apc_pdu_manufacture_date = defined $row->[3]  ? $row->[3]  : "NULL";
			my $apc_pdu_firmware_version = defined $row->[4]  ? $row->[4]  : "NULL";
			my $apc_pdu_hardware_version = defined $row->[5]  ? $row->[5]  : "NULL";
			my $apc_pdu_ipv4_address     =         $row->[6];
			my $apc_pdu_mac_address      =         $row->[7];
			my $apc_pdu_mtu_size         =         $row->[8];
			my $apc_pdu_link_speed       =         $row->[9];
			my $apc_pdu_phase_count      =         $row->[10];
			my $apc_pdu_outlet_count     =         $row->[11];
			my $apc_pdu_note             = defined $row->[12] ? $row->[12] : "NULL";
			my $modified_date            =         $row->[13];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0014", message_variables => {
				name1  => "apc_pdu_uuid",             value1  => $apc_pdu_uuid, 
				name2  => "apc_pdu_serial_number",    value2  => $apc_pdu_serial_number, 
				name3  => "apc_pdu_model_number",     value3  => $apc_pdu_model_number, 
				name4  => "apc_pdu_manufacture_date", value4  => $apc_pdu_manufacture_date, 
				name5  => "apc_pdu_firmware_version", value5  => $apc_pdu_firmware_version, 
				name6  => "apc_pdu_hardware_version", value6  => $apc_pdu_hardware_version, 
				name7  => "apc_pdu_ipv4_address",     value7  => $apc_pdu_ipv4_address, 
				name8  => "apc_pdu_mac_address",      value8  => $apc_pdu_mac_address, 
				name9  => "apc_pdu_mtu_size",         value9  => $apc_pdu_mtu_size, 
				name10 => "apc_pdu_link_speed",       value10 => $apc_pdu_link_speed, 
				name11 => "apc_pdu_phase_count",      value11 => $apc_pdu_phase_count, 
				name12 => "apc_pdu_outlet_count",     value12 => $apc_pdu_outlet_count, 
				name13 => "apc_pdu_note",             value13 => $apc_pdu_note, 
				name14 => "modified_date",            value14 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid} = {
				apc_pdu_serial_number		=>	$apc_pdu_serial_number, 
				apc_pdu_model_number		=>	$apc_pdu_model_number, 
				apc_pdu_manufacture_date	=>	$apc_pdu_manufacture_date, 
				apc_pdu_firmware_version	=>	$apc_pdu_firmware_version, 
				apc_pdu_hardware_version	=>	$apc_pdu_hardware_version, 
				apc_pdu_ipv4_address		=>	$apc_pdu_ipv4_address, 
				apc_pdu_mac_address		=>	$apc_pdu_mac_address, 
				apc_pdu_mtu_size		=>	$apc_pdu_mtu_size, 
				apc_pdu_link_speed		=>	$apc_pdu_link_speed, 
				apc_pdu_phase_count		=>	$apc_pdu_phase_count, 
				apc_pdu_outlet_count		=>	$apc_pdu_outlet_count, 
				apc_pdu_note			=>	$apc_pdu_note, 
			};
			$an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid} = {
				apc_pdu_serial_number		=>	$apc_pdu_serial_number, 
				apc_pdu_model_number		=>	$apc_pdu_model_number, 
				apc_pdu_manufacture_date	=>	$apc_pdu_manufacture_date, 
				apc_pdu_firmware_version	=>	$apc_pdu_firmware_version, 
				apc_pdu_hardware_version	=>	$apc_pdu_hardware_version, 
				apc_pdu_ipv4_address		=>	$apc_pdu_ipv4_address, 
				apc_pdu_mac_address		=>	$apc_pdu_mac_address, 
				apc_pdu_mtu_size		=>	$apc_pdu_mtu_size, 
				apc_pdu_link_speed		=>	$apc_pdu_link_speed, 
				apc_pdu_phase_count		=>	$apc_pdu_phase_count, 
				apc_pdu_outlet_count		=>	$apc_pdu_outlet_count, 
				apc_pdu_note			=>	$apc_pdu_note, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{apc_pdu}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $apc_pdu_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}})
		{
			my $apc_pdu_serial_number    = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_serial_number};
			my $apc_pdu_model_number     = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_model_number};
			my $apc_pdu_manufacture_date = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_manufacture_date};
			my $apc_pdu_firmware_version = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_firmware_version};
			my $apc_pdu_hardware_version = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_hardware_version};
			my $apc_pdu_ipv4_address     = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_ipv4_address};
			my $apc_pdu_mac_address      = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_mac_address};
			my $apc_pdu_mtu_size         = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_mtu_size};
			my $apc_pdu_link_speed       = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_link_speed};
			my $apc_pdu_phase_count      = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_phase_count};
			my $apc_pdu_outlet_count     = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_outlet_count};
			my $apc_pdu_note             = $an->data->{db_data}{unified}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}{apc_pdu_note};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0013", message_variables => {
				name1  => "apc_pdu_uuid",             value1  => $apc_pdu_uuid, 
				name2  => "apc_pdu_serial_number",    value2  => $apc_pdu_serial_number, 
				name3  => "apc_pdu_model_number",     value3  => $apc_pdu_model_number, 
				name4  => "apc_pdu_manufacture_date", value4  => $apc_pdu_manufacture_date, 
				name5  => "apc_pdu_firmware_version", value5  => $apc_pdu_firmware_version, 
				name6  => "apc_pdu_hardware_version", value6  => $apc_pdu_hardware_version, 
				name7  => "apc_pdu_ipv4_address",     value7  => $apc_pdu_ipv4_address, 
				name8  => "apc_pdu_mac_address",      value8  => $apc_pdu_mac_address, 
				name9  => "apc_pdu_mtu_size",         value9  => $apc_pdu_mtu_size, 
				name10 => "apc_pdu_link_speed",       value10 => $apc_pdu_link_speed, 
				name11 => "apc_pdu_phase_count",      value11 => $apc_pdu_phase_count, 
				name12 => "apc_pdu_outlet_count",     value12 => $apc_pdu_outlet_count, 
				name13 => "apc_pdu_note",             value13 => $apc_pdu_note, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'apc_pdu_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::apc_pdu::apc_pdu_uuid::${apc_pdu_uuid}::seen", value1 => $an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::apc_pdu::apc_pdu_uuid::${apc_pdu_uuid}::exists", value1 => $an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{apc_pdu}{apc_pdu_uuid}{$apc_pdu_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::apc_pdu::modified_date::${modified_date}::apc_pdu_uuid::${apc_pdu_uuid}", value1 => $an->data->{db_data}{$id}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.apc_pdu
SET
    apc_pdu_serial_number    = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_serial_number).", 
    apc_pdu_model_number     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_model_number).", 
    apc_pdu_manufacture_date = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_manufacture_date).", 
    apc_pdu_firmware_version = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_firmware_version).", 
    apc_pdu_hardware_version = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_hardware_version).", 
    apc_pdu_ipv4_address     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_ipv4_address).", 
    apc_pdu_mac_address      = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mac_address).", 
    apc_pdu_mtu_size         = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mtu_size).", 
    apc_pdu_link_speed       = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_link_speed).", 
    apc_pdu_phase_count      = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_count).", 
    apc_pdu_outlet_count     = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_count).", 
    apc_pdu_note             = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_note).", 
    modified_date            = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    apc_pdu_host_uuid        = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    apc_pdu_uuid             = ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.apc_pdu
(
    apc_pdu_host_uuid, 
    apc_pdu_uuid, 
    apc_pdu_serial_number, 
    apc_pdu_model_number, 
    apc_pdu_manufacture_date, 
    apc_pdu_firmware_version, 
    apc_pdu_hardware_version, 
    apc_pdu_ipv4_address, 
    apc_pdu_mac_address, 
    apc_pdu_mtu_size, 
    apc_pdu_link_speed, 
    apc_pdu_phase_count, 
    apc_pdu_outlet_count, 
    apc_pdu_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_model_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_hardware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_ipv4_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mac_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mtu_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_link_speed).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_count).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_count).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'apc_pdu_uuid' before, so it is just a question of 
					# whether the entry for the current timestamp exists in the history 
					# schema.
					if (not $an->data->{db_data}{$id}{apc_pdu}{modified_date}{$modified_date}{apc_pdu_uuid}{$apc_pdu_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.apc_pdu
(
    apc_pdu_host_uuid, 
    apc_pdu_uuid, 
    apc_pdu_serial_number, 
    apc_pdu_model_number, 
    apc_pdu_manufacture_date, 
    apc_pdu_firmware_version, 
    apc_pdu_hardware_version, 
    apc_pdu_ipv4_address, 
    apc_pdu_mac_address, 
    apc_pdu_mtu_size, 
    apc_pdu_link_speed, 
    apc_pdu_phase_count, 
    apc_pdu_outlet_count, 
    apc_pdu_note, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_model_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_manufacture_date).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_hardware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_ipv4_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mac_address).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_mtu_size).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_link_speed).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_phase_count).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_outlet_count).", 
    ".$an->data->{sys}{use_db_fh}->quote($apc_pdu_note).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen apc_pdu_uuid?
			} # foreach my $id 
		} # foreach my $apc_pdu_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# This calls each UPS, first to get the model number and update the OIDs to use if needed, then gathers the 
# information from the UPS.
sub gather_pdu_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "gather_pdu_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will flip to 0 if any PDUs are reached.
	my $no_pdu_found = 1;
	foreach my $pdu_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-pdu'}{pdu}})
	{
		my $pdu_ip = $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "pdu_name", value1 => $pdu_name,
			name2 => "pdu_ip",   value2 => $pdu_ip,
		}, file => $THIS_FILE, line => __LINE__});
		
		# Can I ping it?
		$an->data->{pdu}{$pdu_name}{ip} = $pdu_ip;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "pdu::${pdu_name}::ip", value1 => $an->data->{pdu}{$pdu_name}{ip}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $serial_number = "";
		
		# This returns '1' if it was pingable, '0' if not.
		my ($pinged) = $an->Check->ping({ping => $pdu_ip});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "pinged", value1 => $pinged, 
		}, file => $THIS_FILE, line => __LINE__});
		if (not $pinged)
		{
			# Nope :(
			$an->data->{pdu}{$pdu_name}{access} = 0;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "pdu::${pdu_name}::access", value1 => $an->data->{pdu}{$pdu_name}{access}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Alert the user, if this is the first time it was lost.
			my $set = $an->Alert->check_alert_sent({
				type			=>	"warning",
				alert_sent_by		=>	$THIS_FILE,
				alert_record_locator	=>	$pdu_name,
				alert_name		=>	"apc_pdu_communication_lost",
				modified_date		=>	$an->data->{sys}{db_timestamp},
			});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "set", value1 => $set, 
			}, file => $THIS_FILE, line => __LINE__});
			if ($set)
			{
				# This is a new loss of comms.
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_title_key		=>	"an_alert_title_0004",
					alert_message_key	=>	"scan_apc_pdu_message_0004",
					alert_message_variables	=>	{
						pdu_name		=>	$pdu_name,
					},
				});
			}
		}
		else
		{
			# Yup!
			$serial_number = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_serial_number});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "serial_number", value1 => $serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record the SN, mark that we accessed it and create a look-up for SN to name
			$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_serial_number} = $serial_number;
			$an->data->{pdu}{$pdu_name}{access}                         = 1;
			$an->data->{serial_to_name}{$serial_number}                 = $pdu_name;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "pdu::${pdu_name}::apc_pdu::apc_pdu_serial_number", value1 => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_serial_number}, 
			}, file => $THIS_FILE, line => __LINE__});

			
			# If I had previously lost this UPS, clear the alert and let the user know we're 
			# back.
			my $cleared = $an->Alert->check_alert_sent({
				type			=>	"clear",
				alert_sent_by		=>	$THIS_FILE,
				alert_record_locator	=>	$pdu_name,
				alert_name		=>	"apc_pdu_communication_lost",
				modified_date		=>	$an->data->{sys}{db_timestamp},
			});
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cleared", value1 => $cleared, 
			}, file => $THIS_FILE, line => __LINE__});
			if ($cleared)
			{
				# There was an alert and it has now been cleared.
				$an->Alert->register_alert({
					alert_level		=>	"warning", 
					alert_agent_name	=>	$THIS_FILE,
					alert_title_key		=>	"an_alert_title_0006",
					alert_message_key	=>	"scan_apc_pdu_message_0005",
					alert_message_variables	=>	{
						pdu_name		=>	$pdu_name,
					},
				});
			}
		}
		
		# If I got the serial number, I found the PDU.
		next if not $an->data->{pdu}{$pdu_name}{access};
		
		# If I am still alive, I've found at least one PDU.
		$no_pdu_found = 0;
		
		# Now that I can trust my OIDs, lets start gathering data! Keep track of how long it took to
		# query the OIDs.
		my $read_start_time = time;
		$an->Log->entry({log_level => 2, message_key => "scan_apc_ups_log_0001", message_variables => { pdu => $pdu_name }, file => $THIS_FILE, line => __LINE__});
		
		#############################################################################################
		# Base PDU info                                                                             #
		#############################################################################################
		
		# Get the base PDU info.
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_model_number}     =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_model_number});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_firmware_version} =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_firmware_version});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_hardware_version} =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_hardware_version});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_mac_address}      =  lc(read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_mac_address}, $an->data->{path}{striker_mib}));
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_mac_address}      =~ s/ /:/g;
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_mtu_size}         =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_mtu_size});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_link_speed}       =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_link_speed});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_phase_count}      =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_phase_count});
		$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_outlet_count}     =  read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu}{apc_pdu_outlet_count});
		
		# These change often and will go into the 'variables' table
		$an->data->{pdu}{$pdu_name}{apc_pdu_variables}{uptime}             = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_variables}{uptime});
		$an->data->{pdu}{$pdu_name}{apc_pdu_variables}{total_wattage_draw} = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_variables}{total_wattage_draw});
		
		# These are used later for checking the state of the phases. They are not stored in the database.
		$an->data->{pdu}{$pdu_name}{amperage}{maximum}       = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_phases}{apc_pdu_phase_max_amperage});
		$an->data->{pdu}{$pdu_name}{amperage}{low_warning}   = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_phases}{phase_low_amp_warning});
		$an->data->{pdu}{$pdu_name}{amperage}{high_warning}  = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_phases}{phase_high_amp_warning});
		$an->data->{pdu}{$pdu_name}{amperage}{high_critical} = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $an->data->{oids}{apc_pdu_phases}{phase_high_amp_critical});
		
		$an->Log->entry({log_level => 2, message_key => "an_variables_0014", message_variables => {
			name1  => "pdu::${pdu_name}::apc_pdu::apc_pdu_model_number",         value1  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_model_number}, 
			name2  => "pdu::${pdu_name}::apc_pdu::apc_pdu_firmware_version",     value2  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_firmware_version}, 
			name3  => "pdu::${pdu_name}::apc_pdu::apc_pdu_hardware_version",     value3  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_hardware_version}, 
			name4  => "pdu::${pdu_name}::apc_pdu::apc_pdu_mac_address",          value4  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_mac_address}, 
			name5  => "pdu::${pdu_name}::apc_pdu::apc_pdu_mtu_size",             value5  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_mtu_size}, 
			name6  => "pdu::${pdu_name}::apc_pdu::apc_pdu_link_speed",           value6  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_link_speed}, 
			name7  => "pdu::${pdu_name}::apc_pdu::apc_pdu_phase_count",          value7  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_phase_count}, 
			name8  => "pdu::${pdu_name}::apc_pdu::apc_pdu_outlet_count",         value8  => $an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_outlet_count}, 
			name9  => "pdu::${pdu_name}::apc_pdu_variables::uptime",             value9  => $an->data->{pdu}{$pdu_name}{apc_pdu_variables}{uptime}, 
			name10 => "pdu::${pdu_name}::apc_pdu_variables::total_wattage_draw", value10 => $an->data->{pdu}{$pdu_name}{apc_pdu_variables}{total_wattage_draw}, 
			name11 => "pdu::${pdu_name}::amperage::maximum",                     value11 => $an->data->{pdu}{$pdu_name}{amperage}{maximum}, 
			name12 => "pdu::${pdu_name}::amperage::low_warning",                 value12 => $an->data->{pdu}{$pdu_name}{amperage}{low_warning}, 
			name13 => "pdu::${pdu_name}::amperage::high_warning",                value13 => $an->data->{pdu}{$pdu_name}{amperage}{high_warning}, 
			name14 => "pdu::${pdu_name}::amperage::high_critical",               value14 => $an->data->{pdu}{$pdu_name}{amperage}{high_critical}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		### TODO: We should probably sanity check the various values. Error or set?
		
		# If the (high critical amperage + 'scan-apc-pdu::critical_amps_below_max') > maximum 
		# amperage, we'll set the critical warning level to be 
		# (maximum - 'scan-apc-pdu::critical_amps_below_max')
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1  => "scan-apc-pdu::critical_amps_below_max", value1  => $an->data->{'scan-apc-pdu'}{critical_amps_below_max}, 
		}, file => $THIS_FILE, line => __LINE__});
		if (($an->data->{pdu}{$pdu_name}{amperage}{high_critical} + $an->data->{'scan-apc-pdu'}{critical_amps_below_max}) > $an->data->{pdu}{$pdu_name}{amperage}{maximum})
		{
			$an->data->{pdu}{$pdu_name}{amperage}{high_critical} = $an->data->{pdu}{$pdu_name}{amperage}{maximum} - $an->data->{'scan-apc-pdu'}{critical_amps_below_max};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1  => "pdu::${pdu_name}::amperage::high_critical", value1  => $an->data->{pdu}{$pdu_name}{amperage}{high_critical}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Read the phase data
		if ($an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_phase_count} !~ /^\d+$/)
		{
			### TODO: Should this be an error?
			print "Failed to read the number of phases for the PDU: [$pdu_name]\n";
			exit(1);
		}
		foreach my $phase (1..$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_phase_count})
		{
			# Stick the phase onto the end of the OID.
			my $oid = $an->data->{oids}{apc_pdu_phases}{apc_pdu_phase_current_amperage}.$phase;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "phase", value1 => $phase, 
				name2 => "oid",   value2 => $oid, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Read the OID
			$an->data->{pdu}{$pdu_name}{apc_pdu_phases}{apc_pdu_phase_current_amperage} = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $oid);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1  => "pdu::${pdu_name}::apc_pdu_phases::apc_pdu_phase_current_amperage", value1  => $an->data->{pdu}{$pdu_name}{apc_pdu_phases}{apc_pdu_phase_current_amperage}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Read the outlet data
		if ($an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_outlet_count} !~ /^\d+$/)
		{
			### TODO: Should this be an error?
			print "Failed to read the number of outlets for the PDU: [$pdu_name]\n";
			exit(2);
		}
		foreach my $outlet (1..$an->data->{pdu}{$pdu_name}{apc_pdu}{apc_pdu_outlet_count})
		{
			# Stick the outlet onto the end of the OIDs.
			my $outlet_name_oid  = $an->data->{oids}{apc_pdu_outlets}{apc_pdu_outlet_name}.$outlet;
			my $outlet_phase_oid = $an->data->{oids}{apc_pdu_outlets}{apc_pdu_outlet_on_phase}.$outlet;
			my $outlet_state_oid = $an->data->{oids}{apc_pdu_outlets}{apc_pdu_outlet_state}.$outlet;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "outlet_name_oid",  value1 => $outlet_name_oid, 
				name2 => "outlet_phase_oid", value2 => $outlet_phase_oid, 
				name3 => "outlet_state_oid", value3 => $outlet_state_oid, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Read the OID
			$an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_name}     = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $outlet_name_oid);
			$an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_on_phase} = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $outlet_phase_oid);
			$an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_state}    = read_oid($an, $an->data->{pdu}{$pdu_name}{ip}, $outlet_state_oid);
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "pdu::${pdu_name}::apc_pdu_outlets::apc_pdu_outlet_name",     value1 => $an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_name}, 
				name2 => "pdu::${pdu_name}::apc_pdu_outlets::apc_pdu_outlet_on_phase", value2 => $an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_on_phase}, 
				name3 => "pdu::${pdu_name}::apc_pdu_outlets::apc_pdu_outlet_state",    value3 => $an->data->{pdu}{$pdu_name}{apc_pdu_outlets}{apc_pdu_outlet_state}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return($no_pdu_found);
}

# This will archive stuff in the 'history' schema, if needed.
sub archive_if_needed
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "archive_if_needed" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the 'trigger' is '0', archiving is disabled.
	if (not $an->data->{scancore}{archive}{trigger})
	{
		return(1);
	}
	
	### NOTE: If a ScanCore db server was offline when an archive ran, when it returns, it's records will
	###       sync back, triggering a sooner-than-expected subsequent archive. This shouldn't happen 
	###       often, and the complexity of tracking archive dates is such that we'll not try to account
	###       for these cases. 
	### TODO: What we can do later is, when we write the restore stuff, build in a dedupe function.
	
	### Process:
	# 1. Count the records in history for each table, restricting the results to those from this host 
	#    (save for special tables like 'server') and if the number of records is greater than 
	#    'scancore::archive::trigger', start an archive.
	# 2. Set/update the 'archive_date' state.
	# 3. Lock the database.
	# 4. Select 'modified_date' from history.foo, offset by 
	#    ('scancore::archive::trigger' - 'scancore::archive::count').
	# 5. Make sure the 'scancore::archive::directory' exists, creating it if needed.
	# 6. Select all records older that the 'modified_date', write them to a file and then DELETE those
	#    records from the database.
	
	# Update the archive path, if set by a user. Also verify that there are sane archive values.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
		name1 => "path::scancore_archive",       value1 => $an->data->{path}{scancore_archive}, 
		name2 => "scancore::archive::directory", value2 => $an->data->{scancore}{archive}{directory}, 
		name3 => "scancore::archive::trigger",   value3 => $an->data->{scancore}{archive}{trigger}, 
		name4 => "scancore::archive::count",     value4 => $an->data->{scancore}{archive}{count}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{archive}{directory} =~ /\/.*/)
	{
		$an->data->{path}{scancore_archive} = $an->data->{scancore}{archive}{directory};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "path::scancore_archive", value1 => $an->data->{path}{scancore_archive}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{trigger}) or ($an->data->{scancore}{archive}{trigger} =~ /\D/))
	{
		$an->data->{scancore}{archive}{trigger} = 100000;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::trigger", value1 => $an->data->{scancore}{archive}{trigger}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{count}) or ($an->data->{scancore}{archive}{count} =~ /\D/))
	{
		$an->data->{scancore}{archive}{count} = 50000;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::count", value1 => $an->data->{scancore}{archive}{count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	if (not -e $an->data->{path}{scancore_archive})
	{
		my $shell_call = $an->data->{path}{'mkdir'}." -p '".$an->data->{path}{scancore_archive}."'";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		close $file_handle;
		
		# Did it work?
		if (not -e $an->data->{path}{scancore_archive})
		{
			# Nope. :(
			$an->Alert->warning({message_key => "scancore_warning_0030", message_variables => { directory => $an->data->{path}{scancore_archive} }, quiet => 1, file => $THIS_FILE, line => __LINE__});
			return(1);
		}
	}
	
	$an->data->{archive}{table} = {
		apc_pdus		=>	{
			archive_date		=>	"",
			host_column		=>	"apc_pdu_host_uuid",
			offset			=>	0,
		},
		apc_pdu_phases		=>	{
			archive_date		=>	"",
			host_column		=>	"apc_pdu_phase_host_uuid",
			offset			=>	0,
		},
		apc_pdu_outlets		=>	{
			archive_date		=>	"",
			host_column		=>	"apc_pdu_outlet_host_uuid",
			offset			=>	0,
		},
		apc_pdu_variables	=>	{
			archive_date		=>	"",
			host_column		=>	"apc_pdu_variable_host_uuid",
			offset			=>	0,
		},
	};
	my $archive_needed = 0;
	foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "table", value1 => $table, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $query = "
SELECT 
    COUNT(*) 
FROM 
    history.$table 
WHERE 
    ".$an->data->{archive}{table}{$table}{host_column}." = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $records = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $records = 0 if not defined $records;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "records", value1 => $records, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($records > $an->data->{scancore}{archive}{trigger})
		{
			   $archive_needed                             = 1;
			my $records_to_save                            = ($an->data->{scancore}{archive}{trigger} - $an->data->{scancore}{archive}{count});
			my $offset                                     = $records - $records_to_save;
			   $an->data->{archive}{table}{$table}{offset} = $offset;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "archive_needed",                   value1 => $archive_needed, 
				name2 => "records_to_save",                  value2 => $records_to_save, 
				name3 => "archive::table::${table}::offset", value3 => $an->data->{archive}{table}{$table}{offset}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# If I have something to archive, do so now.
	if ($archive_needed)
	{
		# This will store the files to compress after we release the locks.
		my $compress = [];
		
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Now loop through the table(s) that need to be archived.
		foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
		{
			next if not $an->data->{archive}{table}{$table}{offset};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "table", value1 => $table, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Now to do the archive.
			if ($table eq "apc_pdus")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["apc_pdu_uuid", "apc_pdu_host_uuid", "apc_pdu_serial_number", "apc_pdu_model_number", "apc_pdu_manufacture_date", "apc_pdu_firmware_version", "apc_pdu_hardware_version", "apc_pdu_ipv4_address", "apc_pdu_mac_address", "apc_pdu_mtu_size", "apc_pdu_link_speed", "apc_pdu_phase_count", "apc_pdu_outlet_count", "apc_pdu_note"],
				});
			}
			elsif ($table eq "apc_pdu_phases")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["apc_pdu_phase_uuid", "apc_pdu_phase_apc_pdu_uuid", "apc_pdu_phase_host_uuid", "apc_pdu_phase_number", "apc_pdu_phase_current_amperage", "apc_pdu_phase_max_amperage", "apc_pdu_phase_note"],
				});
			}
			elsif ($table eq "apc_pdu_outlets")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["apc_pdu_outlet_uuid", "apc_pdu_outlet_apc_pdu_uuid", "apc_pdu_outlet_host_uuid", "apc_pdu_outlet_number", "apc_pdu_outlet_name", "apc_pdu_outlet_on_phase", "apc_pdu_outlet_state", "apc_pdu_outlet_note"],
				});
			}
			elsif ($table eq "apc_pdu_variables")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["apc_pdu_variable_uuid", "apc_pdu_variable_host_uuid", "apc_pdu_variable_source_table", "apc_pdu_variable_source_uuid", "apc_pdu_variable_is_temperature", "apc_pdu_variable_name", "apc_pdu_variable_value"],
				});
			}
		}
		
		### TODO: Make this less of a hackish mc-hackington...
		# VACUUM FULL, if the database is on this machine. I need to do this from the command line 
		# because the user we connect as isn't allowed to do it. We'll also only vacuum our DB.
		my $db_name = "";
		foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
				name1 => "id",                        value1 => $id, 
				name2 => "scancore::db::${id}::host", value2 => $an->data->{scancore}{db}{$id}{host}, 
				name3 => "hostname",                  value3 => $an->hostname, 
				name4 => "short_hostname",            value4 => $an->short_hostname, 
			}, file => $THIS_FILE, line => __LINE__});
			if (($an->data->{scancore}{db}{$id}{host} eq $an->hostname) or ($an->data->{scancore}{db}{$id}{host} eq $an->short_hostname))
			{
				$db_name = $an->data->{scancore}{db}{$id}{name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "db_name",                   value1 => $db_name, 
					name2 => "scancore::db::${id}::name", value2 => $an->data->{scancore}{db}{$id}{name}, 
				}, file => $THIS_FILE, line => __LINE__});
				last;
			}
		}
		if ($db_name)
		{
			my $start      = time;
			my $shell_call = $an->data->{path}{su}." - postgres -c \"".$an->data->{path}{psql}." $db_name -c 'VACUUM FULL;'\"";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "start",      value1 => $start, 
				name2 => "shell_call", value2 => $shell_call, 
			}, file => $THIS_FILE, line => __LINE__});
			open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			close $file_handle;
			
			my $finished = time - $start;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "finished", value1 => $finished, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# This looks for APC PDUs.
sub find_pdus
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_pdus" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->data->{'scan-apc-pdu'}{pdus} = $an->data->{switches}{pdus} if $an->data->{switches}{pdus};
	if ($an->data->{'scan-apc-pdu'}{pdus})
	{
		# User has specified the PDUs to query. We'll resolve them to IPs.
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "scan-apc-pdu::pdus", value1 => $an->data->{'scan-apc-pdu'}{pdus}, 
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $pdu_name (split/,/, $an->data->{'scan-apc-pdu'}{pdu})
		{
			next if not $pdu_name;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "pdu_name", value1 => $pdu_name, 
			}, file => $THIS_FILE, line => __LINE__});
			
			my $ip        = "";
			my $packed_ip = gethostbyname($pdu_name);
			if ($packed_ip)
			{
				$ip = inet_ntoa($packed_ip);
				$an->data->{'scan-apc-pdu'}{pdu}{$pdu_name} = $ip;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "scan-apc-pdu::pdu::$pdu_name", value1 => $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Failed to get IP
				die "$THIS_FILE ".__LINE__."; No IP found for UPS name: [$pdu_name].\n";
			}
		}
	}
	else
	{
		# Read in /etc/hosts and look for anything with 'pdu' in the name.
		my $shell_call = "<".$an->data->{path}{etc_hosts};
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, $shell_call) or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0016", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Clear out comments, knock out white spaces and then skip anything without 'pdu' in
			# the name.
			$line =~ s/#.*$//;
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;
			$line =~ s/\s+/ /g;
			next if not $line;
			next if $line !~ /pdu/;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# This should be a UPS entry.
			my ($ip, $names) = ($line =~ /^(\d+\.\d+\.\d+\.\d+) (.*)/);
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "ip",    value1 => $ip, 
				name2 => "names", value2 => $names,
			}, file => $THIS_FILE, line => __LINE__});
			
			# It is crude, but we'll use the longest host name.
			my $pdu_name = "";
			foreach my $name (split/ /, $names)
			{
				if (length($name) > length($pdu_name))
				{
					$pdu_name = $name;
				}
			}
			if (($pdu_name) && ($ip))
			{
				$an->data->{'scan-apc-pdu'}{pdu}{$pdu_name} = $ip;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "scan-apc-pdu::pdu::$pdu_name", value1 => $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Bad name or IP.
				die "$THIS_FILE ".__LINE__."; Bad name: [$pdu_name] or IP: [$ip]\n";
			}
		}
		close $file_handle;
		
		# If I am a dashboard, read in the cache files for the PDUs that nodes know about and see if
		# we can ping them. If we can, we'll scan them. This will be important for dashboards to 
		# determine if/when it is safe to boot a node.
		my $host_type = $an->Get->what_am_i();
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "host_type", value1 => $host_type, 
		}, file => $THIS_FILE, line => __LINE__});
		if ($host_type eq "dashboard")
		{
			# Loop through all Anvil! systems.
			my $all_pdus  = {};
			my $anvil_data = $an->ScanCore->get_anvils();
			foreach my $hash_ref (@{$anvil_data})
			{
				my $anvil_uuid = $hash_ref->{anvil_uuid};
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "anvil_uuid", value1 => $anvil_uuid, 
				}, file => $THIS_FILE, line => __LINE__});
				
				my ($pdus) = $an->Get->node_pdus({
						anvil_uuid => $anvil_uuid,
						node_name  => "both",
					});
				
				# Record 
				foreach my $ip (sort {$a cmp $b} keys %{$pdus})
				{
					my $pdu_name = $pdus->{$ip}{name};
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "pdu_name", value1 => $pdu_name, 
					}, file => $THIS_FILE, line => __LINE__});
					
					if (not exists $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name})
					{
						$an->data->{'scan-apc-pdu'}{pdu}{$pdu_name} = $ip;
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "scan-apc-pdu::pdu::$pdu_name", value1 => $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name}, 
						}, file => $THIS_FILE, line => __LINE__});
					}
				}
			}
		}
	}
	
	# Here is what I found;
	foreach my $pdu_name (sort {$a cmp $b} keys %{$an->data->{'scan-apc-pdu'}{pdu}})
	{
		my $ip = $an->data->{'scan-apc-pdu'}{pdu}{$pdu_name};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "pdu_name", value1 => $pdu_name, 
			name2 => "ip",       value2 => $ip, 
		}, file => $THIS_FILE, line => __LINE__});
	}
}

# This reads an OID and returns the results.
sub read_oid
{
	my ($an, $pdu, $oid, $mib) = @_;
	$mib = "" if not defined $mib;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "read_oid" }, message_key => "an_variables_0003", message_variables => { 
		name1 => "pdu", value1 => $pdu, 
		name2 => "oid", value2 => $oid, 
		name3 => "mib", value3 => $mib, 
	}, file => $THIS_FILE, line => __LINE__});
	
	### TODO: Make these proper errors
	die "No PDU passed!\n" if not $pdu;
	die "No OID passed!\n" if not $oid;
	
	my $value      = "#!no_value!#";
	my $shell_call = $an->data->{path}{snmpget}." -v 2c -c ".$an->data->{snmp}{community}{'read'}." $pdu $oid";
	if ($mib)
	{
		$shell_call = $an->data->{path}{snmpget}." -v 2c -c ".$an->data->{snmp}{community}{'read'}." -m $mib $pdu $oid";
	}
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => "$shell_call"
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0015", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => "$line"
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /No Response/i)
		{
			$value = "#!no_connection!#";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /STRING: "(.*)"$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		elsif ($line =~ /STRING: (.*)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /INTEGER: (\d+)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Hex-STRING: (.*)$/i)
		{
			$value = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Gauge32: (.*)$/i)
		{
			$value =  $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /Timeticks: \((\d+)\) /i)
		{
			$value =  $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($line =~ /No Such Instance/i)
		{
			$value = "--";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "value", value1 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	# Strip leading and trailing white spaces
	$value =~ s/^\s+//;
	$value =~ s/\s+$//;
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "value", value1 => $value, 
	}, file => $THIS_FILE, line => __LINE__});
	return($value);
}

# This checks to see if this agent's databases tables exist and, if not, load the schema. If the schema gets
# loaded, we'll check other databases for older information and load it.
sub prep_databases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "prep_databases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 2, message_key => "scancore_log_0016", message_variables => { agent => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		my $query = "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE tablename='apc_pdus' AND schemaname='public';";
		#                     The actual query -----------------.        .------- Row 0
		#                        Query this DB --.              |        |    .-- Columns 0
		my $count = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "count", value1 => $count
		}, file => $THIS_FILE, line => __LINE__});
		if ($count < 1)
		{
			# Need to load the database schema.
			$an->Log->entry({log_level => 1, message_key => "scancore_log_0017", file => $THIS_FILE, line => __LINE__});
			$an->DB->load_schema({id => $id, file => $an->data->{path}{sql}});
			
			# Send an alert telling the user that we've initialized this database.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"notice_message_0002",
				alert_message_variables	=>	{
					name			=>	$an->data->{scancore}{db}{$id}{name},
					host			=>	$an->data->{scancore}{db}{$id}{host},
					agent			=>	$THIS_FILE,
				},
			});
		}
		else
		{
			# Table exists, schema load is not needed.
			$an->Log->entry({log_level => 2, message_key => "scancore_log_0018", file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "scan_apc_pdu_message_0002"})."\n";

	return(0);
}
