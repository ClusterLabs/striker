#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# ScanCore Scan Agent for HPE type RAID controllers using the 'hpacucli' command line tool.
#
# https://alteeve.com
# 
# Exit Codes:
# 0  - Success
# 1  - hpacucli not installed
# 2  - hpacucli is installed but it is not executable.
# 3  - No HPE type controllers found.
# 4  - 
# 
# 255 - The host's UUID isn't in the hosts table yet, ScanCore itself hasn't been run.
# 
# TODO:
# - 
# 
# NOTE: 
# - Health values
#   - Controller  - Correctable errors   = 1
#   - Controller  - Uncorrectable errors = 5
#   - Controller  - Status changes       = 5
#   - Drive group - partially degraded   = 5
#   - Drive group - degraded             = 10
#   - Cachevault  - Replacement needed   = 5
#   - BBU         - Replacement needed   = 5
#   - Temperature - Critical             = 2
#   - Temperature - Warning              = 1

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;
use Math::BigInt;
no warnings 'recursion';

# Disable buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $scancore_directory = ($running_directory =~ /^(.*?)\/agents\/$THIS_FILE$/)[0];

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		health			=>	{
			old			=>	{},
			new			=>	{},
		},
		path			=>	{
			core_strings		=>	"$scancore_directory/ScanCore.xml",
			sql			=>	"$running_directory/$THIS_FILE.sql",
			strings			=>	"$running_directory/$THIS_FILE.xml",
		},
		scancore		=>	{
			archive			=>	{
				directory		=>	"/var/ScanCore/archives/",
				division		=>	60000,
				trigger			=>	100000,
				count			=>	50000,
				dump_file_header	=>	"
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = history, pg_catalog;
",
			},
		},
		# This is used so that the user can set the language in on striker.conf variable.
		'scan-hpacucli'		=>	{
			# This will keep track of devices with serial numbers so that it is easy to look up
			# the UUID from the serial numbers and vice versa.
			controllers		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			physical_drives		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			# Checking the drives for errors is expensive, so it is only done every hour (or 
			# there abouts). Change the interval if you want to check more or less often.
			diagnostics_interval		=>	3600,
			disable			=>	0,
			language		=>	"en_CA",
			log_level		=>	1,
			log_language		=>	"en_CA",
			log_file		=>	"/var/log/ScanCore.log",
			log_db_transactions	=>	0,
			thresholds			=>	{
				# This is used for unknown sensors and really shouldn't be used at all.
				'default'			=>	{
					high_warning			=>	50,
					high_critical			=>	55,
					low_warning			=>	15,
					low_critical			=>	10,
					jump				=>	5,
					buffer				=>	3,
				},
				drives				=>	{
					# http://storage.toshiba.com/docs/product-datasheets/mk01grrb-r.pdf
					hdd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	10,
						low_critical			=>	5,
						jump				=>	3,
						buffer				=>	2,
					},
					# http://toshiba.semicon-storage.com/us/product/storage-products/enterprise-ssd/px02smb-px02smfxxx.html
					ssd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	5,
						low_critical			=>	0,
						jump				=>	3,
						buffer				=>	2,
					},
				},
				controller			=>	{
# 					high_warning			=>	108,
# 					high_critical			=>	115,
# 					low_warning			=>	15,
# 					low_critical			=>	10,
# 					jump				=>	10,
# 					buffer				=>	5,
				},
			},
		},
		sys			=>	{
			controller			=>	{},
			controller_count		=>	0,
			alert_sort		=>	1,
			# When a lock is requested, this is set to the time the lock was set. 
			# DB->do_db_write() and DB->do_db_read() will check this and if its age is >50% of
			# scancore::locking::reap_age, it will renew the lock.
			lock_active		=>	0,
			process_diagnostics	=>	0,
			sql			=>	[],
		},
	},
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{'scan-hpacucli'}{language});
$an->default_log_language($an->data->{'scan-hpacucli'}{log_language});
$an->default_log_file    ($an->data->{'scan-hpacucli'}{log_file});

# Set the log level.
$an->Log->level($an->data->{'scan-hpacucli'}{log_level});
$an->Log->db_transactions(1) if $an->data->{'scan-hpacucli'}{log_db_transactions};

# Read in the language strings.
$an->Storage->read_words({file => $an->data->{path}{strings}});
$an->Storage->read_words({file => $an->data->{path}{core_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for help.
$an->Get->switches();
$an->Log->adjust_log_level({key => $THIS_FILE});

# Help?
if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	# Help!
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Exit if we're disabled.
if ($an->data->{'scan-hpacucli'}{disable})
{
	$an->nice_exit({exit_code => 1});
}

# I'll need to loop through the DBs and ensure our schema is loaded for each one.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({ log_level => 3, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});

# Make sure this host's UUID is in the 'hosts' table. If the user is running this directly without first
# running ScanCore, it won't be.
if (not $an->DB->verify_host_uuid())
{
	# ScanCore hasn't run, this host isn't in the 'hosts' table.
	$an->Alert->error({title_key => "an_0003", message_key => "scancore_error_0020", message_variables => { uuid => $an->data->{sys}{host_uuid} }, code => 255, file => $THIS_FILE, line => __LINE__});
}

# If we were called with '--prep-db', we'll prep the database schema regardless of whether clustat is found.
if ($an->data->{switches}{'prep-db'})
{
	if ($connections)
	{
		prep_databases($an);
	}
	else
	{
		# Failed
		$an->Log->entry({log_level => 1, message_key => "scancore_warning_0031", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scancore_warning_0031"})."\n";
	}
}

print $an->String->get({key => "scan_hpacucli_message_0001"})."\n";

# This does two things; It checks to see if hpacucli is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
find_hp_controllers($an);

# We need to prep the database right away.
prep_databases($an);

# If we're still alive, start gathering data.
gather_data($an);





# Clean up and go away.
$an->nice_exit({exit_code => 0});


#############################################################################################################
# Function below                                                                                            #
#############################################################################################################

# This gets the basic information about the controller.
sub get_controller_info
{
	my ($an, $controller) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "get_controller_info" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "controller", value1 => $controller, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $serial_number       = "";
	my $cache_serial_number = "";
	my $pd_serial_number    = "";
	my $array               = "";
	my $logical_drive       = "";
	my $port                = "";
	my $box                 = "";
	my $bay                 = "";
	my $shell_call          = $an->data->{path}{hpacucli}." controller slot=".$controller." show config detail";
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $an->String->clean_spaces({string => $_});
		   $line =~ s/\r//;
		next if not $line;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /Serial Number: (.*?)$/)
		{
			$serial_number = $1;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "serial_number", value1 => $serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		next if not $serial_number;
		
		if ($line =~ /Cache Serial Number: (.*?)$/i)
		{
			$cache_serial_number = $1;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "cache_serial_number", value1 => $cache_serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if ($line =~ /Array: (.*?)/i)
		{
			$array = $1;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "array", value1 => $array, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if ($line =~ /physicaldrive (.*?):(.*?):(.*)$/)
		{
			$port = $1;
			$box  = $2;
			$bay  = $3;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "port", value1 => $port, 
				name2 => "box",  value2 => $box, 
				name3 => "bay",  value3 => $bay, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if (lc($line) eq "unassaigned")
		{
			$array         = "9999";
			$logical_drive = "9999";
			$port          = "";
			$box           = "";
			$bay           = "";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
				name1 => "array",         value1 => $array, 
				name2 => "logical_drive", value2 => $logical_drive, 
				name3 => "port",          value3 => $port, 
				name4 => "box",           value4 => $box, 
				name5 => "bay",           value5 => $bay, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# Lines I don't care about
		next if $line =~ /^Slot: $controller$/i;
		next if $line =~ /^$/i;
		next if $line =~ /^$/i;
		
		my $type = "variable";
		if ($line =~ /^(.*?): (.*)$/)
		{
			my $variable = $1;
			my $value    = $2;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If the variable has units, pull them out.
			if ($variable =~ / \(C\)$/i)
			{
				$variable =~ s/ \(C\)$//i;
				$variable =  $an->String->clean_spaces({string => $variable});
				$type     =  "temperature";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ / \(F\)/i)
			{
				# Covert to °C
				$variable =~ s/ \(F\)$//i;
				$variable =  $an->String->clean_spaces({string => $variable});
				$value    =  $an->Convert->convert_to_celsius({temperature => $value});
				$type     =  "temperature";
				$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Save it.
			if (exists $an->data->{controller}{serial_number}{$serial_number}{$type}{$variable})
			{
				# Conflict! This is a dirty way to keep them separate
				$variable .= " 2";
			}
			
			$variable = process_variable_name($an, $variable);
			
			# What am I saving?
			if (($port) && ($box) && ($bay))
			{
				# Physical drive info
				$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::logical_drive::${logical_drive}::physical_drive::port::${port}::box::${box}::bay::${bay}::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($logical_drive)
			{
				# Logical drive
				$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::logical_drive::${logical_drive}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($array)
			{
				# Array
				$an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Controller data
				$an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	close $file_handle;
	
	# If I didn't find a serial number, something went wrong.
	if (not $serial_number)
	{
		# Error out.
		$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0004", message_variables => { controller => $controller }, code => 6, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 6});
	}
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "serial_number", value1 => $serial_number,
	}, file => $THIS_FILE, line => __LINE__});
	return($serial_number);
}

# This will do a details diagnostics check, if enough time has passed.
sub get_diagnostics
{
	my ($an, $controller) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "get_diagnostics" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "controller", value1 => $controller, 
	}, file => $THIS_FILE, line => __LINE__});

	### TODO: Every 'scan-hpacucli::diagnostics_interval' seconds, run a full diagnostics to 
	###       check for drives in pre-failure.
	if (not $an->data->{sys}{process_diagnostics})
	{
		# Is it time?
		my $query = "SELECT hpacucli_controller_last_diagnostics FROM hpacucli_controllers WHERE hpacucli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).";";
		#                     The actual query -----------------.                                                .------- Row 0
		#                        Query this DB --.              |                                                |    .-- Columns 0
		my $last_diagnostics = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $last_diagnostics = 0 if not defined $last_diagnostics;
		my $current_time     = time;
		my $last_scan_was    = $current_time - $last_diagnostics;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "last_diagnostics",                    value1 => $last_diagnostics, 
			name2 => "current_time",                        value2 => $current_time, 
			name3 => "last_scan_was",                       value3 => $last_scan_was, 
			name4 => "scan-hpacucli::diagnostics_interval", value4 => $an->data->{'scan-hpacucli'}{diagnostics_interval}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($an->data->{'scan-hpacucli'}{diagnostics_interval} !~ /^\d+$/)
		{
			# Invalid value, override.
			$an->data->{'scan-hpacucli'}{diagnostics_interval} = 3600;
			$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
				name1 => "scan-hpacucli::diagnostics_interval", value1 => $last_diagnostics, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($last_scan_was > $an->data->{'scan-hpacucli'}{diagnostics_interval})
		{
			$an->data->{sys}{process_diagnostics} = 1;
		}
	}
	
	# Well, is it?
	if ($an->data->{sys}{process_diagnostics})
	{
		# Yup! We use hpacucli's diagnostics to gather all data.
		my $zip_file   = "scan-hpacucli_diagnostics-".time.".zip";
		my $xml_file   = "scan-hpacucli_diagnostics-".time.".xml";
# 		my $shell_call = "
# cd /tmp/
# ".$an->data->{path}{hpacucli}." controller all diag file=/tmp/$zip_file
# ".$an->data->{path}{'unzip'}." -o /tmp/$zip_file -d /tmp/
# if [ -e '/tmp/ADUReport.xml' ];
# then
#     ".$an->data->{path}{mv}." /tmp/ADUReport.xml /tmp/$xml_file
#     ".$an->data->{path}{rm}." -f /tmp/$zip_file
#     ".$an->data->{path}{rm}." -f /tmp/ADUReport.htm
#     ".$an->data->{path}{rm}." -f /tmp/ADUReport.txt
#     ".$an->data->{path}{rm}." -f /tmp/report.checksum
# fi
# ";
# 		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
# 			name1 => "shell_call", value1 => $shell_call, 
# 		}, file => $THIS_FILE, line => __LINE__});
# 		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
# 		while(<$file_handle>)
# 		{
# 			chomp;
# 			my $line = $_;
# 			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
# 				name1 => "line", value1 => $line, 
# 			}, file => $THIS_FILE, line => __LINE__});
# 		}
# 		close $file_handle;
		
		# Did it work?
		if (not -r "/tmp/ADUReport.xml")
		{
			# Something went wrong.
			print $an->String->get({key => "scan_hpacucli_error_0001", variables => { path => "/tmp/$xml_file" }})."\n";
			$an->Log->entry({log_level => 0, message_key => "scan_hpacucli_error_0001", message_variables => { file => "/tmp/$xml_file" }, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 4});
		}
		
		# Parse!
		my $xml  = XML::Simple->new();
		my $data = $xml->XMLin("/tmp/ADUReport.xml", KeyAttr => {MetaProperty => 'id', Device => 'id', MetaPropertyStructure => 'id'}, ForceArray => 1);
		#unlink "/tmp/$xml_file";
		
		use Data::Dumper;
		#print Dumper $data;
		my $hpacucli_version   = $data->{MetaProperty}->{'ACU-CLI Version'}->{value};
		my $diagnostic_version = $data->{MetaProperty}->{'Diagnostic Module Version'}->{value};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "hpacucli_version",   value1 => $hpacucli_version, 
			name2 => "diagnostic_version", value2 => $diagnostic_version, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $controller_serial_number  = "";
		my $controller_marketing_name = "";
		my $controller_device_type    = "";
		foreach my $key1 (sort {$a cmp $b} keys %{$data->{Device}})
		{
			# This should be 'AC:<serial_number>'
			#print $THIS_FILE." ".__LINE__."; key1: [$key1]\n";
			next if $key1 !~ /^AC:/;
			$controller_serial_number  = ($key1 =~ /^AC:(.*?)$/)[0];
			$controller_marketing_name = $data->{Device}->{$key1}->{marketingName};
			$controller_device_type    = $data->{Device}->{$key1}->{deviceType};
			
			print $THIS_FILE." ".__LINE__."; controller_serial_number: [$controller_serial_number]\n";
			
			print Dumper $data->{Device}->{$key1}->{Device};
# 			foreach my $key2 (sort {$a cmp $b} keys %{$data->{Device}->{$key1}->{Device}})
# 			{
# 				print $THIS_FILE." ".__LINE__."; - key2: [$key2] -> [".$data->{Device}->{$key1}->{Device}->{$key2}."]\n";
# 				if ($key2 =~ /AC:$controller_serial_number,A:(\d+)$/)
# 				{
# 					my $array_number = $1;
# 					print Dumper $data->{Device}->{$key1}->{Device}->{$key2};
# 				}
# 				else
# 				{
# 					#print "========\n"; print Dumper $data->{Device}->{$key1}->{Device}->{$key2};
# 					foreach my $key3 (sort {$a cmp $b} keys %{$data->{Device}->{$key1}->{Device}->{$key2}})
# 					{
# 						# NOTE: We ignore the details of the Errors key because we'll alarm on 
# 						#       counters and we're not sure what Errors looks like yet anyway.
# 						next if $key3 eq "Errors";
# 						print $THIS_FILE." ".__LINE__."; --- key3: [$key3] -> [".$data->{Device}->{$key1}->{Device}->{$key2}->{$key3}."]\n";
# 					}
# 				}
# 			}
			
			die $THIS_FILE." ".__LINE__."; testing...\n";
			
# 			foreach my $hash_ref1 (@{$data->{Device}->{$key1}->{MetaStructure}})
# 			{
# 				foreach my $key2 (sort {$a cmp $b} keys %{$hash_ref1})
# 				{
# 					print $THIS_FILE." ".__LINE__."; key2: [$key2] -> [".$hash_ref1->{$key2}."]\n";
# 				}
# 			}
		}
		
		die $THIS_FILE." ".__LINE__."; testing...\n";
	}
	
	return(0);
}

# This gathers the various data from the controller(s).
sub gather_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "gather_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: This assumes the controllers go 0, 1, ... n. If this is wrong, we'll need to call 
	###       'hpacucli controller all show' and parse the output as our outer loop.
	# Loops through reach found controller.
	foreach my $controller (0..$an->data->{sys}{controller_count})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "controller", value1 => $controller, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read in controller data.
		my $serial_number = get_controller_info($an, $controller);
		
		die $THIS_FILE." ".__LINE__."; testing...\n";

# 		controller slot=0 array all show detail
# 		controller slot=0 logicaldrive show detail
# 		controller slot=0 physicaldrive all show detail
# 		controller slot=0 ssdphysicaldrive all show detail

		
		#get_diagnostics($an, $controller);
		
# 		# We use dummy VDs and DGs to store drives not allocated to either yet. The drives will 
# 		# reference their parent controller, but the VDs and DGs won't. To deal with this, we need to
# 		# allocate the pseudo DG and VG to something, so we'll use the first controller's SN that we
# 		# see.
# 		if ($controller eq "1")
# 		{
# 			my $hpacucli_virtual_drive_id_string = $serial_number."-vd9999";
# 			$an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{variable}{on_controller} = $serial_number;
# 			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
# 				name1 => "virtual_drive::${hpacucli_virtual_drive_id_string}::variable::on_controller", value1 => $an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{variable}{on_controller}, 
# 			}, file => $THIS_FILE, line => __LINE__});
# 		}
# 		
# 		# Read in cachevault (FBU) data (if it exists).
# 		get_cachevault_data($an, $controller, $serial_number);
# 		
# 		# Read in BBU data (if it exists).
# 		get_bbu_data($an, $controller, $serial_number);
# 		
# 		# Read in virtual drive information.
# 		get_virtual_drive_data($an, $controller, $serial_number);
# 		
# 		# Read in the physical disk information.
# 		get_physical_disk_data($an, $controller, $serial_number);
	}
	
	return(0);
}

# This processes variable names to flatten them and remove spaces and special characters.
sub process_variable_name
{
	my ($an, $variable) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "process_variable_name" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	
	$variable =  lc($variable);
	$variable =~ s/ /_/g;
	$variable =~ s/-/_/g;
	$variable =~ s/&/and/g;
	$variable =~ s/\//_or_/g;
	$variable =~ s/_%/_percent/g;
	$variable =~ s/{_}+/_/g;
	$variable =~ s/^_+//g;
	$variable =~ s/_+$//g;
	$variable =~ s/(\w)\(/$1_\(/;
	$variable =~ s/\((.*?)\)/-_$1/g;
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	return($variable);
}

# This does two things; It checks to see if hpacucli is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
sub find_hp_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_hp_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will keep track of how many controllers we find.
	my $controller_count = 0;
	
	# First, do we have hpacucli installed?
	if (not -e $an->data->{path}{hpacucli})
	{
		# Nope, exit.
		print $an->String->get({key => "scan_hpacucli_error_0001", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_hpacucli_error_0001", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 1});
	}
	
	# Make sure it is executable
	if (not -x $an->data->{path}{hpacucli})
	{
		print $an->String->get({key => "scan_hpacucli_error_0002", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 0, message_key => "scan_hpacucli_error_0002", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 2});
	}
	
	# Still alive? Good! Look for controllers now.
	my $shell_call = $an->data->{path}{hpacucli}." controller all show";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /.*? Slot (\d+) .*?\(sn: (.*?)\)/i)
		{
			my $controller_number        = $1;
			my $controller_serial_number = $2;
			   $controller_count++;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "controller_number",        value1 => $controller_number, 
				name2 => "controller_serial_number", value2 => $controller_serial_number, 
				name3 => "controller_count",         value3 => $controller_count, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	# Have we any controllers?
	if ($controller_count > 0)
	{
		$an->data->{sys}{controller_count} = $controller_count;
		$an->Log->entry({log_level => 2, message_key => "scan_hpacucli_log_0001", message_variables => {
			count => $an->data->{sys}{controller_count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		print $an->String->get({key => "scan_hpacucli_error_0003", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_hpacucli_error_0003", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 3});
	}
	
	return(0);
}

# This checks to see if this agent's databases tables exist and, if not, load the schema. If the schema gets
# loaded, we'll check other databases for older information and load it.
sub prep_databases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "prep_databases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Loop through the databases...
	$an->Log->entry({log_level => 2, message_key => "scancore_log_0016", message_variables => { agent => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		my $query = "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE tablename='hpacucli_controllers' AND schemaname='public';";
		#                     The actual query -----------------.                                                .------- Row 0
		#                        Query this DB --.              |                                                |    .-- Columns 0
		my $count = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "count", value1 => $count
		}, file => $THIS_FILE, line => __LINE__});
		
		# Did we find the table?
		if ($count < 1)
		{
			# Nope. Need to load the database schema.
			$an->Log->entry({log_level => 2, message_key => "scancore_log_0017", file => $THIS_FILE, line => __LINE__});
			$an->DB->load_schema({id => $id, file => $an->data->{path}{sql}});
			
			# Send an alert telling the user that we've initialized this database.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"notice_message_0002",
				alert_message_variables	=>	{
					name			=>	$an->data->{scancore}{db}{$id}{name},
					host			=>	$an->data->{scancore}{db}{$id}{host},
					agent			=>	$THIS_FILE,
				},
			});
		}
		else
		{
			# Table exists, schema load is not needed.
			$an->Log->entry({log_level => 2, message_key => "scancore_log_0018", file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "scan_hpacucli_message_0002"})."\n";

	return(0);
}
