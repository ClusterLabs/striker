#!/usr/bin/perl
# 
# This software was created by Alteeve's Niche! Inc. and has been released
# under the terms of the GNU GPL version 2.
#
# ScanCore Scan Agent for HPE type RAID controllers using the 'hpacucli' command line tool.
#
# https://alteeve.com
# 
# Exit Codes:
# 0  - Success
# 1  - hpacucli not installed
# 2  - hpacucli is installed but it is not executable.
# 3  - No HPE type controllers found.
# 4  - Controller numeric value is invalid.
# 5  - Cache module numeric value is invalid.
# 6  - Array numeric value is invalid.
# 7  - Logical drive numeric value is invalid.
# 8  - Physical drive numeric value is invalid.
# 
# 255 - The host's UUID isn't in the hosts table yet, ScanCore itself hasn't been run.
# 
# TODO:
# - 
# 
# NOTE: 
# - Health values
#   - Controller  - Correctable errors   = 1
#   - Controller  - Uncorrectable errors = 5
#   - Controller  - Status changes       = 5
#   - Drive group - partially degraded   = 5
#   - Drive group - degraded             = 10
#   - Cachevault  - Replacement needed   = 5
#   - BBU         - Replacement needed   = 5
#   - Temperature - Critical             = 2
#   - Temperature - Warning              = 1

# Use my modules.
use strict;
use warnings;
use AN::Tools;
use Data::Dumper;
use Math::BigInt;
no warnings 'recursion';

# Disable buffering.
$| = 1;

# Figure out who and where I am.
my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}
my $scancore_directory = ($running_directory =~ /^(.*?)\/agents\/$THIS_FILE$/)[0];

# Get the handle to the AN::Tools and preset some variables I will use.
my $an = AN::Tools->new({data => 
	{
		health			=>	{
			old			=>	{},
			new			=>	{},
		},
		path			=>	{
			core_strings		=>	"$scancore_directory/ScanCore.xml",
			sql			=>	"$running_directory/$THIS_FILE.sql",
			strings			=>	"$running_directory/$THIS_FILE.xml",
		},
		scancore		=>	{
			archive			=>	{
				directory		=>	"/var/ScanCore/archives/",
				division		=>	60000,
				trigger			=>	100000,
				count			=>	50000,
				dump_file_header	=>	"
SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = history, pg_catalog;
",
			},
		},
		# This is used so that the user can set the language in on striker.conf variable.
		'scan-hpacucli'		=>	{
			# This will keep track of devices with serial numbers so that it is easy to look up
			# the UUID from the serial numbers and vice versa.
			controllers		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			physical_drives		=>	{
				by_serial		=>	{},
				by_uuid			=>	{},
			},
			# Checking the drives for errors is expensive, so it is only done every hour (or 
			# there abouts). Change the interval if you want to check more or less often.
			diagnostics_interval		=>	3600,
			disable			=>	0,
			language		=>	"en_CA",
			log_level		=>	1,
			log_language		=>	"en_CA",
			log_file		=>	"/var/log/ScanCore.log",
			log_db_transactions	=>	0,
			thresholds			=>	{
				# This is used for unknown sensors and really shouldn't be used at all.
				'default'			=>	{
					high_warning			=>	50,
					high_critical			=>	55,
					low_warning			=>	15,
					low_critical			=>	10,
					jump				=>	5,
					buffer				=>	3,
				},
				drives				=>	{
					# http://storage.toshiba.com/docs/product-datasheets/mk01grrb-r.pdf
					hdd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	10,
						low_critical			=>	5,
						jump				=>	3,
						buffer				=>	2,
					},
					# http://toshiba.semicon-storage.com/us/product/storage-products/enterprise-ssd/px02smb-px02smfxxx.html
					ssd				=>	{
						high_warning			=>	50,
						high_critical			=>	55,
						low_warning			=>	5,
						low_critical			=>	0,
						jump				=>	3,
						buffer				=>	2,
					},
				},
				controller			=>	{
# 					high_warning			=>	108,
# 					high_critical			=>	115,
# 					low_warning			=>	15,
# 					low_critical			=>	10,
# 					jump				=>	10,
# 					buffer				=>	5,
				},
			},
		},
		sys			=>	{
			controller			=>	{},
			controller_count		=>	0,
			alert_sort		=>	1,
			# When a lock is requested, this is set to the time the lock was set. 
			# DB->do_db_write() and DB->do_db_read() will check this and if its age is >50% of
			# scancore::locking::reap_age, it will renew the lock.
			lock_active		=>	0,
			process_diagnostics	=>	0,
			sql			=>	[],
		},
	},
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{'scan-hpacucli'}{language});
$an->default_log_language($an->data->{'scan-hpacucli'}{log_language});
$an->default_log_file    ($an->data->{'scan-hpacucli'}{log_file});

# Set the log level.
$an->Log->level($an->data->{'scan-hpacucli'}{log_level});
$an->Log->db_transactions(1) if $an->data->{'scan-hpacucli'}{log_db_transactions};

# Read in the language strings.
$an->Storage->read_words({file => $an->data->{path}{strings}});
$an->Storage->read_words({file => $an->data->{path}{core_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

# Get the switches before printing anything in case the user is asking for help.
$an->Get->switches();
$an->Log->adjust_log_level({key => $THIS_FILE});

# Help?
if (($an->data->{switches}{h})   or 
    ($an->data->{switches}{'?'}) or
    ($an->data->{switches}{help}))
{
	# Help!
	print_usage($an);
	$an->nice_exit({exit_code => 0});
}

# Exit if we're disabled.
if ($an->data->{'scan-hpacucli'}{disable})
{
	$an->nice_exit({exit_code => 1});
}

# I'll need to loop through the DBs and ensure our schema is loaded for each one.
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({ log_level => 3, message_key => "notice_message_0013", message_variables => { connections => $connections }, file => $THIS_FILE, line => __LINE__});

# Make sure this host's UUID is in the 'hosts' table. If the user is running this directly without first
# running ScanCore, it won't be.
if (not $an->DB->verify_host_uuid())
{
	# ScanCore hasn't run, this host isn't in the 'hosts' table.
	$an->Alert->error({title_key => "an_0003", message_key => "scancore_error_0020", message_variables => { uuid => $an->data->{sys}{host_uuid} }, code => 255, file => $THIS_FILE, line => __LINE__});
}

# If we were called with '--prep-db', we'll prep the database schema regardless of whether clustat is found.
if ($an->data->{switches}{'prep-db'})
{
	if ($connections)
	{
		prep_databases($an);
	}
	else
	{
		# Failed
		$an->Log->entry({log_level => 1, message_key => "scancore_warning_0031", file => $THIS_FILE, line => __LINE__});
		print $an->String->get({key => "scancore_warning_0031"})."\n";
	}
}

print $an->String->get({key => "scan_hpacucli_message_0001"})."\n";

# This does two things; It checks to see if hpacucli is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
find_hp_controllers($an);

# We need to prep the database right away.
prep_databases($an);

# If we're still alive, start gathering data.
gather_data($an);

# Archive, if needed.
archive_if_needed($an);

# Look to see if any databases need to be updated.
update_db($an);

# Figure out, other than temperatures, what should be added to or removed from health.
pre_process_health($an);







# Clean up and go away.
$an->nice_exit({exit_code => 0});


#############################################################################################################
# Function below                                                                                            #
#############################################################################################################

# This looks for anything other than temperature sensors that will feed into the health of the node.
sub pre_process_health
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "pre_process_health" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Is the array degraded or partially degraded?
=cut
	foreach my $id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}})
		{
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}})
			{
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "virtual_drive::${id_string}::drive_group::${drive_group}::variable::$variable", value1 => $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
				
				my $value = $an->data->{virtual_drive}{$id_string}{drive_group}{$drive_group}{variable}{$variable};
				if ($value eq "Partially Degraded")
				{
					# Partially degraded array
					my $health_source_name                           = "drive_group:".$id_string,"-".$drive_group.":".$variable;
					   $an->data->{health}{new}{$health_source_name} = 5;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
				elsif ($value eq "Degraded")
				{
					# Degraded array
					my $health_source_name                           = "drive_group:".$id_string,"-".$drive_group.":".$variable;
					   $an->data->{health}{new}{$health_source_name} = 10;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
		}
	}
	
	# Controllers.
	foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{serial_number}{$serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "controller::serial_number::${serial_number}::variable::$variable", value1 => $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{controller}{serial_number}{$serial_number}{variable}{$variable};
			if (($variable eq "alarm_state") && (lc($value) ne "missing") && (lc($value) ne "off"))
			{
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "memory_correctable_errors") && ($value ne "0"))
			{
				# TODO: I might want to scale this where 1~X = 1, Y~Z = 3, etc
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 1;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "memory_uncorrectable_errors") && ($value ne "0"))
			{
				# TODO: I might want to scale this where 1~X = 5, Y~Z = 10, etc
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif (($variable eq "controller_status") && (lc($value) ne "optimal"))
			{
				# 'Needs Attention' when array degrades
				my $health_source_name                           = "controller:".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::controller:$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# Physical Drives.
	foreach my $hpacucli_virtual_drive_id_string (sort {$a cmp $b} keys %{$an->data->{virtual_drive}})
	{
		foreach my $drive_group (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}})
		{
			foreach my $enclosure_id (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}})
			{
				foreach my $slot_number (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}})
				{
					foreach my $variable (sort {$a cmp $b} keys %{$an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}})
					{
						$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
							name1 => "virtual_drive::${hpacucli_virtual_drive_id_string}::drive_group::${drive_group}::enclosure_id::${enclosure_id}::slot_number::${slot_number}::variable::$variable", value1 => $an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable}, 
						}, file => $THIS_FILE, line => __LINE__});
						
						my $value = $an->data->{virtual_drive}{$hpacucli_virtual_drive_id_string}{drive_group}{$drive_group}{enclosure_id}{$enclosure_id}{slot_number}{$slot_number}{variable}{$variable};
						if (($variable eq "media_error_count") && ($value ne "0"))
						{
							# TODO: I might want to scale this where 1~X = 1, Y~Z = 3, etc
							my $health_source_name                           = "drive:".$variable;
							   $an->data->{health}{new}{$health_source_name} = 1;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						elsif (($variable eq "other_error_count") && ($value ne "0"))
						{
							# TODO: I might want to scale this where 1~X = 1, Y~Z = 3, etc
							my $health_source_name                           = "drive:".$variable;
							   $an->data->{health}{new}{$health_source_name} = 1;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
						elsif (($variable eq "predictive_failure_count") && ($value ne "0"))
						{
							# TODO: I might want to scale this where 1~X = 3, Y~Z = 3, etc
							my $health_source_name                           = "drive:".$variable;
							   $an->data->{health}{new}{$health_source_name} = 3;
							$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
								name1 => "health::new::controller:alarm-state", value1 => $an->data->{health}{new}{'controller:alarm-state'}, 
							}, file => $THIS_FILE, line => __LINE__});
						}
					}
				}
			}
		}
	}
	
	# Cachevaults.
	foreach my $cachevault_serial_number (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "cachevault::serial_number::${cachevault_serial_number}::variable::$variable", value1 => $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable}, 
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{cachevault}{serial_number}{$cachevault_serial_number}{variable}{$variable};
			if (($variable eq "replacement_required") && (lc($value) eq "yes"))
			{
				my $health_source_name                           = "cachevault:".$cachevault_serial_number.":".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	
	# BBUs
	foreach my $bbu_serial_number (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}})
	{
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}})
		{
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "bbu::serial_number::${bbu_serial_number}::variable::$variable", value1 => $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable},
			}, file => $THIS_FILE, line => __LINE__});
			
			my $value = $an->data->{bbu}{serial_number}{$bbu_serial_number}{variable}{$variable};
			if (($variable eq "replacement_required") && (lc($value) eq "yes"))
			{
				my $health_source_name                           = "bbu:".$bbu_serial_number.":".$variable;
				   $an->data->{health}{new}{$health_source_name} = 5;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "health::new::$health_source_name", value1 => $an->data->{health}{new}{$health_source_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
=cut

	return(0);
}

# This looks at each DB's 'updated' table to see if any are behind. If any are, it will update the tables 
# based on the time the last entry was made for a given host.
sub update_db
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
		name1 => "scancore::db_resync_needed", value1 => $an->data->{scancore}{db_resync_needed}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{db_resync_needed})
	{
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Update Controllers and the various dangly bits hanging off them.
		update_db_controllers($an);
		update_db_cache_modules($an);
		update_db_arrays($an);
		update_db_logical_drives($an);
		update_db_physical_drives($an);
		update_db_variables($an);
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# Update the 'hpacucli_variables' table.
sub update_db_variables
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_variables" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_variables' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_variable_uuid, 
    hpacucli_variable_source_table, 
    hpacucli_variable_source_uuid, 
    hpacucli_variable_is_temperature, 
    hpacucli_variable_name, 
    hpacucli_variable_value, 
    modified_date 
FROM 
    history.hpacucli_variables
WHERE
    hpacucli_variable_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_variable_uuid            = $row->[0]; 
			my $hpacucli_variable_source_table    = $row->[1]; 
			my $hpacucli_variable_source_uuid     = $row->[2]; 
			my $hpacucli_variable_is_temperature  = $row->[3]; 
			my $hpacucli_variable_name            = $row->[4]; 
			my $hpacucli_variable_value           = defined $row->[5] ? $row->[5] : ""; 
			my $modified_date                     = $row->[6];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "hpacucli_variable_uuid",           value1 => $hpacucli_variable_uuid, 
				name2 => "hpacucli_variable_source_table",   value2 => $hpacucli_variable_source_table, 
				name3 => "hpacucli_variable_source_uuid",    value3 => $hpacucli_variable_source_uuid, 
				name4 => "hpacucli_variable_is_temperature", value4 => $hpacucli_variable_is_temperature, 
				name5 => "hpacucli_variable_name",           value5 => $hpacucli_variable_name, 
				name6 => "hpacucli_variable_value",          value6 => $hpacucli_variable_value, 
				name7 => "modified_date",                    value7 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid} = {
				hpacucli_variable_source_table		=>	$hpacucli_variable_source_table, 
				hpacucli_variable_source_uuid		=>	$hpacucli_variable_source_uuid, 
				hpacucli_variable_is_temperature	=>	$hpacucli_variable_is_temperature, 
				hpacucli_variable_name			=>	$hpacucli_variable_name, 
				hpacucli_variable_value			=>	$hpacucli_variable_value, 
			};
			$an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid} = {
				hpacucli_variable_source_table		=>	$hpacucli_variable_source_table, 
				hpacucli_variable_source_uuid		=>	$hpacucli_variable_source_uuid, 
				hpacucli_variable_is_temperature	=>	$hpacucli_variable_is_temperature, 
				hpacucli_variable_name			=>	$hpacucli_variable_name, 
				hpacucli_variable_value			=>	$hpacucli_variable_value, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_variables}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_variable_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}})
		{
			my $hpacucli_variable_source_table   = $an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{hpacucli_variable_source_table};
			my $hpacucli_variable_source_uuid    = $an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{hpacucli_variable_source_uuid};
			my $hpacucli_variable_is_temperature = $an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{hpacucli_variable_is_temperature};
			my $hpacucli_variable_name           = $an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{hpacucli_variable_name};
			my $hpacucli_variable_value          = $an->data->{db_data}{unified}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{hpacucli_variable_value};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "hpacucli_variable_uuid",           value1 => $hpacucli_variable_uuid, 
				name2 => "hpacucli_variable_source_table",   value2 => $hpacucli_variable_source_table, 
				name3 => "hpacucli_variable_source_uuid",    value3 => $hpacucli_variable_source_uuid, 
				name4 => "hpacucli_variable_is_temperature", value4 => $hpacucli_variable_is_temperature, 
				name5 => "hpacucli_variable_name",           value5 => $hpacucli_variable_name, 
				name6 => "hpacucli_variable_value",          value6 => $hpacucli_variable_value, 
			}, file => $THIS_FILE, line => __LINE__});
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_variable_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_variables::hpacucli_variable_uuid::${hpacucli_variable_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_variables::hpacucli_variable_uuid::${hpacucli_variable_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_variables}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_variables::modified_date::${modified_date}::hpacucli_variable_uuid::${hpacucli_variable_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# hpacucli_variable_uuid from this host.
							my $query = "
UPDATE 
    public.hpacucli_variables
SET
    hpacucli_variable_source_table   = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_table).", 
    hpacucli_variable_source_uuid    = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_uuid).", 
    hpacucli_variable_is_temperature = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_is_temperature).", 
    hpacucli_variable_name           = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_name).", 
    hpacucli_variable_value          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_value).", 
    modified_date                    = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_variable_uuid           = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_variables
(
    hpacucli_variable_uuid, 
    hpacucli_variable_host_uuid, 
    hpacucli_variable_source_table, 
    hpacucli_variable_source_uuid, 
    hpacucli_variable_is_temperature, 
    hpacucli_variable_name, 
    hpacucli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_variable_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_variables}{modified_date}{$modified_date}{hpacucli_variable_uuid}{$hpacucli_variable_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_variables
(
    hpacucli_variable_uuid, 
    hpacucli_variable_host_uuid, 
    hpacucli_variable_source_table, 
    hpacucli_variable_source_uuid, 
    hpacucli_variable_is_temperature, 
    hpacucli_variable_name, 
    hpacucli_variable_value, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_table).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_source_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_is_temperature).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_variable_value).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_variable_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_variable_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'hpacucli_physical_drives' table.
sub update_db_physical_drives
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_physical_drives" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_physical_drives' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_physical_drive_uuid, 
    hpacucli_physical_drive_logical_drive_uuid, 
    hpacucli_physical_drive_serial_number,
    hpacucli_physical_drive_model,
    hpacucli_physical_drive_temperature,
    hpacucli_physical_drive_interface,
    hpacucli_physical_drive_status,
    hpacucli_physical_drive_size,
    hpacucli_physical_drive_type,
    hpacucli_physical_drive_rpm,
    modified_date 
FROM 
    history.hpacucli_physical_drives
WHERE
    hpacucli_physical_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_physical_drive_uuid               = $row->[0]; 
			my $hpacucli_physical_drive_logical_drive_uuid = $row->[1];
			my $hpacucli_physical_drive_serial_number      = $row->[2];
			my $hpacucli_physical_drive_model              = $row->[3];
			my $hpacucli_physical_drive_temperature        = $row->[4];
			my $hpacucli_physical_drive_interface          = $row->[5];
			my $hpacucli_physical_drive_status             = $row->[6];
			my $hpacucli_physical_drive_size               = $row->[7];
			my $hpacucli_physical_drive_type               = $row->[8];
			my $hpacucli_physical_drive_rpm                = $row->[9];
			my $modified_date                              = $row->[10];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
				name1  => "hpacucli_physical_drive_uuid",               value1  => $hpacucli_physical_drive_uuid, 
				name2  => "hpacucli_physical_drive_logical_drive_uuid", value2  => $hpacucli_physical_drive_logical_drive_uuid, 
				name3  => "hpacucli_physical_drive_serial_number",      value3  => $hpacucli_physical_drive_serial_number, 
				name4  => "hpacucli_physical_drive_model",              value4  => $hpacucli_physical_drive_model, 
				name5  => "hpacucli_physical_drive_temperature",        value5  => $hpacucli_physical_drive_temperature, 
				name6  => "hpacucli_physical_drive_interface",          value6  => $hpacucli_physical_drive_interface, 
				name7  => "hpacucli_physical_drive_status",             value7  => $hpacucli_physical_drive_status, 
				name8  => "hpacucli_physical_drive_size",               value8  => $hpacucli_physical_drive_size, 
				name9  => "hpacucli_physical_drive_type",               value9  => $hpacucli_physical_drive_type, 
				name10 => "hpacucli_physical_drive_rpm",                value10 => $hpacucli_physical_drive_rpm, 
				name11 => "modified_date",                              value11 => $modified_date, 
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid} = {
				hpacucli_physical_drive_logical_drive_uuid	=>	$hpacucli_physical_drive_logical_drive_uuid, 
				hpacucli_physical_drive_serial_number		=>	$hpacucli_physical_drive_serial_number, 
				hpacucli_physical_drive_model			=>	$hpacucli_physical_drive_model, 
				hpacucli_physical_drive_temperature		=>	$hpacucli_physical_drive_temperature, 
				hpacucli_physical_drive_interface		=>	$hpacucli_physical_drive_interface, 
				hpacucli_physical_drive_status			=>	$hpacucli_physical_drive_status, 
				hpacucli_physical_drive_size			=>	$hpacucli_physical_drive_size, 
				hpacucli_physical_drive_type			=>	$hpacucli_physical_drive_type, 
				hpacucli_physical_drive_rpm			=>	$hpacucli_physical_drive_rpm, 
			};
			$an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid} = {
				hpacucli_physical_drive_logical_drive_uuid	=>	$hpacucli_physical_drive_logical_drive_uuid, 
				hpacucli_physical_drive_serial_number		=>	$hpacucli_physical_drive_serial_number, 
				hpacucli_physical_drive_model			=>	$hpacucli_physical_drive_model, 
				hpacucli_physical_drive_temperature		=>	$hpacucli_physical_drive_temperature, 
				hpacucli_physical_drive_interface		=>	$hpacucli_physical_drive_interface, 
				hpacucli_physical_drive_status			=>	$hpacucli_physical_drive_status, 
				hpacucli_physical_drive_size			=>	$hpacucli_physical_drive_size, 
				hpacucli_physical_drive_type			=>	$hpacucli_physical_drive_type, 
				hpacucli_physical_drive_rpm			=>	$hpacucli_physical_drive_rpm, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_physical_drive_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}})
		{
			my $hpacucli_physical_drive_logical_drive_uuid = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_logical_drive_uuid};
			my $hpacucli_physical_drive_serial_number      = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_serial_number};
			my $hpacucli_physical_drive_model              = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_model};
			my $hpacucli_physical_drive_temperature        = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_temperature};
			my $hpacucli_physical_drive_interface          = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_interface};
			my $hpacucli_physical_drive_status             = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_status};
			my $hpacucli_physical_drive_size               = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_size};
			my $hpacucli_physical_drive_type               = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_type};
			my $hpacucli_physical_drive_rpm                = $an->data->{db_data}{unified}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{hpacucli_physical_drive_rpm};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0010", message_variables => {
				name1  => "hpacucli_physical_drive_uuid",               value1  => $hpacucli_physical_drive_uuid, 
				name2  => "hpacucli_physical_drive_logical_drive_uuid", value2  => $hpacucli_physical_drive_logical_drive_uuid, 
				name3  => "hpacucli_physical_drive_serial_number",      value3  => $hpacucli_physical_drive_serial_number, 
				name4  => "hpacucli_physical_drive_model",              value4  => $hpacucli_physical_drive_model, 
				name5  => "hpacucli_physical_drive_temperature",        value5  => $hpacucli_physical_drive_temperature, 
				name6  => "hpacucli_physical_drive_interface",          value6  => $hpacucli_physical_drive_interface, 
				name7  => "hpacucli_physical_drive_status",             value7  => $hpacucli_physical_drive_status, 
				name8  => "hpacucli_physical_drive_size",               value8  => $hpacucli_physical_drive_size, 
				name9  => "hpacucli_physical_drive_type",               value9  => $hpacucli_physical_drive_type, 
				name10 => "hpacucli_physical_drive_rpm",                value10 => $hpacucli_physical_drive_rpm, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_hpacucli_physical_drive_temperature =  $an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_temperature);
			my $quoted_hpacucli_physical_drive_size        =  $an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_size);
			my $quoted_hpacucli_physical_drive_rpm         =  $an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_rpm);
			   $quoted_hpacucli_physical_drive_temperature =~ s/^'(.*?)'$/$1/;
			   $quoted_hpacucli_physical_drive_size        =~ s/^'(.*?)'$/$1/;
			   $quoted_hpacucli_physical_drive_rpm         =~ s/^'(.*?)'$/$1/;
			if ((($quoted_hpacucli_physical_drive_temperature) && ($quoted_hpacucli_physical_drive_temperature =~ /\D/)) or 
			    (($quoted_hpacucli_physical_drive_size)        && ($quoted_hpacucli_physical_drive_size =~ /\D/))        or 
			    (($quoted_hpacucli_physical_drive_rpm)         && ($quoted_hpacucli_physical_drive_rpm =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0010", message_variables => { 
					temperature => $quoted_hpacucli_physical_drive_temperature,
					size        => $quoted_hpacucli_physical_drive_size,
					rpm         => $quoted_hpacucli_physical_drive_rpm,
				}, code => 8, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 8});
			}
			$quoted_hpacucli_physical_drive_temperature = "NULL" if $quoted_hpacucli_physical_drive_temperature eq "";
			$quoted_hpacucli_physical_drive_size        = "NULL" if $quoted_hpacucli_physical_drive_size        eq "";
			$quoted_hpacucli_physical_drive_rpm         = "NULL" if $quoted_hpacucli_physical_drive_rpm         eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_physical_drive_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_physical_drives::hpacucli_physical_drive_uuid::${hpacucli_physical_drive_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_physical_drives::hpacucli_physical_drive_uuid::${hpacucli_physical_drive_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_physical_drives}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_physical_drives::modified_date::${modified_date}::hpacucli_physical_drive_uuid::${hpacucli_physical_drive_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# hpacucli_physical_drive_uuid from this host.
							my $query = "
UPDATE 
    public.hpacucli_physical_drives
SET
    hpacucli_physical_drive_logical_drive_uuid = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_logical_drive_uuid).", 
    hpacucli_physical_drive_serial_number      = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_serial_number).", 
    hpacucli_physical_drive_model              = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_model).", 
    hpacucli_physical_drive_temperature        = $quoted_hpacucli_physical_drive_temperature, 
    hpacucli_physical_drive_interface          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_interface).", 
    hpacucli_physical_drive_status             = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_status).", 
    hpacucli_physical_drive_size               = $quoted_hpacucli_physical_drive_size, 
    hpacucli_physical_drive_type               = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_type).", 
    hpacucli_physical_drive_rpm                = $quoted_hpacucli_physical_drive_rpm, 
    modified_date                              = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_physical_drive_uuid               = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_physical_drives
(
    hpacucli_physical_drive_uuid, 
    hpacucli_physical_drive_host_uuid, 
    hpacucli_physical_drive_logical_drive_uuid, 
    hpacucli_physical_drive_serial_number, 
    hpacucli_physical_drive_model, 
    hpacucli_physical_drive_temperature, 
    hpacucli_physical_drive_interface, 
    hpacucli_physical_drive_status, 
    hpacucli_physical_drive_size, 
    hpacucli_physical_drive_type, 
    hpacucli_physical_drive_rpm, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_logical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_model).", 
    $quoted_hpacucli_physical_drive_temperature, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_interface).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_status).", 
    $quoted_hpacucli_physical_drive_size, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_type).", 
    $quoted_hpacucli_physical_drive_rpm, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_physical_drive_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_physical_drives}{modified_date}{$modified_date}{hpacucli_physical_drive_uuid}{$hpacucli_physical_drive_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_physical_drives
(
    hpacucli_physical_drive_uuid, 
    hpacucli_physical_drive_host_uuid, 
    hpacucli_physical_drive_logical_drive_uuid, 
    hpacucli_physical_drive_serial_number, 
    hpacucli_physical_drive_model, 
    hpacucli_physical_drive_temperature, 
    hpacucli_physical_drive_interface, 
    hpacucli_physical_drive_status, 
    hpacucli_physical_drive_size, 
    hpacucli_physical_drive_type, 
    hpacucli_physical_drive_rpm, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_logical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_model).", 
    $quoted_hpacucli_physical_drive_temperature, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_interface).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_status).", 
    $quoted_hpacucli_physical_drive_size, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_physical_drive_type).", 
    $quoted_hpacucli_physical_drive_rpm, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_physical_drive_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_physical_drive_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'hpacucli_logical_drives' table.
sub update_db_logical_drives
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_logical_drives" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_logical_drives' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		 
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_logical_drive_uuid, 
    hpacucli_logical_drive_array_uuid,
    hpacucli_logical_drive_name,
    hpacucli_logical_drive_caching,
    hpacucli_logical_drive_os_device_name,
    hpacucli_logical_drive_type,
    hpacucli_logical_drive_raid_level,
    hpacucli_logical_drive_size,
    hpacucli_logical_drive_strip_size,
    hpacucli_logical_drive_stripe_size,
    hpacucli_logical_drive_status,
    hpacucli_logical_drive_wwn,
    modified_date 
FROM 
    history.hpacucli_logical_drives
WHERE
    hpacucli_logical_drive_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_logical_drive_uuid            = $row->[0]; 
			my $hpacucli_logical_drive_array_uuid      = $row->[1];
			my $hpacucli_logical_drive_name            = $row->[2];
			my $hpacucli_logical_drive_caching         = $row->[3];
			my $hpacucli_logical_drive_os_device_name  = $row->[4];
			my $hpacucli_logical_drive_type            = $row->[5];
			my $hpacucli_logical_drive_raid_level      = $row->[6];
			my $hpacucli_logical_drive_size            = $row->[7];
			my $hpacucli_logical_drive_strip_size      = $row->[8];
			my $hpacucli_logical_drive_stripe_size     = $row->[9];
			my $hpacucli_logical_drive_status          = $row->[10];
			my $hpacucli_logical_drive_wwn             = $row->[11];
			my $modified_date                          = $row->[12];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0013", message_variables => {
				name1  => "hpacucli_logical_drive_uuid",           value1  => $hpacucli_logical_drive_uuid, 
				name2  => "hpacucli_logical_drive_array_uuid",     value2  => $hpacucli_logical_drive_array_uuid, 
				name3  => "hpacucli_logical_drive_name",           value3  => $hpacucli_logical_drive_name, 
				name4  => "hpacucli_logical_drive_caching",        value4  => $hpacucli_logical_drive_caching, 
				name5  => "hpacucli_logical_drive_os_device_name", value5  => $hpacucli_logical_drive_os_device_name, 
				name6  => "hpacucli_logical_drive_type",           value6  => $hpacucli_logical_drive_type, 
				name7  => "hpacucli_logical_drive_raid_level",     value7  => $hpacucli_logical_drive_raid_level, 
				name8  => "hpacucli_logical_drive_size",           value8  => $hpacucli_logical_drive_size, 
				name9  => "hpacucli_logical_drive_strip_size",     value9  => $hpacucli_logical_drive_strip_size, 
				name11 => "hpacucli_logical_drive_stripe_size",    value11 => $hpacucli_logical_drive_stripe_size, 
				name12 => "hpacucli_logical_drive_status",         value12 => $hpacucli_logical_drive_status, 
				name13 => "hpacucli_logical_drive_wwn",            value13 => $hpacucli_logical_drive_wwn, 
				name14 => "modified_date",                         value14 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid} = {
				hpacucli_logical_drive_array_uuid	=>	$hpacucli_logical_drive_array_uuid, 
				hpacucli_logical_drive_name		=>	$hpacucli_logical_drive_name, 
				hpacucli_logical_drive_caching		=>	$hpacucli_logical_drive_caching, 
				hpacucli_logical_drive_os_device_name	=>	$hpacucli_logical_drive_os_device_name, 
				hpacucli_logical_drive_type		=>	$hpacucli_logical_drive_type, 
				hpacucli_logical_drive_raid_level	=>	$hpacucli_logical_drive_raid_level, 
				hpacucli_logical_drive_size		=>	$hpacucli_logical_drive_size, 
				hpacucli_logical_drive_strip_size	=>	$hpacucli_logical_drive_strip_size, 
				hpacucli_logical_drive_stripe_size	=>	$hpacucli_logical_drive_stripe_size, 
				hpacucli_logical_drive_status		=>	$hpacucli_logical_drive_status, 
				hpacucli_logical_drive_wwn		=>	$hpacucli_logical_drive_wwn, 
			};
			$an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid} = {
				hpacucli_logical_drive_array_uuid	=>	$hpacucli_logical_drive_array_uuid, 
				hpacucli_logical_drive_name		=>	$hpacucli_logical_drive_name, 
				hpacucli_logical_drive_caching		=>	$hpacucli_logical_drive_caching, 
				hpacucli_logical_drive_os_device_name	=>	$hpacucli_logical_drive_os_device_name, 
				hpacucli_logical_drive_type		=>	$hpacucli_logical_drive_type, 
				hpacucli_logical_drive_raid_level	=>	$hpacucli_logical_drive_raid_level, 
				hpacucli_logical_drive_size		=>	$hpacucli_logical_drive_size, 
				hpacucli_logical_drive_strip_size	=>	$hpacucli_logical_drive_strip_size, 
				hpacucli_logical_drive_stripe_size	=>	$hpacucli_logical_drive_stripe_size, 
				hpacucli_logical_drive_status		=>	$hpacucli_logical_drive_status, 
				hpacucli_logical_drive_wwn		=>	$hpacucli_logical_drive_wwn, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_logical_drive_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}})
		{
			my $hpacucli_logical_drive_array_uuid     = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_array_uuid};
			my $hpacucli_logical_drive_name           = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_name};
			my $hpacucli_logical_drive_caching        = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_caching};
			my $hpacucli_logical_drive_os_device_name = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_os_device_name};
			my $hpacucli_logical_drive_type           = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_type};
			my $hpacucli_logical_drive_raid_level     = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_raid_level};
			my $hpacucli_logical_drive_size           = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_size};
			my $hpacucli_logical_drive_strip_size     = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_strip_size};
			my $hpacucli_logical_drive_stripe_size    = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_stripe_size};
			my $hpacucli_logical_drive_status         = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_status};
			my $hpacucli_logical_drive_wwn            = $an->data->{db_data}{unified}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{hpacucli_logical_drive_wwn};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0012", message_variables => {
				name1  => "hpacucli_logical_drive_uuid",            value1  => $hpacucli_logical_drive_uuid, 
				name2  => "hpacucli_logical_drive_array_uuid",      value2  => $hpacucli_logical_drive_array_uuid, 
				name3  => "hpacucli_logical_drive_name",            value3  => $hpacucli_logical_drive_name, 
				name4  => "hpacucli_logical_drive_caching",         value4  => $hpacucli_logical_drive_caching, 
				name5  => "hpacucli_logical_drive_os_device_name",  value5  => $hpacucli_logical_drive_os_device_name, 
				name6  => "hpacucli_logical_drive_type",            value6  => $hpacucli_logical_drive_type, 
				name7  => "hpacucli_logical_drive_raid_level",      value7  => $hpacucli_logical_drive_raid_level, 
				name8  => "hpacucli_logical_drive_size",            value8  => $hpacucli_logical_drive_size, 
				name9  => "hpacucli_logical_drive_strip_size",      value9  => $hpacucli_logical_drive_strip_size, 
				name10 => "hpacucli_logical_drive_stripe_size",     value10 => $hpacucli_logical_drive_stripe_size, 
				name11 => "hpacucli_logical_drive_status",          value11 => $hpacucli_logical_drive_status, 
				name12 => "hpacucli_logical_drive_wwn",             value12 => $hpacucli_logical_drive_wwn, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_hpacucli_logical_drive_size        =  $an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_size);
			my $quoted_hpacucli_logical_drive_strip_size  =  $an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_strip_size);
			my $quoted_hpacucli_logical_drive_stripe_size =  $an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_stripe_size);
			   $quoted_hpacucli_logical_drive_size        =~ s/^'(.*?)'$/$1/;
			   $quoted_hpacucli_logical_drive_strip_size  =~ s/^'(.*?)'$/$1/;
			   $quoted_hpacucli_logical_drive_stripe_size =~ s/^'(.*?)'$/$1/;
			if ((($quoted_hpacucli_logical_drive_size)        && ($quoted_hpacucli_logical_drive_size =~ /\D/))       or 
			    (($quoted_hpacucli_logical_drive_strip_size)  && ($quoted_hpacucli_logical_drive_strip_size =~ /\D/)) or 
			    (($quoted_hpacucli_logical_drive_stripe_size) && ($quoted_hpacucli_logical_drive_stripe_size =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0009", message_variables => { 
					logical_drive_size => $quoted_hpacucli_logical_drive_size,
					strip_size         => $quoted_hpacucli_logical_drive_strip_size,
					stripe_size        => $quoted_hpacucli_logical_drive_stripe_size,
				}, code => 7, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 7});
			}
			$quoted_hpacucli_logical_drive_size        = "NULL" if $quoted_hpacucli_logical_drive_size        eq "";
			$quoted_hpacucli_logical_drive_strip_size  = "NULL" if $quoted_hpacucli_logical_drive_strip_size  eq "";
			$quoted_hpacucli_logical_drive_stripe_size = "NULL" if $quoted_hpacucli_logical_drive_stripe_size eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_logical_drive_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_logical_drives::hpacucli_logical_drive_uuid::${hpacucli_logical_drive_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_logical_drives::hpacucli_logical_drive_uuid::${hpacucli_logical_drive_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_logical_drives}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_logical_drives::modified_date::${modified_date}::hpacucli_logical_drive_uuid::${hpacucli_logical_drive_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# hpacucli_logical_drive_uuid from this host.
							my $query = "
UPDATE 
    public.hpacucli_logical_drives
SET
    hpacucli_logical_drive_array_uuid     = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_array_uuid).", 
    hpacucli_logical_drive_name           = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_name).", 
    hpacucli_logical_drive_caching        = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_caching).", 
    hpacucli_logical_drive_os_device_name = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_os_device_name).", 
    hpacucli_logical_drive_type           = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_type).", 
    hpacucli_logical_drive_raid_level     = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_raid_level).", 
    hpacucli_logical_drive_size           = $quoted_hpacucli_logical_drive_size, 
    hpacucli_logical_drive_strip_size     = $quoted_hpacucli_logical_drive_strip_size, 
    hpacucli_logical_drive_stripe_size    = $quoted_hpacucli_logical_drive_stripe_size, 
    hpacucli_logical_drive_status         = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_status).", 
    hpacucli_logical_drive_wwn            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_wwn).", 
    modified_date                         = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_logical_drive_uuid           = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_logical_drives
(
    hpacucli_logical_drive_uuid, 
    hpacucli_logical_drive_host_uuid, 
    hpacucli_logical_drive_array_uuid, 
    hpacucli_logical_drive_name, 
    hpacucli_logical_drive_caching, 
    hpacucli_logical_drive_os_device_name, 
    hpacucli_logical_drive_type, 
    hpacucli_logical_drive_raid_level, 
    hpacucli_logical_drive_size, 
    hpacucli_logical_drive_strip_size, 
    hpacucli_logical_drive_stripe_size, 
    hpacucli_logical_drive_status, 
    hpacucli_logical_drive_wwn, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_array_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_caching).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_os_device_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_raid_level).", 
    $quoted_hpacucli_logical_drive_size, 
    $quoted_hpacucli_logical_drive_strip_size, 
    $quoted_hpacucli_logical_drive_stripe_size, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_wwn).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_logical_drive_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_logical_drives}{modified_date}{$modified_date}{hpacucli_logical_drive_uuid}{$hpacucli_logical_drive_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_logical_drives
(
    hpacucli_logical_drive_uuid, 
    hpacucli_logical_drive_host_uuid, 
    hpacucli_logical_drive_array_uuid, 
    hpacucli_logical_drive_name, 
    hpacucli_logical_drive_caching, 
    hpacucli_logical_drive_os_device_name, 
    hpacucli_logical_drive_type, 
    hpacucli_logical_drive_raid_level, 
    hpacucli_logical_drive_size, 
    hpacucli_logical_drive_strip_size, 
    hpacucli_logical_drive_stripe_size, 
    hpacucli_logical_drive_status, 
    hpacucli_logical_drive_wwn, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_array_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_caching).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_os_device_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_raid_level).", 
    $quoted_hpacucli_logical_drive_size, 
    $quoted_hpacucli_logical_drive_strip_size, 
    $quoted_hpacucli_logical_drive_stripe_size, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_logical_drive_wwn).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_logical_drive_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_logical_drive_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'hpacucli_arrays' table.
sub update_db_arrays
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_arrays" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_arrays' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_array_uuid, 
    hpacucli_array_controller_uuid, 
    hpacucli_array_name, 
    hpacucli_array_type, 
    hpacucli_array_status, 
    hpacucli_array_unused_space, 
    modified_date 
FROM 
    history.hpacucli_arrays
WHERE
    hpacucli_array_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_array_uuid            = $row->[0];
			my $hpacucli_array_controller_uuid = $row->[1];
			my $hpacucli_array_name            = $row->[2];
			my $hpacucli_array_type            = $row->[3];
			my $hpacucli_array_status          = $row->[4];
			my $hpacucli_array_unused_space    = $row->[5];
			my $modified_date                  = $row->[6];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "hpacucli_array_uuid",            value1 => $hpacucli_array_uuid, 
				name2 => "hpacucli_array_controller_uuid", value2 => $hpacucli_array_controller_uuid, 
				name3 => "hpacucli_array_name",            value3 => $hpacucli_array_name, 
				name4 => "hpacucli_array_type",            value4 => $hpacucli_array_type, 
				name5 => "hpacucli_array_status",          value5 => $hpacucli_array_status, 
				name6 => "hpacucli_array_unused_space",    value6 => $hpacucli_array_unused_space, 
				name7 => "modified_date",                  value7 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid} = {
				hpacucli_array_controller_uuid	=>	$hpacucli_array_controller_uuid, 
				hpacucli_array_name		=>	$hpacucli_array_name, 
				hpacucli_array_type		=>	$hpacucli_array_type, 
				hpacucli_array_status		=>	$hpacucli_array_status, 
				hpacucli_array_unused_space	=>	$hpacucli_array_unused_space, 
			};
			$an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid} = {
				hpacucli_array_controller_uuid	=>	$hpacucli_array_controller_uuid, 
				hpacucli_array_name		=>	$hpacucli_array_name, 
				hpacucli_array_type		=>	$hpacucli_array_type, 
				hpacucli_array_status		=>	$hpacucli_array_status, 
				hpacucli_array_unused_space	=>	$hpacucli_array_unused_space, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_array_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}})
		{
			my $hpacucli_array_controller_uuid = $an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}{hpacucli_array_controller_uuid};
			my $hpacucli_array_name            = $an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}{hpacucli_array_name};
			my $hpacucli_array_type            = $an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}{hpacucli_array_type};
			my $hpacucli_array_status          = $an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}{hpacucli_array_status};
			my $hpacucli_array_unused_space    = $an->data->{db_data}{unified}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}{hpacucli_array_unused_space};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "hpacucli_array_uuid",            value1 => $hpacucli_array_uuid, 
				name2 => "hpacucli_array_controller_uuid", value2 => $hpacucli_array_controller_uuid, 
				name3 => "hpacucli_array_name",            value3 => $hpacucli_array_name, 
				name4 => "hpacucli_array_type",            value4 => $hpacucli_array_type, 
				name5 => "hpacucli_array_status",          value5 => $hpacucli_array_status, 
				name6 => "hpacucli_array_unused_space",    value6 => $hpacucli_array_unused_space, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_hpacucli_array_unused_space =  $an->data->{sys}{use_db_fh}->quote($hpacucli_array_unused_space);
			   $quoted_hpacucli_array_unused_space =~ s/^'(.*?)'$/$1/;
			if ((($quoted_hpacucli_array_unused_space) && ($quoted_hpacucli_array_unused_space =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0008", message_variables => { 
					unused_space => $quoted_hpacucli_array_unused_space,
				}, code => 6, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 6});
			}
			$quoted_hpacucli_array_unused_space = "NULL" if $quoted_hpacucli_array_unused_space eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_array_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_arrays::hpacucli_array_uuid::${hpacucli_array_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_arrays::hpacucli_array_uuid::${hpacucli_array_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_arrays}{hpacucli_array_uuid}{$hpacucli_array_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_arrays::modified_date::${modified_date}::hpacucli_array_uuid::${hpacucli_array_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# hpacucli_array_uuid from this host.
							my $query = "
UPDATE 
    public.hpacucli_arrays
SET
    hpacucli_array_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_controller_uuid).", 
    hpacucli_array_name            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_name).", 
    hpacucli_array_type            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_type).", 
    hpacucli_array_status          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_status).", 
    hpacucli_array_unused_space    = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_unused_space).", 
    modified_date                  = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_array_uuid            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_arrays
(
    hpacucli_array_uuid, 
    hpacucli_array_host_uuid, 
    hpacucli_array_controller_uuid, 
    hpacucli_array_name, 
    hpacucli_array_type, 
    hpacucli_array_status, 
    hpacucli_array_unused_space, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_unused_space).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_array_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_arrays}{modified_date}{$modified_date}{hpacucli_array_uuid}{$hpacucli_array_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_arrays
(
    hpacucli_array_uuid, 
    hpacucli_array_host_uuid, 
    hpacucli_array_controller_uuid, 
    hpacucli_array_name, 
    hpacucli_array_type, 
    hpacucli_array_status, 
    hpacucli_array_unused_space, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_name).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_type).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_array_unused_space).", 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_array_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_array_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'hpacucli_cache_modules' table.
sub update_db_cache_modules
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_cache_modules" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_cache_modules' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_cache_module_uuid, 
    hpacucli_cache_module_controller_uuid, 
    hpacucli_cache_module_serial_number, 
    hpacucli_cache_module_status, 
    hpacucli_cache_module_type, 
    hpacucli_cache_module_size, 
    modified_date 
FROM 
    history.hpacucli_cache_modules
WHERE
    hpacucli_cache_module_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_cache_module_uuid               = $row->[0];
			my $hpacucli_cache_module_controller_uuid    = $row->[1];
			my $hpacucli_cache_module_serial_number      = $row->[2];
			my $hpacucli_cache_module_status             = $row->[3];
			my $hpacucli_cache_module_type               = $row->[4];
			my $hpacucli_cache_module_size               = $row->[5];
			my $modified_date                            = $row->[6];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0007", message_variables => {
				name1 => "hpacucli_cache_module_uuid",            value1 => $hpacucli_cache_module_uuid, 
				name2 => "hpacucli_cache_module_controller_uuid", value2 => $hpacucli_cache_module_controller_uuid, 
				name3 => "hpacucli_cache_module_serial_number",   value3 => $hpacucli_cache_module_serial_number, 
				name4 => "hpacucli_cache_module_status",          value4 => $hpacucli_cache_module_status, 
				name5 => "hpacucli_cache_module_type",            value5 => $hpacucli_cache_module_type, 
				name6 => "hpacucli_cache_module_size",            value6 => $hpacucli_cache_module_size, 
				name7 => "modified_date",                         value7 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid} = {
				hpacucli_cache_module_controller_uuid	=>	$hpacucli_cache_module_controller_uuid, 
				hpacucli_cache_module_serial_number	=>	$hpacucli_cache_module_serial_number, 
				hpacucli_cache_module_status		=>	$hpacucli_cache_module_status, 
				hpacucli_cache_module_type		=>	$hpacucli_cache_module_type, 
				hpacucli_cache_module_size		=>	$hpacucli_cache_module_size, 
			};
			$an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid} = {
				hpacucli_cache_module_controller_uuid	=>	$hpacucli_cache_module_controller_uuid, 
				hpacucli_cache_module_serial_number	=>	$hpacucli_cache_module_serial_number, 
				hpacucli_cache_module_status		=>	$hpacucli_cache_module_status, 
				hpacucli_cache_module_type		=>	$hpacucli_cache_module_type, 
				hpacucli_cache_module_size		=>	$hpacucli_cache_module_size, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_cache_module_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}})
		{
			my $hpacucli_cache_module_controller_uuid = $an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{hpacucli_cache_module_controller_uuid};
			my $hpacucli_cache_module_serial_number   = $an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{hpacucli_cache_module_serial_number};
			my $hpacucli_cache_module_status          = $an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{hpacucli_cache_module_status};
			my $hpacucli_cache_module_type            = $an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{hpacucli_cache_module_type};
			my $hpacucli_cache_module_size            = $an->data->{db_data}{unified}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{hpacucli_cache_module_manufacture_date};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
				name1 => "hpacucli_cache_module_uuid",            value1 => $hpacucli_cache_module_uuid, 
				name2 => "hpacucli_cache_module_controller_uuid", value2 => $hpacucli_cache_module_controller_uuid, 
				name3 => "hpacucli_cache_module_serial_number",   value3 => $hpacucli_cache_module_serial_number, 
				name4 => "hpacucli_cache_module_status",          value4 => $hpacucli_cache_module_status, 
				name5 => "hpacucli_cache_module_type",            value5 => $hpacucli_cache_module_type, 
				name6 => "hpacucli_cache_module_size",            value6 => $hpacucli_cache_module_size, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_hpacucli_cache_module_size =  $an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_size);
			   $hpacucli_cache_module_size        =~ s/^'(.*?)'$/$1/;
			if ((($quoted_hpacucli_cache_module_size) && ($quoted_hpacucli_cache_module_size =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0007", message_variables => { 
					size => $quoted_hpacucli_cache_module_size,
				}, code => 5, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 5});
			}
			$quoted_hpacucli_cache_module_size = "NULL" if $quoted_hpacucli_cache_module_size eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_cache_module_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_cache_modules::hpacucli_cache_module_uuid::${hpacucli_cache_module_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_cache_modules::hpacucli_cache_module_uuid::${hpacucli_cache_module_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_cache_modules}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_cache_modules::modified_date::${modified_date}::hpacucli_cache_module_uuid::${hpacucli_cache_module_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid})
						{
							# No, so UPDATE it. Note that I don't need to worry
							# about the host_uuid because we've only got 
							# hpacucli_cache_module_uuid from this host.
							my $query = "
UPDATE 
    public.hpacucli_cache_modules
SET
    hpacucli_cache_module_controller_uuid = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_controller_uuid).", 
    hpacucli_cache_module_serial_number   = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_serial_number).", 
    hpacucli_cache_module_status          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_status).", 
    hpacucli_cache_module_type            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_type).", 
    hpacucli_cache_module_size            = $quoted_hpacucli_cache_module_size, 
    modified_date                         = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_cache_module_uuid            = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_cache_modules
(
    hpacucli_cache_module_uuid, 
    hpacucli_cache_module_host_uuid, 
    hpacucli_cache_module_controller_uuid, 
    hpacucli_cache_module_serial_number, 
    hpacucli_cache_module_status, 
    hpacucli_cache_module_type, 
    hpacucli_cache_module_size, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_type).", 
    $quoted_hpacucli_cache_module_size, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_cache_module_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_cache_modules}{modified_date}{$modified_date}{hpacucli_cache_module_uuid}{$hpacucli_cache_module_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_cache_modules
(
    hpacucli_cache_module_uuid, 
    hpacucli_cache_module_host_uuid, 
    hpacucli_cache_module_controller_uuid, 
    hpacucli_cache_module_serial_number, 
    hpacucli_cache_module_status, 
    hpacucli_cache_module_type, 
    hpacucli_cache_module_size, 
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_status).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_cache_module_type).", 
    $quoted_hpacucli_cache_module_size, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_cache_module_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_cache_module_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# Update the 'hpacucli_controllers' table.
sub update_db_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "update_db_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Now read in all the 'hpacucli_controllers' table records that came from us.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# These will store the INSERTs for this DB, if needed.
		$an->data->{db_resync}{$id}{sql}          = [];
		$an->data->{db_resync}{$id}{public}{sql}  = [];
		$an->data->{db_resync}{$id}{history}{sql} = [];
		
		# Read in the history schema
		my $query = "
SELECT 
    hpacucli_controller_uuid, 
    hpacucli_controller_serial_number, 
    hpacucli_controller_model, 
    hpacucli_controller_status,
    hpacucli_controller_last_diagnostics, 
    hpacucli_controller_cache_present,
    hpacucli_controller_drive_write_cache,
    hpacucli_controller_firmware_version,
    hpacucli_controller_unsafe_writeback_cache,
    hpacucli_controller_temperature,
    modified_date 
FROM 
    history.hpacucli_controllers
WHERE
    hpacucli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
			name1 => "id",    value1 => $id, 
			name2 => "query", value2 => $query
		}, file => $THIS_FILE, line => __LINE__});
		
		# Do the query against the source DB and loop through the results.
		my $results = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__});
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "results", value1 => $results
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $row (@{$results})
		{
			my $hpacucli_controller_uuid                   =         $row->[0]; 
			my $hpacucli_controller_serial_number          =         $row->[1]; 
			my $hpacucli_controller_model                  =         $row->[2]; 
			my $hpacucli_controller_status                 =         $row->[3];
			my $hpacucli_controller_last_diagnostics       = defined $row->[4] ? $row->[4] : 'NULL';
			my $hpacucli_controller_cache_present          =         $row->[5];
			my $hpacucli_controller_drive_write_cache      =         $row->[6];
			my $hpacucli_controller_firmware_version       = defined $row->[7] ? $row->[7] : 'NULL';
			my $hpacucli_controller_unsafe_writeback_cache = defined $row->[8] ? $row->[8] : 'NULL';
			my $hpacucli_controller_temperature            =         $row->[9];
			my $modified_date                              =         $row->[10];
			$an->Log->entry({log_level => 2, message_key => "an_variables_0011", message_variables => {
				name1  => "hpacucli_controller_uuid",                   value1  => $hpacucli_controller_uuid, 
				name2  => "hpacucli_controller_serial_number",          value2  => $hpacucli_controller_serial_number, 
				name3  => "hpacucli_controller_model",                  value3  => $hpacucli_controller_model, 
				name4  => "hpacucli_controller_status",                 value4  => $hpacucli_controller_status, 
				name5  => "hpacucli_controller_last_diagnostics",       value5  => $hpacucli_controller_last_diagnostics, 
				name6  => "hpacucli_controller_cache_present",          value6  => $hpacucli_controller_cache_present, 
				name7  => "hpacucli_controller_drive_write_cache",      value7  => $hpacucli_controller_drive_write_cache, 
				name8  => "hpacucli_controller_firmware_version",       value8  => $hpacucli_controller_firmware_version, 
				name9  => "hpacucli_controller_unsafe_writeback_cache", value9  => $hpacucli_controller_unsafe_writeback_cache, 
				name10 => "hpacucli_controller_temperature",            value10 => $hpacucli_controller_temperature, 
				name11 => "modified_date",                              value11 => $modified_date
			}, file => $THIS_FILE, line => __LINE__});
			
			### There can only be one entry per host, so we don't have a subhash.
			# Record this in the unified and local hashes.
			$an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid} = {
				hpacucli_controller_serial_number	=>	$hpacucli_controller_serial_number, 
				hpacucli_controller_model		=>	$hpacucli_controller_model, 
				hpacucli_controller_status		=>	$hpacucli_controller_status, 
				hpacucli_controller_last_diagnostics	=>	$hpacucli_controller_last_diagnostics, 
				hpacucli_controller_cache_present	=>	$hpacucli_controller_cache_present, 
				hpacucli_controller_drive_write_cache	=>	$hpacucli_controller_drive_write_cache, 
				hpacucli_controller_firmware_version	=>	$hpacucli_controller_firmware_version, 
				hpacucli_controller_unsafe_writeback_cache =>	$hpacucli_controller_unsafe_writeback_cache, 
				hpacucli_controller_temperature		=>	$hpacucli_controller_temperature, 
			};
			$an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{'exists'} = 1;
			$an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{seen}     = 0;
			$an->data->{db_data}{$id}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid} = {
				hpacucli_controller_serial_number	=>	$hpacucli_controller_serial_number, 
				hpacucli_controller_model		=>	$hpacucli_controller_model, 
				hpacucli_controller_status		=>	$hpacucli_controller_status, 
				hpacucli_controller_last_diagnostics	=>	$hpacucli_controller_last_diagnostics, 
				hpacucli_controller_cache_present	=>	$hpacucli_controller_cache_present, 
				hpacucli_controller_drive_write_cache	=>	$hpacucli_controller_drive_write_cache, 
				hpacucli_controller_firmware_version	=>	$hpacucli_controller_firmware_version, 
				hpacucli_controller_unsafe_writeback_cache =>	$hpacucli_controller_unsafe_writeback_cache, 
				hpacucli_controller_temperature		=>	$hpacucli_controller_temperature, 
			};
		}
	}
	
	### NOTE: Sort '$b cmp $a' on the modified date.
	# Now, loop through each record from the unified table and see if it 
	# needs to be added to any DBs.
	foreach my $modified_date (sort {$b cmp $a} keys %{$an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "modified_date", value1 => $modified_date,
		}, file => $THIS_FILE, line => __LINE__});
		foreach my $hpacucli_controller_uuid (sort {$a cmp $b} keys %{$an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}})
		{
			my $hpacucli_controller_serial_number          = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_serial_number};
			my $hpacucli_controller_model                  = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_model};
			my $hpacucli_controller_status                 = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_status};
			my $hpacucli_controller_last_diagnostics       = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_last_diagnostics};
			my $hpacucli_controller_cache_present          = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_cache_present};
			my $hpacucli_controller_drive_write_cache      = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_drive_write_cache};
			my $hpacucli_controller_firmware_version       = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_firmware_version};
			my $hpacucli_controller_unsafe_writeback_cache = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_unsafe_writeback_cache};
			my $hpacucli_controller_temperature            = $an->data->{db_data}{unified}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{hpacucli_controller_temperature};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0005", message_variables => {
				name1  => "hpacucli_controller_uuid",                   value1  => $hpacucli_controller_uuid, 
				name2  => "hpacucli_controller_serial_number",          value2  => $hpacucli_controller_serial_number, 
				name3  => "hpacucli_controller_model",                  value3  => $hpacucli_controller_model, 
				name4  => "hpacucli_controller_status",                 value4  => $hpacucli_controller_status, 
				name5  => "hpacucli_controller_last_diagnostics",       value5  => $hpacucli_controller_last_diagnostics, 
				name6  => "hpacucli_controller_cache_present",          value6  => $hpacucli_controller_cache_present, 
				name7  => "hpacucli_controller_drive_write_cache",      value7  => $hpacucli_controller_drive_write_cache, 
				name8  => "hpacucli_controller_firmware_version",       value8  => $hpacucli_controller_firmware_version, 
				name9  => "hpacucli_controller_unsafe_writeback_cache", value9  => $hpacucli_controller_unsafe_writeback_cache, 
				name10 => "hpacucli_controller_temperature",            value10 => $hpacucli_controller_temperature, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# We need to sanity check the three numeric strings because calling 'quote' directly
			# will wrap the numeric values in single quotes which violates 'numeric' forms.
			my $quoted_hpacucli_controller_last_diagnostics =  $an->data->{sys}{use_db_fh}->quote($hpacucli_controller_last_diagnostics);
			my $quoted_hpacucli_controller_temperature      =  $an->data->{sys}{use_db_fh}->quote($hpacucli_controller_temperature);
			   $quoted_hpacucli_controller_last_diagnostics =~ s/^'(.*?)'$/$1/;
			   $quoted_hpacucli_controller_temperature      =~ s/^'(.*?)'$/$1/;
			if ((($quoted_hpacucli_controller_last_diagnostics)        && ($quoted_hpacucli_controller_last_diagnostics =~ /\D/))       or 
			    (($quoted_hpacucli_controller_temperature) && ($quoted_hpacucli_controller_temperature =~ /\D/)))
			{
				$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0006", message_variables => { 
					last_diagnostics => $quoted_hpacucli_controller_last_diagnostics,
					temperature      => $quoted_hpacucli_controller_temperature,
				}, code => 4, file => $THIS_FILE, line => __LINE__});
				$an->nice_exit({exit_code => 4});
			}
			$quoted_hpacucli_controller_last_diagnostics = "NULL" if $quoted_hpacucli_controller_last_diagnostics eq "";
			$quoted_hpacucli_controller_temperature      = "NULL" if $quoted_hpacucli_controller_temperature      eq "";
			
			foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
			{
				# For each 'hpacucli_controller_uuid' we see;
				# - Check if we've *seen* it before
				#   |- If not; See if it *exists* in the public schema yet.
				#   |  |- If so, check to see if the entry in the public schema is up to date.
				#   |  |  \- If not, _UPDATE_ public schema.
				#   |  \- If not, do an _INSERT_ into public schema.
				#   \- If we have, see if it exists at the current timestamp.
				#      \- If not, _INSERT_ it into history schema.
				#
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "db_data::${id}::hpacucli_controllers::hpacucli_controller_uuid::${hpacucli_controller_uuid}::seen", value1 => $an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{seen}, 
				}, file => $THIS_FILE, line => __LINE__});
				if (not $an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{seen})
				{
					# Mark this record as now having been seen.
					$an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{seen} = 1;
					
					# Never seen it. Check if it exists.
					$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
						name1 => "db_data::${id}::hpacucli_controllers::hpacucli_controller_uuid::${hpacucli_controller_uuid}::exists", value1 => $an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{'exists'}, 
					}, file => $THIS_FILE, line => __LINE__});
					if ($an->data->{db_data}{$id}{hpacucli_controllers}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}{'exists'})
					{
						# It exists, but does it exist at this time stamp?
						$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
							name1  => "db_data::${id}::hpacucli_controllers::modified_date::${modified_date}::hpacucli_controller_uuid::${hpacucli_controller_uuid}", value1 => $an->data->{db_data}{$id}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid}, 
						}, file => $THIS_FILE, line => __LINE__});
						if (not $an->data->{db_data}{$id}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid})
						{
							# No, so UPDATE it.
							my $query = "
UPDATE 
    public.hpacucli_controllers
SET
    hpacucli_controller_serial_number          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_serial_number).", 
    hpacucli_controller_model                  = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_model).", 
    hpacucli_controller_status                 = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_status).", 
    hpacucli_controller_last_diagnostics       = $quoted_hpacucli_controller_last_diagnostics, 
    hpacucli_controller_cache_present          = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_cache_present).", 
    hpacucli_controller_drive_write_cache      = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_drive_write_cache).", 
    hpacucli_controller_firmware_version       = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_firmware_version).", 
    hpacucli_controller_unsafe_writeback_cache = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_unsafe_writeback_cache).", 
    hpacucli_controller_temperature            = $quoted_hpacucli_controller_temperature, 
    modified_date                              = ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
WHERE 
    hpacucli_controller_host_uuid              = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})." 
AND 
    hpacucli_controller_uuid                   = ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_uuid)." 
;";
							# Now record the query in the array
							$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
								name1 => "id",    value1 => $id, 
								name2 => "query", value2 => $query
							}, file => $THIS_FILE, line => __LINE__});
							push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
						}
					}
					else
					{
						# It doesn't exist, so INSERT it.
						my $query = "
INSERT INTO 
    public.hpacucli_controllers
(
    hpacucli_controller_host_uuid, 
    hpacucli_controller_uuid, 
    hpacucli_controller_serial_number, 
    hpacucli_controller_model, 
    hpacucli_controller_status,
    hpacucli_controller_last_diagnostics, 
    hpacucli_controller_cache_present,
    hpacucli_controller_drive_write_cache,
    hpacucli_controller_firmware_version,
    hpacucli_controller_unsafe_writeback_cache,
    hpacucli_controller_temperature,
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_status).", 
    $quoted_hpacucli_controller_last_diagnostics, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_cache_present).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_drive_write_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_unsafe_writeback_cache).", 
    $quoted_hpacucli_controller_temperature, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{public}{sql}}, $query;
					}
				}
				else
				{
					# We've seen this 'hpacucli_controller_uuid' before, so it is just a question
					# of whether the entry for the current timestamp exists in the 
					# history schema.
					if (not $an->data->{db_data}{$id}{hpacucli_controllers}{modified_date}{$modified_date}{hpacucli_controller_uuid}{$hpacucli_controller_uuid})
					{
						# It doesn't, INSERT it.
						my $query = "
INSERT INTO 
    history.hpacucli_controllers
(
    hpacucli_controller_host_uuid, 
    hpacucli_controller_uuid, 
    hpacucli_controller_serial_number, 
    hpacucli_controller_model, 
    hpacucli_controller_status,
    hpacucli_controller_last_diagnostics, 
    hpacucli_controller_cache_present,
    hpacucli_controller_drive_write_cache,
    hpacucli_controller_firmware_version,
    hpacucli_controller_unsafe_writeback_cache,
    hpacucli_controller_temperature,
    modified_date 
) VALUES (
    ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).",
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_uuid).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_serial_number).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_model).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_status).", 
    $quoted_hpacucli_controller_last_diagnostics, 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_cache_present).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_drive_write_cache).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_firmware_version).", 
    ".$an->data->{sys}{use_db_fh}->quote($hpacucli_controller_unsafe_writeback_cache).", 
    $quoted_hpacucli_controller_temperature, 
    ".$an->data->{sys}{use_db_fh}->quote($modified_date)."
);";
						# Now record the query in the array
						$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
							name1 => "id",    value1 => $id, 
							name2 => "query", value2 => $query
						}, file => $THIS_FILE, line => __LINE__});
						push @{$an->data->{db_resync}{$id}{history}{sql}}, $query;
					} # Exist in history at timestamp?
				} # Seen hpacucli_controller_uuid?
			} # foreach my $id 
		} # foreach my $hpacucli_controller_uuid ...
	} # foreach $modified_date ...
	
	# Free up memory by deleting the DB data from the main hash.
	delete $an->data->{db_data};
	
	# Do the INSERTs now and then release the memory.
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{dbh}})
	{
		# Merge the queries with public schema queries being first.
		@{$an->data->{db_resync}{$id}{sql}} = (@{$an->data->{db_resync}{$id}{public}{sql}}, @{$an->data->{db_resync}{$id}{history}{sql}});
		if (@{$an->data->{db_resync}{$id}{sql}} > 0)
		{
			$an->DB->do_db_write({id => $id, query => $an->data->{db_resync}{$id}{sql}, source => $THIS_FILE, line => __LINE__});
			delete $an->data->{db_resync}{$id}{sql};
		}
	}
	
	return(0);
}

# This will archive stuff in the 'history' schema, if needed.
sub archive_if_needed
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "archive_if_needed" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# If the 'trigger' is '0', archiving is disabled.
	if (not $an->data->{scancore}{archive}{trigger})
	{
		return(1);
	}
	
	### NOTE: If a ScanCore db server was offline when an archive ran, when it returns, it's records will
	###       sync back, triggering a sooner-than-expected subsequent archive. This shouldn't happen 
	###       often, and the complexity of tracking archive dates is such that we'll not try to account
	###       for these cases. 
	### TODO: What we can do later is, when we write the restore stuff, build in a dedupe function.
	
	### Process:
	# 1. Count the records in history for each table, restricting the results to those from this host 
	#    (save for special tables like 'server') and if the number of records is greater than 
	#    'scancore::archive::trigger', start an archive.
	# 2. Set/update the 'archive_date' state.
	# 3. Lock the database.
	# 4. Select 'modified_date' from history.foo, offset by 
	#    ('scancore::archive::trigger' - 'scancore::archive::count').
	# 5. Make sure the 'scancore::archive::directory' exists, creating it if needed.
	# 6. Select all records older that the 'modified_date', write them to a file and then DELETE those
	#    records from the database.
	
	# Update the archive path, if set by a user. Also verify that there are sane archive values.
	$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
		name1 => "path::scancore_archive",       value1 => $an->data->{path}{scancore_archive}, 
		name2 => "scancore::archive::directory", value2 => $an->data->{scancore}{archive}{directory}, 
		name3 => "scancore::archive::trigger",   value3 => $an->data->{scancore}{archive}{trigger}, 
		name4 => "scancore::archive::count",     value4 => $an->data->{scancore}{archive}{count}, 
	}, file => $THIS_FILE, line => __LINE__});
	if ($an->data->{scancore}{archive}{directory} =~ /\/.*/)
	{
		$an->data->{path}{scancore_archive} = $an->data->{scancore}{archive}{directory};
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "path::scancore_archive", value1 => $an->data->{path}{scancore_archive}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{trigger}) or ($an->data->{scancore}{archive}{trigger} =~ /\D/))
	{
		$an->data->{scancore}{archive}{trigger} = 100000;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::trigger", value1 => $an->data->{scancore}{archive}{trigger}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	if ((not $an->data->{scancore}{archive}{count}) or ($an->data->{scancore}{archive}{count} =~ /\D/))
	{
		$an->data->{scancore}{archive}{count} = 50000;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "scancore::archive::count", value1 => $an->data->{scancore}{archive}{count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	
	if (not -e $an->data->{path}{scancore_archive})
	{
		my $shell_call = $an->data->{path}{'mkdir'}." -p '".$an->data->{path}{scancore_archive}."'";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
		while(<$file_handle>)
		{
			chomp;
			my $line = $_;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		close $file_handle;
		
		# Did it work?
		if (not -e $an->data->{path}{scancore_archive})
		{
			# Nope. :(
			$an->Alert->warning({message_key => "scancore_warning_0030", message_variables => { directory => $an->data->{path}{scancore_archive} }, quiet => 1, file => $THIS_FILE, line => __LINE__});
			return(1);
		}
	}
	
	# All of the changes happen in the variables table. This is set up like ScanCore and other agents in
	# case we find it necessary to add additional tables later.
	$an->data->{archive}{table} = {
		hpacucli_controllers	=>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_controller_host_uuid",
			offset			=>	0,
		},
		hpacucli_cache_modules	=>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_cache_module_host_uuid",
			offset			=>	0,
		},
		hpacucli_arrays		=>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_array_host_uuid",
			offset			=>	0,
		},
		hpacucli_logical_drives	=>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_logical_drive_host_uuid",
			offset			=>	0,
		},
		hpacucli_physical_drives =>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_physical_drive_host_uuid",
			offset			=>	0,
		},
		hpacucli_variables	=>	{
			archive_date		=>	"",
			host_column		=>	"hpacucli_variable_host_uuid",
			offset			=>	0,
		},
	};
	my $archive_needed = 0;
	foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
	{
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "table", value1 => $table, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $query = "
SELECT 
    COUNT(*) 
FROM 
    history.$table 
WHERE 
    ".$an->data->{archive}{table}{$table}{host_column}." = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid})."
;";
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "query", value1 => $query, 
		}, file => $THIS_FILE, line => __LINE__});
		
		my $records = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $records = 0 if not defined $records;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "records", value1 => $records, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($records > $an->data->{scancore}{archive}{trigger})
		{
			   $archive_needed                             = 1;
			my $records_to_save                            = ($an->data->{scancore}{archive}{trigger} - $an->data->{scancore}{archive}{count});
			my $offset                                     = $records - $records_to_save;
			   $an->data->{archive}{table}{$table}{offset} = $offset;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0003", message_variables => {
				name1 => "archive_needed",                   value1 => $archive_needed, 
				name2 => "records_to_save",                  value2 => $records_to_save, 
				name3 => "archive::table::${table}::offset", value3 => $an->data->{archive}{table}{$table}{offset}, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	
	# If I have something to archive, do so now.
	if ($archive_needed)
	{
		# This will store the files to compress after we release the locks.
		my $compress = [];
		
		# Request a lock.
		$an->DB->locking({request => 1});
		
		# Now loop through the table(s) that need to be archived.
		foreach my $table (sort {$a cmp $b} keys %{$an->data->{archive}{table}})
		{
			next if not $an->data->{archive}{table}{$table}{offset};
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "table", value1 => $table, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Now to do the archive.
			if ($table eq "hpacucli_controllers")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_controller_uuid", "hpacucli_controller_host_uuid", "hpacucli_controller_serial_number", "hpacucli_controller_model", "hpacucli_controller_status", "hpacucli_controller_last_diagnostics", "hpacucli_controller_cache_present", "hpacucli_controller_drive_write_cache", "hpacucli_controller_firmware_version", "hpacucli_controller_unsafe_writeback_cache", "hpacucli_controller_temperature"],
				});
			}
			elsif ($table eq "hpacucli_cache_modules")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_cache_module_uuid", "hpacucli_cache_module_host_uuid", "hpacucli_cache_module_controller_uuid", "hpacucli_cache_module_serial_number", "hpacucli_cache_module_status", "hpacucli_cache_module_type", "hpacucli_cache_module_size"],
				});
			}
			elsif ($table eq "hpacucli_arrays")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_array_uuid", "hpacucli_array_host_uuid", "hpacucli_array_controller_uuid", "hpacucli_array_name", "hpacucli_array_type", "hpacucli_array_status", "hpacucli_array_unused_space"],
				});
			}
			elsif ($table eq "hpacucli_physical_drives")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_physical_drive_uuid", "hpacucli_physical_drive_host_uuid", "hpacucli_physical_drive_logical_drive_uuid", "hpacucli_physical_drive_serial_number", "hpacucli_physical_drive_model", "hpacucli_physical_drive_temperature", "hpacucli_physical_drive_interface", "hpacucli_physical_drive_status", "hpacucli_physical_drive_size", "hpacucli_physical_drive_type", "hpacucli_physical_drive_rpm"],
				});
			}
			elsif ($table eq "hpacucli_variables")
			{
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_variable_uuid", "hpacucli_variable_host_uuid", "hpacucli_variable_source_table", "hpacucli_variable_source_uuid", "hpacucli_variable_is_temperature", "hpacucli_variable_name", "hpacucli_variable_value"],
				});
			}
			elsif ($table eq "hpacucli_logical_drives")
			{
				### NOTE: Not tested yet
				$an->DB->archive_table({
					table        => $table, 
					offset       => $an->data->{archive}{table}{$table}{offset}, 
					conditionals => { $an->data->{archive}{table}{$table}{host_column} => $an->data->{sys}{host_uuid} },
					columns      => ["hpacucli_logical_drive_uuid", "hpacucli_logical_drive_host_uuid", "hpacucli_logical_drive_array_uuid", "hpacucli_logical_drive_name", "hpacucli_logical_drive_caching", "hpacucli_logical_drive_os_device_name", "hpacucli_logical_drive_type", "hpacucli_logical_drive_raid_level", "hpacucli_logical_drive_size", "hpacucli_logical_drive_strip_size", "hpacucli_logical_drive_stripe_size", "hpacucli_logical_drive_status", "hpacucli_logical_drive_wwn"],
				});
			}
		}
		
		### TODO: Make this less of a hackish mc-hackington...
		# VACUUM FULL, if the database is on this machine. I need to do this from the command line 
		# because the user we connect as isn't allowed to do it. We'll also only vacuum our DB.
		my $db_name = "";
		foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
		{
			$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
				name1 => "id",                        value1 => $id, 
				name2 => "scancore::db::${id}::host", value2 => $an->data->{scancore}{db}{$id}{host}, 
				name3 => "hostname",                  value3 => $an->hostname, 
				name4 => "short_hostname",            value4 => $an->short_hostname, 
			}, file => $THIS_FILE, line => __LINE__});
			if (($an->data->{scancore}{db}{$id}{host} eq $an->hostname) or ($an->data->{scancore}{db}{$id}{host} eq $an->short_hostname))
			{
				$db_name = $an->data->{scancore}{db}{$id}{name};
				$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
					name1 => "db_name",                   value1 => $db_name, 
					name2 => "scancore::db::${id}::name", value2 => $an->data->{scancore}{db}{$id}{name}, 
				}, file => $THIS_FILE, line => __LINE__});
				last;
			}
		}
		if ($db_name)
		{
			my $start      = time;
			my $shell_call = $an->data->{path}{su}." - postgres -c \"".$an->data->{path}{psql}." $db_name -c 'VACUUM FULL;'\"";
			$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
				name1 => "start",      value1 => $start, 
				name2 => "shell_call", value2 => $shell_call, 
			}, file => $THIS_FILE, line => __LINE__});
			open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
			while(<$file_handle>)
			{
				chomp;
				my $line = $_;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			close $file_handle;
			
			my $finished = time - $start;
			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
				name1 => "finished", value1 => $finished, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		
		# Release the lock
		$an->DB->locking({release => 1});
	}
	
	return(0);
}

# This gets the basic information about the controller.
sub get_controller_info
{
	my ($an, $controller) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_controller_info" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "controller", value1 => $controller, 
	}, file => $THIS_FILE, line => __LINE__});
	
	my $model_name          = "";
	my $serial_number       = "";
	my $cache_serial_number = "";
	my $pd_serial_number    = "";
	my $array               = "";
	my $logical_drive       = "";
	my $port                = "";
	my $box                 = "";
	my $bay                 = "";
	my $shell_call          = $an->data->{path}{hpacucli}." controller slot=".$controller." show config detail";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line =  $an->String->clean_spaces({string => $_});
		   $line =~ s/\r//;
		next if not $line;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ((not $serial_number) && ($line =~ /^(.*?) in Slot $controller /))
		{
			$model_name = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "model_name", value1 => $model_name, 
			}, file => $THIS_FILE, line => __LINE__});
		}

		if (($line =~ /Serial Number: (.*?)$/) && (not $port) && (not $box) && (not $bay))
		{
			$serial_number = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "serial_number", value1 => $serial_number, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# Record the model number
			if ($model_name)
			{
				$an->data->{controller}{$serial_number}{data}{detail}{model_name} = $model_name;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::data::detail::model_name", value1 => $an->data->{controller}{$serial_number}{data}{detail}{model_name}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Make a reference between the slot and SN
			$an->data->{controller}{metadata}{sn_to_slot}{$serial_number} = $controller;
			$an->data->{controller}{metadata}{slot_to_sn}{$controller}    = $serial_number;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "controller::metadata::sn_to_slot::${serial_number}", value1 => $an->data->{controller}{metadata}{sn_to_slot}{$serial_number}, 
				name2 => "controller::metadata::slot_to_sn::${controller}",    value2 => $an->data->{controller}{metadata}{slot_to_sn}{$controller}, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		next if not $serial_number;
		
		if ($line =~ /Cache Serial Number: (.*?)$/i)
		{
			$an->data->{controller}{$serial_number}{data}{detail}{cache_serial_number} = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "controller::${serial_number}::data::detail::cache_serial_number", value1 => $an->data->{controller}{$serial_number}{data}{detail}{cache_serial_number}, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if ($line =~ /Array: (.*?)$/i)
		{
			$array = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "array", value1 => $array, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if ($line =~ /Logical Drive: (.*?)$/i)
		{
			$logical_drive = $1;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "logical_drive", value1 => $logical_drive, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if ($line =~ /physicaldrive (.*?):(.*?):(.*)$/)
		{
			$port = $1;
			$box  = $2;
			$bay  = $3;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "port", value1 => $port, 
				name2 => "box",  value2 => $box, 
				name3 => "bay",  value3 => $bay, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		if (lc($line) eq "unassigned")
		{
			$array         = "ZZZZ";
			$logical_drive = "9999";
			$port          = "";
			$box           = "";
			$bay           = "";
			$an->Log->entry({log_level => 3, message_key => "an_variables_0005", message_variables => {
				name1 => "array",         value1 => $array, 
				name2 => "logical_drive", value2 => $logical_drive, 
				name3 => "port",          value3 => $port, 
				name4 => "box",           value4 => $box, 
				name5 => "bay",           value5 => $bay, 
			}, file => $THIS_FILE, line => __LINE__});
			next;
		}
		
		# Lines I don't care about
		next if $line =~ /^Slot: $controller$/i;
		next if $line =~ /^$/i;
		next if $line =~ /^$/i;
		
		my $type = "detail";
		if ($line =~ /^(.*?): (.*)$/)
		{
			my $variable = $1;
			my $value    = $2;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
				name1 => "variable", value1 => $variable, 
				name2 => "value",    value2 => $value, 
			}, file => $THIS_FILE, line => __LINE__});
			
			# If the variable has units, pull them out.
			if ($variable =~ / \(C\)$/i)
			{
				$variable =~ s/ \(C\)$//i;
				$variable =  $an->String->clean_spaces({string => $variable});
				$type     =  "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($variable =~ / \(F\)/i)
			{
				# Covert to °C
				$variable =~ s/ \(F\)$//i;
				$variable =  $an->String->clean_spaces({string => $variable});
				$value    =  $an->Convert->convert_to_celsius({temperature => $value});
				$type     =  "temperature";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "variable", value1 => $variable, 
					name2 => "value",    value2 => $value, 
					name3 => "type",     value3 => $type, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			# Save it.
			if (exists $an->data->{controller}{$serial_number}{$type}{$variable})
			{
				# Conflict! This is a dirty way to keep them separate
				$variable .= " 2";
			}
			
			$variable = process_variable_name($an, $variable);
			
			# What am I saving?
			if (($port) && ($box) && ($bay))
			{
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "line", value1 => $line, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# Physical drive info
				$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::logical_drive::${logical_drive}::physical_drive::port::${port}::box::${box}::bay::${bay}::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
				
				# Map the SN to it's current location.
				if ($line =~ /Serial Number: (.*?)$/)
				{
					   $pd_serial_number = $1;
					my $location         = $port.":".$box.":".$bay;
					$an->data->{physical_drive}{by_serial_number}{$serial_number} = {
						array         => $array,
						logical_drive => $logical_drive,
						port          => $port,
						box           => $box,
						bay           => $bay,
					};
					$an->data->{physical_drive}{by_location}{$location} = $pd_serial_number;
					$an->Log->entry({log_level => 2, message_key => "an_variables_0006", message_variables => {
						name1 => "physical_drive::by_serial_number::${serial_number}::array",         value1 => $an->data->{physical_drive}{by_serial_number}{$serial_number}{array}, 
						name2 => "physical_drive::by_serial_number::${serial_number}::logical_drive", value2 => $an->data->{physical_drive}{by_serial_number}{$serial_number}{logical_drive}, 
						name3 => "physical_drive::by_serial_number::${serial_number}::port",          value3 => $an->data->{physical_drive}{by_serial_number}{$serial_number}{port}, 
						name4 => "physical_drive::by_serial_number::${serial_number}::box",           value4 => $an->data->{physical_drive}{by_serial_number}{$serial_number}{box}, 
						name5 => "physical_drive::by_serial_number::${serial_number}::bay",           value5 => $an->data->{physical_drive}{by_serial_number}{$serial_number}{bay}, 
						name6 => "physical_drive::by_location::$location",                            value6 => $an->data->{physical_drive}{by_location}{$location}, 
					}, file => $THIS_FILE, line => __LINE__});
				}
			}
			elsif ($logical_drive)
			{
				# Logical drive
				$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::logical_drive::${logical_drive}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			elsif ($array)
			{
				# Array
				$an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::array::${array}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{array}{$array}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			else
			{
				# Controller data
				$an->data->{controller}{$serial_number}{data}{$type}{$variable} = $value;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "controller::${serial_number}::data::${type}::$variable", value1 => $an->data->{controller}{$serial_number}{data}{$type}{$variable}, 
				}, file => $THIS_FILE, line => __LINE__});
			}
		}
	}
	close $file_handle;
	
	# If I didn't find a serial number, something went wrong.
	if (not $serial_number)
	{
		# Error out.
		$an->Alert->error({title_key => "an_0003", message_key => "scan_hpacucli_error_0004", message_variables => { controller => $controller }, code => 6, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 6});
	}
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "serial_number", value1 => $serial_number,
	}, file => $THIS_FILE, line => __LINE__});
	return($serial_number);
}

# This will do a details diagnostics check, if enough time has passed.
sub get_diagnostics
{
	my ($an, $controller) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "get_diagnostics" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "controller", value1 => $controller, 
	}, file => $THIS_FILE, line => __LINE__});

	### TODO: Every 'scan-hpacucli::diagnostics_interval' seconds, run a full diagnostics to 
	###       check for drives in pre-failure.
	if (not $an->data->{sys}{process_diagnostics})
	{
		# Is it time?
		my $query = "SELECT hpacucli_controller_last_diagnostics FROM hpacucli_controllers WHERE hpacucli_controller_host_uuid = ".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).";";
		#                     The actual query -----------------.                                                .------- Row 0
		#                        Query this DB --.              |                                                |    .-- Columns 0
		my $last_diagnostics = $an->DB->do_db_query({query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		   $last_diagnostics = 0 if not defined $last_diagnostics;
		my $current_time     = time;
		my $last_scan_was    = $current_time - $last_diagnostics;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0004", message_variables => {
			name1 => "last_diagnostics",                    value1 => $last_diagnostics, 
			name2 => "current_time",                        value2 => $current_time, 
			name3 => "last_scan_was",                       value3 => $last_scan_was, 
			name4 => "scan-hpacucli::diagnostics_interval", value4 => $an->data->{'scan-hpacucli'}{diagnostics_interval}, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($an->data->{'scan-hpacucli'}{diagnostics_interval} !~ /^\d+$/)
		{
			# Invalid value, override.
			$an->data->{'scan-hpacucli'}{diagnostics_interval} = 3600;
			$an->Log->entry({log_level => 1, message_key => "an_variables_0001", message_variables => {
				name1 => "scan-hpacucli::diagnostics_interval", value1 => $last_diagnostics, 
			}, file => $THIS_FILE, line => __LINE__});
		}
		if ($last_scan_was > $an->data->{'scan-hpacucli'}{diagnostics_interval})
		{
			$an->data->{sys}{process_diagnostics} = 1;
		}
	}
	
	# Well, is it?
	if ($an->data->{sys}{process_diagnostics})
	{
		# Yup! We use hpacucli's diagnostics to gather all data.
# 		my $shell_call = "
# cd /tmp/
# ".$an->data->{path}{hpacucli}." controller slot=$controller diag file=/tmp/ADUReport.zip
# ".$an->data->{path}{'unzip'}." -o /tmp/ADUReport.zip -d /tmp/
# if [ -e '/tmp/ADUReport.xml' ];
# then
#     ".$an->data->{path}{rm}." -f /tmp/ADUReport.zip
#     ".$an->data->{path}{rm}." -f /tmp/ADUReport.htm
#     ".$an->data->{path}{rm}." -f /tmp/ADUReport.xml
#     ".$an->data->{path}{rm}." -f /tmp/report.checksum
# fi
# ";
# 		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
# 			name1 => "shell_call", value1 => $shell_call, 
# 		}, file => $THIS_FILE, line => __LINE__});
# 		open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
# 		while(<$file_handle>)
# 		{
# 			chomp;
# 			my $line = $_;
# 			$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
# 				name1 => "line", value1 => $line, 
# 			}, file => $THIS_FILE, line => __LINE__});
# 		}
# 		close $file_handle;
		
		# Did it work?
		if (not -r "/tmp/ADUReport.txt")
		{
			# Something went wrong.
			print $an->String->get({key => "scan_hpacucli_error_0005", variables => { path => "/tmp/ADUReport.txt" }})."\n";
			$an->Log->entry({log_level => 0, message_key => "scan_hpacucli_error_0005", message_variables => { file => "/tmp/ADUReport.txt" }, file => $THIS_FILE, line => __LINE__});
			$an->nice_exit({exit_code => 4});
		}
		
		# Get this controller's serial number
		my $serial_number = $an->data->{controller}{metadata}{slot_to_sn}{$controller};
		print $THIS_FILE." ".__LINE__."; controller serial number: [$serial_number]\n";
		
		# Parse!
		my $in_cache_config_status = 0;
		my $in_physical_drive      = 0;
		my $pd_serial_number       = "";
		my $port                   = "";
		my $box                    = "";
		my $bay                    = "";
		my $skip_blank_line        = 0;
		#$shell_call = "/tmp/ADUReport.txt";
		my $shell_call = "/tmp/ADUReport.txt";
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "shell_call", value1 => $shell_call, 
		}, file => $THIS_FILE, line => __LINE__});
		#open ($file_handle, "<$shell_call") or $an->Alert->error({title_key => "tools_title_0003", message_key => "error_message_0066", message_variables => { shell_call => $shell_call, error => $! }, code => 3, file => $THIS_FILE, line => __LINE__});
		open (my $file_handle, "<$shell_call") or $an->Alert->error({title_key => "tools_title_0003", message_key => "error_message_0066", message_variables => { shell_call => $shell_call, error => $! }, code => 3, file => $THIS_FILE, line => __LINE__});
		while (<$file_handle>)
		{
			chomp;
			my $line = $an->String->clean_spaces({string => $_});
			if (not $line)
			{
				if ($skip_blank_line)
				{
					next;
				}
				$in_cache_config_status = 0;
				$in_physical_drive      = 0;
				$pd_serial_number       = "";
				$port                   = "";
				$box                    = "";
				$bay                    = "";
				$an->Log->entry({log_level => 3, message_key => "an_variables_0006", message_variables => {
					name1 => "in_cache_config_status", value1 => $in_cache_config_status, 
					name2 => "in_physical_drive",      value2 => $in_physical_drive, 
					name3 => "pd_serial_number",       value3 => $pd_serial_number, 
					name4 => "port",                   value4 => $port, 
					name5 => "box",                    value5 => $box, 
					name6 => "bay",                    value6 => $bay, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
				name1 => "line", value1 => $line
			}, file => $THIS_FILE, line => __LINE__});
			
			$skip_blank_line = 0;
			
			if ($line =~ /: Cache Config Status$/i)
			{
				$in_cache_config_status = 1;
				$skip_blank_line        = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
					name1 => "in_cache_config_status", value1 => $in_cache_config_status, 
				}, file => $THIS_FILE, line => __LINE__});
				next;
			}
			
			if ($line =~ /: Physical Drive \(.*?\) (.*?):(.*?):(.*?) : Monitor and Performance Statistics \(Since Factory\)/)
			{
				$port             = $1;
				$box              = $2;
				$bay              = $3;
				$skip_blank_line  = 1;
				$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
					name1 => "port", value1 => $port, 
					name2 => "box",  value2 => $box, 
					name3 => "bay",  value3 => $bay, 
				}, file => $THIS_FILE, line => __LINE__});
			}
			
			if ($in_cache_config_status)
			{
				if ($line =~ /Parity Read Errors (\d+) \(/)
				{
					$an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_read_errors} = $1;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "controller::${serial_number}::diagnostics::cache::parity_read_errors", value1 => $an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_read_errors}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Cache parity read errors: [".$an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_read_errors}."]\n";
				}
				if ($line =~ /Parity Write Errors (\d+) \(/)
				{
					$an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_write_errors} = $1;
					$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
						name1 => "controller::${serial_number}::diagnostics::cache::parity_write_errors", value1 => $an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_write_errors}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Cache parity write errors: [".$an->data->{controller}{$serial_number}{'diagnostics'}{cache}{parity_write_errors}."]\n";
				}
			}
			
			if (($port) && ($box) && ($bay))
			{
				my $location         = $port.":".$box.":".$bay;
				   $pd_serial_number = $an->data->{physical_drive}{by_location}{$location};

				if ($line =~ /Read Errors Hard (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_hard} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::read_errors_hard", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_hard}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), read_errors_hard: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_hard}." ($hex)]\n";
				}
				if ($line =~ /Read Errors Retry Recovered (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_retry_recovered} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                           value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::read_errors_retry_recovered", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_retry_recovered}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), read_errors_retry_recovered: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_retry_recovered}." ($hex)]\n";
				}
				if ($line =~ /Read Errors ECC Corrected (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_ecc_corrected} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                         value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::read_errors_ecc_corrected", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_ecc_corrected}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), read_errors_ecc_corrected: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_ecc_corrected}." ($hex)]\n";
				}
				if ($line =~ /Write Errors Hard (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_hard} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                 value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::write_errors_hard", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_hard}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), write_errors_hard: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_hard}." ($hex)]\n";
				}
				if ($line =~ /Write Errors Retry Recovered (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_retry_recovered} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                            value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::write_errors_retry_recovered", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_retry_recovered}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), write_errors_retry_recovered: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_retry_recovered}." ($hex)]\n";
				}
				if ($line =~ /Format Errors (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{format_errors} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                             value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::format_errors", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{format_errors}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), format_errors: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{format_errors}." ($hex)]\n";
				}
				if ($line =~ /Write Errors After Remap (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_after_remap} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                        value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::write_errors_after_remap", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_after_remap}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), write_errors_after_remap: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{write_errors_after_remap}." ($hex)]\n";
				}
				if ($line =~ /Hardware Errors (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{hardware_errors} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                               value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::hardware_errors", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{hardware_errors}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), hardware_errors: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{hardware_errors}." ($hex)]\n";
				}
				if ($line =~ /Predictive Failure Errors (0x.*?)$/)
				{
					my $hex = $1;
					$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{predictive_failure_errors} = $an->Convert->hex_to_decimal({hex => $hex});
					$an->Log->entry({log_level => 3, message_key => "an_variables_0002", message_variables => {
						name1 => "hex",                                                                         value1 => $hex, 
						name2 => "physical_drive::${pd_serial_number}::diagnostics::predictive_failure_errors", value2 => $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{predictive_failure_errors}, 
					}, file => $THIS_FILE, line => __LINE__});
					#print "Physical drive: [$pd_serial_number] (in: [$location]), predictive_failure_errors: [".$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{predictive_failure_errors}." ($hex)]\n";
				}
			}
		}
		close $file_handle;
	}
	
	return(0);
}

# This gathers the various data from the controller(s).
sub gather_data
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "gather_data" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	### TODO: This assumes the controllers go 0, 1, ... n. If this is wrong, we'll need to call 
	###       'hpacucli controller all show' and parse the output as our outer loop.
	# Loops through reach found controller.
	foreach my $count (1..$an->data->{sys}{controller_count})
	{
		my $controller = $count - 1;
		$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
			name1 => "controller", value1 => $controller, 
		}, file => $THIS_FILE, line => __LINE__});
		
		# Read in controller data.
		my $serial_number = get_controller_info($an, $controller);
		
		get_diagnostics($an, $controller);
	}

	# This is to collected data from every sweep.
	foreach my $serial_number (sort {$a cmp $b} keys %{$an->data->{controller}})
	{
		# Controller data;
		next if $serial_number eq "metadata";
		print "Controller: [$serial_number]\n";
		
		# Temperature;
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{data}{temperature}})
		{
			print "- Temperature; $variable: [".$an->data->{controller}{$serial_number}{data}{temperature}{$variable}." °C]\n";
		}
		# Data
		foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{data}{detail}})
		{
			print "- Data; $variable: [".$an->data->{controller}{$serial_number}{data}{detail}{$variable}."]\n";
		}
		
		# Is this a diagnostics run?
		if ($an->data->{sys}{process_diagnostics})
		{
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{'diagnostics'}{cache}})
			{
				print "- Diagnostics; Cache - $variable: [".$an->data->{controller}{$serial_number}{'diagnostics'}{cache}{$variable}."]\n";
			}
		}
		
		# Array
		foreach my $array (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}})
		{
			print "- Array: [$array]\n";
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{data}{temperature}})
			{
				print "  - Temperature; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{data}{temperature}{$variable}." °C]\n";
			}
			# Data
			foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{data}{detail}})
			{
				print "  - Data; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{data}{detail}{$variable}."]\n";
			}
			
			# Logical Drive
			foreach my $logical_drive (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}})
			{
				print " - Logical Drive: [$logical_drive]\n";
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{temperature}})
				{
					print "   - Temperature; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{temperature}{$variable}." °C]\n";
				}
				# Data
				foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{detail}})
				{
					print "   - Data; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{data}{detail}{$variable}."]\n";
				}
				
				# Physical Disks.
				foreach my $port (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}})
				{
					foreach my $box (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}})
					{
						foreach my $bay (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}})
						{
							my $pd_serial_number = $an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{detail}{serial_number};
							print "  - Physical Drive: [$port:$box:$bay], sn: [$pd_serial_number]\n";
							foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{temperature}})
							{
								print "    - Temperature; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{temperature}{$variable}." °C]\n";
							}
							# Data
							foreach my $variable (sort {$a cmp $b} keys %{$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{detail}})
							{
								next if $variable eq "serial_number";
								next if $variable eq "port";
								next if $variable eq "box";
								next if $variable eq "bay";
								print "    - Data; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{detail}{$variable}."]\n";
							}
							
							# If this was a diagnostics run, check for error counters
							if ($an->data->{sys}{process_diagnostics})
							{
								if (exists $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{read_errors_hard})
								{
									# We got the data
									foreach my $variable (sort {$a cmp $b} keys %{$an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}})
									{
										# Store this in the main hash.
										$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{'diagnostics'}{$variable} = $an->data->{physical_drive}{$pd_serial_number}{'diagnostics'}{$variable};
										print "    - Diagnostics; $variable: [".$an->data->{controller}{$serial_number}{array}{$array}{logical_drive}{$logical_drive}{physical_drive}{port}{$port}{box}{$box}{bay}{$bay}{'diagnostics'}{$variable}."]\n";
									}
								}
								else
								{
									# No data for this drive. It might be
									# a 3rd party drive. We'll warn the 
									# user that we can't predict failure.
									print "    - !! Warning !! - Diagnostics not available for the drive: [$pd_serial_number] in port: [$port], box: [$box], bay: [$bay]. Unable to predict failures! Is this a third-party drive?\n";
								}
							}
						}
					}
				}
			}
		}
	}
	
	return(0);
}

# This processes variable names to flatten them and remove spaces and special characters.
sub process_variable_name
{
	my ($an, $variable) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "process_variable_name" }, message_key => "an_variables_0001", message_variables => { 
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	
	$variable =  lc($variable);
	$variable =~ s/ /_/g;
	$variable =~ s/-/_/g;
	$variable =~ s/&/and/g;
	$variable =~ s/\//_or_/g;
	$variable =~ s/_%/_percent/g;
	$variable =~ s/{_}+/_/g;
	$variable =~ s/^_+//g;
	$variable =~ s/_+$//g;
	$variable =~ s/(\w)\(/$1_\(/;
	$variable =~ s/\((.*?)\)/-_$1/g;
	$variable =~ s/_+/_/g;
	
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "variable", value1 => $variable, 
	}, file => $THIS_FILE, line => __LINE__});
	return($variable);
}

# This does two things; It checks to see if hpacucli is installed (exits '1' if not, exits '2' if not 
# executable) and then checks to see if any controllers are found in the system (exits '3' if not). 
sub find_hp_controllers
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "find_hp_controllers" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# This will keep track of how many controllers we find.
	my $controller_count = 0;
	
	# First, do we have hpacucli installed?
	if (not -e $an->data->{path}{hpacucli})
	{
		# Nope, exit.
		print $an->String->get({key => "scan_hpacucli_error_0001", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_hpacucli_error_0001", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 1});
	}
	
	# Make sure it is executable
	if (not -x $an->data->{path}{hpacucli})
	{
		print $an->String->get({key => "scan_hpacucli_error_0002", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 0, message_key => "scan_hpacucli_error_0002", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 2});
	}
	
	# Still alive? Good! Look for controllers now.
	my $shell_call = $an->data->{path}{hpacucli}." controller all show";
	$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
		name1 => "shell_call", value1 => $shell_call, 
	}, file => $THIS_FILE, line => __LINE__});
	open (my $file_handle, "$shell_call 2>&1 |") or $an->Alert->error({title_key => "an_0003", message_key => "error_title_0014", message_variables => { shell_call => $shell_call, error => $! }, code => 2, file => $THIS_FILE, line => __LINE__});
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "line", value1 => $line, 
		}, file => $THIS_FILE, line => __LINE__});
		
		if ($line =~ /.*? Slot (\d+) .*?\(sn: (.*?)\)/i)
		{
			my $controller_number        = $1;
			my $controller_serial_number = $2;
			   $controller_count++;
			$an->Log->entry({log_level => 3, message_key => "an_variables_0003", message_variables => {
				name1 => "controller_number",        value1 => $controller_number, 
				name2 => "controller_serial_number", value2 => $controller_serial_number, 
				name3 => "controller_count",         value3 => $controller_count, 
			}, file => $THIS_FILE, line => __LINE__});
		}
	}
	close $file_handle;
	
	# Have we any controllers?
	if ($controller_count > 0)
	{
		$an->data->{sys}{controller_count} = $controller_count;
		$an->Log->entry({log_level => 3, message_key => "scan_hpacucli_log_0001", message_variables => {
			count => $an->data->{sys}{controller_count}, 
		}, file => $THIS_FILE, line => __LINE__});
	}
	else
	{
		print $an->String->get({key => "scan_hpacucli_error_0003", variables => { path => $an->data->{path}{hpacucli} }})."\n";
		$an->Log->entry({log_level => 1, message_key => "scan_hpacucli_error_0003", message_variables => { path => $an->data->{path}{hpacucli} }, file => $THIS_FILE, line => __LINE__});
		$an->nice_exit({exit_code => 3});
	}
	
	return(0);
}

# This checks to see if this agent's databases tables exist and, if not, load the schema. If the schema gets
# loaded, we'll check other databases for older information and load it.
sub prep_databases
{
	my ($an) = @_;
	$an->Log->entry({log_level => 3, title_key => "tools_log_0001", title_variables => { function => "prep_databases" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	# Loop through the databases...
	$an->Log->entry({log_level => 3, message_key => "scancore_log_0016", message_variables => { agent => $THIS_FILE }, file => $THIS_FILE, line => __LINE__});
	foreach my $id (sort {$a cmp $b} keys %{$an->data->{scancore}{db}})
	{
		my $query = "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE tablename='hpacucli_controllers' AND schemaname='public';";
		#                     The actual query -----------------.                                                .------- Row 0
		#                        Query this DB --.              |                                                |    .-- Columns 0
		my $count = $an->DB->do_db_query({id => $id, query => $query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$an->Log->entry({log_level => 3, message_key => "an_variables_0001", message_variables => {
			name1 => "count", value1 => $count
		}, file => $THIS_FILE, line => __LINE__});
		
		# Did we find the table?
		if ($count < 1)
		{
			# Nope. Need to load the database schema.
			$an->Log->entry({log_level => 2, message_key => "scancore_log_0017", file => $THIS_FILE, line => __LINE__});
			$an->DB->load_schema({id => $id, file => $an->data->{path}{sql}});
			
			# Send an alert telling the user that we've initialized this database.
			$an->Alert->register_alert({
				alert_level		=>	"notice", 
				alert_agent_name	=>	$THIS_FILE,
				alert_title_key		=>	"an_alert_title_0003",
				alert_message_key	=>	"notice_message_0002",
				alert_message_variables	=>	{
					name			=>	$an->data->{scancore}{db}{$id}{name},
					host			=>	$an->data->{scancore}{db}{$id}{host},
					agent			=>	$THIS_FILE,
				},
			});
		}
		else
		{
			# Table exists, schema load is not needed.
			$an->Log->entry({log_level => 3, message_key => "scancore_log_0018", file => $THIS_FILE, line => __LINE__});
		}
	}
	
	return(0);
}

# Print the usage information.
sub print_usage
{
	my ($an) = @_;
	$an->Log->entry({log_level => 2, title_key => "tools_log_0001", title_variables => { function => "print_usage" }, message_key => "tools_log_0002", file => $THIS_FILE, line => __LINE__});
	
	print $an->String->get({key => "scan_hpacucli_message_0002"})."\n";

	return(0);
}
