###############################################################################
#                                                                             #
# Alteeve's Niche!                                      Striker Configuration #
#                                                                             #
# This is the global configuration for the Striker dashboard and ScanCore     #
# alert system. Once configured on a dashboard, you can copy it as-is to your #
# Anvil! nodes.                                                               #
#                                                                             #
###############################################################################

### Common - These values apply to all utilities.

# This configures how email is sent from this machine. Please be sure to set
# the values below to the values given to you by your mail administrator (if
# that's not you).
#
# This is the mail server to connect to when sending email.
smtp::server			=	mail.example.com

# This is the TCP port used to connect to the mail server.
smtp::port			=	587

# This is the email address/IMAP user to send to the mail server. It is also
# the address used in the "From: " field for emails sent from this machine.
# NOTE: If you IMAP user name is not an email address, this may not work (it
# has not been tested). If you have trouble, please let us know:
# - https://alteeve.ca/w/Support
smtp::username			=	alert@example.com

# This is the password used for the email account above.
smtp::password			=	secret

# This is the security level to use when connecting to the peer, if needed.
smtp::security			=	STARTTLS

# This tells us to use an encrypted connection to the mail server. Set to '0'
# to send email plain-text (not recommended!).
smtp::encrypt_pass		=	1

# This is the domain given to the mail server when establishing the connection.
smtp::helo_domain		=	example.com

# This sets the "sending domain" when sending email. It should match
# smtp::server in most cases.
mail_data::sending_domain	=	example.com


##############################################################################
# ScanCore configuration variables                                           #
##############################################################################

# Database connection variables.
# 
# Hostname or IP of the Striker dashboard with the database.
#scancore::db::X::host
# 
# TCP port used to connect to the postgres server on the host.
#scancore::db::X::port
# 
# ScanCore database name
#scancore::db::X::name
# 
# ScanCore database user
#scancore::db::X::user
#
# ScanCore database password
#scancore::db::X::password
#
# Force the creation of the database, if needed.
#scancore::db::X::initialize
# 
scancore::db::1::host			=	an-striker01.alteeve.ca
scancore::db::1::port			=	5432
scancore::db::1::name			=	scancore
scancore::db::1::user			=	striker
scancore::db::1::password		=	secret
scancore::db::1::initialize		=	1

scancore::db::2::host			=	an-striker02.alteeve.ca
scancore::db::2::port			=	5432
scancore::db::2::name			=	scancore
scancore::db::2::user			=	striker
scancore::db::2::password		=	secret
scancore::db::2::initialize		=	1

# This controls who gets alerts. The available alert options are:
# 
# - debug;    Useful for trying to solve problems and should only be logged.
#             This will generate an alert on just about every state change.
# - info;     This level will generate an alert on events that are almost
#             always harmless.
# - notice;   This is the lowest alert level that most people will actually
#             want to use. It includes events like migrations, servers booting,
#             BBU/FBU self tests, etc.
# - warning;  Most technical staff will want to receive these alerts. Any state
#             change that could indicate an interruption will use this alert
#             level.
#             NOTE: This is the default level
# - critical; This alert level will be of interest to non-technical users, like
#             managers. Alerts at this level almost always indicate a serious
#             event has occured, like a node being lost/fenced, thermal shut
#             down occuring and so forth.
#
# A user who is listening to a given alert level will also receive all higher
# level warnings.
# 
# Alert recipients can either be 'email' or 'file'. The 'email' type are meant
# for humans to receive and are dispatched via a local postfix relay. The
# 'file' type records alerts to the specified file which sits on the local
# disk until it is collected by a person or program.
# 
# E-mail recipients are entered in the following format:
#alerts::recipient::1::email		=	name="Madison Kelly",email="mkelly@alteeve.ca",language="en_CA",level="notice"
#
# File recipients are entered in the following format:
#alerts::recipient::2::file		=	file="/var/log/alerts.en_CA.log",languagge="en_CA",level="info"
#
# What is important is that the integer after 'alerts::recipient::X' is unique.
# 
# NOTE: If a language is selected but not supported, the alert will fall back
#       to 'en_CA'. Please be sure all the scan agents you plan to use, along
#       with ScanCore itself, have the appropriate language strings before you
#       use them!
# 
alerts::recipient::1::email		=	name="Madison Kelly",email="debug@alteeve.ca",language="en_CA",level="notice"
alerts::recipient::2::file		=	file="/var/log/alerts.en_CA.log",languagge="en_CA",level="info"


###############################################################################
# Striker USB management                                                      #
###############################################################################

### Overview
# 
# This control how USB mass storage devices will be managed when plugged into
# given physical USB ports. The second field in each section is the USB address
# of the USB port to be managed.
# 
# When a drive is plugged into a managed USB port, it's filesystem(s) will be
# mounted locally. Then striker will log into a target machine over SSH and use
# sshfs to mount the inserted partition(s) on that target machine.
# 
###############################################################################
# Remote Server Requirements:
# 
# Target servers requires the following to be done (for RHEL/CentOS 6, may
# differ for other distros).
# 
# Available in the AN!Repo: https://alteeve.ca/an-repo/el6/
# - yum install sshfs
#
# Or otherwise give the remote user permissions to create sub-directories
# - chmod 777 /media
# 
# Give the user access to fuse
# - usermod -a -G fuse <remote_user>
###############################################################################
# 
# To determin the port address, open a terminal and run:
#   tail -f /var/log/messages
# 
# When the USB drive is plugged into a port, you will see a message like:
# 
# ====
# Mar  2 21:23:50 an-striker01 kernel: usb 1-3: new high speed USB device number 7 using ehci_hcd
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: New USB device found, idVendor=174c, idProduct=55aa
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: New USB device strings: Mfr=2, Product=3, SerialNumber=1
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: Product: AS2105
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: Manufacturer: ASMedia
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: SerialNumber: 0123456789ABCDEF
# Mar  2 21:23:51 an-striker01 kernel: usb 1-3: configuration #1 chosen from 1 choice
# ====
# 
# The USB address in the above example is "1-3". Knowing this, the variable
# names used below will start with 'usb::1-3::...'. 
# 
# If a mass storage device is plugged into any USB port not specified here,
# striker-usb will simply ignore it.
# 
### NOTE: In some cases, the USB address can be in the format 'X-Y.Z'. This is
###       OK and it is supported.

### Variables
#
# When it's time to mount the local USB drive's mount point on a remote
# machine, we need to pass credentials to the remote machine in order for it
# to connect to this machine.
#
# The host name entered below must be resolvable on the target server. If in
# doubt, use this machine's IP address.
# 
# NOTE: If you use a host name, make sure the remote machine can resolve it to
#       an IP address!
# 
local::host			=	10.255.4.3
local::user			=	root
local::password			=	secret

# It is possible to decrypt LUKS-encrypted partition, provided the LUKS key is
# provided. At this time, only one global LUKS key is supported. Enter it in
# the following variable.
luks::passphrase		=	supersecret

# If the partition is not 'ext4' or if it's not encrypted, setting this to '1'
# will cause the drive to be reformatted and encrypted without prompt. This
# should only be enabled in very specific circumstances. If used, be sure to
# warn users that their drives will be reformatted if they plug them into a
# managed port and they are not encrupted!
luks::force_initialize		=	1

# This tells us what file system to create on the decrypted device mapper
# device after we created the LUKS encrypted partition.
luks::use_filesystem		=	ext4

# Set this below if you want to define a specific label when formatting a newly
# encrypted device with the filesystem set above. If your selected filesystem
# doesn't support labels, leave this blank.
luks::fs_label			=	nc0
luks::fs_options		=	-L #!variable!fs_label!# 

# If the 'force_initialize' option is enabled, you can use this option to
# selectively block the forced reformatting based on the label of the drive.
# This can be a static name or a basic regular expression. If the value ends
# in '*', then a label will be considered a match if the start of the string
# matches the value to the left of the '*' here. The string *is* case 
# sensitive.
luks::protected_label		=	c*


# Local directory to mount the inserted device on. If the specified directory
# does exit, it will be created. If multiple partitions exist on the inserted
# USB drive, the first partition will mount with the given name and each
# subsequent partition will have '-X' added to the mount directory, where X is
# an integer starting at '1'.
#
#usb::X-Y::local_mount
#
# This is the host name or IP address that the remote machine.
# 
#usb::X-Y::sshfs::host
# 
# This is the user name and password used when ssh'ing into the remote machine.
# 
#usb::X-Y::sshfs::user
#usb::X-Y::sshfs::password
#
# This is the directory to mount point to use on the remote machine
#
#usb::X-Y::sshfs::remote_mount	=	/media/an-striker01-1-1
# 

### Examples
#
# Note: In this example, the server's host name is 'an-striker01'.
#
# Front panel, furthest left.
usb::1-3::local_mount		=	/mnt/1-3
usb::1-3::sshfs::remote_mount	=	/media/an-striker01-1-3
usb::1-3::sshfs::host		=	vm01-foo.alteeve.ca
usb::1-3::sshfs::user		=	digimer
usb::1-3::sshfs::password	=	secret

# Front panel, second from left, non-standard port.
usb::1-1::local_mount		=	/mnt/1-1
usb::1-1::sshfs::remote_mount	=	/media/an-striker01-1-1
usb::1-1::sshfs::host		=	vm02-bar.alteeve.ca:22000
usb::1-1::sshfs::user		=	digimer
usb::1-1::sshfs::password	=	secret


###############################################################################
# Anvil! definitions                                                          #
###############################################################################

# This defines the cluster. If you want to defined multiple clusters for
# Striker, copy an entry in this section and increment the variable integer.
# The order and value do not matter. It's simply a differentiator. If only one
# entry exists, the Dashboard's Anvil! selection screen will not show and the
# sole entry will be auto-selected.

# Variables are:
# name:        Must match the name set in the Anvil!'s "cluster.conf" file. 
# nodes:       A comma-separated list of nodes. On the Striker server, this
#              must be resolvable to the target machine (ie: via /etc/hosts +
#              ~/.ssh/config)
# company:     A free-form field used to show the owner of the Anvil!. 
#              Particularly useful for resellers and companies with divisions.
# description: Also a free-form field used to describe the purpose of the
#              particular Anvil!.
# url:         If defined, a link to the given URL will be shown beside the
#              Anvil!'s name in the Dashboard's Anvil! selection screen. Useful
#              for linking to internal documentation or similar.
# ricci_pw:    This is the password used by the 'ricci' user on the Anvil!'s
#              nodes. It must be set accurately in order to add or remove
#              servers. If a password is needed to log into one of the nodes,
#              this password will be used. If this doesn't work, you will need
#              to manually add the dashboard's public key to each node's root
#              user's 'authorized_keys' file.
